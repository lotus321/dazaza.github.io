[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1006274, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6709\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u5f00\u53d1\u6216\u8c03\u8bd5\u53ea\u80fd\u5728\u8fdc\u7a0b\u529f\u80fd\u5f3a\u5927\u7684\u4e3b\u673a\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\u7684\u7a0b\u5e8f\uff0c\u4f8b\u5982\u591aGPU\u6df1\u5ea6\u5b66\u4e60\u57f9\u8bad\u7a0b\u5e8f\u3002\u9700\u8981\u5728\u4e3b\u673a\u670d\u52a1\u5668\u4e0a\u8bbe\u7f6e\u5bb9\u5668\u5316\u5f00\u53d1\u73af\u5883\uff0c\u5e76\u80fd\u591f\u901a\u8fc7\u672c\u5730IDE\u4e0e\u8fdc\u7a0b\u5bb9\u5668\u5316\u5f00\u53d1\u73af\u5883\u901a\u4fe1\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0cVS\u4ee3\u7801\u53ef\u4ee5\u901a\u8fc7\u5176\u6269\u5c55\u505a\u5230\u8fd9\u4e00\u70b9\u3002\n\u5728\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u6211\u60f3\u8c08\u8c08\u5982\u4f55\u5728\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u8bbe\u7f6eVS Code Docker\u5f00\u53d1\u73af\u5883\uff0c\u5982\u4f55\u4ece\u672c\u5730VS Code GUI\u5728\u8fdc\u7a0bDocker\u5f00\u53d1\u73af\u5883\u4e2d\u5f00\u53d1\u548c\u8c03\u8bd5\u7a0b\u5e8f\u3002\n\u6309\u7167\u8bf4\u660e\u8bbe\u7f6e\u5230\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\u7684\u57fa\u4e8eSSH\u5bc6\u94a5\u7684\u8eab\u4efd\u9a8c\u8bc1\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u6bcf\u6b21\u767b\u5f55\u5230\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\u65f6\u90fd\u9700\u8981\u5bc6\u7801\u3002\n\u5177\u4f53\u5730\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u6ca1\u6709\u751f\u6210\u516c\u94a5(\u901a\u5e38\u662f~/.ssh/id_rsa.pub)\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u672c\u5730\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u751f\u6210\u516c\u94a5\u3002\n\u4e00\u65e6\u6211\u4eec\u751f\u6210\u4e86\u516c\u94a5\uff0c\u6211\u4eec\u5c31\u5fc5\u987b\u901a\u8fc7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5c06\u516c\u94a5\u590d\u5236\u5230\u8fdc\u7a0b\u4e3b\u673a\u3002\u6211\u4eec\u9700\u8981\u5411\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\u8f93\u5165\u4e00\u6b21\u5bc6\u7801\u3002\n\u4e00\u65e6\u8bbe\u7f6e\u4e86\u57fa\u4e8eSSH\u5bc6\u94a5\u7684\u8eab\u4efd\u9a8c\u8bc1\uff0c\u6211\u4eec\u5728\u767b\u5f55\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\u65f6\u5c31\u4e0d\u518d\u9700\u8981\u8f93\u5165\u5bc6\u7801\u3002\u901a\u8fc7SSH\u8fde\u63a5\u5230\u8fdc\u7a0b\u4e3b\u673a\u8fdb\u884c\u9a8c\u8bc1\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cVS\u4ee3\u7801\u8fdc\u7a0b\u5bb9\u5668\u4f7f\u7528\u672c\u5730Docker\u4e3b\u673a\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u5728\u672c\u5730\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u5bb9\u5668\u3002\u8981\u4f7f\u7528\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\u7684\u5bb9\u5668\uff0c\u6211\u4eec\u5fc5\u987b\u5c06&#34\uff1bdocker.host&#34\uff1b\uff1a&#34\uff1byour-user-name-on-host@hostname&#34\uff1b\u6dfb\u52a0\u5230vs Code settings.json\u3002\u5b83\u901a\u5e38\u4f4d\u4e8e~/.config/Code/User/\u4e2d\u3002\n\u6211\u4eec\u5fc5\u987b\u5728\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\u4f5c\u4e3aVS\u4ee3\u7801\u7684\u5de5\u4f5c\u533a\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u73b0\u6709\u6587\u4ef6\u4ece\u672c\u5730\u4e3b\u673a\u4f20\u8f93\u5230\u8fdc\u7a0b\u4e3b\u673a\uff0c\u4e5f\u53ef\u4ee5\u5c06\u65b0\u7684\u6216\u4fee\u6539\u8fc7\u7684\u6587\u4ef6\u4ece\u8fdc\u7a0b\u4e3b\u673a\u4f20\u8f93\u5230\u672c\u5730\u4e3b\u673a\u3002\n\u5728\u672c\u5730\u8ba1\u7b97\u673a\u4e0a\uff0c\u6211\u4eec\u4f7f\u7528SCP\u5c06\u6587\u4ef6\u4f20\u8f93\u5230\u8fdc\u7a0b\u4e3b\u673a\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528rsync\u6216\u4efb\u4f55\u6211\u4eec\u89c9\u5f97\u8212\u670d\u7684\u4f20\u8f93\u5de5\u5177\u3002\n\u4e3aVS\u4ee3\u7801\u5de5\u4f5c\u533a\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\u3002\u5728\u5b50\u76ee\u5f55.devtainer.json\u4e2d\u521b\u5efadevtainer.json\u3002\u4f7f\u7528\u4e0e\u4e0b\u9762\u7c7b\u4f3c\u7684JSON\u3002\n//\u6709\u5173\u683c\u5f0f\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605https://aka.ms/vscode-remote/devcontainer.json\u6216\u6b64\u6587\u4ef6\u7684\u81ea\u8ff0\u6587\u4ef6\uff0c\u7f51\u5740\u4e3a\uff1a//https://github.com/microsoft/vscode-dev-containers/tree/v0.117.1/containers/docker-existing-dockerfile{&#34\uff1bName&#34\uff1b\uff1a&#34\uff1bvs Code Remote Demo&#34\uff1b\uff0c//\u5c06\u8fd0\u884c\u4e0a\u4e0b\u6587\u8bbe\u7f6e\u4e3a\u4e0a\u4e00\u7ea7\uff0c\u800c\u4e0d\u662f.devtainer\u6587\u4ef6\u5939\u3002&#34\uff1b\u4e0a\u4e0b\u6587&#34\uff1b\uff1a&#34\uff1b..&#34\uff1b\uff0c//\u5982\u679c\u60a8\u4e0d\u4f7f\u7528\u6807\u51c6\u6587\u4ef6\u540d\uff0c\u8bf7\u66f4\u65b0&#39\uff1bdockerFile&#39\uff1b\u5c5e\u6027\u3002&#34\uff1bdockerFile&#34\uff1b\uff1a&#34\uff1b../docker/nvidia.Dockerfile&#34\uff1b\uff0c//\u5728\u5bb9\u5668\u521b\u5efa\u65f6\u8bbe\u7f6e*default*\u5bb9\u5668\u7279\u5b9a\u7684settings.json\u503c\u3002&#34\uff1b\u8bbe\u7f6e&#34\uff1b\uff1a{&#34\uff1bTerminal al.Integrated.shell.linux&#34\uff1b\uff1anull}\uff0c//\u6dfb\u52a0\u5bb9\u5668\u521b\u5efa\u65f6\u9700\u8981\u5b89\u88c5\u7684\u6269\u5c55ID\u3002&#34\uff1bExtensions&#34\uff1b\uff1a[]\uff0c//\u4f7f\u7528&#39\uff1bForwardPorts&#39\uff1b\u4f7f\u5bb9\u5668\u5185\u7684\u7aef\u53e3\u5217\u8868\u5728\u672c\u5730\u53ef\u7528\u3002//&#34\uff1bforwardPorts&#34\uff1b\uff1a[]\uff0c//\u521b\u5efa\u5bb9\u5668\u540e\uff0c\u53d6\u6d88\u5bf9\u8981\u8fd0\u884c\u547d\u4ee4\u7684\u4e0b\u4e00\u884c\u7684\u6ce8\u91ca-\u4f8b\u5982\u5b89\u88c5git\u3002//&#34\uff1bpostCreateCommand&#34\uff1b\uff1a&#34\uff1bapt-get update&amp\uff1b&amp\uff1bapt-get install-y git&#34\uff1b\uff0c//\u4f7f\u7528\u57fa\u4e8eptrace\u7684\u8c03\u8bd5\u5668(\u5982C++\u3001Go\u548cRust)\u65f6\u53d6\u6d88\u6ce8\u91ca//&#34\uff1brunArgs&#34\uff1b\uff1a[&#34\uff1b--cap-add=SYS_ptrace&#34\uff1b\uff0c&#34\uff1b-security-opt&#34\uff1b\uff0c&#34\uff1bseccomp=unconfined&#34\uff1b]\uff0c&#34\uff1brungs&#34\uff1b\uff1a[&#34\uff1b-\u3002]\uff0c//\u53d6\u6d88\u6ce8\u91ca\u53ef\u4ee5\u4ece\u5bb9\u5668\u5185\u90e8\u4f7f\u7528Docker CLI\u3002\u89c1https://aka.ms/vscode-remote/samples/docker-in-docker.//&#34\uff1b\u88c5\u8f7d&#34\uff1b\uff1a[&#34\uff1bsource=/var/run/docker.sock\uff0ctarget=/var/run/docker.sock\uff0ctype=bind&#34\uff1b]\uff0c//\u53d6\u6d88\u6ce8\u91ca\u4ee5\u975eroot\u7528\u6237\u8eab\u4efd\u8fde\u63a5\u3002\u89c1https://aka.ms/vscode-remote/containers/non-root.//&#34\uff1bremoteUser&#34\uff1b\uff1a&#34\uff1bvscode&#34\uff1b//\u4f7f\u7528\u5377//&#34\uff1bimage&#34\uff1b\uff1a&#34\uff1bubuntu-remote-test\uff1a0.0.1&#34\uff1b\uff0c//\u6216&#34\uff1bdockerFile&#34\uff1b//&#34\uff1bworkspaceFolder&#34\uff1b\uff1a\uff1a&#34\uff1b/workspace&#34\uff1b\uff0c//&#34\uff1bworkspace mount&#34\uff1b\uff1a&#34\uff1bsource=remote-workspace\uff0ctarget=/workspace\uff0ctype=volume&#34\uff1b//Using/home/leimao/workspace/vs-remote-workspace/\u662f\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u7684\u76ee\u5f55/&#34\uff1bworkspaceFolder&#34\uff1b\u662fDocker\u5bb9\u5668\u4e2d\u4f5c\u4e3aworkspace\u7684\u6587\u4ef6\u5939//target=/workspace\u662f\u4e3b\u673a\u670d\u52a1\u5668\u4e0a\u7684\u5de5\u4f5c\u533a\u5c06\u8981\u7ed1\u5b9a\u5230\u7684Docker\u5bb9\u5668\u4e2d\u7684\u6587\u4ef6\u5939&#\u3002\uff1a&#34\uff1bsource=/home/leimao/Workspace/vs-remote-workspace/\uff0c\u76ee\u6807=/\u5de5\u4f5c\u533a\uff0c\u7c7b\u578b=\u7ed1\u5b9a\uff0c\u4e00\u81f4\u6027=\u7f13\u5b58&#34\uff1b\uff0c}\u3002\n\u8bf7\u6ce8\u610f\uff0c&#34\uff1bdockerFile&#34\uff1b\u5fc5\u987b\u6b63\u786e\u6307\u5411\u6211\u4eec\u8981\u4f7f\u7528\u7684\u672c\u5730Dockerfile\u3002\u6211\u4eec\u8fd8\u4e3a&#34\uff1brunArgs&#34\uff1b\u63d0\u4f9b\u4e86\u989d\u5916\u7684Docker\u8fd0\u884c\u53c2\u6570\u3002\n\u5355\u51fbRemote-Containers\uff1a\u5728Container\u4e2d\u6253\u5f00\u6587\u4ef6\u5939\u3002\u6253\u5f00\u5305\u542b\u6211\u4eec\u521a\u521a\u914d\u7f6e\u7684.devtainer/devtainer.json\u7684\u672c\u5730\u5de5\u4f5c\u533a\u3002\n\u7b2c\u4e00\u6b21\u8fd0\u884c\u53ef\u80fd\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\uff0c\u56e0\u4e3a\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\u5fc5\u987b\u6784\u5efaDocker\u6620\u50cf\u5e76\u542f\u52a8Docker\u5bb9\u5668\u3002\u4e00\u65e6\u6210\u529f\u542f\u52a8\uff0c\u6211\u4eec\u5c06\u5728VS\u4ee3\u7801\u4e2d\u770b\u5230\u4ee5\u4e0b\u5e03\u5c40\u3002\u6211\u4eec\u521a\u521a\u4f20\u8f93\u5230\u8fdc\u7a0b\u4e3b\u673a\u5de5\u4f5c\u533a\u7684hello.sh\u6587\u4ef6\u4e5f\u663e\u793a\u5728VS Code\u5de5\u4f5c\u533a\u4e2d\u3002\n\u9a8c\u8bc1\u5bb9\u5668\u662f\u5426\u6309\u9884\u671f\u6210\u529f\u8fd0\u884c\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0cNVIDIA\u575e\u7ad9\u5bb9\u5668\u5b9e\u4f8b\u5df2\u7ecf\u901a\u8fc7\u4f7f\u7528NVIDIA-SMI\u6210\u529f\u8fd0\u884c\uff0c\u5e76\u4e14GPU\u662fGeForce GT 640\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u65e7\u7684GPU\uff0c\u5b83\u4e0e\u6211\u5b89\u88c5\u5728\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\u4e0a\u7684GPU\u76f8\u5339\u914d\u3002\n\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728VS\u4ee3\u7801\u7ec8\u7aef\u4e2d\u8fd0\u884c\u7a0b\u5e8f\u6216\u5728VS\u754c\u9762\u4e2d\u8c03\u8bd5\u7a0b\u5e8f\u3002\n\u5728\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\u4e0a\u5b89\u88c5VS\u4ee3\u7801\u6269\u5c55\u4e5f\u53ef\u80fd\u6709\u52a9\u4e8e\u5f00\u53d1\u3002\n\u5b89\u88c5\u540e\uff0c\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\u4e0a\u7684VS\u4ee3\u7801\u6269\u5c55\u5c06\u663e\u793a\u5728\u4e00\u4e2a\u72ec\u7acb\u7684\u9762\u677f\u4e2d\u3002\n\u5f00\u53d1\u5b8c\u6210\u540e\uff0c\u4e0d\u8981\u5fd8\u8bb0\u5c06\u6587\u4ef6\u4ece\u8fdc\u7a0b\u4e3b\u673a\u4f20\u8f93\u56de\u672c\u5730\u8ba1\u7b97\u673a\u3002\nVS\u4ee3\u7801\u8fd8\u5177\u6709\u8fdc\u7a0bSSH\u6269\u5c55\u3002\u7528\u6237\u5c06\u80fd\u591f\u4f7f\u7528SSH\u8fdb\u5165\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\uff0c\u5e76\u5728\u672c\u5730VS\u4ee3\u7801GUI\u4e0a\u4fee\u6539\u8fdc\u7a0b\u4e3b\u673a\u670d\u52a1\u5668\u4e0a\u7684\u6587\u4ef6\u3002\u4f46\u662f\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u53ef\u80fd\u65e0\u6cd5\u5728\u4e3b\u673a\u670d\u52a1\u5668\u672c\u673a\u7cfb\u7edf\u4e0a\u8fd0\u884c\uff0c\u5e76\u4e14VS\u4ee3\u7801\u53ca\u5176\u6709\u7528\u7684\u8c03\u8bd5\u6269\u5c55\u65e0\u6cd5\u5728\u4e3b\u673a\u670d\u52a1\u5668\u4e0a\u7684Docker\u5bb9\u5668\u4e2d\u76f4\u63a5\u4f7f\u7528\u3002", "note_en": "Sometimes, we would like to develop or debug programs which could only be run on a remote powerful host server, such as a multi-GPU deep learning training program. Setting up a containerized development environment on the host server and being able to communicate to the remote containerized development environment via local IDEs are necessary. It turns out that VS Code could do this with its extensions.\n  In this blog post, I would like to talk about how to set up the VS Code Docker development environment on a remote host, develop and debug programs in the remote Docker development environment from local VS Code GUI.\n   Follow the  instruction to set up the SSH key based authentication to the remote host server, so that we don\u2019t need password every time to login to the remote host server.\n  Concretely, if we don\u2019t have the public key, which is usually  ~/.ssh/id_rsa.pub, generated, we could generate the public key by running the following command on the local computer.\n  Once we have generated the public key, we would have to copy the public key to the remote host by running the following command. We would need to enter the password once to the remote host server.\n  Once the SSH key based authentication was set up, we no longer have have enter the password when we login the remote host server. Verify this by SSH into the remote host.\n   By default, the VS Code Remote-Container uses local Docker host. This means that we are actually running the containers on the local computer. To use the container running on the remote host server, we have to add  &#34;docker.host&#34;:&#34;your-user-name-on-host@hostname&#34; to VS Code  settings.json. It is usually located in  ~/.config/Code/User/.\n    We would have to create a directory on the remote host as the workspace for VS Code. We could transfer existing files from local to remote host or transfer new or modified files from remote host to local.\n    On the local computer, we transfer the file to remote host using  scp. We could also use  rsync or whatever transfer tools we feel comfortable with.\n     Create a directory for VS Code Workspace. Create a  devcontainer.json in the subdirectory  .devcontainer. Use the JSON similar to the following one.\n // For format details, see https://aka.ms/vscode-remote/devcontainer.json or this file&#39;s README at:// https://github.com/microsoft/vscode-dev-containers/tree/v0.117.1/containers/docker-existing-dockerfile{\t&#34;name&#34;: &#34;VS Code Remote Demo&#34;,\t// Sets the run context to one level up instead of the .devcontainer folder.\t&#34;context&#34;: &#34;..&#34;,\t// Update the &#39;dockerFile&#39; property if you aren&#39;t using the standard &#39;Dockerfile&#39; filename.\t&#34;dockerFile&#34;: &#34;../docker/nvidia.Dockerfile&#34;,\t// Set *default* container specific settings.json values on container create.\t&#34;settings&#34;: { \t\t&#34;terminal.integrated.shell.linux&#34;: null\t},\t// Add the IDs of extensions you want installed when the container is created.\t&#34;extensions&#34;: [],\t// Use &#39;forwardPorts&#39; to make a list of ports inside the container available locally.\t// &#34;forwardPorts&#34;: [],\t// Uncomment the next line to run commands after the container is created - for example installing git.\t// &#34;postCreateCommand&#34;: &#34;apt-get update &amp;&amp; apt-get install -y git&#34;,\t// Uncomment when using a ptrace-based debugger like C++, Go, and Rust\t// &#34;runArgs&#34;: [ &#34;--cap-add=SYS_PTRACE&#34;, &#34;--security-opt&#34;, &#34;seccomp=unconfined&#34; ], &#34;runArgs&#34;: [ &#34;--gpus&#34;, &#34;device=0&#34; ],\t// Uncomment to use the Docker CLI from inside the container. See https://aka.ms/vscode-remote/samples/docker-in-docker.\t// &#34;mounts&#34;: [ &#34;source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind&#34; ],\t// Uncomment to connect as a non-root user. See https://aka.ms/vscode-remote/containers/non-root.\t// &#34;remoteUser&#34;: &#34;vscode&#34; // Using volume\t// &#34;image&#34;: &#34;ubuntu-remote-test:0.0.1&#34;, // Or &#34;dockerFile&#34;\t// &#34;workspaceFolder&#34;: &#34;/workspace&#34;,\t// &#34;workspaceMount&#34;: &#34;source=remote-workspace,target=/workspace,type=volume&#34;\t// Using bind\t// /home/leimao/Workspace/vs-remote-workspace/ is a directory on the remote host computer // &#34;workspaceFolder&#34; is the folder in the Docker container as workspace // target=/workspace is the folder in the Docker container that the workspace on the host server are going to bind to\t&#34;workspaceFolder&#34;: &#34;/workspace&#34;,\t&#34;workspaceMount&#34;: &#34;source=/home/leimao/Workspace/vs-remote-workspace/,target=/workspace,type=bind,consistency=cached&#34;,}\n Note that  &#34;dockerFile&#34; has to correctly point to the local Dockerfile we are going to use. We also provide additional Docker running arguments to  &#34;runArgs&#34;.\n  Click  Remote-Containers: Open Folder in Container. Open the local workspace that has the  .devcontainer/devcontainer.json we have just configured.\n  The first time we run this might take a while since the remote host server has to build the Docker image and start Docker container. Once it has been successfully started, we would see the following layout in VS Code. The  hello.sh file we have just transferred to the remote host workspace is also shown in VS Code workspace.\n  Verify the container is running successfully as expected. We could see that the NVIDIA docker container instance has successfully run by using  nvidia-smi and the GPU is  GeForce GT 640, a very old one, which matches to the one I installed on my remote host server.\n  We can then run programs in the VS Code terminal or debug programs in the VS interface.\n  Installing VS Code extensions on the remote host server might also be helpful for development.\n  After installation, the VS Code extensions on the remote host server would be shown in an independent panel.\n   Once the development has finished, don\u2019t forget to transfer the files back from the remote host to the local computer.\n  VS Code also has a  Remote - SSH extension. The user would be able to use to SSH into a remote host server and modify the files on the remote host server on local VS Code GUI. However, the programs might not be able to run on the host server native system, and VS Code and its useful debugging extensions could not be directly used in the Docker container on the host server.", "posttime": "2020-06-12 19:05:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "docker,\u4ee3\u7801,\u5f00\u53d1,development,\u8fdc\u7a0b", "title": "\u5728\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u4f7f\u7528Docker\u5bb9\u5668\u8fdb\u884cVS\u4ee3\u7801\u5f00\u53d1", "title_en": "VS Code Development Using Docker Containers on Remote Host", "transed": 1, "url": "https://leimao.github.io/blog/VS-Code-Development-Remote-Host-Docker/", "via": "", "real_tags": ["docker", "\u4ee3\u7801", "\u5f00\u53d1", "\u8fdc\u7a0b"]}, {"category": "", "categoryclass": "", "imagename": "8159d83cd2d13aa70018d6f457e18dee.png", "infoid": 1006273, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8df3\u8f6c\u5230\u5bfc\u822a\u8df3\u8dc3\u641c\u7d22\u80fd\u6e90\u5974\u96b6\u662f\u6307\u7528\u4e8e\u5efa\u9020\u548c\u9a71\u52a8\u975e\u4eba\u7c7b\u57fa\u7840\u8bbe\u65bd(\u673a\u5668\u3001\u9053\u8def\u3001\u7535\u7f51\u3001\u71c3\u6599\u3001\u8f7d\u8fd0\u52a8\u7269\u3001\u98ce\u529b\u9a71\u52a8\u6cf5\u7b49)\u7684\u80fd\u91cf(\u505a\u529f\u7684\u80fd\u529b)\u3002\u4ee3\u66ff\u4e00\u4e2a\u4eba\u529b\u5355\u4f4d(\u5b9e\u9645\u5de5\u4f5c)\u3002\u80fd\u6e90\u5974\u96b6\u901a\u8fc7\u6d88\u8017\u975e\u4eba\u7c7b\u57fa\u7840\u8bbe\u65bd\u4e2d\u7684\u80fd\u6e90\u6765\u5b8c\u6210\u4eba\u7684\u5de5\u4f5c\u3002[1]\u3002\n1940\u5e74\uff0c\u7406\u67e5\u5fb7\u00b7\u5df4\u514b\u660e\u65af\u7279\u00b7\u5bcc\u52d2(Richard Buckminster Fuller)\u662f\u7b2c\u4e00\u4e2a\u5728\u201c\u8d22\u5bcc\u201d\u6742\u5fd7(Fortune)\u7684\u5730\u56fe\u4e0a\u4f7f\u7528\u201c\u80fd\u6e90\u5974\u96b6\u201d\u8fd9\u4e00\u672f\u8bed\u7684\u4eba[2]\u3002\u4ed6\u901a\u8fc7\u5c06\u5de5\u4e1a\u6d88\u8017\u7684\u77ff\u7269\u548c\u6c34\u7684\u80fd\u91cf\u9664\u4ee5\u4eba\u7c7b\u63d0\u4f9b\u7684\u80fd\u91cf\u6765\u8ba1\u7b97\u80fd\u6e90\u5974\u96b6\u7684\u4ea7\u91cf\u3002\u5bcc\u52d2\u4f30\u8ba1\uff0c\u5bf9\u4e8e\u521a\u521a\u8d85\u8fc720\u4ebf\u4eba\u53e3(\u786e\u5207\u5730\u8bf4\u662f21.25\u4ebf)\u7684\u4e16\u754c\u4eba\u53e3\u6765\u8bf4\uff0c\u5f53\u65f6\u6709360\u4ebf\u80fd\u6e90\u5974\u96b6\uff0c\u76f8\u5f53\u4e8e\u4eba\u574717\u4eba\u30021940\u5e74\uff0c\u8fd9\u4e9b\u80fd\u6e90\u5974\u96b6\u5728\u4e16\u754c\u5404\u5730\u7684\u5206\u914d\u5e76\u4e0d\u516c\u5e73\uff1a\u7f8e\u56fd\u62e5\u6709200\u4ebf\u80fd\u6e90\u5974\u96b6(\u5360\u4e16\u754c\u603b\u6570\u768454%)[3]\u30021950\u5e74\uff0c\u5bcc\u52d2\u5411\u4e0a\u4fee\u6b63\u4e86\u4ed6\u7684\u8ba1\u7b97\uff0c\u4f30\u8ba1\u5e73\u5747\u6bcf\u4e2a\u4eba\u62e5\u670938\u4e2a\u80fd\u91cf\u5974\u96b6[2]\u3002\n1963\u5e74\uff0c\u963f\u5c14\u5f17\u96f7\u5fb7\u00b7\u52d2\u5185\u00b7\u4e4c\u8d1d\u6d1b\u5fb7(Alfred Ren\u00e9Ubbelohde)\u4e5f\u5728\u4ed6\u7684\u8457\u4f5c\u201c\u4eba\u4e0e\u80fd\u6e90\u201d[4]\u4e2d\u4f7f\u7528\u4e86\u8fd9\u4e2a\u6982\u5ff5\u3002\u5728\u5fb7\u56fd\uff0c\u7269\u7406\u5b66\u5bb6\u6c49\u65af-\u5f7c\u5f97\u00b7\u8fea\u5c14(Hans-Peter D\u00fcrr)\u4f7f\u7528\u4e86\u8fd9\u4e2a\u6982\u5ff5[5]\u3002\u8fd9\u4e2a\u672f\u8bed\u4e5f\u57281975\u5e74\u7684\u4e00\u672c\u4e66[6]\u4e2d\u63d0\u5230\uff0c\u5e76\u5728\u79d1\u5b66\u6587\u732e\u4e2d\u6d41\u884c\u8d77\u6765\u3002\n2001\u5e74\u5728\u745e\u58eb\u4e3e\u529e\u7684\u4e00\u573a\u5c55\u89c8\uff0c\u6839\u636e\u6d1b\u6851EPFL-Gecos\u5b9e\u9a8c\u5ba4\u7684\u5965\u5229\u7ef4\u5c14\u00b7\u4e54\u4f0a\u83b1\u7279(Olivier Joillet)\u7684\u6307\u5bfc\u4e0b\u7684\u56fe\u62c9\u5185\u00b7\u79d1\u6bd4\u57c3-\u5c3c\u79d1\u5229\u5c14(Tourane Corbi\u00e8re-Nicollier)\u6240\u505a\u7684\u5de5\u4f5c\uff0c\u7ed9\u51fa\u4e86\u201c\u80fd\u6e90\u5974\u96b6\u201d\u7684\u6d41\u884c\u5b9a\u4e49\u3002\u7ed9\u51fa\u7684\u5b9a\u4e49\u662f\u02d0&#34\uff1b\u80fd\u91cf\u5974\u96b6\u662f\u4e00\u79cd\u6d4b\u91cf\u5355\u4f4d\uff0c\u5b83\u4f7f\u6211\u4eec\u80fd\u591f\u66f4\u597d\u5730\u7406\u89e3\u548c\u8bc4\u4f30\u6211\u4eec\u751f\u6d3b\u9009\u62e9\u7684\u540e\u679c\u3002\u4e00\u540d\u80fd\u6e90\u5974\u96b6\u4e00\u592924\u5c0f\u65f6\u4e3a\u751f\u4ea7\u80fd\u6e90\u800c\u5de5\u4f5c\u3002\u4ed6\u7684\u5e73\u5747\u8f93\u51fa\u529f\u7387\u4e3a100\u74e6(875\u5343\u74e6\u65f6/\u5e74)\u3002\n\u5728\u6cd5\u56fd\uff0c\u8ba9-\u9a6c\u514b\u00b7\u626c\u79d1\u7ef4\u5947(Jean-Marc Jancovici)\u4f7f\u7528\u4e86\u201c\u80fd\u6e90\u5974\u96b6\u201d\u4e00\u8bcd\uff0c\u5386\u53f2\u5b66\u5bb6\u8ba9-\u5f17\u6717\u7d22\u74e6\u00b7\u7a46\u7279(Jean-Fran\u00e7ois Mouhot)\u5bf9\u6b64\u8fdb\u884c\u4e86\u7814\u7a76\u3002Jean-Marc Jancovici\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u8bba\uff1a[.]\u3002\u5728\u6c11\u4e3b\u56fd\u5bb6\uff1a\u5982\u679c\u6211\u4eec\u628a\u81ea\u5df1\u653e\u5728\u7269\u7406\u5b66\u9886\u57df\uff0c\u4e0d\u4ec5\u8fbe\u7d22\u5148\u751f\u6216\u82f1\u56fd\u5973\u738b\u7684\u751f\u6d3b\u65b9\u5f0f\u53d8\u5f97\u4e0d\u53ef\u6301\u7eed\uff0c\u5305\u62ec\u5de5\u5382\u5de5\u4eba\u3001\u6e05\u6d01\u5de5\u548c\u8d85\u5e02\u6536\u94f6\u5458\u5728\u5185\u7684\u6211\u4eec\u6bcf\u4e00\u4e2a\u4eba\u7684\u751f\u6d3b\u65b9\u5f0f\u90fd\u53d8\u5f97\u4e0d\u53ef\u6301\u7eed\u3002\u201c\u3002\n\u4eba\u5747\u80fd\u6e90\u5974\u96b6\u7684\u6570\u91cf\u53d6\u51b3\u4e8e\u8ba1\u7b97\u65b9\u6cd5\uff1a\u8981\u4e48\u6211\u4eec\u4f7f\u7528\u5974\u96b6\u4e00\u5e74365\u5929\u6bcf\u592924\u5c0f\u65f6\u63d0\u4f9b\u7684\u5e73\u5747\u80fd\u91cf\uff0c\u8981\u4e48\u50cf\u5bcc\u52d2\u90a3\u6837\uff0c\u6211\u4eec\u4f7f\u7528\u5065\u5eb7\u7684\u4e2a\u4eba\u6bcf\u5468\u5de5\u4f5c40\u5c0f\u65f6(\u62163\u5343\u74e6\u65f6)\u63d0\u4f9b\u7684\u673a\u68b0\u80fd\u91cf[2]\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u4f8b\u5982\uff0c\u4e00\u5347\u6c7d\u6cb9\u53ef\u4ee5\u63d0\u4f9b9kWh[2]\u6765\u8fd0\u884c\u4e00\u53f0\u53d1\u52a8\u673a\u3002\n\u80fd\u6e90\u5974\u96b6\u662f\u7528\u6765\u6bd4\u8f83\u4e00\u4e2a\u4eba\u7684\u751f\u4ea7\u529b\u548c\u5728\u73b0\u4ee3\u4ee5\u77f3\u6cb9\u4e3a\u71c3\u6599\u7684\u5de5\u4e1a\u7ecf\u6d4e\u4e2d\u751f\u4ea7\u8fd9\u9879\u5de5\u4f5c\u6240\u9700\u7684\u80fd\u6e90\uff0c\u5c3d\u7ba1\u5b83\u53ef\u4ee5\u5e94\u7528\u4e8e\u4efb\u4f55\u4f7f\u7528\u975e\u4eba\u7c7b\u6765\u6e90\u7684\u80fd\u6e90\u751f\u4ea7\u52b3\u52a8\u529b\u7684\u5730\u65b9\u3002\u5b83\u4e0d\u5305\u62ec\u7834\u574f\u73af\u5883\u6216\u793e\u4f1a\u7ed3\u6784\u7684\u9644\u5e26\u6210\u672c\u3002\u4ece\u5f62\u5f0f\u4e0a\u8bb2\uff0c\u4e00\u4e2a\u80fd\u6e90\u5974\u96b6\u901a\u8fc7\u5de5\u4e1a\u7ecf\u6d4e\u63d0\u4f9b\u7684\u975e\u4eba\u7c7b\u5de5\u5177\u548c\u80fd\u6e90\u751f\u4ea7\u4e00\u4e2a\u5355\u4f4d\u7684\u4eba\u7c7b\u52b3\u52a8\uff0c\u56e0\u6b641ES\u4e58\u4ee5\u8f6c\u6362\u4e3a\u5b8c\u6210\u7684\u529f\u7684\u5e38\u6570=1\u4e2a\u4eba\u7c7b\u52b3\u52a8\u5355\u4f4d\u3002\nJean-Fran\u00e7ois Mouhot\uff0c\u201cesclaves\u00e9nerg\u00e9tique-R\u00e9fleion sur le Changement Climate atique\u201d\uff0cChamp Vallon\u7248\uff0c2011[7]\u3002\n(En)\u5b89\u5fb7\u9c81\u00b7\u5c3c\u57fa\u798f\u9c81\u514b(Andrew Nikiforuk)\uff0c\u300a\u5974\u96b6\u7684\u80fd\u91cf\uff1a\u77f3\u6cb9\u4e0e\u65b0\u5974\u5f79\u300b(The Energy Of Slaves\uff1aOil and the New Serve)\uff0cGreystone Books\uff0c2012\u5e748\u670817\u65e5\uff0c272\u9875\u3002(ISBN978-1-55365-979-2\uff0c\u5728\u7ebf\u9605\u8bfb[\u6863\u6848][8])\u3002\n(En)\u9c8d\u52c3\u00b7\u7ea6\u7ff0\u900a\uff0c\u201c\u77ff\u7269\u4eea\u5f0f\uff1a\u5316\u77f3\u7ecf\u6d4e\u7684\u8003\u53e4\u201d\uff0cJHU\u51fa\u7248\u793e\uff0c2019\u5e743\u670826\u65e5\uff0c256\u9875[9]\u3002\n^a b c d Imre Szeman\uff1b\u591a\u7c73\u5c3c\u514b\u00b7\u535a\u8036(2017-04-22)\u3002JHU\u51fa\u7248\u793e(\u4e3b\u7f16)\u3002\u80fd\u6e90\u4eba\u6587\u79d1\u5b66\uff1a\u9009\u96c6\u3002\u7b2c210\u9875\u3002ISBN\u7535\u8bdd\uff1a978-1-4214-2189-6\u3002\n\u514b\u91cc\u65af\u8482\u5b89\u00b7\u683c\u96f7\u592b(1999-10-07)\u3002\u5728\u5fb7\u963f\u5c14\u7a46\u8328\u6cd5\u5c14\u7684\u80fd\u91cf\u4e4b\u6cc9(Energieslaven In Der Armusfalle)\u3002Die Zeit(\u5fb7\u8bed)\u3002ISSN\uff1a0044-2070\u3002\n\u7f57\u4f2f\u7279\u00b7S\u00b7\u52b3\u65af\uff1b\u7f57\u4f2f\u7279\u00b7\u6b27\u6587\u65af\u00b7\u53f2\u5bc6\u65af(1975-03-01)\u3002\u9ea6\u514b\u7c73\u4f26(\u4e3b\u7f16)\u3002\u80fd\u6e90\uff1a\u8d44\u6e90\u3001\u5974\u96b6\u3001\u6c61\u67d3\u7269\uff1a\u7269\u7406\u79d1\u5b66\u6587\u672c\u3002ISBN978-0-02-404000-8\u3002\n\uff1f\u5386\u53f2\u5b66\u5bb6\u6cd5\u6bd4\u5b89\u00b7\u6d1b\u5f7b(Fabien Locher)\u7684\u6279\u5224\u6027\u8bc4\u8bba\uff0cL\u2018Histoire Face\u00e0la Crise Climate atique\uff0c2011\u5e7411\u6708\uff1b\u5728La Vie des Id\u00e9es\u7f51\u7ad9\u4e0a\u3002", "note_en": "Jump to navigation  Jump to search  An  energy slave is that quantity of energy (ability to do work) which, when used to construct and drive non-human  infrastructure ( machines,  roads,  power grids,  fuel, draft animals,  wind-driven pumps, etc.) replaces a unit of  human labor (actual work). An energy slave does the work of a person, through the  consumption of energy in the non-human infrastructure.  [1]\n   In 1940,  Richard Buckminster Fuller was the first  [2] to use the term &#34;energy slave&#34; in a map in   Fortune  [3]. He calculated the yield of an energy slave by taking the energy from minerals and water consumed by industry and dividing it by the energy provided by a human being. For a world population of just over two billion people (2 125 000 000 exactly), Fuller estimates that there are thirty-six billion energy slaves at the time, representing 17 per capita. In 1940, these energy slaves were not equitably distributed around the world: the  United States owned twenty billion of them (54% of the world total)  [3]. In  1950, Fuller revised his calculations upwards and estimated that, on average, each human holds 38 energy slaves  [2].\n In 1963,  Alfred Ren\u00e9 Ubbelohde also used this concept in his book  Man and Energy  [4]. In  Germany, the  physicist  Hans-Peter D\u00fcrr used this concept  [5]. The term is also mentioned in a 1975 book  [6] and has become popular in the scientific literature.\n An exhibition in  Switzerland in  2001 presents a popularised definition of &#34;energy slaves&#34; based on the work carried out by Tourane Corbi\u00e8re-Nicollier under the supervision of Olivier Joillet of the EPFL-GECOS laboratory in Lausanne. The definition given is \u02d0 &#34;The energy slave is a unit of measurement that allows us to better understand and evaluate the consequences of our life choices. An energy slave works to produce energy 24 hours a day. He produces an average power output of 100 W (875 kWh/year).&#34;\n In  France, the term energy slave is used by  Jean-Marc Jancovici and has been studied by the  historian Jean-Fran\u00e7ois Mouhot. Jean-Marc Jancovici draws the following conclusion: &#34;[...] in a democracy: it is not only the way of life of Mr. Dassault or the Queen of England that has become unsustainable if we put ourselves in the realm of physics, but that of each and every one of us, including factory workers, cleaners and supermarket cashiers.\u201d\n  The number of energy slaves per capita depends on the method of calculation: either we take the average energy provided by a slave 24 hours a day, 365 days a year , or, as Fuller does, we use the mechanical energy provided by a healthy individual working 40 hours a week (or 3 kWh)  [2]. In comparison, a litre of gasoline can provide 9kWh  [2] to run an engine for example.\n  An energy slave is used to compare the productivity of a person and the energy that would be required to produce that work in the modern,  oil fuelled industrial  economy, although it could be applied anywhere that labor is produced with non-human sourced energy. It does not include the ancillary  costs of  damage to the environment or social structures. Formally, one energy slave produces one unit of human labor through the non-human tools and energy supplied by the industrial economy, and therefore 1 ES times a constant that converts to work accomplished = 1 human labor unit.\n  Jean-Fran\u00e7ois Mouhot,  Des esclaves \u00e9nerg\u00e9tiques - R\u00e9flexions sur le changement climatique, Champ Vallon editions, 2011  [7].\n (en) Andrew Nikiforuk, The Energy of Slaves\u00a0: Oil and the New Servitude, Greystone Books, August 17, 2012, 272 p. ( ISBN\u00a0 978-1-55365-979-2, read online [archive]  [8]).\n (en) Bob Johnson, Mineral Rites\u00a0: An Archaeology of the Fossil Economy, JHU Press, march 26, 2019, 256 p.  [9]\n  ^     a     b     c     d   Imre Szeman; Dominic Boyer (2017-04-22). JHU Press (ed.).   Energy Humanities\u00a0: An Anthology. p.\u00a0210.  ISBN\u00a0  978-1-4214-2189-6 .\n   ^   Christiane Grefe (1999-10-07).  &#34;Energiesklaven in der Armutsfalle&#34;.   Die Zeit (in German).  ISSN\u00a0 0044-2070 .\n ^   Robert S. Rouse; Robert OwensSmith (1975-03-01). Macmillan (ed.).   Energy\u00a0: resource, slave, pollutant :A physical science text.  ISBN\u00a0  978-0-02-404000-8 .\n ^  Critical review by historian Fabien Locher,  L\u2019Histoire face \u00e0 la crise climatique, november 2011; on the website  La vie des Id\u00e9es.", "posttime": "2020-06-12 18:31:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u80fd\u6e90,energy,\u5974\u96b6", "title": "\u80fd\u6e90\u5974\u96b6", "title_en": "Energy Slave", "transed": 1, "url": "https://en.wikipedia.org/wiki/Energy_slave", "via": "", "real_tags": ["\u80fd\u6e90", "energy", "\u5974\u96b6"]}, {"category": "", "categoryclass": "", "imagename": "50ce99fc0b2c90862b9e175132f62505.jpeg", "infoid": 1006272, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6700\u8fd1\u51e0\u5929\uff0cTwitch Streamers\u51fa\u73b0\u4e86\u4e0d\u5c11\u4ee4\u4eba\u5934\u75bc\u7684\u95ee\u9898\u3002\u8be5\u516c\u53f8\u5df2\u7ecf(\u901a\u8fc7Evening Standard)\u627f\u8ba4\uff0c\u9488\u5bf9\u6d41\u5a92\u4f53\u7684DMCA\u4e0b\u7ebf\u8bf7\u6c42\u201c\u7a81\u7136\u6d8c\u5165\u201d\uff0c\u539f\u56e0\u662f\u4ed6\u4eec\u6d89\u5acc\u4fb5\u72af\u89c2\u4f17\u57282017\u5e74\u81f32019\u5e74\u671f\u95f4\u62cd\u6444\u7684\u526a\u8f91\u4e2d\u7684\u97f3\u4e50\u7248\u6743\u3002\u7531\u4e8e\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u90fd\u53ef\u80fd\u4ee3\u8868\u7740\u5bf9\u4e00\u4e2a\u8d26\u6237\u7684\u7f62\u5de5\uff0c\u8fd9\u589e\u52a0\u4e86\u6c38\u4e45\u7981\u6b62\u90a3\u4e9b\u53ef\u80fd\u5728\u76f8\u5bf9\u8f83\u5c11\u7684\u8b66\u544a\u4e0b\u88ab\u51fb\u4e2d\u4e09\u6b21\u7684\u6d41\u5a92\u4f53\u7528\u6237\u7684\u5a01\u80c1-\u4ee5\u53ca\u4ed6\u4eec\u751a\u81f3\u6ca1\u6709\u9009\u62e9\u521b\u5efa\u7684\u526a\u8f91\u3002\n\u4e9a\u9a6c\u900a\u65d7\u4e0b\u7684\u8fd9\u9879\u670d\u52a1\u5efa\u8bae\u5e7f\u64ad\u516c\u53f8\u5220\u9664\u4efb\u4f55\u53d7\u5f71\u54cd\u7684\u526a\u8f91\u3002\u7136\u800c\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7f13\u6162\u7684\u8fc7\u7a0b\u3002\u60a8\u4e00\u6b21\u53ea\u80fd\u5220\u9664\u4e00\u5c0f\u90e8\u5206\uff0c\u6d41\u884c\u7684\u6d41\u5a92\u4f53\u53ef\u80fd\u6709\u6570\u5343\u4e2a\u526a\u8f91\u3002Twitch\u8868\u793a\uff0c\u5b83\u6b63\u5728\u52aa\u529b\u201c\u8ba9\u8fd9\u4e00[\u8fc7\u7a0b]\u53d8\u5f97\u66f4\u5bb9\u6613\u201d\uff0c\u4f46\u6ca1\u6709\u8be6\u7ec6\u8bf4\u660e\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u3002\n\u9664\u4e86\u7a81\u7136\u7981\u4ee4\u7684\u5a01\u80c1\u4e4b\u5916\uff0c\u4e00\u8fde\u4e32\u7684\u7248\u6743\u8bf7\u6c42\u4e5f\u5e26\u6765\u4e86\u95ee\u9898\u3002\u5b83\u5c06\u4e00\u4e9b\u6d41\u5a92\u4f53\u7528\u6237\u7684\u751f\u8ba1\u7f6e\u4e8e\u5371\u9669\u4e4b\u4e2d\uff0c\u7279\u522b\u662f\u90a3\u4e9b\u73a9Just Dance\u6216Beat Saber\u7b49\u97f3\u4e50\u6e38\u620f\u7684\u4eba-\u4ed6\u4eec\u9700\u8981\u4e0d\u65ad\u5730\u76d1\u7ba1\u4ed6\u4eec\u7684\u526a\u8f91\u5417\uff1f\u8fd9\u4e5f\u63d0\u51fa\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u5373\u4e3a\u4ec0\u4e48\u7528\u6237\u4e00\u5f00\u59cb\u5c31\u88ab\u5141\u8bb8\u5236\u4f5c\u6709\u95ee\u9898\u7684\u526a\u8f91\uff0c\u5373\u4f7f\u6d41\u5a92\u4f53\u7528\u6237\u88ab\u5141\u8bb8\u5728\u73b0\u573a\u8868\u6f14\u4e2d\u4f7f\u7528\u53d7\u7248\u6743\u4fdd\u62a4\u7684\u6750\u6599-\u5047\u8bbeDMCA\u7684\u58f0\u660e\u9996\u5148\u662f\u5408\u6cd5\u7684\u3002\u53ea\u60f3\u8981\u80cc\u666f\u97f3\u4e50\u7684\u6d41\u5a92\u4f53\u7528\u6237\u5df2\u7ecf\u6279\u51c6\u4e86\u8fd9\u4e9b\u9009\u9879\uff0c\u4f46\u5176\u4ed6\u4eba\u53ef\u80fd\u4e0d\u5f97\u4e0d\u620f\u5267\u6027\u5730\u6539\u53d8\u4ed6\u4eec\u6700\u521d\u8ba4\u4e3a\u662f\u5408\u6cd5\u7684\u884c\u4e3a\u3002\n\ud83d\udce2\u672c\u5468\uff0c\u6211\u4eec\u7a81\u7136\u6536\u5230\u4e86\u5927\u91cf\u8981\u6c42\u4ece2017\u5e74\u523019\u5e74\u64a4\u4e0b\u6709\u80cc\u666f\u97f3\u4e50\u7684\u526a\u8f91\u7684\u8bf7\u6c42\u3002\u5982\u679c\u60a8\u4e0d\u786e\u5b9a\u8fc7\u53bb\u6d41\u4e2d\u97f3\u9891\u7684\u6743\u5229\uff0c\u6211\u4eec\u5efa\u8bae\u60a8\u5220\u9664\u8fd9\u4e9b\u526a\u8f91\u3002\u6211\u4eec\u77e5\u9053\u4f60\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u90fd\u6709\u5f88\u5927\u7684\u6863\u6848\uff0c\u6211\u4eec\u6b63\u5728\u52aa\u529b\u8ba9\u8fd9\u4ef6\u4e8b\u53d8\u5f97\u66f4\u5bb9\u6613\u3002\n-Twitch\u652f\u6301(@TwitchSupport)2020\u5e746\u67088\u65e5", "note_en": "Twitch streamers have had more than a few headaches in recent days. The company has  acknowledged (via   Evening Standard) a \u201csudden influx\u201d of DMCA takedown requests against streamers for allegedly violating music copyright in clips captured by viewers between 2017 and 2019. As each request potentially represents a strike against an account, this raises the threat of permanent bans for streamers who might get three strikes with relatively little warning \u2014 and for clips they didn\u2019t even choose to create.\n The Amazon-owned service is recommending that broadcasters delete any affected clips. However, it\u2019s a very slow process. You can only delete a handful at a time, and popular streamers may have thousands of clips. Twitch said it was working to \u201cmake this [process] easier,\u201d but didn\u2019t elaborate how.\n  The flurry of copyright requests creates problems on top of the threat of sudden bans. It puts the livelihoods of some streamers at risk, particularly those who play music games like   Just Dance or   Beat Saber \u2014 will they have to constantly police their clips? It also raises the question of why users are allowed to create problematic clips in the first place, even when streamers are allowed to use copyrighted material for live shows \u2014 assuming the DMCA claims are legitimate in the first place. Streamers who just want background music have  approved options, but others may have to dramatically alter behavior they thought was legal in the first place.\n   \ud83d\udce2 This week, we&#39;ve had a sudden influx of DMCA takedown requests for clips with background music from 2017-19. If you\u2019re unsure about rights to audio in past streams, we advise removing those clips. We know many of you have large archives, and we&#39;re working to make this easier.\n\u2014 Twitch Support (@TwitchSupport)  June 8, 2020", "posttime": "2020-06-12 18:15:13", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "streamers,\u526a\u8f91", "title": "Twitch Streamers\u6536\u5230\u65e7\u526a\u8f91\u97f3\u4e50\u7248\u6743\u8981\u6c42\u7684\u6d2a\u6d41", "title_en": "Twitch Streamers Receive a Flood of Music Copyright Claims For Old Clips", "transed": 1, "url": "https://www.engadget.com/twitch-streamers-receive-flood-of-dmca-music-claims-131901691.html", "via": "", "real_tags": ["streamers", "\u526a\u8f91"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006271, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6700\u8fd1\uff0c\u6211\u53d1\u73b0\u81ea\u5df1\u5e0c\u671b\u6709\u4e00\u4efd\u5728\u7ebf\u53c2\u8003\uff0c\u63d0\u4f9b\u8fd1\u5e74\u6765\u6bcf\u4e2a\u516c\u5f00\u7684iOS\u5185\u6838\u6f0f\u6d1e\u5229\u7528\u7684\u9ad8\u7ea7\u5229\u7528\u6d41\u7684\u7b80\u8981\u6458\u8981\uff1b\u7531\u4e8e\u6ca1\u6709\u8fd9\u6837\u7684\u6587\u6863\uff0c\u6211\u51b3\u5b9a\u5728\u8fd9\u91cc\u521b\u5efa\u5b83\u3002\n\u672c\u6587\u603b\u7ed3\u4e86\u9488\u5bf9IOS 10\u5230IOS 13\u7684\u672c\u5730\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u4e2d\u7684\u539f\u59cbIOS\u5185\u6838\u653b\u51fb\uff0c\u91cd\u70b9\u4ecb\u7ecd\u4e86\u4ece\u6f0f\u6d1e\u6388\u4e88\u7684\u521d\u59cb\u539f\u8bed\u5230\u5185\u6838\u8bfb/\u5199\u7684\u9ad8\u7ea7\u5229\u7528\u6f0f\u6d1e\u6d41\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u7684\u6700\u540e\uff0c\u6211\u4eec\u5c06\u7b80\u8981\u4ecb\u7ecdIOS\u5185\u6838\u5229\u7528\u6f0f\u6d1e\u7684\u7f13\u89e3\u63aa\u65bd(\u786c\u4ef6\u548c\u8f6f\u4ef6\u65b9\u9762)\uff0c\u4ee5\u53ca\u5b83\u4eec\u5982\u4f55\u4e0e\u5229\u7528\u6f0f\u6d1e\u4e2d\u4f7f\u7528\u7684\u6280\u672f\u76f8\u5bf9\u5e94\u3002\n\u8fd9\u4e0d\u662f\u4f60\u5178\u578b\u7684P0\u535a\u5ba2\u6587\u7ae0\uff1a\u6ca1\u6709\u6263\u4eba\u5fc3\u5f26\u7684\u96f6\u65e5\u653b\u51fb\uff0c\u6ca1\u6709\u65b0\u5947\u7684\u653b\u51fb\u7814\u7a76\uff0c\u4e5f\u6ca1\u6709\u60ca\u5fc3\u52a8\u9b44\u7684\u6076\u610f\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u3002\u56e0\u4e3a\u6211\u9700\u8981\u8fd9\u4e9b\u4fe1\u606f\uff0c\u5e76\u8ba4\u4e3a\u5176\u4ed6\u4eba\u53ef\u80fd\u4e5f\u4f1a\u89c9\u5f97\u6709\u7528\uff0c\u6240\u4ee5\u6211\u5199\u4e86\u8fd9\u4e9b\u5185\u5bb9\u4f5c\u4e3a\u53c2\u8003\u3002\u5df2\u7ecf\u4e8b\u5148\u8b66\u544a\u8fc7\u4f60\u4e86\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u6ca1\u6709\u4e00\u672c\u540d\u4e3a\u201c\u5b89\u5168\u7814\u7a76\u4eba\u5458\u6280\u672f\u9ed1\u5ba2\u672f\u8bed\u201d\u7684\u6743\u5a01\u8bcd\u5178\uff0c\u8fd9\u4f7f\u5f97\u6211\u5f88\u96be\u51c6\u786e\u5730\u63cf\u8ff0\u6211\u60f3\u8981\u4f20\u8fbe\u7684\u4e00\u4e9b\u9ad8\u7ea7\u6982\u5ff5\u3002\u4e3a\u6b64\uff0c\u6211\u51b3\u5b9a\u4e3a\u8fd9\u7bc7\u6587\u7ae0\u7684\u4e0a\u4e0b\u6587\u8d4b\u4e88\u4ee5\u4e0b\u672f\u8bed\u7279\u5b9a\u7684\u542b\u4e49\u3002\u5982\u679c\u8fd9\u4e9b\u5b9a\u4e49\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u4e0e\u60a8\u5bf9\u8fd9\u4e9b\u672f\u8bed\u7684\u7406\u89e3\u4e0d\u4e00\u81f4\uff0c\u8bf7\u968f\u65f6\u5efa\u8bae\u6539\u8fdb\u672f\u8bed\uff0c\u6211\u53ef\u4ee5\u66f4\u65b0\u6b64\u5e16\u5b50\u3002\uff1a)\u3002\n\u5e38\u89c1\u5229\u7528\u6f0f\u6d1e\u539f\u8bed\u7684\u51e0\u4e2a\u793a\u4f8b\u5305\u62ec\uff1aN\u5b57\u8282\u7ebf\u6027\u5806\u6ea2\u51fa\u3001\u53d7\u63a7\u5730\u5740\u5904\u7684\u6574\u6570\u9012\u589e\u3001Write-What-Where\u3001\u4efb\u610f\u5185\u5b58\u8bfb/\u5199\u3001PC\u63a7\u5236\u3001\u4efb\u610f\u51fd\u6570\u8c03\u7528\u7b49\u3002\n\u7279\u5b9a\u4e8eIOS\u5185\u6838\u653b\u51fb\u7684\u5e38\u89c1\u5229\u7528\u6f0f\u6d1e\u539f\u8bed\u662f\u62e5\u6709\u5bf9\u5047MACH\u7aef\u53e3(Struct IPC_PORT)\u7684\u53d1\u9001\u6743\u9650\uff0c\u8be5\u7aef\u53e3\u7684\u5b57\u6bb5\u53ef\u4ee5\u76f4\u63a5\u4ece\u7528\u6237\u7a7a\u95f4\u8bfb\u53d6\u548c\u5199\u5165\u3002\n\u5229\u7528\u7b56\u7565\uff1a\u7528\u4e8e\u5c06\u6f0f\u6d1e\u8f6c\u6362\u4e3a\u6709\u7528\u7684\u5229\u7528\u539f\u8bed\u7684\u4f4e\u7ea7\u3001\u7279\u5b9a\u4e8e\u6f0f\u6d1e\u7684\u65b9\u6cd5\u3002\n\u4f8b\u5982\uff0c\u8fd9\u662fIan Beer\u9488\u5bf9iOS 11.1.2\u7684Async_Wake\u5229\u7528\u4e2d\u4f7f\u7528\u7684\u5229\u7528\u7b56\u7565\uff1a\n\u4fe1\u606f\u6cc4\u6f0f\u88ab\u7528\u6765\u53d1\u73b0\u4efb\u610fMACH\u7aef\u53e3\u7684\u5730\u5740\u3002\u5206\u914d\u4e00\u9875\u7aef\u53e3\uff0c\u5e76\u57fa\u4e8e\u5176\u5730\u5740\u4ece\u8be5\u9875\u4e2d\u9009\u62e9\u7279\u5b9a\u7aef\u53e3\u3002IOSurfaceRootUserClient\u6f0f\u6d1e\u88ab\u89e6\u53d1\u4ee5\u91ca\u653eMach\u7aef\u53e3\uff0c\u4ece\u800c\u4ea7\u751f\u5bf9\u5df2\u77e5(\u548c\u90e8\u5206\u63a7\u5236)\u5730\u5740\u5904\u7684\u60ac\u7a7aMach\u7aef\u53e3\u7684\u63a5\u6536\u6743\u9650\u3002\n\u6700\u540e\u4e00\u90e8\u5206\u662f\u901a\u7528/\u4e0e\u6f0f\u6d1e\u65e0\u5173\u7684\u539f\u8bed\uff0c\u6211\u5c06\u5176\u89e3\u91ca\u4e3a\u7279\u5b9a\u4e8e\u6f0f\u6d1e\u7684\u5229\u7528\u7b56\u7565\u7684\u7ed3\u675f\u3002\n\u901a\u5e38\uff0c\u5229\u7528\u7b56\u7565\u7684\u76ee\u6807\u662f\u4ea7\u751f\u9ad8\u5ea6\u53ef\u9760\u7684\u5229\u7528\u539f\u8bed\u3002\n\u5229\u7528\u6280\u672f\uff1a\u5c06\u4e00\u4e2a\u5229\u7528\u539f\u8bed\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a(\u901a\u5e38\u66f4\u6709\u7528)\u5229\u7528\u539f\u8bed\u7684\u53ef\u91cd\u7528\u548c\u5408\u7406\u901a\u7528\u7684\u7b56\u7565\u3002\n\u9762\u5411\u8fd4\u56de\u7684\u7f16\u7a0b(ROP)\u5c31\u662f\u5229\u7528\u6f0f\u6d1e\u6280\u672f\u7684\u4e00\u4e2a\u793a\u4f8b\uff0c\u5b83\u901a\u8fc7\u91cd\u7528\u53ef\u6267\u884c\u4ee3\u7801\u5c0f\u5de5\u5177\u5c06\u4efb\u610fPC\u63a7\u5236\u8f6c\u53d8\u4e3a(\u51e0\u4e4e)\u4efb\u610f\u4ee3\u7801\u6267\u884c\u3002\n\u7279\u5b9a\u4e8eIOS\u5185\u6838\u653b\u51fb\u7684\u653b\u51fb\u6280\u672f\u662f\u4f7f\u7528\u4f2aMACH\u7aef\u53e3\u901a\u8fc7\u8c03\u7528pid_for_task()\u8bfb\u53d64\u5b57\u8282\u7684\u5185\u6838\u5185\u5b58(\u5c06\u5bf9\u4f2aMACH\u7aef\u53e3\u7684\u53d1\u9001\u6743\u9650\u8f6c\u6362\u4e3a\u4efb\u610f\u5185\u6838\u5185\u5b58\u8bfb\u53d6\u539f\u8bed)\u3002\n\u5229\u7528\u6d41\uff1a\u9ad8\u7ea7\u3001\u6f0f\u6d1e\u65e0\u5173\u7684\u5229\u7528\u6280\u672f\u94fe\uff0c\u7528\u4e8e\u5c06\u6f0f\u6d1e\u6388\u4e88\u7684\u5229\u7528\u539f\u8bed\u8f6c\u6362\u4e3a\u6700\u7ec8\u76ee\u6807(\u5728\u672c\u6587\u4e2d\uff0c\u5185\u6838\u4ece\u672c\u5730\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u8bfb\u53d6/\u5199\u5165)\u3002\n\u672c\u8282\u5c06\u7b80\u8981\u6982\u8ff0\u9488\u5bf9IOS 10\u5230IOS 13\u7684\u672c\u5730\u4e0a\u4e0b\u6587\u4e2d\u7684IOS\u5185\u6838\u5229\u7528\u6f0f\u6d1e\u653b\u51fb\u3002\u6211\u5c06\u63cf\u8ff0\u9ad8\u7ea7\u5229\u7528\u6f0f\u6d1e\u653b\u51fb\u6d41\u7a0b\uff0c\u5e76\u5217\u51fa\u5b9e\u73b0\u8be5\u6d41\u7a0b\u6240\u4f7f\u7528\u7684\u5229\u7528\u6f0f\u6d1e\u653b\u51fb\u539f\u8bed\u548c\u6280\u672f\u3002\u867d\u7136\u6211\u8bd5\u56fe\u8ffd\u8e2a\u6bcf\u4e00\u4e2a\u539f\u59cb\u7684(\u5373\uff0c\u5728\u6f0f\u6d1e\u5229\u7528\u4ee3\u7801\u53d1\u5e03\u4e4b\u524d\u5f00\u53d1\u7684)\u516c\u5171\u5229\u7528\u6f0f\u6d1e\uff0c\u4f46\u6211\u9884\u8ba1\u6211\u53ef\u80fd\u9057\u6f0f\u4e86\u4e00\u4e9b\uff0c\u65e0\u8bba\u662f\u4f5c\u4e3a\u6e90\u4ee3\u7801\u8fd8\u662f\u4f5c\u4e3a\u8db3\u591f\u5b8c\u6574\u7684\u5199\u4f5c/\u6f14\u793a\u6587\u7a3f\u3002\u8bf7\u968f\u65f6\u8054\u7cfb\u5e76\u63d0\u51fa\u6211\u9057\u6f0f\u7684\u4efb\u4f55\u5efa\u8bae\uff0c\u6211\u53ef\u4ee5\u66f4\u65b0\u8fd9\u7bc7\u5e16\u5b50\u3002\n\u5bf9\u4e8e\u6bcf\u4e2a\u6f0f\u6d1e\uff0c\u6211\u90fd\u6982\u8ff0\u4e86\u6f0f\u6d1e\u3001\u6f0f\u6d1e\u7b56\u7565(\u7279\u5b9a\u4e8e\u6f0f\u6d1e)\u548c\u540e\u7eed\u7684\u6f0f\u6d1e\u6d41(\u4e00\u822c)\u3002\u6f0f\u6d1e\u653b\u51fb\u7684\u54ea\u4e9b\u90e8\u5206\u662f\u7279\u5b9a\u4e8e\u6f0f\u6d1e\u7684\uff0c\u54ea\u4e9b\u90e8\u5206\u8db3\u591f\u901a\u7528\uff0c\u53ef\u4ee5\u89c6\u4e3a\u6574\u4e2a\u6d41\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u4e24\u8005\u4e4b\u95f4\u7684\u754c\u9650\u662f\u4e3b\u89c2\u7684\u3002\u5728\u6bcf\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u90fd\u5f3a\u8c03\u4e86\u6211\u8ba4\u4e3a\u8db3\u591f\u901a\u7528\u7684\u6f0f\u6d1e\u6388\u4e88\u7684\u7279\u5b9a\u5229\u7528\u539f\u8bed\u3002\n\u6f0f\u6d1e\uff1aCVE-2016-7644\u662fXNU\u7684set_dp_control_port()\u4e2d\u7684\u4e89\u7528\u6761\u4ef6\uff0c\u4f1a\u5bfc\u81f4Mach\u7aef\u53e3\u8fc7\u5ea6\u91ca\u653e\u3002\n\u5229\u7528\u7b56\u7565\uff1a\u5206\u914d\u8bb8\u591aMACH\u7aef\u53e3\uff0c\u5e76\u901a\u8fc7\u7ade\u76f8SET_DP_CONTROL_PORT()\u5220\u9664\u5bf9\u5b83\u4eec\u7684\u5f15\u7528(\u53ef\u4ee5\u786e\u5b9a\u7ade\u4e89\u4f55\u65f6\u83b7\u80dc)\u3002\u901a\u8fc7\u5220\u9664\u9690\u85cf\u7684\u5f15\u7528\u6765\u91ca\u653e\u7aef\u53e3\uff0c\u8ba9\u6301\u6709\u5bf9\u60ac\u6302\u7684Mach\u7aef\u53e3\u7684\u63a5\u6536\u6743\u9650\u7684\u8fdb\u7a0b\u586b\u5145\u4e00\u9875\u5185\u5b58\u3002\n\u540e\u7eed\u653b\u51fb\u6d41\uff1a\u901a\u8fc7\u8c03\u7528mach_zone_force_gc()\u5f3a\u5236\u6267\u884c\u533a\u57df\u5783\u573e\u6536\u96c6\uff0c\u5e76\u4f7f\u7528\u5305\u542b\u6307\u5411\u4e3b\u673a\u7aef\u53e3\u7684\u6307\u9488\u7684\u884c\u5916(OOL)\u7aef\u53e3\u6570\u7ec4\u91cd\u65b0\u5206\u914d\u60ac\u6302\u7aef\u53e3\u7684\u9875\u9762\u3002\u5728\u5176\u4e2d\u4e00\u4e2a\u60ac\u6302\u7aef\u53e3\u4e0a\u8c03\u7528MACH_PORT_GET_CONTEXT()\u4ee5\u6cc4\u9732\u4e3b\u673a\u7aef\u53e3\u7684\u5730\u5740\u3002\u4f7f\u7528\u6b64\u503c\uff0c\u53ef\u4ee5\u731c\u6d4b\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u6240\u5728\u7684\u9875\u9762\u3002\u6bcf\u4e2a\u60ac\u7a7a\u7aef\u53e3\u7684\u4e0a\u4e0b\u6587\u503c\u88ab\u8bbe\u7f6e\u4e3a\u5305\u542b\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u7684\u9875\u9762\u4e0a\u6bcf\u4e2a\u6f5c\u5728IPC_\u7aef\u53e3\u7684\u5730\u5740\uff0c\u5e76\u4e14OOL\u7aef\u53e3\u88ab\u63a5\u6536\u56de\u7528\u6237\u7a7a\u95f4\uff0c\u4ee5\u5411\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u6388\u4e88\u53d1\u9001\u6743\u9650\u3002\n\u8c37\u6b4c\u5a01\u80c1\u5206\u6790\u5c0f\u7ec4\u7684Cl\u00e9ment Lecigne(@_clem1)\u5728\u91ce\u5916\u53d1\u73b0\u4e86\u8fd9\u79cd\u75c5\u6bd2\u3002Google Project Zero\u7684\u4f0a\u6069\u00b7\u6bd4\u5c14(Ian Beer)\u548c\u585e\u7f2a\u5c14\u00b7\u683c\u7f57\u4f2f(Samuel Groo)(@5aelo)\u5206\u6790\u4e86\u8fd9\u4e00\u70b9\u3002\n\u6f0f\u6d1e\uff1a\u8be5\u6f0f\u6d1e\u662f\u5bf9IOkit\u51fd\u6570AGXAllocationList2\uff1a\uff1ainitWithSharedResourceList()\u4e2d\u7684IOAccelResource\u6307\u9488\u7684\u7ebf\u6027\u5806\u8d8a\u754c\u5199\u5165\u3002\n\u5229\u7528\u7b56\u7565\uff1a\u8981\u6ea2\u51fa\u7684\u7f13\u51b2\u533a\u76f4\u63a5\u653e\u5728recv_msg_elem\u7ed3\u6784\u4e4b\u524d\uff0c\u8fd9\u6837\u8d8a\u754c\u5199\u5165\u5c06\u4f7f\u7528IOAccelResource\u6307\u9488\u8986\u76d6uio\u6307\u9488\u3002IOAccelResource\u6307\u9488\u88ab\u91ca\u653e\u5e76\u4f7f\u7528\u5047\u7684UIO\u7ed3\u6784\u91cd\u65b0\u5206\u914d\uff0c\u8be5\u7ed3\u6784\u4f4d\u4e8e\u7531IOSurface\u5c5e\u6027\u7ba1\u7406\u7684OSData\u6570\u636e\u7f13\u51b2\u533a\u7684\u5f00\u5934\u3002UIO\u88ab\u91ca\u653e\uff0c\u7559\u4e0b\u4e00\u4e2a\u60ac\u6302\u7684OSData\u6570\u636e\u7f13\u51b2\u533a\u53ef\u901a\u8fc7IOSurface\u5c5e\u6027\u8bbf\u95ee\u3002\n\u540e\u7eed\u653b\u51fb\u6d41\u7a0b\uff1a\u4f7f\u7528IOSurfaceRootUserClient\u5b9e\u4f8b\u91cd\u65b0\u5206\u914d\u6302\u8d77\u7684OSData\u6570\u636e\u7f13\u51b2\u533a\u63d2\u69fd\uff0c\u5e76\u901a\u8fc7IOSurface\u5c5e\u6027\u8bfb\u53d6\u6570\u636e\u5185\u5bb9\u4ee5\u63d0\u4f9bKASLR\u5e7b\u706f\u7247\u3001\u5f53\u524d\u4efb\u52a1\u7684\u5730\u5740\u548c\u6302\u8d77\u7684\u6570\u636e\u7f13\u51b2\u533a/IOSurfaceRootUserClient\u7684\u5730\u5740\u3002\u7136\u540e\uff0c\u4f7f\u7528IOSurfaceRootUserClient\u7684\u4fee\u6539\u7248\u672c\u91ca\u653e\u5e76\u91cd\u65b0\u5206\u914d\u6570\u636e\u7f13\u51b2\u533a\uff0c\u4ee5\u4fbf\u5728\u4fee\u6539\u540e\u7684\u7528\u6237\u5ba2\u6237\u7aef\u4e0a\u8c03\u7528\u5916\u90e8\u65b9\u6cd5\u5c06\u8fd4\u56de\u4ece\u5185\u6838s__data\u6bb5\u8bfb\u53d6\u7684\u5185\u6838\u4efb\u52a1\u7684\u5730\u5740\u3002\u518d\u6b21\u91ca\u653e\u548c\u91cd\u65b0\u5206\u914d\u6570\u636e\u7f13\u51b2\u533a\uff0c\u4ee5\u4fbf\u8c03\u7528\u5916\u90e8\u65b9\u6cd5\u5c06\u6267\u884cOSSerializer\uff1a\uff1aSerialize()\u5c0f\u5de5\u5177\uff0c\u4ece\u800c\u5bfc\u81f4\u4efb\u610f\u8bfb\u5199\uff0c\u5c06\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u7684\u5730\u5740\u5b58\u50a8\u5728\u5f53\u524d\u4efb\u52a1\u7684\u7279\u6b8a\u7aef\u53e3\u5217\u8868\u4e2d\u3002\u4ece\u7528\u6237\u7a7a\u95f4\u8bfb\u53d6\u7279\u6b8a\u7aef\u53e3\u8d4b\u4e88\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u53d1\u9001\u6743\u9650\u3002\n\u6f0f\u6d1e\uff1aCVE-2017-2370\u662f\u53ef\u4eceXNU\u7684mach_voucher_Extract_Attr_Recipe_Trap()\u4e2d\u7684\u975e\u7279\u6743\u4e0a\u4e0b\u6587\u8bbf\u95ee\u7684\u7ebf\u6027\u5806\u7f13\u51b2\u533a\u6ea2\u51fa\uff0c\u539f\u56e0\u662f\u653b\u51fb\u8005\u63a7\u5236\u7684\u7528\u6237\u7a7a\u95f4\u6307\u9488\u7528\u4f5c\u8c03\u7528copy in()\u7684\u957f\u5ea6\u3002\n\u653b\u51fb\u7b56\u7565\uff1a\u8c03\u7528\u6613\u53d7\u653b\u51fb\u7684Mach\u9677\u9631\u6765\u521b\u5efakalloc\u5206\u914d\uff0c\u5e76\u7acb\u5373\u7528\u53d7\u63a7\u6570\u636e\u6ea2\u51fa\uff0c\u4ece\u800c\u635f\u574f\u540e\u7eedIPC_KMSG\u5bf9\u8c61\u7684IKM_SIZE\u5b57\u6bb5\u3002\u8fd9\u4f1a\u5bfc\u81f4IPC_KMSG(\u4e3aMACH\u7aef\u53e3\u9884\u5148\u5206\u914d\u7684\u6d88\u606f)\u76f8\u4fe1\u5b83\u7684\u5bb9\u91cf\u6bd4\u5b83\u5927\uff0c\u4ece\u800c\u4e0e\u540e\u7eed\u5206\u914d\u7684\u524d240\u4e2a\u5b57\u8282\u91cd\u53e0\u3002\u901a\u8fc7\u5c06MACH\u7aef\u53e3\u6ce8\u518c\u4e3a\u7528\u6237\u7a7a\u95f4\u7ebf\u7a0b\u7684\u5f02\u5e38\u7aef\u53e3\uff0c\u7136\u540e\u4f7f\u5177\u6709\u53d7\u63a7\u5bc4\u5b58\u5668\u72b6\u6001\u7684\u7ebf\u7a0b\u5d29\u6e83\uff0c\u53ef\u4ee5\u91cd\u590d\u4e14\u53ef\u9760\u5730\u91cd\u5199\u540e\u7eed\u5206\u914d\u7684\u91cd\u53e0\u90e8\u5206\uff0c\u5e76\u4e14\u901a\u8fc7\u63a5\u6536\u5f02\u5e38\u6d88\u606f\u53ef\u4ee5\u8bfb\u53d6\u90a3\u4e9b\u5b57\u8282\u3002\u8fd9\u5728\u635f\u574f\u7684IPC_KMSG\u7684\u672b\u5c3e\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53d7\u63a7\u7684240\u5b57\u8282\u8d8a\u754c\u8bfb/\u5199\u539f\u8bed\u3002\n\u540e\u7eed\u653b\u51fb\u6d41\uff1a\u5c06\u7b2c\u4e8c\u4e2aIPC_KMSG\u653e\u5728\u635f\u574f\u7684IPC_KMSG\u4e4b\u540e\u5e76\u8bfb\u53d6\uff0c\u4ee5\u4fbf\u786e\u5b9a\u5206\u914d\u7684\u5730\u5740\u3002\u63a5\u4e0b\u6765\uff0c\u5728\u76f8\u540c\u7684\u69fd\u4e2d\u91cd\u65b0\u5206\u914dAGXCommandQueue\u7528\u6237\u5ba2\u6237\u7aef\uff0c\u5e76\u8bfb\u53d6\u865a\u62df\u65b9\u6cd5\u8868\u4ee5\u786e\u5b9aKASLR\u5e7b\u706f\u7247\u3002\u7136\u540e\u8986\u76d6\u865a\u62df\u65b9\u6cd5\u8868\uff0c\u4ee5\u4fbfAGXCommandQueue\u4e0a\u7684\u865a\u62df\u65b9\u6cd5\u8c03\u7528\u8c03\u7528OSSerializer\uff1a\uff1aSerialize()\u5c0f\u90e8\u4ef6\uff0c\u4ece\u800c\u4ea7\u751f\u4e00\u4e2a\u53cc\u53c2\u6570\u4efb\u610f\u5185\u6838\u51fd\u6570\u8c03\u7528\u539f\u8bed\u3002\u8c03\u7528\u51fd\u6570uuid_copy()\u4f1a\u4ea7\u751f\u4efb\u610f\u5185\u6838\u8bfb/\u5199\u539f\u8bed\u3002\n\u653b\u51fb\u7b56\u7565\uff1a\u8c03\u7528\u6613\u53d7\u653b\u51fb\u7684Mach\u9677\u9631\u6765\u521b\u5efakalloc\u5206\u914d\uff0c\u5e76\u7acb\u5373\u7528\u53d7\u63a7\u6570\u636e\u6ea2\u51fa\uff0c\u8986\u76d6OOL\u7aef\u53e3\u6570\u7ec4\u7684\u5185\u5bb9\uff0c\u5e76\u5728\u7528\u6237\u7a7a\u95f4\u4e2d\u63d2\u5165\u6307\u5411\u5047Mach\u7aef\u53e3\u7684\u6307\u9488\u3002\u63a5\u6536\u5305\u542bOOL\u7aef\u53e3\u7684\u6d88\u606f\u4ea7\u751f\u5bf9\u5176\u5185\u5bb9\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236\u7684\u4f2aMACH\u7aef\u53e3\u7684\u53d1\u9001\u6743\u3002\n\u968f\u540e\u7684\u653b\u51fb\u6d41\u7a0b\uff1a\u5047Mach\u7aef\u53e3\u88ab\u8f6c\u6362\u4e3a\u65f6\u949f\u7aef\u53e3\uff0c\u5e76\u4e14CLOCK_SLEEP_TRAP()\u7528\u4e8e\u66b4\u529b\u5f3a\u5236\u5185\u6838\u6620\u50cf\u6307\u9488\u3002\u7136\u540e\u5c06\u8be5\u7aef\u53e3\u8f6c\u6362\u4e3a\u4f2a\u4efb\u52a1\u7aef\u53e3\uff0c\u4ee5\u901a\u8fc7pid_for_task()\u8bfb\u53d6\u5185\u5b58\u3002\u5185\u6838\u5185\u5b58\u4ece\u6cc4\u6f0f\u7684\u5185\u6838\u6620\u50cf\u6307\u9488\u5411\u540e\u626b\u63cf\uff0c\u76f4\u5230\u627e\u5230\u5185\u6838\u6587\u672c\u5e93\uff0c\u4ece\u800c\u7834\u574fKASLR\u3002\u6700\u540e\uff0c\u6784\u9020\u4e86\u4e00\u4e2a\u4f2a\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u3002\n\u6f0f\u6d1e\uff1aAppleAVE2\u4e2d\u5b58\u5728\u591a\u4e2a\u6f0f\u6d1e\uff0c\u539f\u56e0\u662f\u5916\u90e8\u65b9\u6cd5\u4e0e\u7528\u6237\u7a7a\u95f4\u5171\u4eabIOSurface\u6307\u9488\u5e76\u4fe1\u4efb\u4ece\u7528\u6237\u7a7a\u95f4\u8bfb\u53d6\u7684IOSurface\u6307\u9488\u3002\n\u653b\u51fb\u7b56\u7565\uff1a\u521b\u5efaIOSurface\u5bf9\u8c61\u5e76\u8c03\u7528AppleAVE2\u5916\u90e8\u65b9\u6cd5\u6765\u6cc4\u6f0f\u5176\u5730\u5740\u3002IOSurface\u4e2dIOFence\u6307\u9488\u7684vtable\u4f7f\u7528\u53e6\u4e00\u4e2a\u5916\u90e8\u65b9\u6cd5\u8c03\u7528\u6cc4\u6f0f\uff0c\u4ece\u800c\u7834\u574fKASLR\u3002\u4f7f\u7528IOSurface\u5c5e\u6027\u55b7\u5c04\u91ca\u653eIOSurface\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\u53d7\u63a7\u6570\u636e\u91cd\u65b0\u5206\u914d\u8be5\u5bf9\u8c61\u3002\u5c06\u6cc4\u6f0f\u7684\u6307\u9488\u63d0\u4f9b\u7ed9\u4fe1\u4efb\u4ece\u7528\u6237\u7a7a\u95f4\u63d0\u4f9b\u7684IOSurface\u6307\u9488\u7684AppleAVE2\u5916\u90e8\u65b9\u6cd5\u5141\u8bb8\u52ab\u6301\u5047IOSurface\u4e0a\u7684\u865a\u62df\u65b9\u6cd5\u8c03\u7528\uff1b\u8fd9\u5c06\u88ab\u89c6\u4e3aOneShot\u52ab\u6301\u7684\u865a\u62df\u65b9\u6cd5\u8c03\u7528\uff0c\u5176\u4e2d\u53d7\u63a7\u76ee\u6807\u5bf9\u8c61\u4f4d\u4e8e\u5df2\u77e5\u5730\u5740\u3002\n\u540e\u7eed\u5229\u7528\u6d41\u7a0b\uff1a\u52ab\u6301\u7684\u865a\u62df\u65b9\u6cd5\u8c03\u7528\u4e0eOSSerializer\uff1a\uff1aSerialize()\u5c0f\u5de5\u5177\u4e00\u8d77\u4f7f\u7528\uff0c\u4ee5\u8c03\u7528Copin()\u5e76\u8986\u76d62\u4e2asysctl_oid\u7ed3\u6784\u3002sysctl\u88ab\u8986\u76d6\uff0c\u4ee5\u4fbf\u8bfb\u53d6\u7b2c\u4e00\u4e2asysctl\u8c03\u7528copy in()\u6765\u66f4\u65b0\u7b2c\u4e8c\u4e2asysctl\u7684\u51fd\u6570\u6307\u9488\u548c\u53c2\u6570\uff0c\u800c\u8bfb\u53d6\u7b2c\u4e8c\u4e2asysctl\u4f7f\u7528OSSerializer\uff1a\uff1aSerialize()\u5c0f\u90e8\u4ef6\u8c03\u7528\u5e26\u67093\u4e2a\u53c2\u6570\u7684\u5185\u6838\u51fd\u6570\u3002\u8fd9\u4e2a\u5e26\u67093\u4e2a\u53c2\u6570\u7684\u4efb\u610f\u5185\u6838\u51fd\u6570\u8c03\u7528\u539f\u8bed\u7528\u4e8e\u901a\u8fc7\u8c03\u7528copy in()/copy out()\u6765\u8bfb\u5199\u4efb\u610f\u5185\u5b58\u3002\n\u6ce8\u610f\uff1aiOS10.3\u5f15\u5165\u4e86TASK_CONVERSION_eval()\u7684\u521d\u59cb\u5f62\u5f0f\uff0c\u8fd9\u662f\u4e00\u79cd\u5fae\u5f31\u7684\u7f13\u89e3\u63aa\u65bd\uff0c\u963b\u6b62\u7528\u6237\u7a7a\u95f4\u8bbf\u95ee\u5b9e\u9645\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u7684\u6743\u9650\u3002IOS 10.3\u4e4b\u540e\u7684\u4efb\u4f55\u653b\u51fb\u90fd\u9700\u8981\u6784\u5efa\u4e00\u4e2a\u5047\u7684\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u3002\n\u6f0f\u6d1e\uff1aCVE-2017-13861\u662fIOSurfaceRootUserClient\uff1a\uff1as_set_surface_notify()\u4e2d\u7684\u6f0f\u6d1e\uff0c\u53ef\u5bfc\u81f4\u5728\u9a6c\u8d6b\u7aef\u53e3\u4e0a\u4e22\u5f03\u989d\u5916\u7684\u5f15\u7528\u3002cve-2017-13865\u662fxnu\u7684proc_list_uptrs()\u4e2d\u7684\u6f0f\u6d1e\uff0c\u5728\u5c06\u5185\u5bb9\u590d\u5236\u5230\u7528\u6237\u7a7a\u95f4\u4e4b\u524d\uff0c\u65e0\u6cd5\u5b8c\u5168\u521d\u59cb\u5316\u5806\u5185\u5b58\uff0c\u4ece\u800c\u6cc4\u6f0f\u5185\u6838\u6307\u9488\u3002\n\u653b\u51fb\u7b56\u7565\uff1a\u5229\u7528\u4fe1\u606f\u6cc4\u6f0f\u53d1\u73b0\u4efb\u610fMACH\u7aef\u53e3\u7684\u5730\u5740\u3002\u5206\u914d\u4e00\u9875\u7aef\u53e3\uff0c\u5e76\u57fa\u4e8e\u5176\u5730\u5740\u4ece\u8be5\u9875\u4e2d\u9009\u62e9\u7279\u5b9a\u7aef\u53e3\u3002\u4f7f\u7528IOSurfaceRootUserClient\u7f3a\u9677\u89e3\u9664\u7aef\u53e3\u5206\u914d\uff0c\u4ece\u800c\u83b7\u5f97\u5bf9\u5df2\u77e5(\u548c\u90e8\u5206\u63a7\u5236)\u5730\u5740\u5904\u7684\u60ac\u6302Mach\u7aef\u53e3\u7684\u63a5\u6536\u6743\u9650\u3002\n\u540e\u7eed\u5229\u7528\u4fe1\u606f\u6d41\uff1a\u91ca\u653e\u8be5\u9875\u4e0a\u7684\u5176\u4ed6\u7aef\u53e3\uff0c\u5e76\u5f3a\u5236\u6267\u884c\u533a\u57df\u5783\u573e\u6536\u96c6\uff0c\u4ee5\u4fbf\u4f7f\u7528IPC_KMSG\u7684\u5185\u5bb9\u91cd\u65b0\u5206\u914d\u8be5\u9875\uff0c\u4ece\u800c\u5728\u5df2\u77e5\u5730\u5740\u63d0\u4f9b\u5177\u6709\u53d7\u63a7\u5185\u5bb9\u7684\u5047MACH\u7aef\u53e3\u3002\u91cd\u65b0\u5206\u914d\u5c06\u7aef\u53e3\u8f6c\u6362\u4e3a\u4f2a\u4efb\u52a1\u7aef\u53e3\uff0c\u901a\u8fc7\u8be5\u7aef\u53e3\u53ef\u4ee5\u4f7f\u7528pid_for_task()\u8bfb\u53d6\u4efb\u610f\u5185\u6838\u5185\u5b58\u3002(\u4f7f\u7528mach_port_set_context()\u66f4\u65b0\u8981\u8bfb\u53d6\u7684\u5730\u5740\uff0c\u800c\u4e0d\u91cd\u65b0\u5206\u914d\u4f2a\u7aef\u53e3\u3002)\u3002\u4f7f\u7528\u5185\u6838\u8bfb\u53d6\u539f\u8bed\u5b9a\u4f4d\u76f8\u5173\u5185\u6838\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\u4f2a\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u518d\u6b21\u91cd\u65b0\u5206\u914d\u4f2a\u7aef\u53e3\u3002\n\u6ce8\u610f\uff1aIOS 11\u5220\u9664\u4e86mach_zone_force_gc()\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5141\u8bb8\u7528\u6237\u7a7a\u95f4\u63d0\u793a\u5185\u6838\u6267\u884c\u533a\u57df\u5783\u573e\u6536\u96c6\uff0c\u56de\u6536\u533a\u57df\u6620\u5c04\u4e2d\u6240\u6709\u7a7a\u95f2\u7684\u865a\u62df\u9875\u9762\u4ee5\u4f9b\u5176\u4ed6\u533a\u57df\u4f7f\u7528\u3002\u5229\u7528iOS 11\u548c\u66f4\u9ad8\u7248\u672c\u7684\u6f0f\u6d1e\u9700\u8981\u5f00\u53d1\u4e00\u79cd\u5f3a\u5236\u533a\u57df\u5783\u573e\u6536\u96c6\u7684\u6280\u672f\u3002\u4e3a\u6b64\uff0c\u81f3\u5c11\u5df2\u7ecf\u5f00\u53d1\u4e86\u4e09\u79cd\u72ec\u7acb\u7684\u6280\u672f\uff0c\u5982async_wake\u3001v0rtex\u548c\u672a\u5f00\u53d1\u7684IOS\u5229\u7528\u94fe3\u6240\u793a\u3002\n\u5229\u7528\u7b56\u7565\uff1a\u5206\u914d\u4e24\u4e2aMACH\u7aef\u53e3\uff0c\u7aef\u53e3A\u548c\u7aef\u53e3B\uff0c\u4f5c\u4e3a\u55b7\u5c04\u7684\u4e00\u90e8\u5206\u3002\u8be5\u6f0f\u6d1e\u88ab\u89e6\u53d1\u4ee5\u4e22\u5f03\u7aef\u53e3A\u4e0a\u7684\u5f15\u7528\uff0c\u5e76\u91ca\u653eA\u5468\u56f4\u7684\u7aef\u53e3\uff0c\u4ece\u800c\u5bfc\u81f4\u7aef\u53e3\u6307\u9488\u60ac\u7a7a\u3002\u901a\u8fc7\u8c03\u7528mach_zone_force_gc()\u5f3a\u5236\u6267\u884c\u533a\u57df\u5783\u573e\u6536\u96c6\uff0c\u5e76\u4f7f\u7528\u5305\u542b\u6a21\u5f0f\u7684OOL\u7aef\u53e3Sprake\u91cd\u65b0\u5206\u914d\u5305\u542b\u7aef\u53e3A\u7684IP_CONTEXT\u5b57\u6bb5\u7684\u9875\u9762\uff0c\u4f7f\u5f97\u7aef\u53e3A\u7684IP_CONTEXT\u5b57\u6bb5\u4e0e\u6307\u5411\u7aef\u53e3B\u7684\u6307\u9488\u91cd\u53e0\u3002\u8c03\u7528mach_port_get_context()\u4f1a\u7ed9\u51fa\u7aef\u53e3B\u7684\u5730\u5740\u3002\u7aef\u53e3B\u4f1a\u518d\u6b21\u89e6\u53d1\u8be5\u6f0f\u6d1e\uff0c\u4ece\u800c\u83b7\u5f97\u5bf9\u5df2\u77e5\u5730\u5740\u5904\u60ac\u7a7a\u7684MACH\u7aef\u53e3\u7684\u63a5\u6536\u6743\u9650\u3002\n\u540e\u7eed\u5229\u7528\u6d41\u7a0b\uff1a\u5728\u53e6\u4e00\u4e2a\u533a\u57df\u5783\u573e\u6536\u96c6\u4e4b\u540e\uff0c\u4f7f\u7528\u5206\u6bb5\u7684OOL\u5185\u5b58\u55b7\u5c04\u91cd\u65b0\u5206\u914d\u60ac\u6302\u7aef\u53e3B\uff0c\u4ee5\u4fbf\u8c03\u7528mach_port_get_context()\u53ef\u4ee5\u8bc6\u522b\u55b7\u5c04\u91cd\u65b0\u5206\u914d\u7684\u7aef\u53e3B\u7684\u54ea\u4e2a4MB\u6bb5\u3002\u8be5\u6bb5\u88ab\u91ca\u653e\uff0c\u5e76\u4e14\u7aef\u53e3B\u4f7f\u7528\u7ba1\u9053\u7f13\u51b2\u533a\u91cd\u65b0\u5206\u914d\uff0c\u4ece\u800c\u5728\u5df2\u77e5\u5730\u5740\u63d0\u4f9b\u53d7\u63a7\u7684\u4f2aMACH\u7aef\u53e3\u3002(=\u3002\u4f2a\u7aef\u53e3\u88ab\u8f6c\u6362\u4e3a\u65f6\u949f\u7aef\u53e3\uff0cCLOCK_SLEEP_TRAP()\u7528\u4e8e\u66b4\u529b\u5f3a\u5236KASLR\u3002\u63a5\u4e0b\u6765\u5c06\u4f2a\u7aef\u53e3\u8f6c\u6362\u4e3a\u4f2a\u4efb\u52a1\u7aef\u53e3\uff0c\u5e76\u4f7f\u7528pid_for_task()\u5efa\u7acb\u4e00\u4e2a4\u5b57\u8282\u7684\u5185\u6838\u8bfb\u53d6\u539f\u8bed\u3002\u6700\u540e\uff0c\u5c06\u4f2a\u7aef\u53e3\u8f6c\u6362\u4e3a\u4f2a\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u3002\n\u653b\u51fb\u7b56\u7565\uff1a\u4f7f\u7528\u8be5\u6f0f\u6d1e\u55b7\u6d12MACH\u7aef\u53e3\u5e76\u4e22\u5f03\u4e00\u4e2a\u7aef\u53e3\u4e0a\u7684\u5f15\u7528\u3002\u9875\u9762\u4e0a\u7684\u5176\u4ed6\u7aef\u53e3\u88ab\u91ca\u653e\uff0c\u5c06\u63a5\u6536\u6743\u9650\u7559\u7ed9\u60ac\u6302\u7684Mach\u7aef\u53e3\u3002\n\u540e\u7eed\u653b\u51fb\u6d41\uff1a\u4f7f\u7528MACH_ZONE_FORCE_GC()\u5f3a\u5236\u6267\u884c\u533a\u57df\u5783\u573e\u6536\u96c6\uff0c\u5e76\u901a\u8fc7IOSurface\u5c5e\u6027\u55b7\u5c04\u4f7f\u7528OSString\u7f13\u51b2\u533a\u91cd\u65b0\u5206\u914d\u5305\u542b\u60ac\u6302\u7aef\u53e3\u7684\u9875\u9762\u3002OSString\u7f13\u51b2\u533a\u5305\u542b\u4e00\u4e2a\u6a21\u5f0f\uff0c\u8be5\u6a21\u5f0f\u521d\u59cb\u5316\u7aef\u53e3\u7684\u5173\u952e\u5b57\u6bb5\uff0c\u5e76\u5141\u8bb8\u901a\u8fc7\u5728\u4f2a\u7aef\u53e3\u4e0a\u8c03\u7528mach_port_get_context()\u6765\u786e\u5b9a\u5305\u542b\u7aef\u53e3\u7684OSString\u7684\u7d22\u5f15\u3002\u91ca\u653e\u5305\u542b\u4f2a\u7aef\u53e3\u7684OSString\uff0c\u5e76\u5c06\u5176\u91cd\u65b0\u5206\u914d\u4e3a\u6b63\u5e38\u7684Mach\u7aef\u53e3\u3002\u8c03\u7528MACH_PORT_REQUEST_NOTIFICATION()\u5c06\u771f\u5b9eMACH\u7aef\u53e3\u7684\u5730\u5740\u653e\u5165\u4f2a\u7aef\u53e3\u7684IP_pdrequest\u5b57\u6bb5\uff0c\u5e76\u901a\u8fc7IOSurface\u8bfb\u53d6OSString\u7684\u5185\u5bb9\u4ee5\u83b7\u5f97\u5730\u5740\u3002\u518d\u6b21\u4f7f\u7528MACH_PORT_REQUEST_NOTIFICATION()\u6765\u83b7\u53d6\u4f2a\u7aef\u53e3\u672c\u8eab\u7684\u5730\u5740\u3002\n\u5b57\u7b26\u4e32\u7f13\u51b2\u533a\u88ab\u91ca\u653e\u5e76\u91cd\u65b0\u5206\u914d\uff0c\u4ee5\u4fbfmach_port_get_properties()\u53ef\u4ee5\u7528\u4f5c4\u5b57\u8282\u7684\u4efb\u610f\u8bfb\u53d6\u539f\u8bed\uff0c\u800c\u8981\u8bfb\u53d6\u7684\u76ee\u6807\u5730\u5740\u53ef\u901a\u8fc7mach_port_set_context()\u8fdb\u884c\u66f4\u65b0\u3002(\u8fd9\u7c7b\u4f3c\u4e8epid_for_task()\u6280\u672f\uff0c\u4f46\u7ea6\u675f\u7565\u6709\u4e0d\u540c\u3002)\u3002\u4ece\u5b9e\u9645Mach\u7aef\u53e3\u7684\u5730\u5740\u5f00\u59cb\uff0c\u8bfb\u53d6\u5185\u6838\u5185\u5b58\u4ee5\u67e5\u627e\u76f8\u5173\u7684\u5185\u6838\u5bf9\u8c61\u3002\u5b57\u7b26\u4e32\u7f13\u51b2\u533a\u88ab\u91ca\u653e\u5e76\u518d\u6b21\u4f7f\u7528\u4e00\u4e2a\u5047\u4efb\u52a1\u7aef\u53e3\u91cd\u65b0\u5206\u914d\uff0c\u8be5\u7aef\u53e3\u8db3\u4ee5\u5c06\u5b57\u7b26\u4e32\u7f13\u51b2\u533a\u91cd\u65b0\u6620\u5c04\u5230\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u3002\u901a\u8fc7\u6620\u5c04\u66f4\u65b0\u4f2a\u7aef\u53e3\uff0c\u4ee5\u4f7f\u7528iokit_user_client_trap()\u751f\u62107\u53c2\u6570\u4efb\u610f\u5185\u6838\u51fd\u6570\u8c03\u7528\u539f\u8bed\uff0c\u5e76\u8c03\u7528\u5185\u6838\u51fd\u6570\u4ee5\u751f\u6210\u4f2a\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u3002\n\u6f0f\u6d1e\uff1aCVE-2018-4150\u662fXNU\u7684BPF\u5b50\u7cfb\u7edf\u4e2d\u7684\u4e89\u7528\u6761\u4ef6\uff0c\u7531\u4e8e\u5728\u672a\u91cd\u65b0\u5206\u914d\u76f8\u5e94\u7f13\u51b2\u533a\u7684\u60c5\u51b5\u4e0b\u589e\u52a0\u7f13\u51b2\u533a\u957f\u5ea6\uff0c\u5bfc\u81f4\u7ebf\u6027\u5806\u7f13\u51b2\u533a\u6ea2\u51fa\u3002\n\u5229\u7528\u7b56\u7565\uff1a\u89e6\u53d1\u7ade\u4e89\u4ee5\u4e0d\u6b63\u786e\u5730\u589e\u52a0\u7f13\u51b2\u533a\u957f\u5ea6\uff0c\u800c\u4e0d\u91cd\u65b0\u5206\u914d\u7f13\u51b2\u533a\u672c\u8eab\u3002\u6570\u636e\u5305\u88ab\u53d1\u9001\u5e76\u5b58\u50a8\u5728\u7f13\u51b2\u533a\u4e2d\uff0c\u6ea2\u51fa\u5230\u540e\u7eed\u7684OOL\u7aef\u53e3\u6570\u7ec4\u4e2d\uff0c\u5e76\u63d2\u5165\u6307\u5411\u7528\u6237\u7a7a\u95f4\u4e2d\u7684\u4f2aMACH\u7aef\u53e3\u7684\u6307\u9488\u3002\u63a5\u6536\u5305\u542bOOL\u7aef\u53e3\u7684\u6d88\u606f\u4ea7\u751f\u5bf9\u5176\u5185\u5bb9\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236\u7684\u4f2aMACH\u7aef\u53e3\u7684\u53d1\u9001\u6743\u3002\n\u968f\u540e\u7684\u653b\u51fb\u6d41\u7a0b\uff1a\u5047Mach\u7aef\u53e3\u88ab\u8f6c\u6362\u4e3a\u65f6\u949f\u7aef\u53e3\uff0c\u5e76\u4e14CLOCK_SLEEP_TRAP()\u7528\u4e8e\u66b4\u529b\u5f3a\u5236\u5185\u6838\u6620\u50cf\u6307\u9488\u3002\u7136\u540e\u5c06\u8be5\u7aef\u53e3\u8f6c\u6362\u4e3a\u4f2a\u4efb\u52a1\u7aef\u53e3\uff0c\u4ee5\u901a\u8fc7pid_for_task()\u8bfb\u53d6\u5185\u5b58\u3002\u5185\u6838\u5185\u5b58\u4ece\u6cc4\u6f0f\u7684\u5185\u6838\u6620\u50cf\u6307\u9488\u5411\u540e\u626b\u63cf\uff0c\u76f4\u5230\u627e\u5230\u5185\u6838\u6587\u672c\u5e93\uff0c\u4ece\u800c\u7834\u574fKASLR\u3002\u653b\u51fb\u7684\u6700\u540e\u90e8\u5206\u5c1a\u672a\u5b8c\u6210\uff0c\u4f46\u5728\u6b64\u9636\u6bb5\u4f7f\u7528\u73b0\u6709\u4ee3\u7801\u6784\u5efa\u5047\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u5c06\u662f\u76f4\u63a5\u548c\u786e\u5b9a\u7684\u3002\n\u6f0f\u6d1e\uff1aCVE-2018-4241\u662fXNU&#39\uff1b\u7684mptcp_usr_connectX()\u4e2d\u7531\u4e8e\u4e0d\u6b63\u786e\u7684\u8fb9\u754c\u68c0\u67e5\u9020\u6210\u7684\u5bf9\u8c61\u5185\u7ebf\u6027\u5806\u7f13\u51b2\u533a\u6ea2\u51fa\u3002\n\u5229\u7528\u7b56\u7565\uff1a\u5185\u6838\u5806\u7ecf\u8fc7\u6574\u7406\uff0c\u5c06\u4e00\u4e2a2048\u5b57\u8282\u7684ipc_kmsg\u7ed3\u6784\u653e\u7f6e\u5728\u4e0e\u51e0\u4e2a\u591a\u8def\u5f84TCP\u5957\u63a5\u5b57\u5173\u8054\u7684mptses\u7ed3\u6784(\u5305\u542b\u6ea2\u51fa\u7684\u5bf9\u8c61)\u4e0b\u65b9\u768416MB\u5bf9\u9f50\u5730\u5740\u4e0a\u3002\u8be5\u6f0f\u6d1e\u7528\u4e8e\u4f7f\u7528\u96f6\u8986\u76d6mptses\u7ed3\u6784\u4e2dmpte_itfinfo\u6307\u9488\u7684\u4f4e3\u4e2a\u5b57\u8282\uff0c\u5e76\u5173\u95ed\u5957\u63a5\u5b57\u3002\u8fd9\u5c06\u89e6\u53d1\u635f\u574f\u6307\u9488\u7684kfree()\uff0c\u91ca\u653e16MB\u5bf9\u9f50\u8fb9\u754c\u5904\u7684ipc_kmsg\u7ed3\u6784\u3002\u91ca\u653e\u7684IPC_KMSG\u63d2\u69fd\u91cd\u65b0\u5206\u914d\u6709\u55b7\u5c04\u7684\u7ba1\u9053\u7f13\u51b2\u533a\u3002\u518d\u6b21\u89e6\u53d1\u8be5\u6f0f\u6d1e\uff0c\u7528\u96f6\u8986\u76d6\u53e6\u4e00\u4e2amptses\u7ed3\u6784\u4e2dmpte_itfinfo\u6307\u9488\u7684\u4f4e3\u4e2a\u5b57\u8282\uff0c\u5e76\u5173\u95ed\u5957\u63a5\u5b57\uff0c\u4ece\u800c\u5bfc\u81f4\u53e6\u4e00\u4e2a\u76f8\u540c\u5730\u5740\u7684kfree()\u3002\u8fd9\u5c06\u91ca\u653e\u521a\u521a\u5206\u914d\u5230\u8be5\u63d2\u69fd\u4e2d\u7684\u7ba1\u9053\u7f13\u51b2\u533a\uff0c\u7559\u4e0b\u4e00\u4e2a\u60ac\u6302\u7684\u7ba1\u9053\u7f13\u51b2\u533a\u3002\n\u540e\u7eed\u653b\u51fb\u6d41\uff1a\u4f7f\u7528\u9884\u5148\u5206\u914d\u7684IPC_KMSG\u518d\u6b21\u91cd\u65b0\u5206\u914d\u63d2\u69fd\u3002\u7528\u6237\u7a7a\u95f4\u7ebf\u7a0b\u5d29\u6e83\uff0c\u5bfc\u81f4\u6d88\u606f\u5b58\u50a8\u5728\u4e0e\u7ba1\u9053\u7f13\u51b2\u533a\u91cd\u53e0\u7684\u9884\u5148\u5206\u914d\u7684ipc_kmsg\u7f13\u51b2\u533a\u4e2d\uff1b\u8bfb\u53d6\u7528\u6237\u7a7a\u95f4\u4e2d\u7684\u7ba1\u9053\u4f1a\u4ea7\u751fipc_kmsg\u7ed3\u6784\u7684\u5185\u5bb9\uff0c\u7ed9\u51fa\u60ac\u6302\u7ba1\u9053\u7f13\u51b2\u533a/ipc_kmsg\u7684\u5730\u5740\u3002\u5199\u5165\u7ba1\u9053\u662f\u4e3a\u4e86\u66f4\u6539ipc_kmsg\u7ed3\u6784\u7684\u5185\u5bb9\uff0c\u4ee5\u4fbf\u63a5\u6536\u6d88\u606f\u4f1a\u4ea7\u751f\u5bf9\u7ba1\u9053\u7f13\u51b2\u533a\u5185\u7684\u4f2aMACH\u7aef\u53e3\u7684\u53d1\u9001\u6743\u9650\u3002\u63a5\u6536\u5230\u5f02\u5e38\u6d88\u606f\uff0c\u5e76\u4f7f\u7528pid_for_task()\u91cd\u5199\u7ba1\u9053\u4ee5\u5c06\u4f2a\u7aef\u53e3\u8f6c\u6362\u4e3a\u5185\u6838\u8bfb\u53d6\u539f\u8bed\u3002\u5b9a\u4f4d\u76f8\u5173\u5185\u6838\u5bf9\u8c61\uff0c\u5c06\u4f2a\u7aef\u53e3\u8f6c\u6362\u4e3a\u4f2a\u5185\u6838\u4efb\u52a1\u7aef\u53e3\u3002\n\u5229\u7528\u7b56\u7565\uff1a\u5bf9\u5185\u6838\u5806\u8fdb\u884c\u6574\u7406\uff0c\u4ee5\u4fbf\u5c06\u9884\u5148\u5206\u914d\u76844096\u5b57\u8282\u7684ipc_kmsg\u7ed3\u6784\u653e\u5728\u51e0\u4e2a\u591a\u8def\u5f84TCP\u5957\u63a5\u5b57\u7684mptses\u7ed3\u6784\u9644\u8fd1\u3002\u8be5\u6f0f\u6d1e\u88ab\u89e6\u53d1\u4e24\u6b21\uff0c\u4ee5\u635f\u574f\u4e24\u4e2aMPTS\u7ed3\u6784\u4e2dmpte_itfinfo\u6307\u9488\u7684\u4f4e2\u4e2a\u5b57\u8282\uff0c\u4ece\u800c\u5173\u95ed\u5957\u63a5\u5b57\u4f1a\u5bfc\u81f4\u4e24\u4e2a\u635f\u574f\u6307\u9488\u7684kfree()\u3002\u6bcf\u4e2a\u6307\u9488\u90fd\u88ab\u635f\u574f\uff0c\u5c060x7a0\u5b57\u8282\u6307\u5411IPC_KMSG\u5206\u914d\uff0c\u4ece\u800c\u521b\u5efa\u4e86\u8de8\u8d8a2\u6761\u6d88\u606f\u76844096\u5b57\u8282\u7684\u6f0f\u6d1e\u3002\u5305\u542b\u90e8\u5206\u91ca\u653e\u7684IPC_KMSG\u7ed3\u6784\u4e4b\u4e00\u7684MACH\u7aef\u53e3(IPC_KMSG\u6807\u5934\u5b8c\u597d\u65e0\u635f\u3002\n..", "note_en": "I recently found myself wishing for a single online reference providing a brief summary of the high-level exploit flow of every public iOS kernel exploit in recent years; since no such document existed, I decided to create it here.\n   This post summarizes original iOS kernel exploits from local app context targeting iOS 10 through iOS 13, focusing on the high-level exploit flow from the initial primitive granted by the vulnerability to kernel read/write. At the end of this post, we will briefly look at iOS kernel exploit mitigations (in both hardware and software) and how they map onto the techniques used in the exploits.\n   This isn&#39;t your typical P0 blog post: There is no gripping zero-day exploitation, or novel exploitation research, or thrilling malware reverse engineering. The content has been written as a reference since I needed the information and figured that others might find it useful too. You have been forewarned.\n  Unfortunately, there is no authoritative dictionary called &#34;Technical Hacking Terms for Security Researchers&#34;, which makes it difficult to precisely describe some of the high-level concepts I want to convey. To that end, I have decided to ascribe the following terms specific meanings for the context of this post. If any of these definitions are at odds with your understanding of these terms, feel free to suggest improved terminology and I can update this post. :)\n      A few examples of common exploit primitives include:  n -byte linear heap overflow, integer increment at a controlled address, write-what-where, arbitrary memory read/write, PC control, arbitrary function calling, etc.\n   A common exploit primitive specific to iOS kernel exploitation is having a send right to a fake Mach port (struct  ipc_port ) whose fields can be directly read and written from userspace.\n   Exploit strategy : The low-level, vulnerability-specific method used to turn the vulnerability into a useful exploit primitive.\n   For example, this is the exploit strategy used in Ian Beer&#39;s async_wake exploit for iOS 11.1.2:\n   An information leak is used to discover the address of arbitrary Mach ports. A page of ports is allocated and a specific port from that page is selected based on its address. The  IOSurfaceRootUserClient  bug is triggered to deallocate the Mach port, yielding a  receive right to a dangling Mach port at a known (and partially controlled) address .\n   The last part is the generic/vulnerability-independent primitive that I interpret to be the end of the vulnerability-specific exploit strategy.\n   Typically, the aim of the exploit strategy is to produce an exploit primitive which is highly reliable.\n   Exploit technique : A reusable and reasonably generic strategy for turning one exploit primitive into another (usually more useful) exploit primitive.\n   One example of an exploit technique is Return-Oriented Programming (ROP), which turns arbitrary PC control into (nearly) arbitrary code execution by reusing executable code gadgets.\n   An exploit technique specific to iOS kernel exploitation is using a fake Mach port to read 4 bytes of kernel memory by calling  pid_for_task()  (turning a send right to a fake Mach port into an arbitrary kernel memory read primitive).\n   Exploit flow : The high-level, vulnerability-agnostic chain of exploit techniques used to turn the exploit primitive granted by the vulnerability into the final end goal (in this post, kernel read/write from local app context).\n  This section will give a brief overview of iOS kernel exploits from local context targeting iOS 10 through iOS 13. I&#39;ll describe the high-level exploit flow and list the exploit primitives and techniques used to achieve it. While I have tried to track down every original (i.e., developed before exploit code was published) public exploit available either as source code or as a sufficiently complete writeup/presentation, I expect that I may have missed a few. Feel free to reach out and suggest any that I have missed and I can update this post.\n   For each exploit, I have outlined the vulnerability, the exploit strategy (specific to the vulnerability), and the subsequent exploit flow (generic). The boundary between which parts of the exploit are specific to the vulnerability and which parts are generic enough to be considered part of the overall flow is subjective. In each case I&#39;ve highlighted the particular exploitation primitive granted by the vulnerability that I consider sufficiently generic.\n     The vulnerability : CVE-2016-7644 is a race condition in XNU&#39;s  set_dp_control_port()  which leads to a Mach port being over-released.\n   Exploit strategy : Many Mach ports are allocated and references to them are dropped by racing  set_dp_control_port()  (it is possible to determine when the race has been won deterministically). The ports are freed by dropping a stashed reference, leaving the process holding  receive rights to dangling Mach ports  filling a page of memory.\n   Subsequent exploit flow : A zone garbage collection is forced by calling  mach_zone_force_gc()  and the page of dangling ports is reallocated with an out-of-line (OOL) ports array containing pointers to the host port.  mach_port_get_context()  is called on one of the dangling ports to disclose the address of the host port. Using this value, it is possible to guess the page on which the kernel task port lives. The context value of each of the dangling ports is set to the address of each potential  ipc_port  on the page containing the kernel task port, and the OOL ports are received back in userspace to give a send right to the  kernel task port .\n     Discovered in-the-wild by  Cl\u00e9ment Lecigne (  @_clem1 ) of Google&#39;s Threat Analysis Group. Analyzed by Ian Beer and Samuel Gro\u00df (  @5aelo ) of Google Project Zero.\n   The vulnerability : The vulnerability is a linear heap out-of-bounds write of  IOAccelResource  pointers in the IOKit function  AGXAllocationList2::initWithSharedResourceList() .\n   Exploit strategy : The buffer to be overflowed is placed directly before a  recv_msg_elem  struct, such that the out-of-bounds write will overwrite the  uio  pointer with an  IOAccelResource  pointer. The  IOAccelResource  pointer is freed and reallocated with a fake  uio  struct living at the start of an  OSData  data buffer managed by  IOSurface  properties. The  uio  is freed, leaving a  dangling  OSData  data buffer accessible via  IOSurface  properties .\n   Subsequent exploit flow : The dangling  OSData  data buffer slot is reallocated with an  IOSurfaceRootUserClient  instance, and the data contents are read via  IOSurface  properties to give the KASLR slide, the address of the current task, and the address of the dangling data buffer/ IOSurfaceRootUserClient . Then, the data buffer is freed and reallocated with a modified version of the  IOSurfaceRootUserClient , such that calling an external method on the modified user client will return the address of the kernel task read from the kernel&#39;s  __DATA  segment. The data buffer is freed and reallocated again such that calling an external method will execute the  OSSerializer::serialize()  gadget, leading to an arbitrary read-then-write that stores the address of the kernel task port in the current task&#39;s list of special ports. Reading the special port from userspace gives a send right to the  kernel task port .\n        The vulnerability : CVE-2017-2370 is a linear heap buffer overflow reachable from unprivileged contexts in XNU&#39;s  mach_voucher_extract_attr_recipe_trap()  due to an attacker-controlled userspace pointer used as the length in a call to  copyin() .\n   Exploit strategy : The vulnerable Mach trap is called to create a  kalloc  allocation and immediately overflow out of it with controlled data, corrupting the  ikm_size  field of a subsequent  ipc_kmsg  object. This causes the  ipc_kmsg , which is the preallocated message for a Mach port, to believe that it has a larger capacity than it does, overlapping it with the first 240 bytes of the subsequent allocation. By registering the Mach port as the exception port for a userspace thread and then crashing the thread with controlled register state, it is possible to repeatedly and reliably overwrite the overlapping part of the subsequent allocation, and by receiving the exception message it is possible to read those bytes. This gives a  controlled 240-byte out-of-bounds read/write primitive  off the end of the corrupted  ipc_kmsg .\n   Subsequent exploit flow : A second  ipc_kmsg  is placed after the corrupted one and read in order to determine the address of the allocations. Next an  AGXCommandQueue  user client is reallocated in the same slot and the virtual method table is read to determine the KASLR slide. Then the virtual method table is overwritten such that a virtual method call on the  AGXCommandQueue  invokes the  OSSerializer::serialize()  gadget, producing a 2-argument arbitrary  kernel function call primitive . Calling the function  uuid_copy()  gives an arbitrary kernel read/write primitive.\n           Exploit strategy : The vulnerable Mach trap is called to create a  kalloc  allocation and immediately overflow out of it with controlled data, overwriting the contents of an OOL port array and inserting a pointer to a fake Mach port in userspace. Receiving the message containing the OOL ports yields a  send right to the fake Mach port whose contents can be controlled directly .\n   Subsequent exploit flow : The fake Mach port is converted into a clock port and  clock_sleep_trap()  is used to brute force a kernel image pointer. Then the port is converted into a fake task port to read memory via  pid_for_task() . Kernel memory is scanned backwards from the leaked kernel image pointer until the kernel text base is located, breaking KASLR. Finally, a  fake kernel task port  is constructed.\n           The vulnerability : Multiple vulnerabilities in  AppleAVE2  due to external methods sharing  IOSurface  pointers with userspace and trusting  IOSurface  pointers read from userspace.\n   Exploit strategy : An  IOSurface  object is created and an  AppleAVE2  external method is called to leak its address. The vtable of an  IOFence  pointer in the  IOSurface  is leaked using another external method call, breaking KASLR. The  IOSurface  object is freed and reallocated with controlled data using an  IOSurface  property spray. Supplying the leaked pointer to an  AppleAVE2  external method that trusts  IOSurface  pointers supplied from userspace allows hijacking a virtual method call on the fake  IOSurface ; this is treated as a  oneshot hijacked virtual method call with a controlled target object at a known address .\n   Subsequent exploit flow : The hijacked virtual method call is used with the  OSSerializer::serialize()  gadget to call  copyin()  and overwrite 2  sysctl_oid  structs. The sysctls are overwritten such that reading the first sysctl calls  copyin()  to update the function pointer and arguments for the second sysctl and reading the second sysctl uses the  OSSerializer::serialize()  gadget to call the kernel function with 3 arguments. This 3-argument arbitrary  kernel function call primitive  is used to read and write arbitrary memory by calling  copyin() / copyout() .\n   Notes : iOS 10.3 introduced the initial form of  task_conversion_eval() , a weak mitigation that blocks userspace from accessing a right to the real kernel task port. Any exploit after iOS 10.3 needs to build a fake kernel task port instead.\n        The vulnerability : CVE-2017-13861 is a vulnerability in  IOSurfaceRootUserClient::s_set_surface_notify()  that causes an extra reference to be dropped on a Mach port. CVE-2017-13865 is a vulnerability in XNU&#39;s  proc_list_uptrs()  that leaks kernel pointers by failing to fully initialize heap memory before copying out the contents to userspace.\n   Exploit strategy : The information leak is used to discover the address of arbitrary Mach ports. A page of ports is allocated and a specific port from that page is selected based on its address. The port is deallocated using the  IOSurfaceRootUserClient  bug, yielding a  receive right to a dangling Mach port at a known (and partially controlled) address .\n   Subsequent exploit flow : The other ports on that page are freed and a zone garbage collection is forced so that the page is reallocated with the contents of an  ipc_kmsg , giving a fake Mach port with controlled contents at a known address. The reallocation converted the port into a fake task port through which arbitrary kernel memory can be read using  pid_for_task() . (The address to read is updated without reallocating the fake port by using  mach_port_set_context() .) Relevant kernel objects are located using the kernel read primitive and the fake port is reallocated again with a  fake kernel task port .\n   Notes : iOS 11 removed the  mach_zone_force_gc()  function which allowed userspace to prompt the kernel to perform a zone garbage collection, reclaiming all-free virtual pages in the zone map for use by other zones. Exploits for iOS 11 and later needed to develop a technique to force a zone garbage collection. At least three independent techniques have been developed to do so, demonstrated in async_wake, v0rtex, and In-the-wild iOS exploit chain 3.\n           Exploit strategy : Two Mach ports, port A and port B, are allocated as part of a spray. The vulnerability is triggered to drop a reference on port A, and the ports surrounding A are freed, leading to a dangling port pointer. Zone garbage collection is forced by calling  mach_zone_force_gc()  and the page containing port A is reallocated with an OOL ports spray containing a pattern such that port A&#39;s  ip_context  field overlaps a pointer to port B. Calling  mach_port_get_context()  gives the address of port B. The vulnerability is triggered again with port B, leading to a  receive right to a dangling Mach port at a known address .\n   Subsequent exploit flow : After another zone garbage collection, the dangling port B is reallocated with a segmented OOL memory spray such that calling  mach_port_get_context()  can identify which 4 MB segment of the spray reallocated port B. That segment is freed and port B is reallocated with pipe buffers, giving a controlled fake Mach port at a known address. The fake port is converted into a clock port and  clock_sleep_trap()  is used to brute force KASLR. The fake port is next converted into a fake task port and a 4-byte kernel read primitive is established using  pid_for_task() . Finally, the fake port is converted into a  fake kernel task port .\n           Exploit strategy : Mach ports are sprayed and a reference on one port is dropped using the vulnerability. The other ports on the page are freed, leaving a  receive right to a dangling Mach port .\n   Subsequent exploit flow : A zone garbage collection is forced using  mach_zone_force_gc()  and the page containing the dangling port is reallocated with an  OSString  buffer via an  IOSurface  property spray. The  OSString  buffer contains a pattern that initializes critical fields of the port and allows the index of the  OSString  containing the port to be determined by calling  mach_port_get_context()  on the fake port. The  OSString  containing the fake port is freed and reallocated as a normal Mach port.  mach_port_request_notification()  is called to put the address of a real Mach port in the fake port&#39;s  ip_pdrequest  field, and the  OSString &#39;s contents are read via  IOSurface  to get the address.  mach_port_request_notification()  is used again to get the address of the fake port itself.\n   The string buffer is freed and reallocated such that  mach_port_get_attributes()  can be used as a 4-byte arbitrary read primitive, with the target address to read updateable via  mach_port_set_context() . (This is analogous to the  pid_for_task()  technique, but with slightly different constraints.) Starting at the address of the real Mach port, kernel memory is read to find relevant kernel objects. The string buffer is freed and reallocated again with a fake task port sufficient to remap the string buffer into the process&#39;s address space. The fake port is updated via the mapping to yield a 7-argument arbitrary  kernel function call primitive  using  iokit_user_client_trap() , and kernel functions are called to generate a  fake kernel task port .\n        The vulnerability : CVE-2018-4150 is a race condition in XNU&#39;s BPF subsystem which leads to a linear heap buffer overflow due to a buffer length being increased without reallocating the corresponding buffer.\n   Exploit strategy : The race is triggered to incorrectly increase the length of the buffer without reallocating the buffer itself. A packet is sent and stored in the buffer, overflowing into a subsequent OOL ports array and inserting a pointer to a fake Mach port in userspace. Receiving the message containing the OOL ports yields a  send right to the fake Mach port whose contents can be controlled directly .\n   Subsequent exploit flow : The fake Mach port is converted into a clock port and  clock_sleep_trap()  is used to brute force a kernel image pointer. Then the port is converted into a fake task port to read memory via  pid_for_task() . Kernel memory is scanned backwards from the leaked kernel image pointer until the kernel text base is located, breaking KASLR. The final part of the exploit is incomplete, but construction of a  fake kernel task port  at this stage would be straightforward and deterministic using existing code.\n           The vulnerability : CVE-2018-4241 is an intra-object linear heap buffer overflow in XNU&#39;s  mptcp_usr_connectx()  due to incorrect bounds checking.\n   Exploit strategy : The kernel heap is groomed to place a 2048-byte  ipc_kmsg  struct at a 16 MB aligned address below the  mptses  structs (the object containing the overflow) associated with a few multipath TCP sockets. The vulnerability is used to overwrite the lower 3 bytes of the  mpte_itfinfo  pointer in the  mptses  struct with zeros and the socket is closed. This triggers a  kfree()  of the corrupted pointer, freeing the  ipc_kmsg  struct at the 16 MB alignment boundary. The freed  ipc_kmsg  slot is reallocated with sprayed pipe buffers. The vulnerability is triggered again to overwrite the lower 3 bytes of the  mpte_itfinfo  pointer in another  mptses  struct with zeros and the socket is closed, causing another  kfree()  of the same address. This frees the pipe buffer that was just allocated into that slot, leaving a  dangling pipe buffer .\n   Subsequent exploit flow : The slot is reallocated again with a preallocated  ipc_kmsg . A userspace thread is crashed to cause a message to be stored in the preallocated  ipc_kmsg  buffer overlapping the pipe buffer; reading the pipe in userspace yields the contents of the  ipc_kmsg  struct, giving the address of the dangling pipe buffer/ ipc_kmsg . The pipe is written to change the contents of the  ipc_kmsg  struct such that receiving the message yields a send right to a fake Mach port inside the pipe buffer. The exception message is received and the pipe is rewritten to convert the fake port into a kernel read primitive using  pid_for_task() . Relevant kernel objects are located and the fake port is converted into a  fake kernel task port .\n           Exploit strategy : The kernel heap is groomed to place preallocated 4096-byte  ipc_kmsg  structs near the  mptses  structs for a few multipath TCP sockets. The vulnerability is triggered twice to corrupt the lower 2 bytes of the  mpte_itfinfo  pointer in two  mptses  structs, such that closing the sockets results in  kfree() s of the two corrupted pointers. Each pointer is corrupted to point  0x7a0  bytes into an  ipc_kmsg  allocation, creating 4096-byte holes spanning 2 messages. A Mach port containing one of the partially-freed  ipc_kmsg  structs (with the  ipc_kmsg  header intact\n......", "posttime": "2020-06-12 17:24:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "ios,\u6f0f\u6d1e,\u5185\u6838,\u7aef\u53e3", "title": "\u6700\u8fd1\u7684iOS\u5185\u6838\u6f0f\u6d1e\u8c03\u67e5", "title_en": "A survey of recent iOS kernel exploits", "transed": 1, "url": "https://googleprojectzero.blogspot.com/2020/06/a-survey-of-recent-ios-kernel-exploits.html", "via": "", "real_tags": ["ios", "\u6f0f\u6d1e", "\u5185\u6838", "\u7aef\u53e3"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006270, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u73b0\u5b9e\u57fa\u51c6\u4e0b\uff0c\u5f02\u6b65Python\u6bd4\u540c\u6b65Python\u6162\u3002\u66f4\u4ee4\u4eba\u62c5\u5fe7\u7684\u662f\uff0c\u5f02\u6b65\u6846\u67b6\u5728\u8d1f\u8f7d\u4e0b\u4f1a\u6709\u70b9\u4e0d\u7a33\u5b9a\u3002\n\u5927\u591a\u6570\u4eba\u90fd\u77e5\u9053\u5f02\u6b65Python\u5177\u6709\u66f4\u9ad8\u7ea7\u522b\u7684\u5e76\u53d1\u6027\u3002\u5bf9\u4e8e\u50cf\u670d\u52a1\u52a8\u6001\u7f51\u7ad9\u6216WebAPI\u8fd9\u6837\u7684\u5e38\u89c1\u4efb\u52a1\u6765\u8bf4\uff0c\u8fd9\u610f\u5473\u7740\u66f4\u9ad8\u7684\u6027\u80fd\uff0c\u8fd9\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u6709\u610f\u4e49\u7684\u3002\n\u5728\u73b0\u5b9e\u6761\u4ef6\u4e0b(\u89c1\u4e0b\u6587)\uff0c\u5f02\u6b65Web\u6846\u67b6\u7684\u541e\u5410\u91cf(\u8bf7\u6c42\u6570/\u79d2)\u7565\u5dee\uff0c\u5ef6\u8fdf\u5dee\u5f02\u5927\u5f97\u591a\u3002\n\u7b2c50\u548c\u7b2c99\u4e2a\u767e\u5206\u4f4d\u54cd\u5e94\u65f6\u95f4\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff0c\u541e\u5410\u91cf\u4ee5\u6bcf\u79d2\u8bf7\u6c42\u6570\u4e3a\u5355\u4f4d\u3002\u8be5\u8868\u662f\u6309\u7b2c99\u9875\u6392\u5e8f\u7684\uff0c\u6211\u8ba4\u4e3a\u8fd9\u53ef\u80fd\u662f\u73b0\u5b9e\u4e16\u754c\u4e2d\u6700\u91cd\u8981\u7684\u7edf\u8ba1\u6570\u636e\u3002\n\u6211\u4e5f\u8fd9\u4e48\u60f3\u3002\u6211\u8bd5\u7740\u8ba9\u5b83\u4eec\u5c3d\u53ef\u80fd\u7684\u903c\u771f\u3002\u4ee5\u4e0b\u662f\u6211\u4f7f\u7528\u7684\u67b6\u6784\uff1a\n\u6211\u5df2\u7ecf\u5c3d\u6211\u6240\u80fd\u4e3a\u771f\u5b9e\u4e16\u754c\u7684\u90e8\u7f72\u5efa\u6a21\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u53cd\u5411\u4ee3\u7406\u3001python\u4ee3\u7801(\u5373\uff1a\u53d8\u91cf)\u548c\u4e00\u4e2a\u6570\u636e\u5e93\u3002\u6211\u8fd8\u5305\u62ec\u4e86\u4e00\u4e2a\u5916\u90e8\u6570\u636e\u5e93\u8fde\u63a5\u6c60\uff0c\u56e0\u4e3a\u6211\u8ba4\u4e3a\u8fd9\u662f\u5b9e\u9645\u90e8\u7f72Web\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u4e2a\u975e\u5e38\u5e38\u89c1\u7684\u7279\u6027(\u81f3\u5c11\uff0c\u5b83\u662f\u9488\u5bf9PostgreSQL\u7684)\u3002\n\u6709\u95ee\u9898\u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u968f\u673a\u952e\u67e5\u8be2\u4e00\u884c\uff0c\u5e76\u4ee5JSON\u7684\u5f62\u5f0f\u8fd4\u56de\u503c\u3002\u5b8c\u6574\u7684\u6e90\u4ee3\u7801\u53ef\u4ee5\u5728GitHub\u4e0a\u627e\u5230\u3002\n\u6211\u7528\u6765\u51b3\u5b9a\u6700\u4f73\u5de5\u4f5c\u8fdb\u7a0b\u6570\u7684\u89c4\u5219\u5f88\u7b80\u5355\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u6846\u67b6\uff0c\u6211\u4ece\u4e00\u4e2a\u5de5\u4f5c\u8fdb\u7a0b\u5f00\u59cb\uff0c\u7136\u540e\u8fde\u7eed\u589e\u52a0\u5de5\u4f5c\u8fdb\u7a0b\u8ba1\u6570\uff0c\u76f4\u5230\u6027\u80fd\u53d8\u5dee\u3002\n\u5f02\u6b65\u6846\u67b6\u548c\u540c\u6b65\u6846\u67b6\u7684\u6700\u4f73\u5de5\u4f5c\u8fdb\u7a0b\u6570\u5404\u4e0d\u76f8\u540c\uff0c\u539f\u56e0\u5f88\u7b80\u5355\u3002\u5f02\u6b65\u6846\u67b6\u7531\u4e8e\u5176IO\u5e76\u53d1\u6027\uff0c\u80fd\u591f\u7528\u5355\u4e2a\u5de5\u4f5c\u8fdb\u7a0b\u4f7f\u5355\u4e2aCPU\u9971\u548c\u3002\n\u5bf9\u4e8e\u540c\u6b65\u5de5\u4f5c\u8fdb\u7a0b\u5219\u4e0d\u662f\u8fd9\u6837\uff1a\u5f53\u5b83\u4eec\u6267\u884cIO\u65f6\uff0c\u5b83\u4eec\u5c06\u963b\u585e\uff0c\u76f4\u5230IO\u5b8c\u6210\u3002\u56e0\u6b64\uff0c\u4ed6\u4eec\u9700\u8981\u6709\u8db3\u591f\u7684\u5de5\u4f5c\u4eba\u5458\u6765\u786e\u4fdd\u6240\u6709CPU\u6838\u5fc3\u5728\u8d1f\u8f7d\u65f6\u59cb\u7ec8\u5904\u4e8e\u5145\u5206\u4f7f\u7528\u72b6\u6001\u3002\n\u901a\u5e38\uff0c\u6211\u4eec\u5efa\u8bae(2x$num_cores)+1\u4f5c\u4e3a\u5f00\u59cb\u65f6\u7684\u5de5\u4f5c\u4eba\u5458\u6570\u91cf\u3002\u867d\u7136\u4e0d\u592a\u79d1\u5b66\uff0c\u4f46\u8be5\u516c\u5f0f\u662f\u57fa\u4e8e\u8fd9\u6837\u7684\u5047\u8bbe\uff1a\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5185\u6838\uff0c\u4e00\u4e2a\u5de5\u4f5c\u8005\u5c06\u4ece\u5957\u63a5\u5b57\u4e2d\u8bfb\u53d6\u6216\u5199\u5165\uff0c\u800c\u53e6\u4e00\u4e2a\u5de5\u4f5c\u8005\u5219\u5728\u5904\u7406\u8bf7\u6c42\u3002\n\u6211\u5728Hetzner\u7684CX31\u673a\u5668\u7c7b\u578b\u4e0a\u8fd0\u884c\u4e86\u57fa\u51c6\u6d4b\u8bd5\uff0c\u8be5\u673a\u5668\u57fa\u672c\u4e0a\u662f4/8 GB\u5185\u5b58\u7684vCPU\u673a\u5668\u3002\u5b83\u662f\u5728Ubuntu20.04\u4e0b\u8fd0\u884c\u7684\u3002\u6211\u5728\u53e6\u4e00\u4e2a(\u8f83\u5c0f\u7684)VM\u4e0a\u8fd0\u884c\u4e86\u8d1f\u8f7d\u751f\u6210\u5668\u3002\n\u5173\u4e8e\u541e\u5410\u91cf(\u5373\uff1a\u8bf7\u6c42/\u79d2)\uff0c\u4e3b\u8981\u56e0\u7d20\u4e0d\u662f\u5f02\u6b65\u4e0e\u540c\u6b65\uff0c\u800c\u662f\u6709\u591a\u5c11Python\u4ee3\u7801\u88ab\u672c\u673a\u4ee3\u7801\u66ff\u6362\u3002\u7b80\u5355\u5730\u8bf4\uff0c\u53ef\u4ee5\u66ff\u6362\u7684Python\u4ee3\u7801\u5bf9\u6027\u80fd\u8d8a\u654f\u611f\uff0c\u6548\u679c\u5c31\u8d8a\u597d\u3002\u8fd9\u662f\u4e00\u79cd\u5386\u53f2\u60a0\u4e45\u7684Python\u6027\u80fd\u7b56\u7565(\u53e6\u89c1\uff1aNumpy)\u3002\nMeinhold\u548cUWSGI(\u5206\u522b\u7ea65.3k\u4e2a\u8bf7\u6c42/\u79d2)\u662f\u5927\u91cf\u7684C\u4ee3\u7801\u3002\u6807\u51c6Gunicorn(\u7ea63.4k\u8bf7\u6c42/\u79d2)\u662f\u7eafPython\u3002\nUvicorn+Starlette(\u7ea64.9k\u8bf7\u6c42/\u79d2)\u66ff\u6362\u4e86\u6bd4AIOHTTP&#39\uff1b\u7684\u9ed8\u8ba4\u670d\u52a1\u5668(\u7ea64.5k\u8bf7\u6c42/\u79d2)\u591a\u5f97\u591a\u7684Python\u4ee3\u7801(\u5c3d\u7ba1AIOHTTP\u4e5f\u5b89\u88c5\u4e86\u53ef\u9009\u7684\u52a0\u901f\u529f\u80fd)\u3002\n\u5728\u5ef6\u8fdf\u65b9\u9762\uff0c\u95ee\u9898\u66f4\u4e3a\u4e25\u91cd\u3002\u4e0e\u4f20\u7edf\u7684\u540c\u6b65\u90e8\u7f72\u76f8\u6bd4\uff0c\u5728\u8d1f\u8f7d\u60c5\u51b5\u4e0b\uff0c\u5f02\u6b65\u6027\u80fd\u5f88\u5dee\uff0c\u5ef6\u8fdf\u5f00\u59cb\u6fc0\u589e\u3002\n\u8fd9\u662f\u4e3a\u4ec0\u4e48\uff1f\u5728\u5f02\u6b65Python\u4e2d\uff0c\u591a\u7ebf\u7a0b\u662f\u534f\u4f5c\u7684\uff0c\u8fd9\u4ec5\u4ec5\u610f\u5473\u7740\u7ebf\u7a0b\u4e0d\u4f1a\u88ab\u4e2d\u592e\u8c03\u63a7\u5668(\u5982\u5185\u6838)\u4e2d\u65ad\uff0c\u800c\u662f\u5fc5\u987b\u81ea\u613f\u5c06\u5176\u6267\u884c\u65f6\u95f4\u8ba9\u7ed9\u5176\u4ed6\u8c03\u63a7\u5668\u3002\u5728Asyncio\u4e2d\uff0c\u6839\u636e\u4e09\u4e2a\u8bed\u8a00\u5173\u952e\u5b57\u6267\u884c\uff1aAwait\u3001Async For\u548cAsync With\u3002\n\u8fd9\u610f\u5473\u7740\u6267\u884c\u65f6\u95f4\u4e0d\u662f\u516c\u5e73\u5206\u914d\u7684\uff0c\u5e76\u4e14\u4e00\u4e2a\u7ebf\u7a0b\u5728\u5de5\u4f5c\u65f6\u53ef\u80fd\u4f1a\u4e0d\u7ecf\u610f\u5730\u5360\u7528\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u7684CPU\u65f6\u95f4\u3002\u8fd9\u5c31\u662f\u5ef6\u8fdf\u66f4\u4e0d\u7a33\u5b9a\u7684\u539f\u56e0\u3002\n\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u4f20\u7edf\u7684\u540c\u6b65Python Web\u670d\u52a1\u5668(\u5982UWSGI)\u4f7f\u7528\u5185\u6838\u8c03\u5ea6\u5668\u7684\u62a2\u5360\u5f0f\u591a\u5904\u7406\uff0c\u5b83\u901a\u8fc7\u5b9a\u671f\u4ea4\u6362\u6267\u884c\u4e2d\u7684\u8fdb\u7a0b\u6765\u786e\u4fdd\u516c\u5e73\u6027\u3002\u8fd9\u610f\u5473\u7740\u65f6\u95f4\u5206\u914d\u66f4\u516c\u5e73\uff0c\u5ef6\u8fdf\u5dee\u5f02\u66f4\u5c0f\u3002\n\u5927\u591a\u6570\u5176\u4ed6\u57fa\u51c6\u6d4b\u8bd5(\u7279\u522b\u662f\u6765\u81ea\u5f02\u6b65\u6846\u67b6\u4f5c\u8005\u7684\u57fa\u51c6\u6d4b\u8bd5\uff01)\u3002\u7b80\u5355\u5730\u8bf4\uff0c\u4e0d\u8981\u914d\u7f6e\u5177\u6709\u8db3\u591f\u5de5\u4f5c\u4eba\u5458\u7684\u540c\u6b65\u6846\u67b6\u3002\u8fd9\u610f\u5473\u7740\u6709\u6548\u5730\u963b\u6b62\u4e86\u8fd9\u4e9b\u540c\u6b65\u6846\u67b6\u8bbf\u95ee\u5927\u90e8\u5206\u771f\u6b63\u53ef\u7528\u7684CPU\u65f6\u95f4\u3002\n\u4ee5\u4e0b\u662fVibora\u9879\u76ee\u7684\u793a\u4f8b\u57fa\u51c6\u6d4b\u8bd5\u3002(\u6211\u6ca1\u6709\u6d4b\u8bd5\u8fd9\u4e2a\u6846\u67b6\uff0c\u56e0\u4e3a\u5b83\u662f\u4e0d\u592a\u53d7\u6b22\u8fce\u7684\u6846\u67b6\u4e4b\u4e00\u3002)\u3002\nVibora\u58f0\u79f0\u6bd4Flask\u7684\u541e\u5410\u91cf\u9ad8\u51fa500%\u3002\u7136\u800c\uff0c\u5f53\u6211\u68c0\u67e5\u4ed6\u4eec\u7684\u57fa\u51c6\u4ee3\u7801\u65f6\uff0c\u6211\u53d1\u73b0\u4ed6\u4eec\u9519\u8bef\u5730\u5c06Flask\u914d\u7f6e\u4e3a\u6bcf\u4e2aCPU\u4f7f\u7528\u4e00\u4e2a\u5de5\u4f5c\u8005\u3002\u5f53\u6211\u66f4\u6b63\u5b83\u65f6\uff0c\u6211\u5f97\u5230\u4ee5\u4e0b\u6570\u5b57\uff1a\n\u4f7f\u7528Vibora\u800c\u4e0d\u662fFlask\u7684\u541e\u5410\u91cf\u4f18\u52bf\u5b9e\u9645\u4e0a\u53ea\u670918%\u3002Flask\u662f\u6211\u6d4b\u8bd5\u8fc7\u7684\u541e\u5410\u91cf\u8f83\u4f4e\u7684\u540c\u6b65\u6846\u67b6\u4e4b\u4e00\uff0c\u6240\u4ee5\u6211\u9884\u8ba1\u66f4\u597d\u7684\u540c\u6b65\u8bbe\u7f6e\u4f1a\u6bd4Vibora\u5feb\u5f97\u591a\uff0c\u5c3d\u7ba1\u5b83\u7684\u56fe\u5f62\u770b\u8d77\u6765\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u3002\n\u53e6\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u8bb8\u591a\u57fa\u51c6\u6d4b\u8bd5\u5c06\u5ef6\u8fdf\u7ed3\u679c\u6253\u4e71\u4f18\u5148\u7ea7\uff0c\u800c\u66f4\u770b\u91cd\u541e\u5410\u91cf\u7ed3\u679c(\u4f8b\u5982\uff0cVibora\uff1bs\u751a\u81f3\u6ca1\u6709\u63d0\u5230\u8fd9\u4e00\u70b9)\u3002\u7136\u800c\uff0c\u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0\u673a\u5668\u6765\u63d0\u9ad8\u541e\u5410\u91cf\uff0c\u4f46\u662f\u5f53\u60a8\u8fd9\u6837\u505a\u65f6\uff0c\u8d1f\u8f7d\u4e0b\u7684\u5ef6\u8fdf\u5e76\u4e0d\u4f1a\u53d8\u5f97\u66f4\u597d\u3002\n\u867d\u7136\u6211\u7684\u57fa\u51c6\u6d4b\u8bd5\u5728\u6d89\u53ca\u7684\u65b9\u9762\u76f8\u5f53\u73b0\u5b9e\uff0c\u4f46\u5b83\u4ecd\u7136\u6bd4\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u5de5\u4f5c\u8d1f\u8f7d\u540c\u8d28\u5316\u5f97\u591a-\u6240\u6709\u8bf7\u6c42\u90fd\u6267\u884c\u6570\u636e\u5e93\u67e5\u8be2\uff0c\u5e76\u4e14\u5b83\u4eec\u90fd\u5bf9\u8be5\u67e5\u8be2\u6267\u884c\u76f8\u540c\u7684\u64cd\u4f5c\u3002\u771f\u5b9e\u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u6709\u66f4\u591a\u56fa\u6709\u7684\u53d8\u5316\uff1a\u4f1a\u6709\u4e00\u4e9b\u6162\u7684\u64cd\u4f5c\u3001\u4e00\u4e9b\u5feb\u7684\u64cd\u4f5c\u3001\u4e00\u4e9b\u6267\u884c\u5927\u91cfIO\u7684\u64cd\u4f5c\u548c\u4e00\u4e9b\u4f7f\u7528\u5927\u91cfCPU\u7684\u64cd\u4f5c\u3002\u4f3c\u4e4e\u53ef\u4ee5\u5408\u7406\u5730\u5047\u8bbe(\u6839\u636e\u6211\u7684\u7ecf\u9a8c\uff0c\u8fd9\u662f\u6b63\u786e\u7684)\uff0c\u5728\u5b9e\u9645\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u5ef6\u8fdf\u5dee\u5f02\u5b9e\u9645\u4e0a\u8981\u9ad8\u5f97\u591a\u3002\n\u6211\u7684\u9884\u611f\u662f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5f02\u6b65\u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd\u5c06\u4f1a\u66f4\u6210\u95ee\u9898\u3002\u516c\u5f00\u7684\u8f76\u4e8b\u4e0e\u8fd9\u4e00\u89c2\u70b9\u4e00\u81f4\uff1a\n\u4e39\u00b7\u9ea6\u91d1\u5229(Dan McKinley)\u5199\u9053\uff0c\u4ed6\u5728Etsy\u64cd\u4f5c\u57fa\u4e8eTwisted\u7684\u7cfb\u7edf\u7684\u7ecf\u5386\u3002\u8be5\u7cfb\u7edf\u4f3c\u4e4e\u53d7\u5230\u4e86\u6162\u6027\u5ef6\u8fdf\u53d8\u5316\u5f71\u54cd\uff1a\n[Twisted\u987e\u95ee]\u8bf4\uff0c\u867d\u7136Twisted\u5728\u603b\u4f53\u541e\u5410\u91cf\u65b9\u9762\u5f88\u597d\uff0c\u4f46\u5916\u56f4\u8bf7\u6c42\u53ef\u80fd\u4f1a\u7ecf\u5386\u4e25\u91cd\u7684\u5ef6\u8fdf\u3002\u8fd9\u5bf9[Etsy\u2018s\u7cfb\u7edf]\u6765\u8bf4\u662f\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3aPHP\u524d\u7aef\u4f7f\u7528\u5b83\u7684\u65b9\u5f0f\u662f\u6bcf\u4e2aweb\u8bf7\u6c42\u6570\u767e/\u6570\u5343\u6b21\u3002\nSQLAlChemy\u7684\u4f5c\u8005Mike Bayer\u5728\u51e0\u5e74\u524d\u7f16\u5199\u4e86\u5f02\u6b65Python\u548c\u6570\u636e\u5e93\uff0c\u5176\u4e2d\u4ed6\u4ece\u7565\u5fae\u4e0d\u540c\u7684\u89d2\u5ea6\u770b\u5f85\u5f02\u6b65\u3002\u4ed6\u8fd8\u8fdb\u884c\u4e86\u57fa\u51c6\u6d4b\u8bd5\uff0c\u53d1\u73b0\u5f02\u6b65\u901a\u4fe1\u6548\u7387\u8f83\u4f4e\u3002\n\u96f7\u5207\u5c14\u5728\u6d77\u6e7e\u8fb9\u5199\u4e86\u4e00\u7bc7\u6587\u7ae0\uff0c\u540d\u4e3a\u201c\u6211\u4eec\u5fc5\u987b\u8ba8\u8bba\u4e00\u4e0b\u5de8\u87d2\uff0cGunicorn\uff0cGevent\u7684\u4e8b\u60c5\u201d\uff0c\u5979\u5728\u6587\u4e2d\u63cf\u8ff0\u4e86\u57fa\u4e8eGevent\u7684\u914d\u7f6e\u5f15\u8d77\u7684\u64cd\u4f5c\u6df7\u4e71\u3002\u6211\u5728\u751f\u4ea7\u4e2d\u4e5f\u9047\u5230\u8fc7Gevent\u7684\u9ebb\u70e6(\u867d\u7136\u4e0e\u6027\u80fd\u65e0\u5173)\u3002\n\u6211\u5e94\u8be5\u63d0\u5230\u7684\u53e6\u4e00\u4ef6\u4e8b\u662f\uff0c\u5728\u8bbe\u7f6e\u8fd9\u4e9b\u57fa\u51c6\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u5f02\u6b65\u5b9e\u73b0\u90fd\u4ee5\u4e00\u79cd\u607c\u4eba\u7684\u65b9\u5f0f\u5931\u8d25\u4e86\u3002\nUvicorn\u8ba9\u5b83\u7684\u7236\u8fdb\u7a0b\u7ec8\u6b62\uff0c\u800c\u6ca1\u6709\u7ec8\u6b62\u5b83\u7684\u4efb\u4f55\u5b50\u8fdb\u7a0b\uff0c\u8fd9\u610f\u5473\u7740\u6211\u5fc5\u987b\u8fdb\u884cPID\u641c\u7d22\uff0c\u5bfb\u627e\u4ecd\u5728\u4fdd\u7559\u7aef\u53e38001\u7684\u5b50\u8fdb\u7a0b\u3002AIOHTTP\u4e00\u5ea6\u5f15\u53d1\u4e86\u4e00\u4e2a\u4e0e\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u5173\u7684\u5185\u90e8\u5173\u952e\u9519\u8bef\uff0c\u4f46\u6ca1\u6709\u9000\u51fa(\u56e0\u6b64\u4efb\u4f55\u8fdb\u7a0b\u7ba1\u7406\u7a0b\u5e8f\u90fd\u4e0d\u4f1a\u91cd\u65b0\u542f\u52a8-\u8fd9\u662f\u4e00\u4e2a\u91cd\u5927\u9519\u8bef\uff01)\u3002\u8fbe\u8299\u59ae\u5728\u5f53\u5730\u4e5f\u9047\u5230\u4e86\u9ebb\u70e6\uff0c\u4f46\u6211\u5fd8\u4e86\u5230\u5e95\u662f\u600e\u4e48\u56de\u4e8b\u3002\n\u6240\u6709\u8fd9\u4e9b\u9519\u8bef\u90fd\u662f\u6682\u65f6\u7684\uff0c\u4f7f\u7528SIGKILL\u5f88\u5bb9\u6613\u89e3\u51b3\u3002\u7136\u800c\uff0c\u4e8b\u5b9e\u4ecd\u7136\u662f\uff0c\u6211\u4e0d\u60f3\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u8d1f\u8d23\u57fa\u4e8e\u8fd9\u4e9b\u5e93\u7684\u4ee3\u7801\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u6211\u5bf9Gunicorn\u6216UWSGI\u6ca1\u6709\u4efb\u4f55\u95ee\u9898--\u53ea\u662f\u6211\u771f\u7684\u4e0d\u559c\u6b22UWSGI\u5728\u4f60\u7684\u5e94\u7528\u6ca1\u6709\u6b63\u786e\u52a0\u8f7d\u7684\u60c5\u51b5\u4e0b\u4e0d\u9000\u51fa\u3002\n\u6211\u7684\u5efa\u8bae\uff1a\u51fa\u4e8e\u6027\u80fd\u76ee\u7684\uff0c\u53ea\u4f7f\u7528\u666e\u901a\u7684\u540c\u6b65Python\uff0c\u4f46\u5c3d\u53ef\u80fd\u591a\u5730\u4f7f\u7528\u672c\u673a\u4ee3\u7801\u3002\u5bf9\u4e8eweb\u670d\u52a1\u5668\uff0c\u5982\u679c\u541e\u5410\u91cf\u662f\u6700\u91cd\u8981\u7684\uff0c\u90a3\u4e48\u503c\u5f97\u8003\u8651\u4f7f\u7528Flask\u4ee5\u5916\u7684\u6846\u67b6\uff0c\u4f46\u5373\u4f7f\u662fUWSGI\u4e0b\u7684Flask\u4e5f\u6709\u6700\u597d\u7684\u5ef6\u8fdf\u7279\u6027\u3002\nFlask\u7684\u539f\u4f5c\u8005\u51e0\u6b21\u53d1\u5e16\u8868\u8fbe\u4e86\u4ed6\u5bf9\u5f02\u6b65\u6280\u672f\u7684\u62c5\u5fe7\uff0c\u7b2c\u4e00\u6b21\u53d1\u5e16\u65f6\uff0c\u6211\u4e0d\u7406\u89e3Python\u7684Asyncio\uff0c\u5b83\u5b9e\u9645\u4e0a\u5f88\u597d\u5730\u89e3\u91ca\u4e86\u8fd9\u9879\u6280\u672f\uff0c\u6700\u8fd1\u4ed6\u5728\u5e16\u5b50\u4e2d\u8bf4\uff0c\u6211\u5e76\u6ca1\u6709\u611f\u53d7\u5230\u5f02\u6b65\u7684\u538b\u529b\u3002\u4ed6\u5728\u5e16\u5b50\u4e2d\u8bf4\uff0c\u6211\u4e0d\u7406\u89e3Python\u7684Asyncio\uff0c\u5b83\u5b9e\u9645\u4e0a\u5bf9\u8fd9\u9879\u6280\u672f\u505a\u51fa\u4e86\u76f8\u5f53\u597d\u7684\u89e3\u91ca\u3002\u6700\u8fd1\uff0c\u4ed6\u5728\u6587\u7ae0\u4e2d\u8bf4\uff0c\u6211\u5e76\u6ca1\u6709\u611f\u53d7\u5230\u5f02\u6b65\u7684\u538b\u529b\u3002\u4ed6\u5728\u5e16\u5b50\u4e2d\u8bf4\uff0c\u6211\u4e0d\u7406\u89e3Python\u7684Asyncio\uff0c\u5b83\u5b9e\u9645\u4e0a\u5bf9\u8fd9\u9879\u6280\u672f\u505a\u51fa\u4e86\u76f8\u5f53\u597d\u7684\u89e3\u91ca\u3002\n\u4f60\u7684\u529f\u80fd\u662f\u4ec0\u4e48\u989c\u8272\u7684\uff1f\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u540c\u65f6\u4f7f\u7528\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8bed\u8a00\u4f1a\u66f4\u75db\u82e6\u7684\u4e00\u4e9b\u539f\u56e0\u3002\n\u51fd\u6570\u7740\u8272\u662fPython\u4e2d\u7684\u4e00\u4e2a\u5927\u95ee\u9898\uff0c\u4ee4\u4eba\u9057\u61be\u7684\u662f\uff0c\u793e\u533a\u73b0\u5728\u5206\u6210\u4e86\u7f16\u5199\u540c\u6b65\u4ee3\u7801\u7684\u4eba\u548c\u7f16\u5199\u5f02\u6b65\u4ee3\u7801\u7684\u4eba-\u4ed6\u4eec\u4e0d\u80fd\u5171\u4eab\u76f8\u540c\u7684\u5e93\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u4e00\u4e9b\u5f02\u6b65\u5e93\u4e5f\u4e0e\u5176\u4ed6\u5f02\u6b65\u5e93\u4e0d\u517c\u5bb9\uff0c\u56e0\u6b64\u5f02\u6b65Python\u793e\u533a\u751a\u81f3\u8fdb\u4e00\u6b65\u5206\u88c2\u3002\nChris Wellons\u6700\u8fd1\u5199\u4e86\u4e00\u7bc7\u6587\u7ae0\uff0c\u4e5f\u8c08\u5230\u4e86\u5ef6\u8fdf\u95ee\u9898\u548casyncio\u6807\u51c6\u5e93\u4e2d\u7684\u4e00\u4e9b\u95ee\u9898\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u7c7b\u95ee\u9898\u4f7f\u5f97\u5f02\u6b65\u7a0b\u5e8f\u66f4\u96be\u6b63\u786e\u8fd0\u884c\u3002\n\u7eb3\u6492\u5c3c\u5c14\u00b7J\u00b7\u53f2\u5bc6\u65af(Nathaniel J.Smith)\u6709\u4e00\u7cfb\u5217\u5173\u4e8e\u5f02\u6b65\u901a\u4fe1\u7684\u91cd\u8981\u6587\u7ae0\uff0c\u6211\u63a8\u8350\u7ed9\u4efb\u4f55\u60f3\u8981\u638c\u63e1\u5b83\u7684\u4eba\uff1a\n\u4ed6\u4e89\u8fa9\u8bf4\u5f02\u6b65\u56fe\u4e66\u9986\u7684\u60f3\u6cd5\u662f\u9519\u8bef\u7684\u3002\u6211\u62c5\u5fc3\u7684\u662f\uff0c\u5982\u679c\u5c31PEP\u8fdb\u884c\u8fa9\u8bba\u7684\u5927\u8111\u888b\u9f20\u90fd\u505a\u4e0d\u5bf9\uff0c\u90a3\u4e48\u50cf\u6211\u8fd9\u6837\u7684\u51e1\u4eba\u8fd8\u6709\u4ec0\u4e48\u5e0c\u671b\u5462\uff1f", "note_en": "Async Python is slower than &#34;sync&#34; Python under a realistic benchmark. A bigger worry is that async frameworks go a bit wobbly under load.\n    Most people understand that async Python has a higher level of concurrency. It would make some sense for that to imply higher performance for common tasks like serving dynamic web sites or web APIs.\n    Under realistic conditions (see below) asynchronous web frameworks are slightly worse throughput (requests/second) and much worse latency variance.\n        50th and 99th percentile response times are in milliseconds, throughput is in requests per second. The table is ordered by P99, which I think is perhaps the most important real world statistic.\n        I think so. I tried to make them as realistic as possible. Here&#39;s the architecture I used:\n    I&#39;ve tried to model a real world deployment as best I can. There is a reverse proxy, the python code (ie: the variable), and a database. I&#39;ve also included an external database connection pooler as I think that is a pretty common feature of real deployments of web applications (at least, it is for postgresql).\n  The application in question queries a row by random key and returns the value as JSON.  Full source code is available on github.\n    The rule I used for deciding on what the optimal number of worker processes was is simple: for each framework I started at a single worker and increased the worker count successively until performance got worse.\n  The optimal number of workers varies between async and sync frameworks and the reasons are straightforward. Async frameworks, due to their IO concurrency, are able to saturate a single CPU with a single worker process.\n  The same is not true of sync workers: when they do IO they will block until the IO is finished. Consequently they need to have enough workers to ensure that all CPU cores are always in full use when under load.\n    Generally we recommend (2 x $num_cores) + 1 as the number of workers to start off with. While not overly scientific, the formula is based on the assumption that for a given core, one worker will be reading or writing from the socket while the other worker is processing a request.\n    I ran the benchmark on Hetzner&#39;s CX31 machine type, which is basically a 4 &#34;vCPU&#34;/8 GB RAM machine. It was run under Ubuntu 20.04. I ran the load generator on another (smaller) VM.\n      On   throughput (ie: requests/second) the primary factor is not async vs sync but how much Python code has been replaced with native code. Simply put, the more performance sensitive Python code you can replace the better you will do. This is Python performance tactic with a long history (see also: numpy).\n  Meinheld and UWSGI (~5.3k requests/sec each) are large bodies of C code. Standard Gunicorn (~3.4k requests/sec) is pure Python.\n  Uvicorn+Starlette (~4.9k requests/sec) replaces much more Python code than AIOHTTP&#39;s default server (~4.5k requests/sec) (though AIOHTTP was also installed with its optional &#34;speedups&#34;).\n    On   latency the problem is deeper. Under load, async does badly and latency starts to spike out to a much greater extent than under a traditional, sync, deployment.\n  Why is this? In async Python, the multi-threading is  co-operative, which simply means that threads are not interrupted by a central governor (such as the kernel) but instead have to voluntarily yield their execution time to others. In asyncio, the execution is yielded upon three language keywords:  await,  async for and  async with.\n  This means that execution time is not distributed &#34;fairly&#34; and one thread can inadvertently starve another of CPU time while it is working. This is why latency is more erratic.\n  In contrast, traditional sync Python webservers like UWSGI use the  pre-emptive multi-processing of the kernel scheduler, which works to ensure fairness by periodically swapping processes out from execution. This means that time is divided more fairly and that latency variance is lower.\n    The majority of other benchmarks (particularly those from async framework authors!) simply do not configure sync frameworks with enough workers. This means that those sync frameworks are effectively prevented from accessing most of the CPU time that is really available.\n  Here is a sample benchmark from the Vibora project. (I didn&#39;t test this framework because it&#39;s one of the less popular ones.)\n    Vibora claims 500% higher throughput than Flask. However when I reviewed their benchmark code I found that they are misconfiguring Flask to use one worker per CPU. When I correct that, I get the following numbers:\n    The throughput benefit of using Vibora over Flask is really  just 18%. Flask is one of the lower throughput sync frameworks I tested so I expect that a better sync setup would be much faster than Vibora, despite the impressive looking graph.\n  Another problem is that many benchmarks de-prioritise latency results in favour of throughput results (Vibora&#39;s doesn&#39;t even mention it for example). However, while throughput can be improved by adding machines, latency under load doesn&#39;t get better when you do that.\n      Although my benchmark is fairly realistic in terms of the things involved it&#39;s still much more homogenous than a real life workload - all requests do a database query and they all do the same thing with that query. Real applications typically have much more inherent variation: there will be some slow operations, some fast ones, some that do lots of IO and some that use lots of CPU. It seems reasonable to assume (and it&#39;s true in my experience) that latency variance is actually much higher in a real application.\n  My hunch is that async applications&#39; performance will be even more problematic in this case. Publicly available anecdotes are consistent with this idea:\n  Dan McKinley wrote about his experiences operating a Twisted-based system at Etsy. It seems that that system suffered from chronic latency variance:\n  [The Twisted consultants] said that although Twisted was good at overall throughput, outlying requests could experience severe latency. Which was a problem for [Etsy&#39;s system], because the way the PHP frontend used it was hundreds/thousands of times per web request.\n  Mike Bayer, the SQLAlchemy author, wrote  Asynchronous Python and Databases several years ago in which he considers async from a slightly different perspective. He also benchmarks, and finds asyncio less efficient.\n  &#34;Rachel by the Bay&#34; wrote an article called  &#34;We have to talk about this Python, Gunicorn, Gevent thing&#34; in which she describes operations chaos arising from a gevent-based configuration. I&#39;ve also had troubles (though not performance-related) with gevent in production.\n  The other thing I should mention is that in the course of setting up these benchmarks  every single async implementation managed to fall over in an annoying way.\n  Uvicorn had its parent process terminate without terminating any of its children which meant that I then had to go pid hunting for the children who were still holding onto port 8001. At one point AIOHTTP raised an internal critical error to do with file descriptors but did not exit (and so would not be restarted by any process supervisor -  a cardinal sin!). Daphne also ran into trouble locally but I forget exactly how.\n  All of these errors were transient and easily resolved with SIGKILL. However the fact remains that I wouldn&#39;t want to be responsible for code based on these libraries in a production context. By contrast I didn&#39;t have any problems with Gunicorn or UWSGI - except that I really dislike that UWSGI doesn&#39;t exit if your app hasn&#39;t loaded correctly.\n    My recommendation: for performance purposes, just use normal, synchronous Python but use native code for as much as possible. For webservers, it&#39;s worth considering frameworks other than Flask if throughput is paramount but even Flask under UWSGI has latency characteristics as good as the best.\n      Flask&#39;s original author has posted a couple of times about his concerns regarding asyncio, first posting  &#34;I don&#39;t understand Python&#39;s Asyncio&#34; which actually gives a pretty good explanation of the technology and recently with  &#34;I&#39;m not feeling the async pressure&#34; in which he says:\n    What color is your function? explains some of the reasons why it is more painful to have a language with sync and async at the same time.\n  Function colouring is a big problem in Python and the community is now sadly bifurcated into people writing sync code and people writing async code - they can&#39;t share the same libraries. Worse yet, some async libraries are also incompatible with other async libraries so the async Python community is even further divided.\n  Chris Wellons wrote  an article recently which also touches on latency issues and some footguns in the asyncio standard library. This is the kind of problem that makes async programs much harder to get right unfortunately.\n  Nathaniel J. Smith has a series of brill articles on async that I recommend to anyone trying to get to grips with it:\n    He contends that the asyncio library is misconceived. My worry is that if the big brains who debate PEPs can&#39;t get it right, what hope is there for mere mortals like myself?", "posttime": "2020-06-12 17:23:37", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python", "title": "\u5f02\u6b65Python\u7684\u901f\u5ea6\u5e76\u4e0d\u5feb", "title_en": "Async Python is not faster", "transed": 1, "url": "http://calpaterson.com/async-python-is-not-faster.html", "via": "", "real_tags": ["python"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006269, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "18\u540d\u7403\u5458(221)\u53c2\u52a0\u590f\u5b63\u66f4\u65b0\u6bd4\u8d5b(5)\u53c2\u52a0\u5927\u5802\u6e38\u620f\u8bad\u7ec3(3)\u4f7f\u7528\u4e13\u4e1a\u670d\u52a1\u5668\u548c\u79c1\u4eba\u670d\u52a1\u5668(92)\uff1b\u7ecf\u5178\u6bd4\u8d5b(887)\u6761\u4ef6\u4e3a\u96f6\uff1b(20)CSS\uff1b(22)\u51b3\u6597\uff1b(4)\u6b7b\u4ea1\u6bd4\u8d5b\uff1b(21)\u67aa\u652f\u6e38\u620f\uff1b(105)Hide&#39\uff1bn&#39\uff1b\u5bfb\u6c42(1)\u8089\u98df(41)\u6b7b\u4ea1\u5954\u8dd1(31)AWP(37)\u6211\u7684\u4e16\u754c(13)S.T.A.L.K.E.R.\u4e4c\u514b\u5170(4)\u661f\u7403\u5927\u621835hp(9)\u51ac\u5b63\u66f4\u65b0(60)\u624b\u69b4\u5f39\u51b2\u6d6a(60)Bender&#39\uff1b\u7f8e\u56fd(2)\u8001\u9f20(8)AIM(13)\u4fc4\u7f57\u65af(5)\u8d35\u5bbe(2)16\u4eba(326)\u75af\u72c2\u6e38\u620f\u8bed\u97f3\u804a\u5929(122)", "note_en": "18 Players\u00a0 (221)\u00a0 \u00a0       Summer Update\u00a0 (5)\u00a0 \u00a0       Lobby\u00a0 \u00a0       Training\u00a0 (3)\u00a0 \u00a0       Pro Servers\u00a0 \u00a0       Private Servers\u00a0 (92)\u00a0 \u00a0       Classic\u00a0 (887)       Condition Zero\u00a0 (20)       CSS\u00a0 (22)       Duel\u00a0 (4)       Deathmatch\u00a0 (21)       Gun Game\u00a0 (105)       Hide&#39;n&#39;Seek\u00a0 (1)       Meat\u00a0 (41)       Death Run\u00a0 (31)       AWP\u00a0 (37)       Minecraft\u00a0 (13)       S.T.A.L.K.E.R.       Ukraine\u00a0 (4)       Star Wars       35hp\u00a0 (9)       Winter Update\u00a0 (60)       Grenades       Surfing\u00a0 (60)       Bender&#39;s\u00a0 (2)       Rats\u00a0 (8)       AIM\u00a0 (13)       Russia\u00a0 (5)       VIP\u00a0 (2)       16 Players\u00a0 (326)       Crazy Game       Voice Chat\u00a0 (122)", "posttime": "2020-06-12 17:06:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6e38\u620f,\u53cd\u6050,counter", "title": "\u5728\u6d4f\u89c8\u5668\u4e2d\u73a9\u53cd\u60501.6\u6e38\u620f", "title_en": "Play Counter-Strike 1.6 in your browser", "transed": 1, "url": "http://cs-online.club", "via": "", "real_tags": ["\u6e38\u620f", "\u53cd\u6050", "counter"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006268, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Kronecker\u79ef\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u7535\u8def\u4e2d\uff0c\u7279\u522b\u662f\u90a3\u4e9b\u5177\u6709\u5e76\u884c\u903b\u8f91\u95e8\u7684\u7535\u8def\u4e2d\uff0c\u7528\u6765\u64cd\u4f5c\u6bd4\u7279\u3002\n\u5728\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u6211\u60f3\u8ba8\u8bba\u7535\u8def\u4e2d\u7684Kronecker\u79ef\u7684\u6570\u5b66\u3002\n\u8bbe$A\\in\\mathbb{C}^{m\\Times n}$\u3001$B\\in\\mathbb{C}^{r\\Times s}$\u3001$C\\in\\mathbb{C}^{n\\Times p}$\u548c$D\\in\\mathbb{C}^{s\\Times t}$\uff0c\u5219\u3002\n\u903b\u8f91\u95e8\u53ef\u4ee5\u81ea\u7136\u5730\u7531\u77e9\u9635\u8868\u793a\u3002\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4efb\u4f55\u4e00\u4f4d\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u5c06\u5176\u8868\u793a\u4e3a\u957f\u5ea6\u4e3a$2^1=2$\u7684\u552f\u4e00\u5355\u70ed\u72b6\u6001\u5411\u91cf\u3002\u66f4\u5177\u4f53\u5730\u8bf4\uff0c0\u662f$|0\\rangle=[1\uff0c0]^{\\top}$\uff0c1\u662f$|1\\rangle=[0\uff0c1]^{\\top}$\u3002\u7ed9\u5b9a\u4efb\u610f\u4e24\u4f4d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u8868\u793a\u4e3a\u957f\u5ea6\u4e3a$2^2=4$\u7684\u552f\u4e00\u5355\u70ed\u70b9\u72b6\u6001\u5411\u91cf\u3002\u66f4\u5177\u4f53\u5730\u8bf4\uff0c00\u662f$|00\\rangle=[1\uff0c0\uff0c0\uff0c0]^{\\top}$\uff0c01\u662f$|01\\rangle=[0\uff0c1\uff0c0\uff0c0]^{\\top}$\uff0c10\u662f$|10\\rangle=[0\uff0c0\uff0c1\uff0c0]^{\\top}$\uff0c11\u662f$|11\\rangle=[0\uff0c0\uff0c0\uff0c1]^{\\top}$\u3002\u4ee5\u6b64\u7c7b\u63a8\u3002\n\u4f20\u7edf\u7684AND\u95e8\u53d6\u4e24\u4f4d\u5e76\u751f\u6210\u4e00\u4f4d\u3002\u5b83\u7684\u77e9\u9635\u8868\u793a$\\text{and}\\in\\mathbb{C}^{2^1\\x 2^2}$\u63a5\u53d7\u957f\u5ea6\u4e3a4\u7684\u72b6\u6001\u5411\u91cf\u5e76\u751f\u6210\u957f\u5ea6\u4e3a2\u7684\u72b6\u6001\u5411\u91cf\uff0c\u5176\u77e9\u9635\u8868\u793a$\\text{and}\\in\\mathbb{C}^{2^1\\x 2^2}$\u3002\nAND GATE\u7684\u671f\u671b\u503c\u662f00-&gt\uff1band-&gt\uff1b0\uff0c01-&gt\uff1band-&gt\uff1b0\uff0c10-&gt\uff1band-&gt\uff1b0\uff0c11-&gt\uff1band-&gt\uff1b1\u3002\u8ba9\u6211\u4eec\u4f7f\u7528\u77e9\u9635\u4e58\u6cd5\u68c0\u67e5\u5176\u4e2d\u4e00\u4e2a\uff0c\u6bd4\u598201-&gt\uff1band-&gt\uff1b0\u3002\n\u95e8\u8f93\u5165\u4e3a$|01\\rangle=[0\uff0c1\uff0c0\uff0c0]^{\\top}$(10)\uff0c\u95e8\u8f93\u51fa\u4e3a$|0\\rangle=[1\uff0c0]^{\\top}$(0)\uff0c\u7b26\u5408\u6211\u4eec\u7684\u9884\u671f\u3002\n\u5982\u679c\u6211\u4eec\u6709\u591a\u4e2a\u4f4d\u7684\u8f93\u5165\uff0c\u6211\u4eec\u5e0c\u671b\u53d6\u903b\u8f91\u95e81\u7684\u524d\u51e0\u4e2a\u8fde\u7eed\u4f4d\uff0c\u903b\u8f91\u95e82\u7684\u7b2c\u4e8c\u4e2a\u8fde\u7eed\u4f4d\uff0c\u4f9d\u6b64\u7c7b\u63a8\uff0c\u6211\u4eec\u6536\u96c6\u6240\u6709\u8f93\u51fa\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa\u3002\u903b\u8f91\u95e81\u30012\u7b49\u662f\u5e76\u884c\u903b\u8f91\u95e8\u3002\n\u4f8b\u5982\uff0c\u6211\u4eec\u6709\u4e09\u4f4d010\u3002\u6211\u4eec\u60f3\u5c06\u524d\u4e24\u4e2a\u6bd4\u727901\u4f5c\u4e3aAND\uff0c\u7b2c\u4e09\u4e2a\u6bd4\u7279\u4f5c\u4e3aNOT\u3002\u9884\u671f\u8f93\u51fa\u5c06\u4e3a01\uff0c\u56e0\u4e3a01-&gt\uff1b\u548c-&gt\uff1b0\u548c0-&gt\uff1b\u4e0d\u662f-&gt\uff1b1\u3002\n\u4e09\u4e2a\u6bd4\u7279010\u4e5f\u53ef\u4ee5\u7531\u957f\u5ea6\u4e3a$2^3=8$\u7684\u72b6\u6001\u5411\u91cf\u8868\u793a\u3002\u901a\u5e38\uff0c\u6211\u4eec\u9700\u8981\u5c06010\u8f6c\u6362\u4e3auint\uff0c\u53732\uff0c\u7136\u540e\u6211\u4eec\u77e5\u9053\u72b6\u6001\u5411\u91cf\u662f$|010\\rangle=[0\uff0c0\uff0c1\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0\uff0c0]^{\\top}$\u3002\u7136\u800c\uff0c\u7531\u4e8e01\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u79cd\u7cfb\u7edf\u72b6\u6001\uff0c\u800c0\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u53e6\u4e00\u79cd\u7cfb\u7edf\u72b6\u6001\uff0c\u56e0\u6b64010\u5c06\u662f\u7cfb\u7edf\u72b6\u600101\u548c\u7cfb\u7edf\u72b6\u60010\u7684\u5408\u5e76\u7684\u7cfb\u7edf\u72b6\u6001\u3002\u5728\u6570\u5b66\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u77e5\u905301\u548c0\u7684\u72b6\u6001\u5411\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Kronecker\u79ef\u8ba1\u7b97\u5408\u5e76\u540e\u7684\u7cfb\u7edf\u72b6\u6001010\u3002\n\u5176\u4e2d$\\oTimes$\u662fKronecker\u4ea7\u54c1\u3002\u4eba\u4eec\u975e\u6b63\u5f0f\u5730\u79f0Kronecker\u79ef\u548c\u5f20\u91cf\u79ef\u4e92\u6362\u3002\u6839\u636e\u8f93\u51fa\u4ea7\u54c1\u8ba1\u7b97\u51fa\u7684010\u7684\u72b6\u6001\u5411\u91cf\u7b26\u5408\u6211\u4eec\u7684\u9884\u671f\u3002\n\u6211\u4eec\u5c06\u524d\u4e24\u4f4d01\u5e94\u7528\u4e8e\uff0c\u6b63\u5982\u6211\u4eec\u5728\u4e0a\u9762\u8ba1\u7b97\u7684\u90a3\u6837\uff0c\u6211\u4eec\u6709\u3002\n\u7531\u4e8e\u6211\u4eec\u8bbe\u7f6e\u7535\u8def\u7684\u65b9\u5f0f\uff0cAND\u548cNOT\u662f\u5e76\u884c\u7684\u903b\u8f91\u95e8\uff0c\u56e0\u6b64\u5fc5\u987b\u5c06\u8f93\u51fa\u72b6\u6001\u5411\u91cf\u5408\u5e76\u4e3a\u4e00\u4e2a\u72b6\u6001\u5411\u91cf\u3002\n\u6211\u4eec\u78b0\u5de7\u53d1\u73b0\u6211\u4eec\u53ef\u4ee5\u5e94\u7528\u6211\u4eec\u5728\u524d\u63d0\u6761\u4ef6\u4e2d\u63d0\u5230\u7684Kronecker\u79ef\u6df7\u5408\u4e58\u79ef\u6027\u8d28\u3002\n\u8fd9\u610f\u5473\u7740\uff0c\u4e3a\u4e86\u8ba1\u7b97\u8fd9\u79cd\u5e76\u884c\u903b\u8f91\u95e8\u7684\u8f93\u51fa\uff0c\u6211\u4eec\u4e0d\u5fc5\u5206\u522b\u8ba1\u7b97\u6bcf\u4e2a\u5355\u4e2a\u903b\u8f91\u95e8\u7684\u8f93\u51fa\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u8f93\u51fa\u6536\u96c6\u5728\u4e00\u8d77\u3002\u7ed9\u5b9a\u5b8c\u6574\u7684\u8f93\u5165\u72b6\u6001\u5411\u91cf$|010\\Rangle$\uff0c\u6211\u4eec\u53ef\u4ee5\u5e94\u7528AND\u548cNOT\u7684\u5408\u5e76\u8fd0\u7b97\u7b26\uff0c\u7ed3\u679c\u662f$\\text{and}\\oTimes\\text{not}$\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528\u4e00\u6b21\u77e9\u9635\u4e58\u6cd5\u76f4\u63a5\u8ba1\u7b97\u8f93\u51fa\u3002\n\u4efb\u4f55\u4e24\u4e2a\u5e76\u884c\u903b\u8f91\u95e8\u53ef\u4ee5\u4f7f\u7528\u5355\u4e2a\u903b\u8f91\u95e8\u6765\u63cf\u8ff0\uff0c\u8be5\u5355\u4e2a\u903b\u8f91\u95e8\u662f\u8fd9\u4e24\u4e2a\u903b\u8f91\u95e8\u7684Kronecker\u79ef\u3002\n\u901a\u5e38\uff0c\u5982\u679c\u6211\u4eec\u5177\u6709\u7531\u4e24\u4e2a\u5e76\u884c\u903b\u8f91\u95e8($X$\u548c$Y$)\u3001\u8f93\u5165\u72b6\u6001\u5411\u91cf$|a\\Rangle$\u5230$X$\u3001\u8f93\u5165\u72b6\u6001\u5411\u91cf$|b\\Rangle$\u5230$Y$\u3001\u6765\u81ea$X$\u7684\u8f93\u51fa\u72b6\u6001\u5411\u91cf$|c\\Rangle$\u3001\u6765\u81ea$Y$\u7684\u8f93\u51fa\u72b6\u6001\u5411\u91cf$|d\\Rangle$\u3001\u5408\u5e76\u7684\u8f93\u5165\u72b6\u6001\u5411\u91cf$|ab\\Rangle$\u6216$|ba\\Rangle$\u3001\u4ee5\u53ca\u5408\u5e76\u7684\u8f93\u51fa\u72b6\u6001\u5411\u91cf$|cd\\Rangle$\u7ec4\u6210\u7684\u7535\u8def\u3002\n\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4ef6\u6709\u8da3\u7684\u4e8b\u60c5\u662f$X\\oTimes Y\\cong Y\\oTimes X$\u548c$Y\\oTimes X=P(X\\oTimes Y)Q$\uff0c\u5176\u4e2d$P$\u548c$Q$\u5206\u522b\u662f\u884c\u7f6e\u6362\u77e9\u9635\u548c\u5217\u7f6e\u6362\u77e9\u9635\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u6709$|ba\\rangle=W|ab\\rangle$\u548c$|dc\\rangle=V|cd\\rangle$\uff0c\u5176\u4e2d$W$\u548c$V$\u662f\u884c\u7f6e\u6362\u77e9\u9635\u3002\n\u4f3c\u4e4e$V^{-1}P=I$\u548c$Q W=I$\u3002\u4f46\u662f\u6211\u8fd8\u6ca1\u6709\u60f3\u51fa\u4e00\u4e2a\u6b63\u5f0f\u7684\u8bc1\u636e\u6765\u8bc1\u660e\u8fd9\u4e00\u70b9\u3002\n\u5728\u8fd9\u91cc\uff0c\u6211\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684Python\u811a\u672c\u6765\u6a21\u62df\u548c\u9a8c\u8bc1\u6211\u4e0a\u9762\u63cf\u8ff0\u7684\u5e76\u884c\u903b\u8f91\u95e8\u548cKronecker\u4ea7\u54c1\u6d41\u7a0b\u3002\n\u5c06\u6570\u5b66\u5bfc\u5165numpy\u4f5c\u4e3aNP\u7c7bBITS(\u5bf9\u8c61)\u5bfc\u5165\uff1adef__init__(self\uff0cbit_string)\uff1aself\u3002SANITY_CHECK(BIT_STRING)SELF\u3002bit_string=bit_string def sanity_check(self\uff0cbit_string)\uff1a\u5bf9\u4e8ebit_string\u4e2d\u7684char\uff1aif char\uff01=&#34\uff1b0&#34\uff1band char\uff01=&#34\uff1b1&#34\uff1b\uff1a\u5f15\u53d1\u5f02\u5e38(&#34\uff1bBitString\u6784\u9020\u4f7f\u7528\u75310\u548c1\uff01&#34\uff1b)def__len__(Self)\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff1a\u8fd4\u56delen(self\u3002bit_string)def__eq__(self\uff0cbits)\uff1a\u8fd4\u56deself\u3002BIT_STRING==BITS\u3002bit_string def__str__(Self)\uff1a\u8fd4\u56deself\u3002bit_string def to_uint(Self)\uff1a\u8fd4\u56deint(self.\u3002bit_string\uff0c2)def to_state_vec(Self)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1bvec=[0]*(2**len(Self))vec[self.\u3002to_uint()]=1\u8fd4\u56devec def state_vec_to_bits(State_Vec)\uff1anum_zeros=0 num_ones=0 state_vec_len=len(State_Vec)num_bits=\u6570\u5b66\u3002log(state_vec_len\uff0c2)\uff0c\u5982\u679c\u4e0d\u662fnum_bits\u3002IS_INTEGER()\uff1a\u5f15\u53d1\u5f02\u5e38(&#34\uff1b\u65e0\u6548\u7684\u72b6\u6001\u5411\u91cf\u957f\u5ea6\uff01&#34\uff1b)num_bits=int(Num_Bits)idx=NONE\uff0c\u5bf9\u4e8ei\uff0c\u679a\u4e3e\u4e2d\u7684\u5143\u7d20(State_Vec)\uff1aif element==0\uff1anum_zeros+=1 elif element==1\uff1anum_ones+=1 idx=i\u5426\u5219\uff1a\u5982\u679cnum_ones\uff01=1\u6216idx\uff0c\u5219\u5f15\u53d1\u5f02\u5e38(&#34\uff1b\u72b6\u6001\u5411\u91cf\u53ea\u80fd\u5305\u542b0\u62161\uff01&#34\uff1b)\u3002\u72b6\u6001\u5411\u91cf\u5e94\u8be5\u53ea\u6709\u4e00\u4e2a1\uff01&#34\uff1b)bit_string=bin(Idx)[2\uff1a]\u3002zill(Num_Bits)bits=bits(bit_string=bit_string)\u8fd4\u56de\u4f4ddef main()\uff1a#Gate Operators not=NP\u3002\u6570\u7ec4([[0\uff0c1]\uff0c[1\uff0c0]])\u548c=NP\u3002array([1\uff0c1\uff0c1\uff0c0]\uff0c[0\uff0c0\uff0c0\uff0c1]])bit_string_a=&#34\uff1b01&#34\uff1bbit_string_b=&#34\uff1b0&#34\uff1bbit_string_c=&#34\uff1b0&#34\uff1bbit_string_d=&#34\uff1b1&#34\uff1bbits_a=bits(bit_string=bit_string_a)bits_b=bits(bit_string=bit_string_b)bits_c=bits(bit_string=bit_string_c)bits_d=bits(bit_string=bit_string_d)bits_ab=bits(bit_string=bit_string_a+bit_string_b)bits_ba=bits(bit_string=bit_string_b+bit_string_a)bits_cd=bits\u3002(bit_string=bit_string_c+bit_string_d)bits_dc=bits(bit_string=bit_string_d+bit_string_c)assert bits_a==state_vec_to_bits(state_vec=bits_a)\u3002to_state_vec())\u65ad\u8a00BITS_b==STATE_VEC_TO_BITS(STATE_VEC=BITS_b\u3002to_state_vec())\u65ad\u8a00BITS_c==STATE_VEC_TO_BITS(STATE_VEC=BITS_c\u3002to_state_vec())\u65ad\u8a00BITS_d==STATE_VEC_TO_BITS(STATE_VEC=BITS_d\u3002to_state_vec())A=NP\u3002\u6570\u7ec4(Bits_a.\u3002to_state_vec())B=NP\u3002\u6570\u7ec4(bitsb.\u3002to_state_vec())C=NP\u3002\u6570\u7ec4(Bits_c.\u3002to_state_vec())D=NP\u3002\u6570\u7ec4(bits_d.\u3002to_state_vec())AB=NP\u3002\u6570\u7ec4(Bits_ab.\u3002to_state_vec())BA=NP\u3002\u6570\u7ec4(bits_ba.\u3002to_state_vec())cd=np\u3002\u6570\u7ec4(BITS_CD.\u3002to_state_vec())dc=np\u3002\u6570\u7ec4(BITS_DC.\u3002to_state_vec())#\u5e76\u884c\u64cd\u4f5c#A-\u548c-&gt;C#B-&&gt;D#\u6211\u4eec\u6709\u4ee5\u4e0b\u516c\u5f0f#AND*A=C\u65ad\u8a00NP\u3002ARRAY_EQUAL(np.\u3002\u70b9(\u548c\uff0cA)\uff0cC)#NOT*B=D\u65ad\u8a00NP\u3002ARRAY_EQUAL(np.\u3002\u70b9(\u975e\uff0cB)\uff0cD)#A\\o\u4e58\u4ee5B=AB\u65ad\u8a00NP\u3002ARRAY_EQUAL(np.\u3002Kron(A\uff0cB)\uff0cAB)#B\\o\u4e58\u4ee5A=BA\u65ad\u8a00NP\u3002ARRAY_EQUAL(np.\u3002Kron(B\uff0cA)\uff0cBA)#C\\oTimes D=CD\u65ad\u8a00Np\u3002ARRAY_EQUAL(np.\u3002Kron(C\uff0cD)\uff0cCd)#D\\o\u4e58\u4ee5C=DC\u65ad\u8a00Np\u3002ARRAY_EQUAL(np.\u3002Kron(D\uff0cC)\uff0cDC)#(AND\\otime NOT)*(A\\otime B)=(C\\oTimes D)\u65ad\u8a00NP\u3002ARRAY_EQUAL(np.\u3002\u70b9(np.\u3002Kron(\u548c\uff0c\u975e)\uff0cNP\u3002Kron(A\uff0cB))\uff0cNP\u3002Kron(C\uff0cD))#(NOT\\oTimes AND)*(B\\oTimes A)=(D\\oTimes C)Assert NP\u3002ARRAY_EQUAL(np.\u3002\u70b9(np.\u3002Kron(\u975e\uff0cand)\uff0cNP\u3002Kron(B\uff0cA))\uff0cNP\u3002Kron(D\uff0cC))IF__NAME__==&#34\uff1b__Main__&#34\uff1b\uff1aMain()", "note_en": "Kronecker product is widely used in circuits, especially those that have parallel logical gates, to manipulate bits.\n  In this blog post, I would like to discuss the mathematics of Kronecker product in circuits.\n   Let $A \\in \\mathbb{C}^{m \\times n}$, $B \\in \\mathbb{C}^{r \\times s}$, $C \\in \\mathbb{C}^{n \\times p}$, and $D \\in \\mathbb{C}^{s \\times t}$, then\n     Logical gates could be natually represented by matrices. For example, given any one bit, we could represent it as a unique one-hot state vector of length $2^1 = 2$. More concretely,  0 is $| 0 \\rangle = [1, 0]^{\\top}$,  1 is $| 1 \\rangle = [0, 1]^{\\top}$. given any two bits, we could represent it as a unique one-hot state vector of length $2^2 = 4$. More concretely,  00 is $| 00 \\rangle = [1, 0, 0, 0]^{\\top}$,  01 is $| 01 \\rangle = [0, 1, 0, 0]^{\\top}$,  10 is $| 10 \\rangle = [0, 0, 1, 0]^{\\top}$,  11 is $| 11 \\rangle = [0, 0, 0, 1]^{\\top}$. So on and so forth.\n  A classic  AND gate takes into two bits and generates one bit. Its matrix representation $\\text{AND} \\in \\mathbb{C}^{2^1 \\times 2^2}$, which takes in a state vector of length 4 and generates a state vector of length 2, is\n The expectations of  AND gate are  00 -&gt; AND -&gt; 0,  01 -&gt; AND -&gt; 0,  10 -&gt; AND -&gt; 0,  11 -&gt; AND -&gt; 1. Let\u2019s check one of them, say  01 -&gt; AND -&gt; 0, using matrix multiplication.\n The gate input is $| 01 \\rangle = [0, 1, 0, 0]^{\\top}$ ( 10) and the gate output is $| 0 \\rangle = [1, 0]^{\\top}$ ( 0), which matches our expectation.\n   If we have an input of multiple bits, we would like to take the first several consecutive bits for logical gate 1, the second several consecutive bits for logical gate 2, and so on, and we collect all the outputs as the final output. The logical gate 1, 2, etc., are parallel logical gates.\n  For example, we have three bits,  010. We would like to take the first two bits  01 for  AND and the third bit for  NOT. The expected output would be  01 because  01 -&gt; AND -&gt; 0 and  0 -&gt; NOT -&gt; 1.\n  The three bits,  010, could also be represented by a state vector of length $2^3=8$. Normally, we would need to convert  010 to a  uint, which is  2 and then we know the state vector is $| 010 \\rangle = [0, 0, 1, 0, 0, 0, 0, 0]^{\\top}$. However, since  01 could be thought as one system state and  0 could be thought as an another system state,  010 would be a merged system state of system state  01 and system state  0. Mathematically, if we know the state vector for  01 and  0, we could compute the merged system state  010 using Kronecker product.\n Where $\\otimes$ is the Kronecker product. Informally, people call Kronecker product and tensor product interchangably. The state vector for  010 calculated from the output product matches our expectation.\n  We apply the first two bits  01 for  AND, as we have caculated above, we have\n   Because of the way we set up the circuits,  AND and  NOT are parallel logical gates, the output state vector has to be merged into one state vector.\n  We happen to find that we could apply the Kronecker product mixed-product property we mentioned in the prerequisites.\n This means that in order to compute the output of this parallel logical gates, we don\u2019t have to compute the outputs for each single logical gate separately and collect the outputs back together. Given the intact input state vector, $|010\\rangle $, we could apply a merged operator of  AND and  NOT, which turns out to be $\\text{AND} \\otimes \\text{NOT}$, and the output could be computed directly using matrix multiplication once.\n  Any two parallel logical gates could be described using a single logical gate that is the Kronecker product of the two.\n  In general, if we have a circuit consisting of two parallel logical gates, $X$ and $Y$, the input state vector $| a \\rangle$ to $X$, the input state vector $| b \\rangle$ to $Y$, the output state vector $| c \\rangle$ from $X$, the output state vector $| d \\rangle$ from $Y$, the merged input state vector $| ab \\rangle$ or $| ba \\rangle$, and the merged output state vector $| cd \\rangle$ or $| dc \\rangle$, we have the following equations.\n One interesting thing to note is that  $X \\otimes Y \\cong Y \\otimes X$ and $Y \\otimes X = P (X \\otimes Y) Q$, where $P$ and $Q$ are row and column permutation matrices respectively. We could also have $| ba \\rangle = W | ab \\rangle$, and $| dc \\rangle = V | cd \\rangle$, where $W$ and $V$ are row permutation matrices.\n  It seems that $V^{-1} P = I$ and $Q W = I$. But I have not thought of a formal proof to this.\n  Here I implemented a simple Python script to simulate and verify the parallel logical gates and Kronecker product processes I described above.\n import  math import  numpy  as  np  class  Bits ( object ):  def  __init__ ( self ,  bit_string ):  self . sanity_check ( bit_string )  self . bit_string  =  bit_string  def  sanity_check ( self ,  bit_string ):  for  char  in  bit_string :  if  char  !=  &#34;0&#34;  and  char  !=  &#34;1&#34; :  raise  Exception ( &#34;BitString construction uses a string consisting of 0 and 1!&#34; )  def  __len__ ( self ):  return  len ( self . bit_string )  def  __eq__ ( self ,  bits ):  return  self . bit_string  ==  bits . bit_string  def  __str__ ( self ):  return  self . bit_string  def  to_uint ( self ):  return  int ( self . bit_string ,  2 )  def  to_state_vec ( self ):  &#34;&#34;&#34; Return a one-hot state vector for bits &#34;&#34;&#34;  vec  =  [ 0 ]  *  ( 2  **  len ( self ))  vec [ self . to_uint ()]  =  1  return  vec def  state_vec_to_bits ( state_vec ):  num_zeros  =  0  num_ones  =  0  state_vec_len  =  len ( state_vec )  num_bits  =  math . log ( state_vec_len ,  2 )  if  not  num_bits . is_integer ():  raise  Exception ( &#34;Invalid state vector length!&#34; )  num_bits  =  int ( num_bits )  idx  =  None  for  i ,  element  in  enumerate ( state_vec ):  if  element  ==  0 :  num_zeros  +=  1  elif  element  ==  1 :  num_ones  +=  1  idx  =  i  else :  raise  Exception ( &#34;State vector should only container 0 or 1!&#34; )  if  num_ones  !=  1  or  idx  is  None :  raise  Exception ( &#34;State vector should only have one 1!&#34; )  bit_string  =  bin ( idx )[ 2 :]. zfill ( num_bits )  bits  =  Bits ( bit_string = bit_string )  return  bits def  main ():  # Gate operators  NOT  =  np . array ([[ 0 , 1 ],[ 1 , 0 ]])  AND  =  np . array ([[ 1 , 1 , 1 , 0 ],[ 0 , 0 , 0 , 1 ]])  bit_string_a  =  &#34;01&#34;  bit_string_b  =  &#34;0&#34;  bit_string_c  =  &#34;0&#34;  bit_string_d  =  &#34;1&#34;  bits_a  =  Bits ( bit_string = bit_string_a )  bits_b  =  Bits ( bit_string = bit_string_b )  bits_c  =  Bits ( bit_string = bit_string_c )  bits_d  =  Bits ( bit_string = bit_string_d )  bits_ab  =  Bits ( bit_string = bit_string_a  +  bit_string_b )  bits_ba  =  Bits ( bit_string = bit_string_b  +  bit_string_a )  bits_cd  =  Bits ( bit_string = bit_string_c  +  bit_string_d )  bits_dc  =  Bits ( bit_string = bit_string_d  +  bit_string_c )  assert  bits_a  ==  state_vec_to_bits ( state_vec = bits_a . to_state_vec ())  assert  bits_b  ==  state_vec_to_bits ( state_vec = bits_b . to_state_vec ())  assert  bits_c  ==  state_vec_to_bits ( state_vec = bits_c . to_state_vec ())  assert  bits_d  ==  state_vec_to_bits ( state_vec = bits_d . to_state_vec ())  A  =  np . array ( bits_a . to_state_vec ())  B  =  np . array ( bits_b . to_state_vec ())  C  =  np . array ( bits_c . to_state_vec ())  D  =  np . array ( bits_d . to_state_vec ())  AB  =  np . array ( bits_ab . to_state_vec ())  BA  =  np . array ( bits_ba . to_state_vec ())  CD  =  np . array ( bits_cd . to_state_vec ())  DC  =  np . array ( bits_dc . to_state_vec ())  # Parallel operations  # A -&gt; AND -&gt; C  # B -&gt; NOT -&gt; D  # We have the following equations  # AND * A = C  assert  np . array_equal ( np . dot ( AND ,  A ),  C )  # NOT * B = D  assert  np . array_equal ( np . dot ( NOT ,  B ),  D )  # A \\otimes B = AB  assert  np . array_equal ( np . kron ( A ,  B ),  AB )  # B \\otimes A = BA  assert  np . array_equal ( np . kron ( B ,  A ),  BA )  # C \\otimes D = CD  assert  np . array_equal ( np . kron ( C ,  D ),  CD )  # D \\otimes C = DC  assert  np . array_equal ( np . kron ( D ,  C ),  DC )  # (AND \\otimes NOT) * (A \\otimes B) = (C \\otimes D)  assert  np . array_equal ( np . dot ( np . kron ( AND ,  NOT ),  np . kron ( A ,  B )),  np . kron ( C ,  D ))  # (NOT \\otimes AND) * (B \\otimes A) = (D \\otimes C)  assert  np . array_equal ( np . dot ( np . kron ( NOT ,  AND ),  np . kron ( B ,  A )),  np . kron ( D ,  C )) if  __name__  ==  &#34;__main__&#34; :  main ()", "posttime": "2020-06-12 16:32:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7535\u8def,product,bits", "title": "\u7535\u8def\u4e2d\u7684Kronecker\u79ef", "title_en": "Kronecker Product in Circuits", "transed": 1, "url": "https://leimao.github.io/blog/Kronecker-Product-In-Circuits/", "via": "", "real_tags": ["\u7535\u8def", "product", "bits"]}, {"category": "", "categoryclass": "", "imagename": "ac9f4c327b4c071690318813517ad97c.png", "infoid": 1006266, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cRust\u9488\u5bf9\u6267\u884c\u901f\u5ea6\u800c\u4e0d\u662f\u4e8c\u8fdb\u5236\u5927\u5c0f\u8fdb\u884c\u4f18\u5316\uff0c\u56e0\u4e3a\u8fd9\u5bf9\u4e8e\u7edd\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\u662f\u7406\u60f3\u7684\u3002\u4f46\u662f\u5bf9\u4e8e\u5f00\u53d1\u4eba\u5458\u60f3\u8981\u9488\u5bf9\u4e8c\u8fdb\u5236\u5927\u5c0f\u8fdb\u884c\u4f18\u5316\u7684\u60c5\u51b5\uff0cRust\u63d0\u4f9b\u4e86\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u7684\u673a\u5236\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cCargo Build\u5728\u8c03\u8bd5\u6a21\u5f0f\u4e0b\u6784\u5efaRust\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u8c03\u8bd5\u6a21\u5f0f\u7981\u7528\u8bb8\u591a\u4f18\u5316\uff0c\u8fd9\u6709\u52a9\u4e8e\u8c03\u8bd5\u5668(\u4ee5\u53ca\u8fd0\u884c\u5b83\u4eec\u7684IDE)\u63d0\u4f9b\u66f4\u597d\u7684\u8c03\u8bd5\u4f53\u9a8c\u3002\u8c03\u8bd5\u4e8c\u8fdb\u5236\u6587\u4ef6\u53ef\u4ee5\u6bd4\u53d1\u5e03\u4e8c\u8fdb\u5236\u6587\u4ef6\u592730%\u6216\u66f4\u591a\u3002\n\u5728Linux\u548cMacOS\u4e0a\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5143\u4ef6\u4fe1\u606f\u5305\u542b\u5728\u7f16\u8bd1\u7684.elf\u6587\u4ef6\u4e2d\u3002\u6b63\u786e\u6267\u884c\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e0d\u9700\u8981\u6b64\u4fe1\u606f\u3002\u8981\u5220\u9664\u6b64\u4fe1\u606f\uff0c\u8bf7\u5bf9.elf\u6587\u4ef6\u8fd0\u884cstrip\uff1a\n\u5bf9\u4e8e\u53d1\u5e03\u7248\u672c\uff0cCargo\u5c06\u5176\u4f18\u5316\u7ea7\u522b\u9ed8\u8ba4\u4e3a3\uff0c\u8fd9\u5c06\u4f18\u5316\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u901f\u5ea6\u3002\u8981\u6307\u793aCargo\u4f18\u5316\u4e3a\u6700\u5c0f\u4e8c\u8fdb\u5236\u5927\u5c0f\uff0c\u8bf7\u4f7f\u7528Cargo.toml\u4e2d\u7684z\u4f18\u5316\u7ea7\u522b\uff1a\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cCargo\u6307\u793a\u5355\u72ec\u7f16\u8bd1\u548c\u4f18\u5316\u7f16\u8bd1\u5355\u5143\u3002LTO\u6307\u793a\u94fe\u63a5\u5668\u5728\u94fe\u63a5\u9636\u6bb5\u8fdb\u884c\u4f18\u5316\u3002\u4f8b\u5982\uff0c\u8fd9\u53ef\u4ee5\u5220\u9664\u6b7b\u4ee3\u7801\uff0c\u5e76\u4e14\u901a\u5e38\u4f1a\u51cf\u5c0f\u4e8c\u8fdb\u5236\u5927\u5c0f\u3002\n\u4eceRust 1.32\u5f00\u59cb\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u5220\u9664jemalloc\u3002\u5982\u679c\u4f7f\u7528Rust 1.32\u6216\u66f4\u9ad8\u7248\u672c\uff0c\u5219\u4e0d\u9700\u8981\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u6765\u51cf\u5c0f\u4e0e\u6b64\u529f\u80fd\u76f8\u5173\u7684\u4e8c\u8fdb\u5236\u5927\u5c0f\u3002\n\u5728Rust 1.32\u4e4b\u524d\uff0c\u4e3a\u4e86\u63d0\u9ad8\u67d0\u4e9b\u5e73\u53f0\u4e0a\u7684\u6027\u80fd\uff0cRust\u6346\u7ed1\u4e86jemalloc\uff0c\u8fd9\u662f\u4e00\u4e2a\u6027\u80fd\u7ecf\u5e38\u4f18\u4e8e\u9ed8\u8ba4\u7cfb\u7edf\u5206\u914d\u5668\u7684\u5206\u914d\u5668\u3002\u4f46\u662f\uff0c\u6346\u7ed1jemalloc\u5728\u751f\u6210\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u589e\u52a0\u4e86\u5927\u7ea6200KB\u3002\n\u8981\u5220\u9664Rust 1.28-Rust 1.31\u4e0a\u7684jemalloc\uff0c\u8bf7\u5c06\u4ee5\u4e0b\u4ee3\u7801\u6dfb\u52a0\u5230main.rs\u7684\u9876\u90e8\uff1a\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cCargo\u4e3a\u53d1\u5e03\u7248\u672c\u6307\u5b9a\u4e8616\u4e2a\u5e76\u884c\u7f16\u89e3\u7801\u5668\u5355\u5143\uff0c\u8fd9\u7f29\u77ed\u4e86\u7f16\u8bd1\u65f6\u95f4\uff0c\u4f46\u963b\u6b62\u4e86\u67d0\u4e9b\u4f18\u5316\u3002\n\u6ce8\u610f\uff1a\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6240\u8ba8\u8bba\u7684\u51cf\u5c0f\u4e8c\u8fdb\u5236\u5927\u5c0f\u7684\u7279\u6027\u5bf9\u7a0b\u5e8f\u7684\u884c\u4e3a\u6ca1\u6709\u5f71\u54cd(\u53ea\u5f71\u54cd\u5b83\u7684\u6267\u884c\u901f\u5ea6)\u3002\u6b64\u529f\u80fd\u5bf9\u884c\u4e3a\u6ca1\u6709\u5f71\u54cd\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53Rust\u4ee3\u7801\u9047\u5230\u5fc5\u987b\u8c03\u7528Panic\uff01()\u7684\u60c5\u51b5\u65f6\uff0c\u5b83\u4f1a\u5c55\u5f00\u5806\u6808\u5e76\u751f\u6210\u6709\u7528\u7684\u56de\u6eaf\u3002\u7136\u800c\uff0c\u5c55\u5f00\u4ee3\u7801\u786e\u5b9e\u9700\u8981\u989d\u5916\u7684\u4e8c\u8fdb\u5236\u5927\u5c0f\u3002\u53ef\u4ee5\u6307\u793arustc\u7acb\u5373\u4e2d\u6b62\uff0c\u800c\u4e0d\u662f\u5c55\u5f00\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u989d\u5916\u7684\u5c55\u5f00\u4ee3\u7801\u4e86\u3002\n\u6ce8\u610f\uff1aXargo\u76ee\u524d\u5904\u4e8e\u7ef4\u62a4\u72b6\u6001\uff0c\u4f46\u6700\u7ec8\u4e0b\u9762\u4f7f\u7528\u7684\u529f\u80fd\u5e94\u8be5\u4f1a\u5e94\u7528\u5230\u8d27\u7269\u4e2d\u3002\nRust\u9644\u5e26\u4e86\u6807\u51c6\u5e93(Libstd)\u7684\u9884\u6784\u5efa\u526f\u672c\u53ca\u5176\u5de5\u5177\u94fe\u3002\u8fd9\u610f\u5473\u7740\u5f00\u53d1\u4eba\u5458\u4e0d\u9700\u8981\u5728\u6bcf\u6b21\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\u65f6\u90fd\u6784\u5efalibstd\u3002\u76f8\u53cd\uff0clibstd\u9759\u6001\u94fe\u63a5\u5230\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\n\u867d\u7136\u8fd9\u975e\u5e38\u65b9\u4fbf\uff0c\u4f46\u5982\u679c\u5f00\u53d1\u4eba\u5458\u8bd5\u56fe\u79ef\u6781\u4f18\u5316\u5927\u5c0f\uff0c\u4e5f\u6709\u51e0\u4e2a\u7f3a\u70b9\u3002\n\u65e0\u6cd5\u5220\u9664\u7279\u5b9a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u672a\u4f7f\u7528\u7684\u90e8\u5206libstd(\u4f8b\u5982LTO\u548c\u6b7b\u673a\u884c\u4e3a)\u3002\n\u8fd9\u5c31\u662f\u8428\u5c14\u6208\u7684\u7528\u6b66\u4e4b\u5730\u3002Xargo\u80fd\u591f\u4ece\u6e90\u4ee3\u7801\u7528\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u7f16\u8bd1libstd\u3002\u5b83\u901a\u8fc7rustup\u65b9\u4fbf\u5730\u63d0\u4f9b\u7684ruust-src\u7ec4\u4ef6\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\n\u5c06Xargo.toml\u6587\u4ef6\u6dfb\u52a0\u5230\u9879\u76ee\u7684\u6839\u76ee\u5f55(\u8fd9\u4e0d\u4f1a\u53d6\u4ee3Cargo.toml\uff0c\u53ea\u662f\u8865\u5145)\uff1a\n$rustup\u5de5\u5177\u94fe\u591c\u95f4\u5b89\u88c5$rustup\u8986\u76d6\u8bbe\u7f6e\u591c\u95f4$rustup\u7ec4\u4ef6\u6dfb\u52a0rust-src$Cargo\u5b89\u88c5xargo\u3002\n#\u67e5\u627e\u60a8\u7684\u4e3b\u673a\u7684\u76ee\u6807\u4e09\u91cd\u3002$rustc-vv.\u4e3b\u673a\uff1ax86_64-apple-darwin#\u4f7f\u7528Xargo\u6784\u5efa\u65f6\u4f7f\u7528\u76ee\u6807\u4e09\u5143\u7ec4\u3002$xargo build--target x86_64-apple-Darwin--release\u3002\n\u8bb0\u4f4f\u8981\u53bb\u6389\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002\u5728MacOS\u4e0a\uff0c\u6700\u7ec8\u7684\u4e8c\u8fdb\u5236\u5927\u5c0f\u51cf\u5c11\u523051KB\u3002\n\u5373\u4f7f\u5728Cargo.toml\u4e2d\u6307\u5b9a\u4e86Panic=ABORT\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0crustc\u4ecd\u7136\u4f1a\u5728\u6700\u7ec8\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u5305\u542b\u6050\u614c\u5b57\u7b26\u4e32\u548c\u683c\u5f0f\u5316\u4ee3\u7801\u3002\u5df2\u5c06\u4e0d\u7a33\u5b9a\u7684PARGIC_IMMEDIATE_ABORT\u529f\u80fd\u5408\u5e76\u5230\u591c\u95f4rustc\u7f16\u8bd1\u5668\u4e2d\u4ee5\u89e3\u51b3\u6b64\u95ee\u9898\u3002\n\u8981\u4f7f\u7528\u6b64\u547d\u4ee4\uff0c\u8bf7\u91cd\u590d\u4e0a\u8ff0\u8bf4\u660e\u4ee5\u4f7f\u7528Xargo\uff0c\u4f46\u8bf7\u6539\u7528\u4ee5\u4e0bXargo.toml\uff1a\n\u8bb0\u4f4f\u8981\u53bb\u6389\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002\u5728MacOS\u4e0a\uff0c\u6700\u7ec8\u7684\u4e8c\u8fdb\u5236\u5927\u5c0f\u51cf\u5c11\u523030KB\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u9650\u5236\u4ecelibstd\u4f7f\u7528\u7684\u5b9e\u7528\u7a0b\u5e8f\u3002\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u9650\u5236libstd\u7684\u4f7f\u7528\uff0c\u4ee5\u8fdb\u4e00\u6b65\u51cf\u5c0f\u4e8c\u8fdb\u5236\u5927\u5c0f\u3002\n\u5982\u679c\u60a8\u60f3\u8981\u5c0f\u4e8e20KB\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5219\u5fc5\u987b\u5220\u9664Rust\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u4ee3\u7801CORE\uff1a\uff1aFMT\u3002PARGIC_IMMEDIATE_ABORT\u4ec5\u5220\u9664\u6b64\u4ee3\u7801\u7684\u67d0\u4e9b\u7528\u6cd5\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u4ee3\u7801\u4f7f\u7528\u683c\u5f0f\u5316\u3002\u8fd9\u5305\u62eclibstd\u4e2d\u7684Rust&#39\uff1bs&34\uff1bPre-Main\u4ee3\u7801\u3002\n\u901a\u8fc7\u4f7f\u7528C\u5165\u53e3\u70b9(\u901a\u8fc7\u6dfb\u52a0#\uff01[NO_MAIN]\u5c5e\u6027)\uff0c\u624b\u52a8\u7ba1\u7406stdio\uff0c\u5e76\u4ed4\u7ec6\u5206\u6790\u60a8\u6216\u60a8\u7684\u4f9d\u8d56\u9879\u5305\u62ec\u54ea\u4e9b\u4ee3\u7801\u5757\uff0c\u60a8\u6709\u65f6\u53ef\u4ee5\u5229\u7528libstd\uff0c\u540c\u65f6\u907f\u514d\u81c3\u80bf\u7684core\uff1a\uff1afmt\u3002\n\u9884\u8ba1\u4ee3\u7801\u5c06\u662f\u7c97\u5236\u6ee5\u9020\u548c\u4e0d\u53ef\u79fb\u690d\u7684\uff0c\u5177\u6709\u6bd4\u5e73\u5e38\u66f4\u591a\u7684\u4e0d\u5b89\u5168{}\u3002\u611f\u89c9\u50cf\u662fno_std\uff0c\u4f46\u662f\u6709libstd\u3002\n\u4ece\u4e00\u4e2a\u7a7a\u7684\u53ef\u6267\u884c\u6587\u4ef6\u5f00\u59cb\uff0c\u786e\u4fddxargo\u81a8\u80c0--\u53d1\u5e03--\u76ee\u6807=.\u3002\u4e0d\u5305\u542bcore\uff1a\uff1afmt\u6216\u6709\u5173\u586b\u5145\u7684\u5185\u5bb9\u3002\u6dfb\u52a0(\u53d6\u6d88\u6ce8\u91ca)\u4e00\u70b9\u3002\u770b\u5230\u90a3\u4e2a\u6c99\u6208\u80bf\u80c0\u73b0\u5728\u62a5\u9053\u7684\u66f4\u591a\u4e86\u3002\u67e5\u770b\u60a8\u521a\u521a\u6dfb\u52a0\u7684\u6e90\u4ee3\u7801\u3002\u53ef\u80fd\u4f7f\u7528\u4e86\u4e00\u4e9b\u5916\u90e8\u673a\u7bb1\u6216\u65b0\u7684libstd\u51fd\u6570\u3002\u5728\u60a8\u7684\u5ba1\u67e5\u8fc7\u7a0b\u4e2d\u9012\u5f52\u5230\u8fd9\u4e00\u70b9(\u5b83\u9700\u8981[\u66ff\u6362]\u8d27\u7269\u4f9d\u8d56\u9879\uff0c\u53ef\u80fd\u8fd8\u9700\u8981\u6316\u6398libstd)\uff0c\u627e\u51fa\u4e3a\u4ec0\u4e48\u5b83\u6bd4\u5e94\u6709\u7684\u91cd\u91cf\u66f4\u91cd\u3002\u9009\u62e9\u66ff\u4ee3\u65b9\u5f0f\u6216\u8865\u4e01\u4f9d\u8d56\uff0c\u4ee5\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u529f\u80fd\u3002\u53d6\u6d88\u6ce8\u91ca\u66f4\u591a\u7684\u4ee3\u7801\uff0c\u8c03\u8bd5\u7206\u70b8\u5927\u5c0f\u7684xargo\u81a8\u80c0\uff0c\u7b49\u7b49\u3002\n\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7684\u662fRust\u6807\u51c6\u5e93libstd\u3002libstd\u63d0\u4f9b\u4e86\u8bb8\u591a\u65b9\u4fbf\u7684\u3001\u7ecf\u8fc7\u826f\u597d\u6d4b\u8bd5\u7684\u8de8\u5e73\u53f0API\u548c\u6570\u636e\u7c7b\u578b\u3002\u4f46\u662f\uff0c\u5982\u679c\u7528\u6237\u60f3\u8981\u5c06\u4e8c\u8fdb\u5236\u5927\u5c0f\u51cf\u5c11\u5230\u7b49\u6548\u7684C\u7a0b\u5e8f\u5927\u5c0f\uff0c\u5219\u53ef\u4ee5\u53ea\u4f9d\u8d56libc\u3002\n\u4e86\u89e3\u8fd9\u79cd\u65b9\u6cd5\u6709\u5f88\u591a\u7f3a\u70b9\u662f\u5f88\u91cd\u8981\u7684\u3002\u9996\u5148\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u7f16\u5199\u5f88\u591a\u4e0d\u5b89\u5168\u7684\u4ee3\u7801\uff0c\u5e76\u4e14\u65e0\u6cd5\u8bbf\u95ee\u5927\u591a\u6570\u4f9d\u8d56libstd\u7684\u94c1\u9508\u788e\u5c51\u3002\u4e0d\u8fc7\uff0c\u8fd9\u662f\u51cf\u5c0f\u4e8c\u8fdb\u5236\u5927\u5c0f\u7684\u4e00\u79cd(\u5c3d\u7ba1\u6781\u7aef)\u9009\u62e9\u3002\n#\uff01[no_std]#\uff01[no_main]extern crate libc\uff1b#[no_manger]pub extern&#34\uff1bC&#34\uff1bfn main(_argc\uff1aisize\uff0c_argv\uff1a*const*const U8)-&gt\uff1bisize{//\u56e0\u4e3a\u6211\u4eec\u4f20\u9012\u7684\u662fC\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u7a7a\u5b57\u7b26\u662f\u5fc5\u9700\u7684\u3002const Hello\uff1a&amp\uff1b&39\uff1bstatic str=&#34\uff1bHello\uff0cworld\uff01\\n\\0&#34\uff1b\uff1bunsafe{libc\uff1a\uff1aprintf(Hello\u3002as_ptr()as*const_)\uff1b}0}#[PARGIC_HANDLER]FN MY_PARGIC(_INFO\uff1a&AMP\uff1bCORE\uff1a\uff1aPARGIC\uff1a\uff1aPanicInfo)-&gt\uff1b\uff01{loop{}}", "note_en": "By default, Rust optimizes for execution speed rather than binary size, since for the vastmajority of applications this is ideal. But for situations where a developer wants to optimizefor binary size instead, Rust provides mechanisms to accomplish this.\n   By default,  cargo build builds the Rust binary in debug mode. Debug mode disables manyoptimizations, which helps debuggers (and IDEs that run them) provide a better debuggingexperience. Debug binaries can be 30% or more larger than release binaries.\n      By default on Linux and macOS, symbol information is included in the compiled  .elf file. Thisinformation is not needed to properly execute the binary.To remove this, run   strip on the  .elf file:\n    Cargo defaults its optimization level to  3 for release builds,which optimizes the binary for speed. To instruct Cargo to optimize for minimal binarysize, use the  z optimization level in  Cargo.toml:\n    By default, Cargo instructs compilation units to be compiled and optimized in isolation. LTO instructs the linker to optimize at thelink stage. This can, for example, remove dead code and often times reduces binary size.\n     As of Rust 1.32,  jemalloc is removed by default. Ifusing Rust 1.32 or newer, no action is needed to reduce binary size regarding this feature.\n Prior to Rust 1.32, to improve performance on some platforms Rust bundled jemalloc, an allocator that oftenoutperforms the default system allocator. Bundling jemalloc added around 200KBto the resulting binary, however.\n To remove  jemalloc on Rust 1.28 - Rust 1.31, add this code to the top of  main.rs:\n   By default, Cargo specifies 16 parallel codegen units for release builds.This improves compile times, but prevents some optimizations.\n     Note: Up to this point, the features discussed to reduce binary size did not have animpact on the behaviour of the program (only its execution speed). This feature doeshave an impact on behavior.\n By default, when Rust code encounters a situation when it must call  panic!(),it unwinds the stack and produces a helpful backtrace. The unwinding code, however, does requireextra binary size.  rustc can be instructed to abort immediately rather than unwind, whichremoves the need for this extra unwinding code.\n     Note:  Xargo is currently in maintenance status,but eventually the features used below should make their way into Cargo.\n  Rust ships pre-built copies of the standard library ( libstd) with its toolchains. This meansthat developers don&#39;t need to build  libstd every time they build their applications.  libstdis statically linked into the binary instead.\n While this is very convenient there are several drawbacks if a developer is trying toaggressively optimize for size.\n It&#39;s not possible to remove portions of  libstd that are not used in a particular application(e.g. LTO and panic behaviour).\n This is where  Xargo comes in. Xargo is able to compile libstd with your application from the source. It does this with the  rust-src component that rustup conveniently provides.\n Add a  Xargo.toml file to the root of your project(this doesn&#39;t replace  Cargo.toml, just is in addition):\n   $ rustup toolchain install nightly$ rustup override  set nightly$ rustup component add rust-src$ cargo install xargo\n  # Find your host&#39;s target triple. $ rustc -vV...host: x86_64-apple-darwin  # Use that target triple when building with Xargo.$ xargo build --target x86_64-apple-darwin --release\n Remember to  strip the resulting executable. On macOS, the final binary size is reduced to 51KB.\n    Even if  panic = abort is specified in  Cargo.toml,  rustc will still include panic stringsand formatting code in final binary by default. An unstable  panic_immediate_abort featurehas been merged into the  nightly  rustc compiler to address this.\n To use this, repeat the instructions above to use Xargo, but instead use the following Xargo.toml:\n  Remember to  strip the resulting executable. On macOS, the final binary size is reduced to 30KB.\n     Up until this point, we haven&#39;t restricted what utilities we used from  libstd. In this sectionwe will restrict our usage of  libstd in order to reduce binary size further.\n If you want an executable smaller than 20 kilobytes, Rust&#39;s string formatting code,  core::fmt mustbe removed.  panic_immediate_abort only removes some usages of this code. There is a lot of othercode that uses formatting in some of cases. That includes Rust&#39;s &#34;pre-main&#34; code in  libstd.\n By using a C entry point (by added the  #![no_main] attribute) , managing stdio manually, andcarefully analyzing which chunks of code you or your dependencies include, you can sometimesmake use of  libstd  while avoiding bloated  core::fmt.\n Expect the code to be hacky and unportable, with more  unsafe{}s than usual. It feels like no_std, but with  libstd.\n Start with an empty executable, ensure  xargo bloat --release --target=... contains no core::fmt or something about padding. Add (uncomment) a little bit. See that  xargo bloat nowreports drastically more. Review source code that you&#39;ve just added. Probably some external crate ora new  libstd function is used. Recurse into that with your review process(it requires  [replace] Cargo dependencies and maybe digging in  libstd), find out why itweighs more than it should. Choose alternative way or patch dependencies to avoid unnecessaryfeatures. Uncomment a bit more of your code, debug exploded size with  xargo bloat and so on.\n     Up until this point, our application was using the Rust standard library,  libstd.  libstdprovides many convenient, well tested cross platform APIs and data types. But if a user wantsto reduce binary size to an equivalent C program size, it is possible to depend only on  libc.\n It&#39;s important to understand that there are many drawbacks to this approach. For one, you&#39;lllikely need to write a lot of  unsafe code and lose access to a majority of Rust cratesthat depend on  libstd. Nevertheless, it is one (albeit extreme) option to reducing binary size.\n  #![no_std]#![no_main] extern  crate libc;#[no_mangle] pub  extern  &#34;C&#34;  fn  main(_argc:  isize, _argv:  * const  * const  u8) -&gt;  isize {  // Since we are passing a C string the final null character is mandatory.  const HELLO: &amp; &#39; static  str  =  &#34;Hello, world! \\n\\0&#34;;  unsafe { libc :: printf(HELLO. as_ptr()  as  * const _); }  0}#[panic_handler] fn  my_panic(_info:  &amp;core::panic::PanicInfo) -&gt; ! {  loop {}}", "posttime": "2020-06-12 15:40:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "rust,\u51cf\u5c0f,libstd", "title": "\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c0f\u9508\u8680\u4e8c\u8fdb\u5236\u5927\u5c0f", "title_en": "Minimizing Rust Binary Size", "transed": 1, "url": "https://github.com/johnthagen/min-sized-rust", "via": "", "real_tags": ["rust", "\u51cf\u5c0f", "libstd"]}, {"category": "", "categoryclass": "", "imagename": "294026a3c3cbdaf48422bcf16e46eb72.jpg", "infoid": 1006265, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8ddd\u79bb\u5730\u74035\u4ebf\u82f1\u91cc\u7684\u5730\u65b9\uff0c\u5f53\u4ee5\u6bcf\u5c0f\u65f612.7\u4e07\u82f1\u91cc\u7684\u901f\u5ea6\u98de\u884c\u65f6\uff0c\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40\u7684\u201c\u6731\u8bfa\u201d\u53f7\u822a\u5929\u5668\u518d\u6b21\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\u3002\n\u4eba\u7c7b\u6700\u9065\u8fdc\u7684\u592a\u9633\u80fd\u5b87\u5b99\u98de\u8239\u5728\u56f4\u7ed5\u6c14\u4f53\u5de8\u884c\u661f\u6728\u661f\u7684\u8f68\u9053\u4e0a\u98de\u884c\u4e86\u56db\u5e74\uff0c\u53d1\u56de\u4e86\u53e6\u4e00\u6279\u4ee4\u4eba\u60ca\u53f9\u7684\u56fe\u50cf\u3002\u5b83\u662f\u5728\u4e00\u4e9b\u4ece\u5730\u7403\u4e0a\u62cd\u6444\u7684\u6728\u661f\u7684\u201c\u5e78\u8fd0\u201d\u56fe\u50cf\u4e4b\u540e\u51fa\u73b0\u7684\u3002\n\u8fd9\u4e2a\u6708\u548c\u4e0b\u4e2a\u6708\u662f\u4ece\u4f60\u5bb6\u540e\u9662\u4eb2\u773c\u770b\u5230\u6728\u661f\u7684\u7edd\u4f73\u65f6\u673a\uff0c\u8fd9\u9897\u5de8\u5927\u7684\u884c\u661f\u73b0\u5728\u5348\u591c\u524d\u5347\u8d77\uff0c\u56e0\u4e3a\u5b83\u5c06\u57282020\u5e747\u6708\u4e2d\u65ec\u8d70\u5411\u5149\u660e\u7684\u5bf9\u7acb\u9762\u3002\n\u81ea2016\u5e747\u67085\u65e5\u4ee5\u6765\uff0c\u6731\u8bfa\u4e00\u76f4\u5728\u6728\u661f\u7684\u8f68\u9053\u4e0a\uff0c\u4ece\u692d\u5706\u5f62\u7684\u6781\u5730\u8f68\u9053\u5bf9\u8fd9\u9897\u884c\u661f\u8fdb\u884c\u79d1\u5b66\u8c03\u67e5\uff0c\u53d1\u73b0\u5b83\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u5728\u8fdc\u79bb\u6728\u661f\u3002\u7136\u800c\uff0c\u6b63\u662f\u8fd9\u4e2a\u8f68\u9053\u8ba9\u201c\u6731\u8bfa\u53f7\u201d\u8d85\u7ea7\u63a5\u8fd1\u6728\u661f\u7684\u4e91\u9876\uff0c\u5b83\u6bcf\u969453\u5929\u5c31\u4f1a\u77ed\u6682\u5730\u9760\u8fd1\u6728\u661f\u7684\u4e91\u9876\u3002\n\u6bcf\u4e00\u6b21\u9760\u8fd1\u6728\u661f\u7684\u4fef\u51b2\u90fd\u88ab\u79f0\u4e3aPerijove-\u5e0c\u814a\u8bed\uff0c\u610f\u601d\u662f\u4e00\u4e2a\u5929\u4f53\u56f4\u7ed5\u53e6\u4e00\u4e2a\u5929\u4f53\u7684\u8f68\u9053\u4e0a\u7684\u6781\u503c\u70b9\u3002\n\u7136\u800c\uff0c\u5c3d\u7ba1\u6731\u8bfa\u67099\u53f0\u79d1\u5b66\u4eea\u5668\u7684\u6709\u6548\u8f7d\u8377\uff0c\u4f46\u5b83\u7684JunoCam-\u4e00\u79cd\u5c0f\u578b\u53ef\u89c1\u5149\u76f8\u673a-\u4e3b\u8981\u662f\u51fa\u4e8e\u63a8\u5e7f\u76ee\u7684\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5b83\u4e00\u76f4\u662f\u8fd9\u9879\u4efb\u52a1\u7684\u660e\u661f\uff0c\u5c3d\u7ba1\u5b83\u7684\u8bbe\u8ba1\u5bff\u547d\u53ea\u6709\u516b\u5468\uff0c\u4f46\u5b83\u4ecd\u7136\u5f88\u5f3a\u5927\u3002\n\u6765\u81eaJunoCam\u7684\u539f\u59cb\u6570\u636e\u5728\u6bcf\u4e2a\u5468\u671f\u540e\u9010\u6e10\u4ece\u822a\u5929\u5668\u4e0b\u8f7d\uff0c\u5e76\u4e0a\u4f20\u7ed9\u4e00\u4e2a\u516c\u6c11\u79d1\u5b66\u5bb6\u56e2\u961f\u8fdb\u884c\u7814\u7a76\u3002\u8fd9\u4e9b\u5fd7\u613f\u8005\u4e2d\u7684\u4e00\u4e9b\u4eba\u5229\u7528\u4ed6\u4eec\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u56fe\u50cf\u5904\u7406\u6280\u80fd\u6765\u521b\u4f5c\u827a\u672f\u54c1\u3002\u8fd9\u4e9b\u5305\u62ec\u6728\u661f\u7684\u5de8\u5927\u55b7\u6d41\uff0c\u4e00\u5e45\u7ecf\u5178\u7684\u201c\u6728\u661f\u5927\u7406\u77f3\u201d\u8096\u50cf\uff0c\u4e00\u9897\u201c\u6405\u52a8\u201d\u7684\u6728\u661f\u548c\u6728\u661f\u7684\u201c\u8d5b\u8f66\u6761\u7eb9\u201d\u3002\n\u5728JunoCam\u7684\u4e13\u95e8\u7f51\u7ad9\u4e0a\u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u7684\u3002\u8fd9\u91cc\u5305\u62ec\u7684\u53ea\u662f\u5b83\u6700\u8fd1\u7684Perijove\u5904\u7406\u8fc7\u7684\u56fe\u50cf\u6837\u672c\u3002\u66f4\u4e0d\u7528\u8bf4\u51ef\u6587\u00b7\u5409\u5c14(Kevin Gill)\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u5168\u7403\u6728\u661f\u5f62\u8c61\uff0c\u5b83\u88c5\u9970\u5728\u672c\u6587\u7684\u9876\u90e8\u3002\n\u7136\u800c\uff0c\u6731\u8bfa\u4e5f\u5728\u505a\u79d1\u5b66\u7814\u7a76\uff1b\u5b83\u6700\u8fd1\u4e0e\u54c8\u52c3\u592a\u7a7a\u671b\u8fdc\u955c\u548c\u590f\u5a01\u5937\u7684\u5730\u9762\u53cc\u5b50\u5ea7\u5929\u6587\u53f0\u5408\u4f5c\uff0c\u540c\u65f6\u7814\u7a76\u6728\u661f\u98ce\u66b4\u3002\u6728\u661f\u4e0a\u7684\u96f7\u5934\u53ef\u4ee5\u5ef6\u4f3840\u82f1\u91cc--\u6bd4\u5730\u7403\u4e0a\u5178\u578b\u7684\u96f7\u5934\u9ad85\u500d--\u91ca\u653e\u51fa\u8d85\u9ad8\u80fd\u91cf\u7684\u95ea\u7535\u3002\n\u5f53\u6731\u8bfa\u4f4e\u7a7a\u63a0\u8fc7\u6728\u661f\u7684\u4e91\u9876\u65f6\uff0c\u5b83\u5df2\u7ecf\u80fd\u591f\u63a2\u6d4b\u5230\u65e0\u7ebf\u7535\u4fe1\u53f7\uff0c\u5e76\u7528\u5b83\u4eec\u6765\u7ed8\u5236\u8fd9\u4e2a\u661f\u7403\u7684\u9ed1\u591c\u548c\u767d\u5929\u53d1\u751f\u95ea\u7535\u7684\u5730\u65b9\u3002\n\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\uff0c\u6731\u8bfa\u8fd8\u53d1\u73b0\u6728\u661f\u662f\u4e00\u4e2a\u6c34\u4e16\u754c\uff1b\u5728\u8d64\u9053\u7684\u6728\u661f\u5927\u6c14\u4e2d\uff0c\u6c34\u7ea6\u5360\u5206\u5b50\u76840.25%\u3002\n\u6731\u8bfa\u662f\u4ee5\u5e0c\u814a\u548c\u7f57\u9a6c\u795e\u6731\u5e87\u7279\u7684\u59bb\u5b50\u547d\u540d\u7684\uff0c\u8fd9\u9897\u5de8\u5927\u7684\u884c\u661f\u5c31\u662f\u4ee5\u5979\u7684\u540d\u5b57\u547d\u540d\u7684\u3002\n\u6731\u8bfa\u4e8e2011\u5e748\u67085\u65e5\u642d\u4e58\u963f\u7279\u62c9\u65afV\u53f7\u706b\u7bad\u53d1\u5c04\u5347\u7a7a\u3002\u8fd9\u662fNASA\u65b0\u8fb9\u7586\u4efb\u52a1\u7684\u4e00\u90e8\u5206\uff0c\u5176\u4e2d\u8fd8\u5305\u62ec\u7814\u7a76\u51a5\u738b\u661f\u548c\u963f\u7f57\u79d1\u65af\u7684\u65b0\u5730\u5e73\u7ebf\u4efb\u52a1\uff0c\u8be5\u4efb\u52a1\u53ef\u80fd\u4f1a\u8bbf\u95ee\u4e00\u9897\u9065\u8fdc\u7684\u6052\u661f\u3002\n\u6731\u8bfa\u7684\u4e0b\u4e00\u6b21Perijove\u5c06\u57287\u670825\u65e522\uff1a20\u4e3e\u884c\uff0c\u6240\u4ee5\u9884\u8ba1\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5929\u548c\u51e0\u5468\u5185\u4f1a\u6709\u66f4\u591a\u4ee4\u4eba\u60ca\u53f9\u7684\u7167\u7247\u8fd4\u56de\u3002\n\u822a\u5929\u5668\u5c06\u4e8e2021\u5e747\u670830\u65e5\u5b8c\u6210\u4efb\u52a1\uff0c\u5c4a\u65f6\u5b83\u5c06\u5728\u7b2c35\u5468(\u4e5f\u662f\u6700\u540e\u4e00\u5468)\u671f\u95f4\u8131\u79bb\u8f68\u9053\uff0c\u8fdb\u5165\u6728\u661f\u6e4d\u6d41\u7684\u5927\u6c14\u5c42\u5e76\u89e3\u4f53\u3002\n\u5728\u6211\u7684\u63a8\u7279\u6216LinkedIn\u4e0a\u5173\u6ce8\u6211\u3002\u6211\u53ef\u4ee5\u5728\u6211\u7684\u4e2a\u4eba\u7f51\u7ad9\u4e0a\u67e5\u770b\uff0c\u6216\u8005\u5728\u8fd9\u91cc\u67e5\u770b\u6211\u7684\u4e00\u4e9b\u5176\u4ed6\u5de5\u4f5c\u3002", "note_en": "From 500 million miles away from Earth and while traveling at 127,000 mph, NASA\u2019s Juno spacecraft has done it again.\n  Marking four years in orbit around gas giant planet Jupiter, humanity\u2019s furthest solar-powered spacecraft has sent back yet another batch of astonishing images. It comes in the wake of some  \u201clucky\u201d images taken of Jupiter from Earth.\n    This month and next are the perfect time to  see Jupiter with your own eyes from your backyard, with the giant planet now rising before midnight as it moves towards a bright  opposition in mid-July 2020.\n     In orbit of Jupiter since on July 5, 2016,  Juno has been conducting a scientific investigation of the planet from an elliptical polar orbit that sees it spend most of its time away from Jupiter. However, it\u2019s this orbit that allows Juno to get super-close to Jupiter\u2019s cloud-tops, which it does for a short time every 53 days.\n      Each dip close to Jupiter is called a  perijove\u2014Greek for the extreme points in the orbit of one body around another.\n            However, although Juno has a payload of nine scientific instruments, its JunoCam\u2014a small visible light camera\u2014was included largely for outreach purposes. It\u2019s been the star of the mission so far, and despite being designed to last only eight orbits, it\u2019s still going strong.\n  The raw data from JunoCam is gradually downloaded from the spacecraft after each  perijove and uploaded for a team of citizen scientists to work on. Some of these volunteers have use their impressive image processing skills to produce works of art. These have included  Jupiter\u2019s giant jet-stream,  a classic \u201cJupiter Marble\u201d portrait,  a \u201cchurning\u201d Jupiter and  Jupiter\u2019s \u201cracing stripes.\u201d\n    There are many, many others on  JunoCam\u2019s dedicated website. Included here are just a sample of images processed from its most recent  perijove. Not to mention  Kevin Gill\u2019s fabulous global Jupiter image that adorns the top of this article.\n  However, Juno is also doing science; it recently  teamed up with the Hubble Space Telescope and the ground-based Gemini Observatory in Hawaii to study Jupiter\u2019s storms simultaneously. Thunderheads on Jupiter can stretch-out 40 miles\u2014 five times taller than typical thunderheads on Earth\u2014unleashing super-energetic lightning flashes.\n    As it swoops low over Jupiter\u2019s cloud-tops, Juno has been able to detect radio signals and use them to map where lightning is occurring on both the night-side and day-sides of the planet.\n  Earlier this year Juno also discovered that  Jupiter is a water-world; water makes up about 0.25% of the molecules in Jupiter\u2019s atmosphere at the equator.\n    Juno is named after the wife of the Greek and Roman god Jupiter, after which the giant planet is named.\n  Juno launched on August 5, 2011, on an Atlas V rocket. It\u2019s part of NASA\u2019s New Frontiers missions, which also includes the New Horizons mission that studied  Pluto and  Arrokoth, and which  may visit a distant star.\n    Juno\u2019s next  perijove will take place on July 25, 2o20, so expect more stunning images to be returned in the days and weeks afterwards.\n  The spacecraft will complete its mission on July 30, 2021 when during its 35th and final  perijove it will be de-orbited into Jupiter\u2019s turbulent atmosphere and disintegrate.\n Follow me on\u00a0 Twitter\u00a0or\u00a0 LinkedIn.\u00a0 Check out\u00a0my\u00a0 website\u00a0or\u00a0some of my other work\u00a0 here.", "posttime": "2020-06-12 15:06:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "nasa,\u7f8e\u56fd\u5b87\u822a\u5c40,\u6728\u661f,spacecraft", "title": "\u7f8e\u56fd\u5b87\u822a\u5c40\u5728\u6728\u661f\u7684\u822a\u5929\u5668\u521a\u521a\u53d1\u56de\u4e86\u4e00\u4e9b\u4ee4\u4eba\u77a0\u76ee\u7ed3\u820c\u7684\u7167\u7247", "title_en": "NASA\u2019s Spacecraft at Jupiter Just Sent Back Some Jaw-Dropping Photos", "transed": 1, "url": "https://www.forbes.com/sites/jamiecartereurope/2020/06/11/nasas-spacecraft-at-jupiter-just-sent-back-some-jaw-dropping-photos/#de822745c6c4", "via": "", "real_tags": ["nasa", "\u7f8e\u56fd\u5b87\u822a\u5c40", "\u6728\u661f"]}, {"category": "", "categoryclass": "", "imagename": "73c7dc53707fbba718ee192c9ca3482a.jpg", "infoid": 1006261, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u82f1\u7279\u5c14\u521a\u521a\u5728\u5176\u7f51\u7ad9\u4e0a\u53d1\u5e03\u4e86\u4e00\u4efd\u65b0\u95fb\u7a3f\uff0c\u79f0\u5409\u59c6\u00b7\u51ef\u52d2(Jim Keller)\u56e0\u4e2a\u4eba\u539f\u56e0\u5df2\u4ece\u516c\u53f8\u8f9e\u804c\uff0c\u7acb\u5373\u751f\u6548\u3002\n\u5409\u59c6\u00b7\u51ef\u52d2(Jim Keller)\u5728\u7279\u65af\u62c9(Tesla)\u3001AMD\u3001\u82f9\u679c(Apple)\u3001AMD(\u518d\u6b21)\u548cPA\u534a\u5bfc\u4f53\u53d6\u5f97\u4e00\u7cfb\u5217\u6210\u529f\u540e\uff0c\u4e8e\u4e24\u5e74\u524d\u53d7\u8058\u4e8e\u82f1\u7279\u5c14\u62c5\u4efb\u82f1\u7279\u5c14\u7845\u5de5\u7a0b\u96c6\u56e2\u9ad8\u7ea7\u526f\u603b\u88c1\u3002\u636e\u6211\u4eec\u4e86\u89e3\uff0cJim\u5728\u82f1\u7279\u5c14\u5185\u90e8\u7684\u76ee\u6807\u662f\u7b80\u5316\u7845\u7aef\u7684\u5927\u91cf\u4ea7\u54c1\u5f00\u53d1\u6d41\u7a0b\uff0c\u5e76\u63d0\u4f9b\u6218\u7565\u5e73\u53f0\uff0c\u901a\u8fc7\u8fd9\u4e9b\u5e73\u53f0\u53ef\u4ee5\u5f00\u53d1\u548c\u4f18\u5316\u672a\u6765\u7684\u4ea7\u54c1\u4ee5\u63a8\u5411\u5e02\u573a\u3002\u6211\u4eec\u8fd8\u76f8\u4fe1\uff0c\u5409\u59c6\u00b7\u51ef\u52d2(Jim Keller)\u66fe\u53c2\u4e0e\u7814\u7a76\u82f1\u7279\u5c14\u7684\u5236\u9020\u6d41\u7a0b\uff0c\u4ee5\u53ca\u4e00\u4e9b\u672a\u6765\u7684\u4ea7\u54c1\u3002\n\u82f1\u7279\u5c14\u4eca\u5929\u53d1\u5e03\u7684\u65b0\u95fb\u7a3f\u79f0\uff0c\u5409\u59c6\u00b7\u51ef\u52d2\u56e0\u4e2a\u4eba\u539f\u56e0\u5c06\u4e8e6\u670811\u65e5\u79bb\u804c.\u3002\u7136\u800c\uff0c\u4ed6\u5c06\u4f5c\u4e3a\u987e\u95ee\u7559\u5728\u516c\u53f8\u516d\u4e2a\u6708\uff0c\u4ee5\u534f\u52a9\u8fc7\u6e21\u3002\n\u7531\u4e8e\u5409\u59c6\u7684\u79bb\u5f00\uff0c\u82f1\u7279\u5c14\u5df2\u7ecf\u5728\u5185\u90e8\u8c03\u6574\u4e86\u4e00\u4e9b\u5de5\u4f5c\u5c0f\u7ec4\uff0c\u8fdb\u884c\u4e86\u4e00\u7cfb\u5217\u7684\u664b\u5347\u3002\nNet Speed\u524d\u9996\u5e2d\u6267\u884c\u5b98\u517c\u521b\u59cb\u4eba\u6851\u8fbe\u91cc\u00b7\u7c73\u7279\u62c9(Sundari Mitra)\u5c06\u9886\u5bfc\u4e00\u4e2a\u65b0\u6210\u7acb\u7684\u77e5\u8bc6\u4ea7\u6743\u5de5\u7a0b\u96c6\u56e2\u3002\n\u5409\u59c6\u00b7\u51ef\u52d2(Jim Keller)\u5728\u8be5\u884c\u4e1a\u7684\u5386\u53f2\u5df2\u7ecf\u6709\u4e86\u5f88\u597d\u7684\u8bb0\u5f55-\u4ed6\u7684\u5de5\u4f5c\u5728\u63a8\u52a8\u8be5\u884c\u4e1a\u5411\u524d\u53d1\u5c55\u7684\u591a\u4e2a\u9886\u57df\u4ea7\u751f\u4e86\u91cd\u5927\u5f71\u54cd\u3002\u8fd9\u5305\u62ec\u82f9\u679cA4\u548cA5\u5904\u7406\u5668\u7684\u5de5\u4f5c\uff0cAMD\u7684K8\u548cZen\u9ad8\u7ea7\u8bbe\u8ba1\uff0c\u4ee5\u53ca\u7279\u65af\u62c9\u7528\u4e8e\u81ea\u52a8\u9a7e\u9a76\u7684\u5b9a\u5236\u7845\uff0c\u5206\u6790\u5e08\u8ba9\u7279\u65af\u62c9\u7684\u7ade\u4e89\u5bf9\u624b\u8868\u793a\uff0c\u8fd9\u4e9b\u7845\u7247\u4f7f\u8be5\u516c\u53f8\u9886\u5148\u957f\u8fbe7\u5e74\u3002\n\u5728\u63a5\u53d7\u82f1\u7279\u5c14\u8fd9\u4efd\u5de5\u4f5c\u51e0\u5468\u540e\uff0c\u6211\u4eec\u91c7\u8bbf\u4e86\u5409\u59c6\u00b7\u51ef\u52d2(Jim Keller)\uff0c\u4e86\u89e3\u5230\u51ef\u52d2\u662f\u62ff\u7740\u6273\u624b\u8fdb\u5165\u516c\u53f8\u7684\u3002\u51ef\u52d2\u4e00\u518d\u8868\u793a\uff0c\u4ed6\u662f\u4e00\u4e2a\u4fee\u590d\u8005\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u6709\u8fdc\u89c1\u5353\u8bc6\u7684\u4eba\uff0c\u82f1\u7279\u5c14\u5c06\u5141\u8bb8\u4ed6\u5728\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u5927\u7684\u89c4\u6a21\u4e0a\u5b9e\u73b0\u53d8\u9769\u3002\nJK\uff1a\u6211\u559c\u6b22\u6574\u4e2a\u6d41\u7a0b\uff0c\u6bd4\u5982\uff0c\u6211\u4e00\u76f4\u5728\u548c\u4eba\u4eec\u8c08\u8bba\u6211\u4eec\u7684\u63d0\u5347\u5b9e\u9a8c\u5ba4\u548c\u7535\u6e90\u6027\u80fd\u8868\u5f81\u5de5\u4f5c\u662f\u5982\u4f55\u8fdb\u884c\u7684\uff0c\u6bd4\u5982\u6211\u4eec\u7684SoC\u4ee5\u53ca\u96c6\u6210\u548c\u9a8c\u8bc1\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f\u6211\u559c\u6b22\u68c0\u67e5\u6574\u4e2a\u5806\u6808\u3002\u6211\u4eec\u6b63\u5728\u8bc4\u4f30\u4e00\u4e2a\u65b0\u7684\u8bbe\u8ba1\u9700\u8981\u591a\u957f\u65f6\u95f4\u624d\u80fd\u8fdb\u5165\u4eff\u771f\u9636\u6bb5\uff0c\u8d28\u91cf\u6307\u6807\u662f\u4ec0\u4e48\uff0c\u6240\u4ee5\u6211\u5230\u5904\u90fd\u662f\u3002\n\u6211\u4eec\u521a\u521a\u53ec\u5f00\u4e86\u4e00\u6b21\u4eba\u5de5\u667a\u80fd\u5cf0\u4f1a\uff0c\u6240\u6709\u4eba\u5de5\u667a\u80fd\u9886\u57df\u7684\u9886\u5bfc\u8005\u90fd\u5728\u90a3\u91cc\uff0c\u6211\u4eec\u6709\u76f8\u5f53\u591a\u7684\u9879\u76ee\u5728\u90a3\u91cc\u8fdb\u884c\uff0c\u6211\u7684\u610f\u601d\u662f\uff0c\u82f1\u7279\u5c14\u5df2\u7ecf\u662f\u4eba\u5de5\u667a\u80fd\u9886\u57df\u7684\u4e3b\u8981\u53c2\u4e0e\u8005\uff0c\u5c31\u50cf\u51e0\u4e4e\u6240\u6709\u7684\u8f6f\u4ef6\u5806\u6808\u90fd\u8fd0\u884c\u5728\u81f3\u5f3a\u4e0a\u4e00\u6837\uff0c\u6211\u4eec\u6709\u76f8\u5f53\u591a\u7684\u9879\u76ee\u5728\u8fdb\u884c\u4e2d\u3002\u6709\u5148\u8fdb\u7684\u5f00\u53d1\u4eba\u5458\uff0c\u6709\u7ec6\u8282\u7684\u6267\u884c\uff0c\u6709\u8fc7\u7a0b\u548c\u65b9\u6cd5\u8bba\u7684\u57f9\u517b\u3002\u662f\u7684\uff0c\u6211\u5728\u8ba1\u7b97\u673a\u884c\u4e1a\u6709\u76f8\u5f53\u4e30\u5bcc\u7684\u7ecf\u9a8c\u3002\u6211\u662f\u4e00\u4e2a\u201c\u5343\u65b9\u767e\u8ba1\u201d\u7684\u6280\u672f\u4eba\u5458--\u5f53\u6211\u4eec\u5728\u6d77\u6cd5\u7684\u65f6\u5019\uff0c\u6211\u6b63\u5728\u5411\u4e00\u4f4d\u5de5\u7a0b\u5e08\u62b1\u6028\u5939\u5177\u7684\u6e05\u6d01\u5ea6\uff0c\u5728\u90a3\u91cc\uff0c\u8868\u9762\u8d34\u88c5\u5c01\u88c5\u63d2\u5165\u5230\u6d4b\u8bd5\u677f\u4e0a\u3002\n\u5409\u59c6\u7684\u7ecf\u5386\u8868\u660e\uff0c\u4ed6\u559c\u6b22\u5728\u4e00\u5bb6\u516c\u53f8\u5446\u4e0a\u51e0\u5e74\uff0c\u7136\u540e\u53bb\u8fce\u63a5\u4e0d\u540c\u7684\u6311\u6218\u3002\u4ed6\u5728\u82f1\u7279\u5c14\u5de5\u4f5c\u7684\u4e24\u5e74\u662f\u4ed6\u4efb\u671f\u6700\u77ed\u7684\u4e00\u6bb5\u65f6\u95f4\uff0c\u5c31\u5728\u6700\u8fd1\uff0c\u798f\u5e03\u65af\u53d1\u8868\u4e86\u4e00\u7bc7\u5173\u4e8e\u5409\u59c6\u7684\u6df1\u5ea6\u66dd\u5149\uff0c\u79f0\u201c\u82f1\u7279\u5c14\u5c06\u5176\u82af\u7247\u62bc\u6ce8\u4e8e\u5fae\u5904\u7406\u5668\u7b56\u5212\u4eba\u5409\u59c6\u00b7\u51ef\u52d2\u201d\u3002\u56e0\u6b64\uff0c\u57fa\u4e8e\u4ed6\u4e4b\u524d\u7684\u89d2\u8272\uff0c\u4ed6\u76f8\u5bf9\u8f83\u65e9\u79bb\u5f00\u7684\u4e8b\u5b9e\u6709\u70b9\u4e0d\u540c\u3002\n\u82f1\u7279\u5c14\u5173\u4e8e\u6b64\u4e8b\u7684\u65b0\u95fb\u7a3f\u8868\u660e\uff0c\u8fd9\u4ef6\u4e8b\u5df2\u7ecf\u77e5\u9053\u4e86\u8db3\u591f\u957f\u7684\u65f6\u95f4\uff0c\u53ef\u4ee5\u91cd\u65b0\u5b89\u6392\u4e00\u4e9b\u5de5\u4f5c\u7ec4\u6765\u62a5\u9053\u5409\u59c6\u7684\u89d2\u8272\u3002\u5409\u59c6\u4f3c\u4e4e\u8fd8\u5c06\u5728\u82f1\u7279\u5c14\u670d\u52a1\u81f3\u5c11\u516d\u4e2a\u6708\uff0c\u62c5\u4efb\u987e\u95ee\uff0c\u6240\u4ee5\u4ed6\u53ef\u80fd\u9700\u8981\u5f88\u957f\u65f6\u95f4\u624d\u80fd\u5728\u8be5\u884c\u4e1a\u83b7\u5f97\u53e6\u4e00\u4e2a\u804c\u4f4d\u3002\n\u5e94\u8be5\u6307\u51fa\u7684\u662f\uff0c\u5409\u59c6\u00b7\u51ef\u52d2\u4ecd\u5c06\u4ee3\u8868\u82f1\u7279\u5c14\u5728\u4eca\u5e74\u7684\u70ed\u70b9\u82af\u7247\u5927\u4f1a\u4e0a\u53d1\u8868\u4e3b\u65e8\u6f14\u8bb2\u4e4b\u4e00\u3002\u5982\u679c\u60c5\u51b5\u53d1\u751f\u53d8\u5316\uff0c\u6211\u4eec\u5c06\u66f4\u65b0\u8fd9\u7bc7\u62a5\u9053\u3002\n\u53d1\u8868\u8bc4\u8bba\u6211\u5e0c\u671b\u4ed6\u8eab\u4f53\u5065\u5eb7\u3002\u5409\u59c6\u00b7\u51ef\u52d2(Jim Keller)\u662f\u4e00\u4f4d\u534a\u5bfc\u4f53\u6447\u6eda\u660e\u661f\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u4ed6\u9886\u5bfc\u4e86\u9632\u6b62\u6211\u7684\u8f66\u649e\u4e0a\u677e\u9f20\u7684CPU\u7684\u8bbe\u8ba1\uff0c\u4e5f\u5c31\u662f\u6211PC\u4e0a\u7684CPU\u548c\u624b\u673a\u4e0a\u7684CPU\u3002\u56de\u8986\u3002\n\u7cdf\u7cd5\u7684\u662f\uff0cCPU\u4e0d\u80fd\u963b\u6b62\u4f60\u76f4\u63a5\u649e\u5230\u524d\u9762\u7684\u4e00\u8f86\u7ffb\u8f6c\u9759\u6b62\u5361\u8f66\u2026\u3002\u56de\u8986\u3002\n\u6211\u731c\u4ed6\u7684\u5de5\u4f5c\u5df2\u7ecf\u5b8c\u6210\u4e86\uff0c\u706b\u7bad\u6e56/\u67f3\u6811\u6e7e\u5c06\u4f1a\u662f\u6c99\u6865\u7ea7\u522b\u7684\u597d\uff0c\u5426\u5219\u8239\u5728\u6240\u6709\u56de\u590d\u4e4b\u540e\u90fd\u4e0d\u80fd\u6389\u5934\u4e86\u3002\n\u6211\u6709\u4e00\u79cd\u611f\u89c9\uff0c\u4ed6\u5728\u82f1\u7279\u5c14\u4e0e\u592a\u591a\u4eba\u6b63\u9762\u4ea4\u950b\uff0c\u65e0\u6cd5\u5b8c\u6210\u4ed6\u9700\u8981\u505a\u7684\u5de5\u4f5c\u3002\u82f1\u7279\u5c14\u786e\u5b9e\u6709\u4e00\u79cd\u975e\u5e38\u50b2\u6162\u7684\u6001\u5ea6\uff0c\u8ba4\u4e3a\u4ed6\u4eec\u6beb\u65e0\u7406\u7531\u5730\u5728\u4efb\u4f55\u4e8b\u60c5\u4e0a\u90fd\u662f\u6700\u597d\u7684\u3002\u4e5f\u8bb8\u4ed6\u4e0d\u613f\u610f\u559d\u82f1\u7279\u5c14\u9177\u7231\u996e\u6599\u3002\u56de\u8986\n\u8fd9\u5c31\u662f\u6211\u8ba4\u4e3a\u4ed6\u8fd9\u4e48\u505a\u7684\u539f\u56e0\uff1a\u4ed6\u53ef\u80fd\u5f97\u4e0d\u5230\u4ed6\u60f3\u8981\u7684\u7ed3\u679c\uff0c\u4e0d\u5f97\u4e0d\u603b\u662f\u4e0e\u82f1\u7279\u5c14\u5df2\u7ecf\u53d8\u6210\u7684\u5b98\u50da\u602a\u517d\u62fc\u547d\u6597\u4e89\u3002\u8001\u5b9e\u8bf4\uff0c\u6211\u5f88\u60ca\u8bb6\u4ed6\u575a\u6301\u4e86\u8fd9\u4e48\u957f\u65f6\u95f4\uff0c\u56e0\u4e3a\u6211\u4e2a\u4eba\u77e5\u9053\u6709\u4e00\u4e9b\u5458\u5de5\u56e0\u4e3a\u4e00\u5bb6\u8150\u70c2\u7684\u516c\u53f8\u53d8\u5f97\u61d2\u60f0\u800c\u79bb\u804c\u3002\u56de\u8986\u3002\n\u6211\u5c31\u662f\u548c\u8fd9\u6837\u4e00\u4f4d\u4ee5\u524d\u7684\u5458\u5de5\u4e00\u8d77\u5de5\u4f5c\u7684\u3002\u4ed6\u7684\u9884\u6d4b\u662f\uff0c\u9664\u975e\u4ed6\u4eec\u91cd\u5efa\u7ba1\u7406\u56e2\u961f\u548c\u6574\u4e2a\u6587\u5316\uff0c\u5426\u5219\u6ca1\u6709\u4efb\u4f55\u4fee\u590d\u8005\u80fd\u591f\u7ea0\u6b63\u82f1\u7279\u5c14\u7684\u547d\u8fd0\u3002\u56de\u8986\u3002\n\u6211\u540c\u610f\u3002\u4e0eAMD\u4e0d\u540c\uff0c\u82f1\u7279\u5c14\u53ef\u80fd\u4e0d\u90a3\u4e48\u5bb9\u6613\u5bfc\u822a\u548c\u7ba1\u7406\u3002\u56de\u8986", "note_en": "Intel has just published a news release on its website stating that Jim Keller has resigned from the company, effective immediately, due to personal reasons.\n  Jim Keller was hired by Intel two years ago to the role as Senior Vice President of Intel\u2019s Silicon Engineering Group, after a string of successes at Tesla, AMD, Apple, AMD (again), and PA Semiconductor. As far as we understand, Jim\u2019s goal inside Intel was to streamline a lot of the product development process on the silicon side, as well as providing strategic platforms though which future products can be developed and optimized to market. We also believe that Jim Keller has had a hand in looking at Intel\u2019s manufacturing processes, as well as a number of future products.\n  Intel\u2019s  press release today states that Jim Keller is leaving the position on June 11 th due to personal reasons. However, he will remain with the company as a consultant for six months in order to assist with the transition.\n  As a result of Jim\u2019s departure, Intel has realigned some of its working groups internally with a series of promotions.\n  Sundari Mitra, the former CEO and founder of Net Speed, will lead a newly created IP Engineering Group.\n  Jim Keller\u2019s history in the industry has been well documented \u2013 his work has had a significant effect in a number of areas that have propelled the industry forward. This includes work on Apple\u2019s A4 and A5 processors, AMD\u2019s K8 and Zen high-level designs, as well as Tesla\u2019s custom silicon for self driving which analysts have Tesla\u2019s competitors have said put the company up to seven years ahead.\n  With  our interview with Jim Keller, several weeks after taking the job at Intel, we learned that Keller went in to the company with a spanner. Keller has repeatedly said that he\u2019s a fixer, more than a visionary, and Intel would allow him to effect change at a larger scale than he had ever done previously.\n    JK: I like the whole pipeline, like, I&#39;ve been talking to people about how do our bring up labs and power performance characterization work, such as how does our SoC and integration and verification work? I like examining the whole stack. We&#39;re doing an evaluation on how long it takes to get a new design into emulation, what the quality metrics are, so yeah I&#39;m all over the place.\n  We just had an AI summit where all the leaders for AI were there, we have quite a few projects going on there, I mean Intel&#39;s a major player in AI already, like virtually every software stack runs on Xeon and we have quite a few projects going on. There&#39;s the advanced development stuff, there&#39;s nuts and bolts execution, there&#39;s process and methodology bring up. Yeah I have a fairly broad experience in the computer business. I&#39;m a \u2018no stone unturned\u2019 technical kind of person \u2013 when we were in Haifa and I was bugging an engineer about the cleanliness of the fixture where the surface mount packages plug into the test boards.\n  Jim\u2019s history has shown that he likes to spend a few years at a company and move on to different sorts of challenges. His two year stint at Intel has been one of his shortest tenures, and even recently Forbes  published a deep expose on Jim, stating that \u2018Intel is betting its chips on microprocessor mastermind Jim Keller\u2019. So the fact that he is leaving relatively early based on his previous roles is somewhat different.\n  Intel\u2019s press release on the matter suggests that this has been known about for enough time to rearrange some of the working groups around to cover Jim\u2019s role. Jim will be serving at Intel for at least another six months it seems, in the role of a consultant, so it might be that long before he lands another spot in the industry.\n  It should be noted that Jim Keller is still listed to give one of the keynote addresses at this year\u2019s Hot Chips conference on behalf on Intel. We will update this story if that changes.\n  POST A COMMENT      I hope he is in good health. Jim Keller is a semiconductor rock star if ever there was one, and he led the design of the CPU that keeps my car from hitting squirrels, the CPU that sits in my PC, and the CPU that sits in my phone.  Reply\n      To bad that CPU can&#39;t stop you from hitting a flip stationary truck directly in front though...  Reply\n  I guess his work is done and Rocket Lake/Willow Cove will be Sandy Bridge levels of good, or the ship couldn&#39;t be turned around after all  Reply\n  I have a feeling that he butted heads with too many people at Intel and wasn&#39;t able to do the work that he needed to do. Intel does have a very arrogant attitude that they&#39;re the best at everything for no good reason. Perhaps he was unwilling to drink the Intel Kool-Aid.  Reply\n    Here\u2019s why I feel he did: he probably couldn\u2019t get results he wanted having to always fight tooth and nail with the bureaucratic monstrosity Intel has become. Honestly, I am surprised he lasted as long as he did because I personally know of employees who have left because of the sluggard of a rotting corporation it has become.  Reply\n  I work with just such a previous employee. His prediction was that unless they rebuilt the management teams and their whole culture, no fixer was going to be able to right the ship that is Intel.  Reply\n  I agree. Unlike in AMD, Intel may not be as easy to navigate and manage.   Reply", "posttime": "2020-06-12 13:41:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u82f1\u7279\u5c14,keller", "title": "\u5409\u59c6\u00b7\u51ef\u52d2\u4ece\u82f1\u7279\u5c14\u8f9e\u804c\uff0c\u7acb\u5373\u751f\u6548", "title_en": "Jim Keller Resigns from Intel, Effective Immediately", "transed": 1, "url": "https://www.anandtech.com/show/15846/jim-keller-resigns-from-intel-effective-immediately", "via": "", "real_tags": ["\u82f1\u7279\u5c14", "keller"]}, {"category": "", "categoryclass": "", "imagename": "c103d3ab8af6604e14ca21a22082ce9b.jpg", "infoid": 1006260, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51e0\u5e74\u524d\uff0c\u6211\u5750\u5728\u957f\u5c9b\u5361\u5c14\u00b7\u8428\u82ac\u5a1c(Carl Safina)\u7684\u9662\u5b50\u91cc\u559d\u8336\uff0c\u5076\u5c14\u62cd\u62cd\u8eba\u5728\u6211\u811a\u8fb9\u7684\u4e00\u53ea\u72d7\u3002\u8428\u82ac\u5a1c\u8bf4\u7684\u662f\u72fc\u7684\u5bbd\u5b8f\u5927\u91cf\u3002\u9ec4\u77f3\u56fd\u5bb6\u516c\u56ed\u91cc\u7684\u4e00\u53ea\u72fc\uff0c\u88ab\u79f0\u4e3a21\u53f7\uff0c\u4ece\u672a\u8f93\u8fc7\u4e00\u573a\u6218\u6597\uff0c\u800c\u4e14\u4e0e\u5927\u591a\u6570\u72fc\u4e0d\u540c\u7684\u662f\uff0c\u5b83\u4ece\u672a\u6740\u6b7b\u8fc7\u88ab\u51fb\u8d25\u7684\u5bf9\u624b\u3002\u516c\u56ed\u62a4\u6797\u5458\u79f0\u4ed6\u4e3a\u5b8c\u7f8e\u7684\u72fc\u3002\n\u8428\u82ac\u5a1c\u8bf4\uff0c\u5f53\u4eba\u7c7b\u91ca\u653e\u88ab\u51fb\u8d25\u7684\u5bf9\u624b\u800c\u4e0d\u662f\u6740\u6b7b\u4ed6\u4eec\u65f6\uff0c\u5728\u65c1\u89c2\u8005\u770b\u6765\uff0c\u88ab\u51fb\u8d25\u7684\u4eba\u4ecd\u7136\u4f1a\u5931\u53bb\u5730\u4f4d\uff0c\u4f46\u80dc\u5229\u8005\u4f3c\u4e4e\u66f4\u52a0\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u3002\u201c\u65c1\u89c2\u8005\u53ef\u80fd\u4f1a\u89c9\u5f97\u8ffd\u968f\u8fd9\u6837\u4e00\u4e2a\u575a\u5f3a\u4f46\u504f\u7231\u5fcd\u8010\u7684\u4eba\u662f\u53ef\u53d6\u7684\u3002\u201d\n\u8428\u82ac\u5a1c\u4e0d\u662f\u4ec0\u4e48\u80e1\u8bf4\u516b\u9053\u7684\u5546\u4eba\uff0c\u4e5f\u4e0d\u662f\u65b0\u4e16\u754c\u7684\u8ff7\u96fe\u5c45\u4f4f\u8005\u3002\u4ed6\u4ece\u4e8b\u9002\u5f53\u7684\u79d1\u5b66\u7814\u7a76\u3002\u4ed6\u662f\u7ebd\u7ea6\u77f3\u6eaa\u5927\u5b66(Stony Brook University)\u7b2c\u4e00\u4f4d\u7814\u7a76\u81ea\u7136\u4e0e\u4eba\u7c7b\u7684\u7279\u8058\u6559\u6388\uff0c\u4ed6\u521a\u521a\u51fa\u7248\u4e86\u201c\u6210\u4e3a\u91ce\u751f\u52a8\u7269\uff1a\u52a8\u7269\u5982\u4f55\u5b66\u4e60\u6210\u4e3a\u52a8\u7269\u201d(Becning Wild\uff1aHow Animals Learn to Be Animals)\u4e00\u4e66\u3002\u8fd9\u4e3b\u8981\u662f\u5173\u4e8e\u6587\u5316\u7684\u3002\u4e0d\uff0c\u4e0d\u662f\u4eba\u7c7b\u6587\u5316\u4e2d\u7684\u52a8\u7269\uff1a\u975e\u4eba\u7c7b\u52a8\u7269\u4e2d\u7684\u6587\u5316\u3002\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u4f8b\u5b50\uff1a\u5ea7\u5934\u9cb8\u90fd\u5531\u540c\u4e00\u9996\u6b4c\uff0c\u4f46\u53ea\u6709\u5f53\u5b83\u4eec\u751f\u6d3b\u5728\u540c\u4e00\u4e2a\u6d77\u6d0b\u65f6\uff1b\u4e0d\u540c\u7684\u6d77\u6d0b\u6709\u4e0d\u540c\u7684\u6b4c\u2026\u3002\u6bcf\u5e74\u6240\u6709\u7684\u6b4c\u66f2\u90fd\u4f1a\u6539\u53d8\u3002\u8fd8\u6709\u4e00\u4e2a\u66f4\u6734\u7d20\u7684\uff1a\u84dd\u5c71\u96c0\u5b66\u4f1a\u4e86\u4ece\u7559\u5728\u95e8\u53e3\u53f0\u9636\u4e0a\u7684\u5976\u74f6\u91cc\u53d6\u5976\u6cb9\uff0c\u8fd9\u4e00\u77e5\u8bc6\u5e2d\u5377\u4e86\u82f1\u56fd\u3002\u73b0\u5728\u725b\u5976\u3001\u74f6\u5b50\u548c\u8d2d\u4e70\u4e60\u60ef\u90fd\u4e0d\u540c\u4e86\uff0c\u8fd9\u65b9\u9762\u7684\u6587\u5316\u5df2\u7ecf\u4e0d\u5b58\u5728\u4e86\u3002\n\u8428\u82ac\u5a1c\u7684\u4e66\u662f\u57fa\u4e8e\u5bf9\u91ce\u751f\u52a8\u7269\u5b9e\u5730\u9879\u76ee\u7684\u4e09\u6b21\u5ef6\u957f\u8bbf\u95ee\uff0c\u5e76\u5c06\u6211\u4eec\u5e26\u5230\u4e0e\u62b9\u9999\u9cb8\u3001\u7329\u7ea2\u91d1\u521a\u9e66\u9e49\u548c\u9ed1\u7329\u7329\u60ca\u4eba\u7684\u4eb2\u5bc6\u6df1\u5ea6\u3002\u62b9\u9999\u9cb8\u4f7f\u7528\u4e0d\u540c\u7684\u58f0\u97f3\u5e8f\u5217\u6765\u5ba3\u5e03\u5f7c\u6b64\u7684\u8eab\u4efd\uff0c\u65e0\u8bba\u662f\u4f5c\u4e3a\u4e2a\u4f53\u8fd8\u662f\u4f5c\u4e3a\u4e00\u4e2a\u5bb6\u65cf\u7684\u6210\u5458-\u662f\u7684\uff0c\u6709\u70b9\u50cf\u540d\u5b57\u3002\u4f60\u4e0d\u80fd\u5c06\u4e00\u53ea\u83b7\u6551\u7684\u91d1\u521a\u9e66\u9e49\u653e\u5f52\u91ce\u5916\uff1a\u6bcf\u53ea\u91d1\u521a\u9e66\u9e49\u90fd\u9700\u8981\u63a5\u53d7\u91ce\u751f\u6280\u80fd\u65b9\u9762\u7684\u6559\u80b2\uff0c\u8fd9\u662f\u5b83\u4eec\u901a\u5e38\u4f1a\u4ece\u7236\u6bcd\u90a3\u91cc\u5b66\u5230\u7684\u6280\u80fd\u3002\u9ed1\u7329\u7329\u4ece\u4e00\u4e2a\u79cd\u7fa4\u5230\u53e6\u4e00\u4e2a\u79cd\u7fa4\u6709\u4e0d\u540c\u7684\u5de5\u5177\u4f7f\u7528\u548c\u72e9\u730e\u4f20\u7edf\u3002\n\u6211\u5728\u5b66\u6821\u91cc\u5b66\u5230\uff0c\u52a8\u7269\u6709\u672c\u80fd\uff0c\u4f46\u4eba\u7c7b\u6709\u5b66\u4e60\u80fd\u529b\u3002\u540e\u6765\uff0c\u8fd9\u4e00\u70b9\u53d8\u5f97\u66f4\u52a0\u7cbe\u81f4\uff1a\u52a8\u7269\u53ea\u80fd\u901a\u8fc7\u5b83\u4eec\u7684\u57fa\u56e0\u4f20\u9012\u4e1c\u897f\uff0c\u4f46\u6211\u4eec\u4eba\u7c7b\u53ef\u4ee5\u901a\u8fc7\u699c\u6837\u548c\u6559\u5bfc-\u7b80\u800c\u8a00\u4e4b\uff0c\u901a\u8fc7\u6587\u5316-\u4f20\u9012\u4e1c\u897f\u3002\u6587\u5316\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u662f\u4eba\u7c7b\u800c\u4ed6\u4eec\u4e0d\u662f\u3002\n\u4f46\u662f\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u4eba\u7c7b\u548c\u975e\u4eba\u7c7b\u751f\u6d3b\u4e4b\u95f4\u5212\u51fa\u7684\u6240\u6709\u575a\u56fa\u7684\u5c4f\u969c\u4e00\u6837\uff0c\u5373\u4f7f\u662f\u6700\u7c97\u7565\u7684\u68c0\u67e5\u4e5f\u4f1a\u53d1\u73b0\u4e00\u767e\u4e07\u4e2a\u6f0f\u6d1e\u548c\u758f\u677e\u3002\u5f53\u7136\uff0c\u975e\u4eba\u7c7b\u7684\u52a8\u7269\u4e5f\u6709\u6587\u5316\u3002\n\u66f4\u591a\u7684\u4f8b\u5b50\uff1a\u5728\u5f02\u5e38\u5e72\u65f1\u7684\u65f6\u671f\uff0c\u4e00\u4f4d\u5e74\u957f\u7684\u5973\u65cf\u957f\u5e26\u9886\u7684\u5927\u8c61\u7fa4\u4f53\u627e\u4e0d\u5230\u6c34\uff0c\u800c\u5e74\u8f7b\u9886\u5bfc\u4eba\u7684\u5927\u8c61\u7fa4\u4f53\u627e\u4e0d\u5230\u6c34\u3002\u8fd9\u662f\u4e00\u79cd\u6587\u5316\u77e5\u8bc6\u3002\u6fb3\u5927\u5229\u4e9a\u9ca8\u9c7c\u6e7e\u7684\u5bbd\u543b\u6d77\u8c5a--\u800c\u4e0d\u662f\u5176\u4ed6\u4efb\u4f55\u5730\u65b9--\u5728\u5e95\u98df\u65f6\u4f7f\u7528\u6d77\u7ef5\u4fdd\u62a4\u5b83\u4eec\u7684\u9f3b\u5b50\uff1b\u6bcd\u4eb2\u4eec\u5411\u5e74\u5e7c\u7684\u6d77\u8c5a\u5c55\u793a\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u65c5\u884c\u4e00\u6bb5\u4e0d\u9519\u7684\u8ddd\u79bb\uff0c\u540c\u4e00\u7269\u79cd\u7684\u9e1f\u5531\u7740\u7565\u6709\u4e0d\u540c\u7684\u6b4c\uff1a\u7b80\u800c\u8a00\u4e4b\uff0c\u4e0d\u540c\u7684\u65b9\u8a00\u3002\n\u8fd9\u4e5f\u662f\u8428\u82ac\u5a1c\u6240\u8bf4\u7684\u5173\u4e8e\u5148\u5929\u548c\u540e\u5929\u7684\u201c\u611a\u8822\u8fa9\u8bba\u201d\u7684\u6b63\u786e\u7c7b\u522b\uff1a\u663e\u7136\uff0c\u8fd9\u4e24\u8005\u90fd\u662f\u76f8\u5173\u7684\uff0c\u65e0\u8bba\u662f\u5bf9\u4eba\u7c7b\u8fd8\u662f\u5bf9\u5176\u4ed6\u6240\u6709\u4eba\u3002\u201c\u9cb8\u9c7c\u53ef\u4ee5\u5b66\u4e60\uff0c\u4f46\u5b83\u4eec\u4e0d\u4f1a\u5b66\u6cd5\u8bed\u3002\u201d\u4eba\u7c7b\u53ef\u4ee5\u5531\u6b4c\uff0c\u4f46\u4e0d\u50cf\u5ea7\u5934\u9cb8\u90a3\u6837\u3002\n\u6211\u770b\u8fc7\u72ee\u5b50\u5b66\u4e60\u3002\u5e7c\u5d3d\u5728\u7a81\u88ad\u548c\u8ffd\u9010\u7684\u6e38\u620f\u4e2d\u5b66\u4e60\u72e9\u730e\u3002\u6211\u89c1\u8fc7\u6210\u5e74\u4eba\u53d1\u8d77\u6e38\u620f\uff0c\u5f53\u7136\u662f\u4e3a\u4e86\u597d\u73a9\uff0c\u4f46\u4ed6\u4eec\u4e5f\u5728\u6559\u4e66\u3002\n\u8def\u5fb7\u7ef4\u5e0c\u00b7\u7ef4\u7279\u6839\u65af\u5766(Ludwig Wittgenstein)\u66fe\u8bf4\u8fc7\u4e00\u53e5\u540d\u8a00\uff0c\u5982\u679c\u72ee\u5b50\u4f1a\u8bf4\u8bdd\uff0c\u6211\u4eec\u5c31\u65e0\u6cd5\u7406\u89e3\u4ed6\u3002\u6211\u82b1\u4e86\u76f8\u5f53\u591a\u7684\u65f6\u95f4\u548c\u72ee\u5b50\u5728\u4e00\u8d77\uff0c\u6211\u60f3\u6211\u53ef\u4ee5\u548c\uff0c\u6bd4\u65b9\u8bf4\uff0c\u53bb\u5e74\u6211\u5728\u5362\u5b89\u74dc\u6cb3\u8c37\u62dc\u8bbf\u8fc7\u7684\u9a84\u50b2\u4e2d\u7684\u963f\u5c14\u6cd5\u96cc\u72ee\u8fdb\u884c\u4e00\u6b21\u76f8\u5f53\u4f53\u9762\u7684\u4ea4\u8c08\u3002\u6211\u4eec\u53ef\u4ee5\u8ba8\u8bba\u72e9\u730e\uff0c\u5929\u6c14\uff0c\u5979\u7684\u540c\u4f34\uff0c\u4e89\u5435\uff0c\u90bb\u5c45\u7684\u9a84\u50b2\uff0c\u65b0\u751f\u7684\u5e7c\u5d3d\uff0c\u4ee5\u53ca\u6574\u4e2a\u9a84\u50b2\u5728\u524d\u4e00\u5929\u665a\u4e0a\u5206\u4eab\u7684\u7f8e\u5999\u76db\u5bb4\u3002\n\u8428\u82ac\u5a1c\u548c\u6211\u8c08\u5230\u4e86\u5fc3\u7406\u7406\u8bba\u3002\u4ed6\u8bf4\uff1a\u201c\u4ece\u6839\u672c\u4e0a\u8bf4\uff0c\u8fd9\u662f\u4e00\u79cd\u60f3\u6cd5\uff0c\u8ba4\u4e3a\u4e00\u79cd\u751f\u7269\u7684\u5934\u8111\u80fd\u591f\u77e5\u9053\u53e6\u4e00\u79cd\u751f\u7269\u4e5f\u6709\u5934\u8111\uff0c\u4ed6\u4eec\u7684\u8bae\u7a0b\u53ef\u80fd\u4e0e\u4f60\u7684\u8bae\u7a0b\u4e0d\u540c\u3002\u201d\u51e0\u5341\u5e74\u6765\uff0c\u4eba\u4eec\u4e00\u76f4\u58f0\u79f0\u53ea\u6709\u4eba\u7c7b\u624d\u6709\u5fc3\u7406\u7406\u8bba\uff0c\u4f46\u5728\u8fc7\u53bb\u768425\u5e74\u91cc\uff0c\u4eba\u4eec\u4e00\u76f4\u8ba4\u4e3a\u5176\u4ed6\u52a8\u7269\u4e5f\u53ef\u80fd\u6709\u5fc3\u7406\u7406\u8bba\u3002\u4ed6\u4e3e\u4e86\u4ed6\u7684\u72d7\u548c\u4e00\u53ea\u5929\u9e45\u5bf9\u5cd9\u7684\u4f8b\u5b50\uff0c\u5728\u8fd9\u573a\u5bf9\u5cd9\u4e2d\uff0c\u5404\u65b9\u90fd\u7406\u89e3\u5bf9\u65b9\u7684\u7acb\u573a\u3002\n\u4e3a\u4ec0\u4e48\u6211\u4eec\u5982\u6b64\u6297\u62d2\u4eba\u7c7b\u548c\u975e\u4eba\u7c7b\u52a8\u7269\u4e4b\u95f4\u7684\u5171\u540c\u70b9\u5462\uff1f\u6bd5\u7adf\uff0c\u6211\u4eec\u4e0e\u9ed1\u7329\u7329\u5171\u4eab98%\u7684\u57fa\u56e0\u3002\u8fd9\u751a\u81f3\u4e0d\u50cf\u662f\u4e00\u4e2a\u65b0\u89c2\u70b9\uff1a\u67e5\u5c14\u65af\u00b7\u8fbe\u5c14\u6587\u8bf4\u8fc7\uff1a\u201c\u4eba\u548c\u9ad8\u7b49\u52a8\u7269\u4e4b\u95f4\u7684\u533a\u522b\uff0c\u867d\u7136\u5f88\u5927\uff0c\u4f46\u80af\u5b9a\u662f\u7a0b\u5ea6\u4e0a\u7684\u533a\u522b\uff0c\u800c\u4e0d\u662f\u79cd\u7c7b\u4e0a\u7684\u533a\u522b\u3002\u201d\n\u8428\u82ac\u5a1c\u8ba4\u4e3a\uff0c\u6211\u4eec\u90fd\u201c\u5438\u5165\u201d\u4e86\u201c\u81ea\u7136\u9636\u68af\u201d\uff1a\u751f\u547d\u7b49\u7ea7\u7684\u6982\u5ff5\u3002\u5ca9\u77f3\u5728\u5e95\u90e8\uff0c\u7136\u540e\u662f\u690d\u7269\uff0c\u7136\u540e\u662f\u66f4\u597d\u7684\u690d\u7269\uff0c\u7136\u540e\u662f\u52a8\u7269\uff0c\u7136\u540e\u662f\u201c\u9ad8\u7b49\u201d\u52a8\u7269\uff0c\u7136\u540e\u662f\u9876\u90e8\uff0c\u5b8c\u5168\u5206\u5f00\uff0c\u4f60\u4f1a\u53d1\u73b0\u7f8e\u5999\u7684\u8001\u6211\u4eec\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u53ea\u6709\u5929\u4f7f\u548c\u4e0a\u5e1d\u3002\n\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u611f\u5230\u60ca\u8bb6\u7684\u539f\u56e0\uff1a\u9cb8\u9c7c\u4f1a\u5531\u6b4c\uff0c\u9ed1\u7329\u7329\u4f1a\u6559\u5e7c\u5d3d\u5982\u4f55\u4f7f\u7528\u5de5\u5177\uff0c\u65e5\u672c\u7684\u4e4c\u9e26\u4f1a\u628a\u575a\u679c\u653e\u5728\u8def\u4e0a\uff0c\u8ba9\u6c7d\u8f66\u88c2\u5f00\u3002\n\u8428\u82ac\u5a1c\u8bf4\uff1a\u201c\u6211\u4eec\u60ca\u8bb6\u7684\u57fa\u7840\u662f\u6211\u4eec\u7684\u65e0\u77e5\uff0c\u6211\u4eec\u7684\u81ea\u6211\u5b64\u7acb\uff0c\u6211\u4eec\u7684\u4e0d\u5b89\u5168\u611f\uff0c\u6211\u4eec\u9700\u8981\u6210\u4e3a\u660e\u661f\u8bde\u751f\u4ee5\u6765\u53d1\u751f\u7684\u6700\u597d\u7684\u4e8b\u60c5\u3002\u201d\u5f53\u7814\u7a76\u4eba\u5458\u6700\u8fd1\u53d1\u73b0\u9c7c\u7684\u2026\u3002\u53ef\u4ee5\u5728\u955c\u5b50\u2026\u4e2d\u8ba4\u51fa\u81ea\u5df1\u3002\u79d1\u5b66\u671f\u520a\u7f16\u8f91\u4e0d\u4f1a\u53d1\u8868\u4ed6\u4eec\u7684\u7814\u7a76\uff0c\u9664\u975e\u4ed6\u4eec\u516c\u5f00\u8d28\u7591\u955c\u5b50\u6d4b\u8bd5\u672c\u8eab\u3002\u6709\u81ea\u6211\u610f\u8bc6\u7684\u9c7c\u592a\u5177\u5a01\u80c1\u6027\u4e86\uff0c\u5426\u5219\u5c31\u65e0\u6cd5\u5bf9\u4ed8\u3002\n\u52a8\u7269\u5b66--\u7814\u7a76\u52a8\u7269\u884c\u4e3a\u7684\u79d1\u5b66--\u76f8\u5f53\u5e74\u8f7b\uff0c\u53ea\u53ef\u4ee5\u8ffd\u6eaf\u523020\u4e16\u7eaa50\u5e74\u4ee3\u3002\u8428\u82ac\u5a1c\u5199\u9053\uff1a\u201c\u4e0d\u8981\u5047\u8bbe\u5176\u4ed6\u52a8\u7269\u4e5f\u6709\u601d\u60f3\u548c\u611f\u89c9\uff0c\u8fd9\u5bf9\u4e00\u95e8\u65b0\u7684\u79d1\u5b66\u6765\u8bf4\u662f\u4e00\u4e2a\u826f\u597d\u7684\u5f00\u7aef\u3002\u201d\u201c\u575a\u79f0\u4ed6\u4eec\u6ca1\u6709\u8fd9\u6837\u505a\uff0c\u8fd9\u662f\u7cdf\u7cd5\u7684\u79d1\u5b66\u3002\u201d\n\u5bf9\u770b\u8d77\u6765\u591a\u6101\u5584\u611f\u7684\u6050\u60e7\u8feb\u4f7f\u6211\u4eec\u9677\u5165\u4e86\u4e00\u4e9b\u5947\u602a\u7684\u626d\u66f2\u4e4b\u4e2d\u3002\u8428\u82ac\u5a1c\u8bf4\uff1a\u201c\u79d1\u5b66\u5bb6\u4eec\u82b1\u4e86\u51e0\u5341\u5e74\u7684\u65f6\u95f4\u8bf4\u2018\u4f60\u4e0d\u80fd\u8bf4\u72d7\u60f3\u51fa\u53bb\u2019\u3002\u201d\u5ba0\u7269\u4e3b\u4eba\u4e0d\u540c\u610f\uff1a\u5f53\u72d7\u6293\u95e8\u65f6\uff0c\u4f60\u8ba9\u5b83\u51fa\u53bb\u6492\u5c3f\u3002\n\u4eba\u6027\u7684\u5b8c\u7f8e\u5206\u79bb-\u6216\u4eba\u6027\u7684\u72ec\u7acb\u5b8c\u7f8e-\u7684\u6982\u5ff5\u5728\u54f2\u5b66\u4e0a\u662f\u7ad9\u4e0d\u4f4f\u811a\u7684(\u9664\u975e\u4f60\u5ffd\u7565\u8fd9\u4e9b\u6570\u636e)\u3002\u7136\u800c\uff0c\u81ea\u4ece\u7ba1\u7406\u4e16\u754c\u6210\u4e3a\u4e00\u79cd\u9009\u62e9\u4ee5\u6765\uff0c\u5b83\u662f\u6211\u4eec\u7ba1\u7406\u4e16\u754c\u7684\u65b9\u5f0f\u7684\u57fa\u7840\uff1a\u5b83\u662f\u6211\u4eec\u7ee7\u7eed\u7ba1\u7406\u4e16\u754c\u7684\u65b9\u5f0f-\u6211\u4eec\u4e0d\u65ad\u52a0\u901f\u7684\u8d2b\u56f0\u3002\u5982\u679c\u6211\u4eec\u771f\u7684\u9700\u8981\u4eba\u7c7b\u771f\u6b63\u72ec\u4e00\u65e0\u4e8c\u7684\u7279\u8d28\uff0c\u6211\u4eec\u81f3\u5c11\u53ef\u4ee5\u5ba3\u79f0\u8fd9\u4e00\u70b9\u3002\u751f\u6001\u706d\u7edd\u3002", "note_en": "A few years ago I was sitting in Carl Safina\u2019s yard on Long Island, drinking tea, occasionally patting a dog who was lying at my feet. Safina was talking about the magnanimity of wolves. A wolf in Yellowstone National Park, known as Twenty-One, never lost a fight, and unlike most wolves, never killed a vanquished opponent. Park rangers called him the perfect wolf.\n \u2018When a human releases a vanquished opponent rather than killing them, in the eyes of onlookers the vanquished still loses status but the victor seems all the more impressive,\u2019 Safina said. \u2018Onlookers might feel it would be desirable to follow such a person, so strong yet inclined towards forbearance.\u2019\n Safina is not some woo-woo merchant, or a new-world mist-dweller. He does proper science. He is the first endowed professor for nature and humanity at Stony Brook University, New York, and he has just published  Becoming Wild: How Animals Learn to Be Animals. It\u2019s mostly about culture. No, not animals in human culture: culture in non-human animals.\n Here\u2019s an example: humpback whales all sing the same song, but only when they live in the same ocean; there are different songs for different oceans\u2026 and every year all the songs change. And a more homely one: blue tits learned to take cream from milk bottles left on doorsteps, and the knowledge swept across Britain. Now the milk and the bottles and the buying habits are all different and that aspect of culture is defunct.\n Safina\u2019s book is based around three extended visits to wildlife field projects, and takes us to startling depths of intimacy with sperm whales, scarlet macaws and chimpanzees. Sperm whales use different sequences of sounds to announce their identity to each other, as individuals and as members of a clan \u2014 yes, a bit like names. You can\u2019t release a rescued macaw into the wild: each one needs education in the skills of being wild, skills they would normally learn from parents. Chimpanzees have different tool-using and hunting traditions from one population to another.\n I was taught at school that animals have instinct but humans have learning. Later that got more refined: animals can only ever pass on things through their genes, but we humans can pass things on by example and by teaching \u2014 in short, by culture. Culture is why we\u2019re humans and they\u2019re not.\n But like all adamantine barriers we have drawn up between human and non-human life, even the most cursory examination reveals a million leaks and porosities. Of course non-human animals have culture.\n More examples: in times of exceptional drought, elephant groups led by an old matriarch find water, while those with a young leader don\u2019t. The knowledge is cultural. Bottlenose dolphins in Shark Bay, Australia \u2014 but nowhere else \u2014 use sponges to protect their noses when bottom feeding; mothers show young ones how it\u2019s done. Travel a decent distance and birds of the same species sing slightly different songs: different dialects, in short.\n That\u2019s also the right category for what Safina called the \u2018silly debate\u2019 about nature and nurture: obviously both are relevant, for humans and for everybody else. \u2018Whales can learn but they can\u2019t learn French. Humans can sing, but not like a humpback.\u2019\n I have watched lions learning. Cubs learn to hunt in games of pounce and chase. I have seen adults initiate play, certainly for the fun of it, but they are also teaching.\n Ludwig Wittgenstein famously said that if a lion could talk we wouldn\u2019t be able to understand him. I have spent a fair bit of time with lions and I reckon I could have a pretty decent conversation with, say, the alpha female of the pride I visited in the Luangwa Valley last year. We could discuss hunting, the weather, her companions, the squabbles, the neighbouring prides, the new cubs and the wonderful feast the whole pride shared the previous night.\n Safina and I talked about the theory of mind. \u2018Basically it\u2019s the idea that a creature has a mind that is capable of knowing that another creature has a mind and that their agenda may be different to your agenda,\u2019 he said. \u2018It\u2019s been claimed for decades that only humans have theory of mind, but it\u2019s been argued for the last 25 that other animals may also have it.\u2019 He gave the example of his dogs and a stand-off with a swan in which all parties understood each other\u2019s position.\n Why are we so resistant to the idea of common ground between humans and non-human animals? After all, we share getting on for 98 per cent of our genes with chimpanzees. It\u2019s not even as if it were a new idea: Charles Darwin said: \u2018The difference between man and the higher animals, great as it is, certainly is one of degree and not of kind.\u2019\n Safina suggests that we have all \u2018inhaled\u2019 the  scala naturae: the notion of the hierarchy of life. Rocks are at the bottom, then plants, then nicer plants, then animals, then \u2018higher\u2019 animals, and then at the top, quite separate, you find wonderful old us. Beyond that there can be only angels and God.\n This inhaled view is why we find it surprising that whales compose songs, that chimpanzees teach young ones how to use tools and that crows in Japan place nuts on the road for cars to crack.\n Safina says: \u2018The basis for our surprise is our ignorance, our self-isolation, our insecurity, our need to be the best thing that happened since the stars were born. When researchers recently showed that fish\u2026 can recognise themselves in a mirror\u2026 scientific journal editors wouldn\u2019t publish their study unless they publicly called into question the mirror test itself.\u2019 Self-aware fish are too threatening to deal with otherwise.\n Ethology \u2014 the science of animal behaviour \u2014 is pretty young, dating only to the 1950s. \u2018Not assuming that other animals have thoughts and feelings was a good start for a new science,\u2019 Safina wrote. \u2018Insisting that they did not was bad science.\u2019\n  The dread of seeming sentimental has forced us into some curious contortions. \u2018Scientists spent decades saying \u201cYou can\u2019t say that a dog wants to go out\u201d,\u2019 Safina said. Pet--owners disagree: when the dog scratches the door, you let him out for a pee.\n The notion of humanity\u2019s perfect separateness \u2014 or humanity\u2019s separate perfectness \u2014 is philosophically untenable (unless you ignore the data). It is, however, the basis for the way we have run the world ever since running the world became an option: and it is the way we continue to run it \u2014 to our accelerating impoverishment. If we really need a trait of genuine uniqueness for humans, we can at least lay claim to this. Ecocide.", "posttime": "2020-06-12 13:23:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9cb8\u9c7c,sing,\u52a8\u7269", "title": "\u9cb8\u9c7c\u4e3a\u4f55\u6b4c\u5531\uff1a\u8fd9\u662f\u4e00\u4e2a\u6587\u5316\u95ee\u9898", "title_en": "Why whales sing: it\u2019s a question of culture", "transed": 1, "url": "https://www.spectator.co.uk/article/why-whales-sing-it-s-a-question-of-culture", "via": "", "real_tags": ["\u9cb8\u9c7c", "sing", "\u52a8\u7269"]}, {"category": "", "categoryclass": "", "imagename": "ec228032644570d13b09e14ad009c734.jpg", "infoid": 1006259, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8df3\u8f6c\u5230\u5bfc\u822a\u8df3\u8dc3\u641c\u7d22\u65e7\u91d1\u5c71\u53cd\u9762\u5177\u8054\u76df\u662f\u4e00\u4e2a\u6210\u7acb\u7684\u7ec4\u7ec7\uff0c\u76ee\u7684\u662f\u6297\u8bae\u52a0\u5dde\u65e7\u91d1\u5c71\u57281918\u5e74\u6d41\u611f\u5927\u6d41\u884c\u671f\u95f4\u8981\u6c42\u4eba\u4eec\u6234\u53e3\u7f69\u3002\n1918\u5e74\u79cb\u5929\uff0c\u65e7\u91d1\u5c71\u5f00\u59cb\u51fa\u73b0\u897f\u73ed\u7259\u6d41\u611f\u75c5\u4f8b\u3002\u7b2c\u4e00\u4f8b\u8bb0\u5f55\u5728\u6848\u7684\u75c5\u4f8b\u53d1\u751f\u57289\u6708\u4e0b\u65ec\uff1b\u523010\u6708\u4e2d\u65ec\uff0c\u8be5\u5e02\u5df2\u67092000\u591a\u4f8b\u75c5\u4f8b\u3002\u8be5\u5e02\u536b\u751f\u5c40\u9881\u5e03\u4e86\u5404\u79cd\u63aa\u65bd\u8bd5\u56fe\u904f\u5236\u8fd9\u79cd\u75be\u75c5\uff0c\u5982\u7981\u6b62\u96c6\u4f1a\uff0c\u5173\u95ed\u5b66\u6821\u548c\u5267\u9662\uff0c\u5e76\u8b66\u544a\u5e02\u6c11\u907f\u5f00\u4eba\u7fa4\u3002\u4e3a\u987e\u5ba2\u670d\u52a1\u7684\u804c\u4e1a(\u5305\u62ec\u7406\u53d1\u5e08\u3001\u9152\u5e97\u548c\u5bbf\u820d\u5458\u5de5\u3001\u94f6\u884c\u51fa\u7eb3\u5458\u3001\u836f\u5242\u5e08\u3001\u5546\u5e97\u5e97\u5458)\u88ab\u8981\u6c42\u6234\u53e3\u7f69\u300210\u670825\u65e5\uff0c\u8be5\u5e02\u901a\u8fc7\u4e86\u4e00\u9879\u6cd5\u4ee4\uff0c\u8981\u6c42\u65e7\u91d1\u5c71\u7684\u6bcf\u4e00\u4f4d\u5c45\u6c11\u548c\u6e38\u5ba2\u5728\u516c\u5171\u573a\u6240\u6216\u4e0e\u4e24\u4eba\u6216\u4e24\u4eba\u4ee5\u4e0a\u7684\u4eba\u5728\u4e00\u8d77\u65f6\uff0c\u9664\u7528\u9910\u65f6\u95f4\u5916\uff0c\u90fd\u5fc5\u987b\u6234\u4e0a\u53e3\u7f69\u3002\n\u6700\u521d\u5bf9\u53e3\u7f69\u6761\u4f8b\u7684\u9075\u5b88\u7a0b\u5ea6\u5f88\u9ad8\uff0c\u4f30\u8ba1\u670980%\u7684\u4eba\u5728\u516c\u5171\u573a\u5408\u6234\u7740\u53e3\u7f69\u3002\u7ea2\u5341\u5b57\u4f1a\u5728\u6e21\u8f6e\u7801\u5934\u4e3a\u5165\u5883\u65c5\u5ba2\u51fa\u552e\u53e3\u7f69\u3002\u4efb\u4f55\u4e0d\u6234\u53e3\u7f69\u6216\u4e0d\u9002\u5f53\u4f69\u6234\u53e3\u7f69\u7684\u4eba\u90fd\u4f1a\u88ab\u6307\u63a7\u6270\u4e71\u6cbb\u5b89\uff0c\u5e76\u53d7\u5230\u8b66\u544a\uff0c\u5bf9\u4e8e\u968f\u540e\u7684\u8fdd\u89c4\u884c\u4e3a\uff0c\u5c06\u88ab\u7f5a\u6b3e\u6216\u76d1\u7981\u3002\u8be5\u5e02\u536b\u751f\u5b98\u5458\u548c\u5e02\u957f\u90fd\u56e0\u5728\u62f3\u51fb\u6bd4\u8d5b\u4e2d\u6ca1\u6709\u6234\u53e3\u7f69\u800c\u88ab\u7f5a\u6b3e\u3002[1]\u3002\n\u53e3\u7f69\u6cd5\u4ee4\u4e8e1918\u5e7411\u670821\u65e5\u751f\u6548\uff1b\u7136\u800c\uff0c\u5f53\u6d41\u611f\u75c5\u4f8b\u518d\u6b21\u5f00\u59cb\u589e\u52a0\u65f6\uff0c\u4e00\u9879\u5f3a\u5236\u53e3\u7f69\u7684\u65b0\u6cd5\u4ee4\u4e8e1919\u5e741\u670817\u65e5\u751f\u6548\u3002[1]\u3002\n\u867d\u7136\u5728\u6234\u9762\u5177\u7684\u6700\u521d\u9636\u6bb5\u6709\u4e00\u4e9b\u5e02\u6c11\u7684\u62b1\u6028\uff0c\u4f461919\u5e74\u7684\u65b0\u6cd5\u4ee4\u5f15\u53d1\u4e86\u66f4\u4e25\u91cd\u7684\u53cd\u5bf9\uff0c\u53cd\u9762\u5177\u8054\u76df\u6210\u7acb\u4e86\u3002[1]\u8be5\u8054\u76df\u7684\u6210\u5458\u5305\u62ec\u533b\u751f\u3001\u516c\u6c11\u3001[2]\u516c\u6c11\u81ea\u7531\u4e3b\u4e49\u8005\u3001[3]\u548c\u81f3\u5c11\u4e00\u540d\u76d1\u4e8b\u4f1a\u6210\u5458\u3002[1]\u4f30\u8ba1\u67094,000-5,000\u540d\u516c\u6c11\u53c2\u52a0\u4e861\u670825\u65e5\u7684\u4f1a\u8bae\u3002[4][5]\u8054\u76df\u7684\u4e00\u4e9b\u6210\u5458\u5e0c\u671b\u5728\u4e00\u4efd\u8bf7\u613f\u4e66\u4e0a\u6536\u96c6\u7b7e\u540d\uff0c\u4ee5\u7ed3\u675f\u53e3\u7f69\u8981\u6c42\uff0c\u800c\u53e6\u4e00\u4e9b\u6210\u5458\u5219\u5e0c\u671b\u542f\u52a8\u57ce\u5e02\u536b\u751f\u5b98\u5458\u7684\u53ec\u56de\u7a0b\u5e8f\u3002\u8fa9\u8bba\u975e\u5e38\u6fc0\u70c8\u3002[2]\u5bf9\u8be5\u6761\u4f8b\u7684\u4e00\u4e9b\u53cd\u5bf9\u610f\u89c1\u662f\u57fa\u4e8e\u79d1\u5b66\u6570\u636e\u7684\u95ee\u9898\uff0c\u800c\u53e6\u4e00\u4e9b\u4eba\u5219\u8ba4\u4e3a\u8fd9\u662f\u4fb5\u72af\u516c\u6c11\u81ea\u7531\u7684\u8981\u6c42\u3002[6]\u3002\n\u9664\u4e86\u6765\u81ea\u53cd\u9762\u5177\u8054\u76df\u7684\u6295\u8bc9\u5916\uff0c\u6765\u81ea\u5176\u4ed6\u57ce\u5e02\u7684\u4e00\u4e9b\u536b\u751f\u5b98\u5458\u4e5f\u4e89\u8fa9\u8bf4\uff0c\u53e3\u7f69\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002[2]\u65e7\u91d1\u5c71\u5e02\u536b\u751f\u5b98\u5458\u6279\u8bc4\u8be5\u5dde\u536b\u751f\u5c40\u79d8\u4e66\u8d28\u7591\u53e3\u7f69\u7684\u6709\u6548\u6027\uff0c\u79f0\u8be5\u5dde\u536b\u751f\u5c40\u7684\u6001\u5ea6\u662f\u5728\u9f13\u52b1\u53cd\u9762\u5177\u8054\u76df(Anti-Mask League)\u3002\n1\u670827\u65e5\uff0c\u8be5\u8054\u76df\u5411\u8be5\u5e02\u76d1\u4e8b\u4f1a\u63d0\u4ea4\u4e86\u4e00\u4efd\u7531E.C.\u54c8\u6797\u987f\u592b\u4eba\u62c5\u4efb\u4e3b\u5e2d\u7684\u8bf7\u613f\u4e66\uff0c\u8981\u6c42\u5e9f\u9664\u9762\u5177\u6761\u4f8b\u3002[8]\u4e16\u754c\u5404\u5730\u7684\u62a5\u7eb8\u90fd\u6ce8\u610f\u5230\u4e86\u6297\u8bae\u7ec4\u7ec7\u3002[9][10][11][12]\u6839\u636e\u536b\u751f\u59d4\u5458\u4f1a\u7684\u5efa\u8bae\uff0c\u65e7\u91d1\u5c71\u4ece1919\u5e742\u67081\u65e5\u8d77\u53d6\u6d88\u4e86\u53e3\u7f69\u8981\u6c42\u3002[2]\u3002\n\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u65e7\u91d1\u5c71\u548c1918-1919\u5e74\u6d41\u611f\u75ab\u60c5\u3002\u5bc6\u6b47\u6839\u5927\u5b66\u533b\u5b66\u53f2\u4e2d\u5fc3\uff1a\u6d41\u611f\u767e\u79d1\u5168\u4e66\u3002\n^a b c d Crosby\uff0cAlfred W.(2003-07-21)\u3002\u7f8e\u56fd\u88ab\u9057\u5fd8\u7684\u6d41\u884c\u75c5\uff1a1918\u5e74\u7684\u6d41\u611f\u3002\u5251\u6865\u5927\u5b66\u51fa\u7248\u793e\u3002\u7b2c112-113\u9875\u3002ISBN978-0-521-54175-6\u3002\n\u4e66\u540d/\u4f5c\u8005Deborah\uff1a//by John H.(2005-02-03).(2005-02-03)(2005-02-03)\u3002\u5730\u7403\u4e0a\u7684\u91ce\u517d\uff1a\u52a8\u7269\u3001\u4eba\u7c7b\u548c\u75be\u75c5\u3002\u7f57\u683c\u65af\u5927\u5b66\u51fa\u7248\u793e\u3002ISBN\u7535\u8bdd\uff1a978-0-8135-3789-4\u3002\n\u5c0f\u585e\u7f2a\u5c14\u00b7K\u00b7\u79d1\u6069(2018\u5e74)\u3002\u6d41\u884c\u75c5\uff1a\u4ece\u96c5\u5178\u761f\u75ab\u5230\u827e\u6ecb\u75c5\u7684\u4ec7\u6068\u4e0e\u540c\u60c5\u3002\u725b\u6d25\u5927\u5b66\u51fa\u7248\u793e\u3002440\u9875\u3002ISBN978-0-19-881966-0\u3002\n^Supervisors\uff0c\u65e7\u91d1\u5c71(\u52a0\u5dde)\u8463\u4e8b\u4f1a(1919\u5e74)\u3002\u201c\u65e7\u91d1\u5c71\u5e02\u548c\u53bf\u76d1\u4e8b\u4f1a\u4f1a\u8bae\u5b66\u62a5\u201d(The Journal of Proceations\uff0cBoard of Supervisors of San Francisco\uff0cCity and County)\u3002\u5f55\u97f3\u673a\u5370\u5237\u51fa\u7248\u516c\u53f8\u3002\u4e0b\u53485\u70b950\u5206\u3002\n\u4f60\u522b\u8fd9\u4e48\u8bf4\u3002\u65b0\u5357\u5a01\u5c14\u58eb\u5dde\u7684\u201c\u9ea6\u514b\u5229\u7eaa\u4e8b\u62a5\u201d\u30021919\u5e744\u670830\u65e5\u3002\u7b2c4\u9875\u3002", "note_en": "Jump to navigation  Jump to search  The  Anti-Mask League of San Francisco was an organization formed to protest the requirement for people in  San Francisco,  California, to wear masks during the  1918 influenza pandemic.\n   Cases of the Spanish flu began to appear in San Francisco during the fall of 1918. The first documented case was in late September; by mid-October, the city had more than 2,000 cases. The city&#39;s Board of Health enacted various measures to try to curb the disease, such as banning gatherings, closing schools and theaters, and warning citizens to avoid crowds. Professions that served customers (including barbers, hotel and rooming house employees, bank tellers, druggists, store clerks) were required to wear masks. On October 25, the city passed an ordinance that &#34;every resident and visitor of San Francisco would be required to wear a mask while in public or when in a group of two or more people, except at mealtime.&#34;  [1]\n Initial compliance with the mask ordinance was high with an estimated 80% of people wearing masks in public. The  Red Cross sold masks at the ferry terminal for incoming passengers. Anyone who failed to wear a mask or wore it improperly was charged with &#34;disturbing the peace,&#34; warned and for subsequent violations, fined or jailed. The city health officer and the mayor both paid fines for not wearing masks at a boxing match.  [1]\n The mask ordinance was annulled effective November 21, 1918; however, when cases of the flu began to increase again, a new ordinance mandating masks took effect January 17, 1919.  [1]\n  Although there were some complaints from citizens during the initial period of mask-wearing, the new ordinance in 1919 galvanized more serious opposition and the Anti-Mask League was formed.  [1] Members of the league included physicians, citizens,  [2] civil libertarians,  [3] and at least one member of the Board of Supervisors.  [1] An estimated 4,000\u20135,000 citizens attended the meeting on January 25.  [4]  [5] Some members of the league wanted to collect signatures on a petition to end the mask requirement, while others wanted to initiate recall procedures for the city health officer. The debate was heated.  [2] Some objections to the ordinance were based on questions of scientific data while others considered the requirement to infringe on civil liberties.  [6]\n In addition to complaints from the Anti-Mask League, some health officers from other cities also contended that masks were not necessary.  [2] The San Francisco city health officer criticized the secretary of the state&#39;s Board of Health for questioning the efficacy of masks, saying &#34;The attitude of the state board is encouraging the Anti-Mask League.&#34;  [7]\n On January 27, the league presented a petition, signed by Mrs. E. C. Harrington as chair, to the city&#39;s Board of Supervisors, requesting repeal of the mask ordinance.  [8] Newspapers across the world took note of the protesting organization.  [9]  [10]  [11]  [12] San Francisco lifted the mask requirement effective February 1, 1919, on the recommendation of the Board of Health.  [2]\n    ^     a     b     c     d     e    &#34;San Francisco, California and the 1918-1919 Influenza Epidemic&#34;.  University of Michigan Center for the History of Medicine: Influenza Encyclopedia .\n ^     a     b     c     d   Crosby, Alfred W. (2003-07-21).   America&#39;s Forgotten Pandemic: The Influenza of 1918. Cambridge University Press. pp.\u00a0112\u2013113.  ISBN\u00a0  978-0-521-54175-6.\n ^   Torrey, E. Fuller; Yolken, Robert H. (2005-02-03).   Beasts of the Earth: Animals, Humans, and Disease. Rutgers University Press.  ISBN\u00a0  978-0-8135-3789-4.\n   ^   Jr, Samuel K. Cohn (2018).   Epidemics: Hate and Compassion from the Plague of Athens to AIDS. Oxford University Press. p.\u00a0440.  ISBN\u00a0  978-0-19-881966-0.\n  ^   Supervisors, San Francisco (Calif ) Board of (1919).   Journal of Proceedings, Board of Supervisors, City and County of San Francisco. Recorder Printing and Publishing Company. p.\u00a0 50.\n    ^   &#34;You Don&#39;t Say So&#34;.  The Macleay Chronicle, New South Wales. April 30, 1919. p.\u00a04.", "posttime": "2020-06-12 12:33:49", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65e7\u91d1\u5c71,\u9762\u5177,mask,\u53e3\u7f69", "title": "\u65e7\u91d1\u5c71\u53cd\u9762\u5177\u8054\u76df", "title_en": "Anti-Mask League of San Francisco", "transed": 1, "url": "https://en.wikipedia.org/wiki/Anti-Mask_League_of_San_Francisco", "via": "", "real_tags": ["\u65e7\u91d1\u5c71", "\u9762\u5177", "mask", "\u53e3\u7f69"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006253, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7b2c\u4e00\u4e2a\u5546\u4e1a\u7248\u672c(\u6216\u8db3\u591f\u63a5\u8fd1)\u3002\u8d44\u6e90\u7ba1\u7406\u5668\u8fd8\u6ca1\u6709\u88ab\u521b\u9020\u51fa\u6765\uff0c\u8fd9\u662fMS-DOS\u6267\u884c\u7a0b\u5e8f\u3002\u754c\u9762\u975e\u5e38\u7b80\u5355\u3002\u4f60\u57fa\u672c\u4e0a\u53ef\u4ee5\u770b\u5230\u5b83\u6240\u505a\u7684\u4e00\u5207\u3002\n\u9664\u4e86\u5c4f\u5e55\u5c3a\u5bf8\u4e4b\u5916\uff0c\u57fa\u672c\u76f8\u540c\u3002\u6b64\u7248\u672c\u7684Windows\u6709\u91cd\u53e0\u7684\u7a97\u53e3\uff0c\u4f46\u60a8\u4e0d\u80fd\u6253\u5f00\u591a\u4e2a\u6267\u884c\u7a97\u53e3\u3002\nWindows\u7684\u7b2c\u4e00\u4e2a\u7248\u672c\uff0c\u5176\u4e2d\u6587\u4ef6\u8d44\u6e90\u7ba1\u7406\u5668\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u60a8\u53ef\u4ee5\u5b8c\u5168\u5173\u95ed\u6216\u6253\u5f00\u7684\u591a\u4e2a\u5b9e\u4f8b\u3002\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5e74\u91cc\uff0c\u5b83\u88ab\u79f0\u4e3a\u201c\u6587\u4ef6\u7ba1\u7406\u5668\u201d\u3002\u8fd9\u4e2a\u7248\u672c\u5728\u89c6\u89c9\u4e0a\u4ecd\u7136\u4e0eWindows2.x\u6587\u4ef6\u8d44\u6e90\u7ba1\u7406\u5668\u975e\u5e38\u76f8\u4f3c\u3002\u6839\u7a97\u53e3(\u76ee\u5f55\u6811)\u4fdd\u75592.x\u9a71\u52a8\u5668\u9009\u62e9\u5668\uff0c\u60a8\u4e0d\u80fd\u590d\u5236\u6b64\u7a97\u53e3\u3002\u4f46\u662f\uff0c\u5b83\u73b0\u5728\u663e\u793a2.x\u4e2d\u4e0d\u5b58\u5728\u7684\u6811\u72b6\u89c6\u56fe\uff0c\u5e76\u4e14\u53ea\u663e\u793a\u6587\u4ef6\u5939\u3002\u8981\u67e5\u770b\u6587\u4ef6\uff0c\u60a8\u9700\u8981\u9009\u62e9\u4e00\u4e2a\u6587\u4ef6\u5939\u6216\u78c1\u76d8\u4ee5\u83b7\u53d6\u6587\u4ef6\u5939\u89c6\u56fe\uff0c\u60a8\u53ef\u4ee5\u6709\u591a\u4e2a\u6587\u4ef6\u5939\u89c6\u56fe\u3002\u60a8\u4e0d\u80fd\u5728\u8fd9\u5f20\u7279\u5b9a\u7684\u7167\u7247\u4e2d\u770b\u5230\u5b83\uff0c\u4f46\u662f\u6587\u4ef6\u5939\u89c6\u56fe\u663e\u793a\u4e00\u4e2a\u865a\u62df\u7684..\u3002\u5bf9\u8c61\u5411\u4e0a\u79fb\u52a8\u4e00\u4e2a\u76ee\u5f55\u3002\n\u4e00\u9879\u91cd\u5927\u7684\u6539\u8fdb\uff0c\u5f15\u5165\u4e86\u53cc\u7a97\u683c\u89c6\u56fe\uff0c\u8be5\u89c6\u56fe\u5c06\u5728\u672a\u6765\u7684\u6240\u6709Windows\u7248\u672c\u4e2d\u90fd\u53ef\u7528\u3002\u8fd9\u57fa\u672c\u4e0a\u5c06\u76ee\u5f55\u6811\u4e0e\u6587\u4ef6\u89c6\u56fe\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u8fd9\u5f53\u7136\u5f88\u6709\u7528\uff0c\u4f46\u6709\u8da3\u7684\u662f\u4ed6\u4eec\u5728\u8fd9\u91cc\u6240\u505a\u7684\u66f4\u6539\u3002\u9996\u5148\uff0c\u6253\u5f00\u6587\u4ef6\u5939\u4e0d\u4f1a\u6253\u5f00\u65b0\u7a97\u53e3\uff1b\u5b83\u4eec\u662f\u5728\u5f53\u524d\u89c6\u56fe\u4e2d\u6253\u5f00\u7684\uff0c\u5c3d\u7ba1\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u8981\u4ece\u83dc\u5355\u4e2d\u8bf7\u6c42\u4e00\u4e2a\u65b0\u7a97\u53e3\u3002\u5728Windows95\u6062\u590d3.0\u884c\u4e3a\u4e4b\u524d\uff0c\u5b83\u5c06\u4e00\u76f4\u4fdd\u6301\u8fd9\u79cd\u65b9\u5f0f\u3002\u5176\u6b21\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6811\u72b6\u89c6\u56fe\u4e2d\u7684\u6587\u4ef6\u5939\u4e0d\u518d\u663e\u793a+\u6216-\u7b26\u53f7(\u5b83\u5728\u5c4f\u5e55\u622a\u56fe\u4e2d\u5904\u4e8e\u6253\u5f00\u72b6\u6001)\u3002\u8fd9\u662f3.0\u4e2d\u7684\u4e00\u4e2a\u6807\u51c6\u529f\u80fd\uff0c\u5b83\u53ef\u4ee5\u544a\u8bc9\u60a8\u6811\u72b6\u89c6\u56fe\u4e2d\u7684\u6587\u4ef6\u5939\u4e0b\u662f\u5426\u6709\u66f4\u591a\u6587\u4ef6\u5939\u3002\u60a8\u53ef\u4ee5\u4ece\u83dc\u5355\u4e2d\u5c06\u5176\u5207\u6362\u56de\u539f\u6765\u7684\u72b6\u6001\uff0c\u4f46\u6211\u731c\u4ed6\u4eec\u8ba4\u4e3a\u8fd9\u662f\u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u5728\u89c6\u89c9\u4e0a\u5f88\u5608\u6742\u3002\u8fd8\u8bf7\u6ce8\u610f\uff0c\u5728\u7b2c\u4e8c\u4e2a\u5c4f\u5e55\u622a\u56fe\u4e2d\uff0c\u7a97\u53e3\u53ef\u4ee5\u5207\u6362\u5230\u5b8c\u5168\u6ca1\u6709\u6811\u7684\u4ec5\u76ee\u5f55\u89c6\u56fe\uff0c\u4e5f\u53ef\u4ee5\u5207\u6362\u5230\u4ec5\u6811\u89c6\u56fe\u3002\n\u867d\u7136Win 3.11\u4e0eWin 3.1\u76f8\u6bd4\u7a0d\u6709\u4e0d\u540c\uff0c\u4f46Windows for Workroups 3.1\u5728\u7f51\u7edc\u65b9\u9762\u505a\u4e86\u8bb8\u591a\u91cd\u5927\u6539\u53d8\u3002\u7136\u800c\uff0c\u5bf9\u6587\u4ef6\u7ba1\u7406\u5668\u7684\u4e3b\u8981\u5f71\u54cd\u662f\u5f15\u5165\u4e86\u4e00\u4e2a\u5de5\u5177\u680f\uff0c\u5b83\u5373\u4f7f\u4e0d\u80fd\u6539\u53d8\u5176\u529f\u80fd\uff0c\u4e5f\u80fd\u6781\u5927\u5730\u6539\u53d8\u5176\u5916\u89c2\u3002\u5de5\u5177\u680f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u78c1\u76d8\u9009\u62e9\u5668\u7ec4\u5408\u6846\uff0c\u9664\u4e86\u663e\u793a\u78c1\u76d8\u6807\u7b7e\u4e4b\u5916\uff0c\u8be5\u7ec4\u5408\u6846\u4e0eWin 1\u65f6\u4ee3\u7684\u78c1\u76d8\u9009\u62e9\u5668\u51e0\u4e4e\u5b8c\u5168\u591a\u4f59\u3002\u6211\u771f\u7684\u4e0d\u592a\u6e05\u695a\uff0c\u5982\u679c\u4ed6\u4eec\u8981\u52a0\u8fd9\u4e2a\uff0c\u4e3a\u4ec0\u4e48\u8981\u4fdd\u7559\u8001\u5f0f\u7684\u90a3\u4e2a\u3002\u5f53\u60a8\u5728\u83dc\u5355\u4e2d\u627e\u5230Select Disk\u9009\u9879\u65f6\uff0c\u8fd9\u4f1a\u53d8\u5f97\u66f4\u52a0\u5947\u602a\u3002\u5de5\u5177\u680f\u4e0a\u7684\u6309\u94ae\u5bf9\u83dc\u5355\u4e2d\u7684\u9009\u9879\u90fd\u662f\u591a\u4f59\u7684\uff0c\u6240\u4ee5\u8fd9\u5e76\u4e0d\u662f\u4ec0\u4e48\u9769\u547d\u6027\u7684\u4e8b\u60c5\uff0c\u9664\u4e861993\u5e74\u6211\u8ba4\u4e3a\u5fae\u8f6f\u521a\u521a\u5f00\u59cb\u70ed\u8877\u4e8e\u5de5\u5177\u680f\u3002\u6211\u7684\u7406\u89e3\u662f\uff0c\u5982\u679c\u6211\u8ba9\u7f51\u7edc\u5806\u6808\u6b63\u5e38\u5de5\u4f5c\uff0c\u5de5\u5177\u680f\u4e0a\u4f1a\u6709\u4e00\u4e9b\u7f51\u7edc\u547d\u4ee4\uff0c\u4f46\u6211\u4e0d\u80fd\u786e\u8ba4\u8fd9\u4e00\u70b9\uff0c\u6211\u5047\u8bbe\u5b83\u4eec\u65e0\u8bba\u5982\u4f55\u90fd\u4f1a\u51fa\u73b0\u5728\u83dc\u5355\u4e2d\u3002\n\u5f53\u6211\u7b2c\u4e00\u6b21\u77e5\u9053\u6709\u65b0\u53f0\u5e013.x\u7684\u65f6\u5019\uff0c\u6211\u53ea\u77e5\u90533.51\u5de6\u53f3\uff0c\u751a\u81f3\u5728\u6211\u5f97\u77e53.1\u95ee\u4e16\u540e\uff0c\u6211\u7684\u5370\u50cf\u4e5f\u53ea\u662f\u57283.51\u4e0a\u5e02\u524d\u4e00\u77ac\u95f4\u5c31\u51fa\u6765\u4e86\u3002\u4e8b\u5b9e\u8bc1\u660e\u8fd9\u662f\u5b8c\u5168\u9519\u8bef\u7684\uff1b3.1\u662f1993\u5e74\u7684\uff0c1994\u5e74\u662f3.50,1995\u5e74\u662f3.51\u30023.1\u7ee7\u627f\u4e86wfw 3.11\u7684\u6587\u4ef6\u7ba1\u7406\u5668\uff0c\u8fd9\u5e76\u4e0d\u5947\u602a\uff0c\u56e0\u4e3a\u60a8\u53ef\u4ee5\u770b\u5230\u524d\u9762\u63d0\u5230\u7684\u6620\u5c04\u7f51\u7edc\u9a71\u52a8\u5668\u7684\u6309\u94ae\u3002\u6211\u60f3\u77e5\u9053\uff0c\u5f53Windows\u5347\u7ea7\u5230NT\u7248\u672c\u65f6\uff0cwfw\u662f\u5426\u672c\u8d28\u4e0a\u662fWindows\u4e2d\u7f51\u7edc\u7684\u4e00\u6b21\u6f14\u7ec3\uff1f\u5c4f\u5e55\u5916\u8fd8\u6709\u4e00\u4e2a\u6743\u9650\u6309\u94ae\u3002\n3.50\u57fa\u672c\u4e0a\u7b49\u540c\u4e8e3.1\u3002\u6211\u628a\u5b83\u52a0\u8fdb\u53bb\u662f\u56e0\u4e3a\u6211\u5728\u610f\u8bc6\u5230\u6ca1\u6709\u4ec0\u4e48\u53ef\u533a\u5206\u7684\u4e4b\u524d\u5c31\u5df2\u7ecf\u62cd\u4e0b\u4e86\u8fd9\u5f20\u622a\u56fe\u3002\n\u9664\u4e86\u5de5\u5177\u680f\u4e0a\u7684\u6309\u94ae\u73b0\u5728\u4ee595\u6837\u5f0f\u5448\u73b0\u4e4b\u5916\uff0c3.51\u4e2d\u76843.1/3.50\u4e4b\u95f4\u6ca1\u6709\u660e\u663e\u7684\u589e\u91cf\u3002\u5bf9\u6b64\u6211\u5f97\u5230\u7684\u5e55\u540e\u89e3\u91ca\u662f\uff0c3.51\u7684\u76ee\u7684\u662f\u4e00\u4e2a\u7d27\u6025\u66f4\u65b0\uff0c\u4ee5\u83b7\u5f97\u5bf9\u5373\u5c06\u5230\u6765\u7684Windows 95\u5230NT\u7684API\u7684\u652f\u6301\uff0c\u56e0\u4e3a\u4e0b\u4e00\u4e2a\u4e3b\u8981\u7248\u672cNT 4\u8981\u52301996\u5e74\u624d\u4f1a\u53d1\u5e03\u3002\u8fd9\u5728\u591a\u5927\u7a0b\u5ea6\u4e0a\u5bfc\u81f4\u4e86\u6309\u94ae\u7684\u6539\u53d8\uff0c\u8fd9\u5bf9\u6211\u6765\u8bf4\u662f\u4e00\u4e2a\u8010\u4eba\u5bfb\u5473\u7684\u95ee\u9898\u3002\u663e\u7136\uff0c\u5176\u4ed6\u5e38\u89c1\u7684\u63a7\u4ef6\uff0c\u5982\u83dc\u5355\u680f\u548c\u6eda\u52a8\u6761\u5e76\u6ca1\u6709\u6539\u53d8\uff0c\u6839\u636e\u6211\u7684\u7ecf\u9a8c\uff0c\u5f53\u572895\u4e0a\u8fd0\u884c3.x\u7248\u672c\u7684\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u8fd9\u4e9b\u63a7\u4ef6\u786e\u5b9e\u4f1a\u66f4\u65b0\u3002\u6211\u60f3\u8fd9\u53ef\u80fd\u662f95\u4e2aUI\u66f4\u65b0\u7684\u672a\u5b8c\u6210\u7248\u672c\u3002\n\u4e0d\u7528\u8bf4\uff0c\u8fd9\u662f\u5927\u6f29\u6da1\uff0c\u5927\u9686\u8d77\uff0c\u5927\u7ffb\u62cd\uff0c\u9664\u4e86.\u3002\u55ef\uff0c\u8fd9\u5e76\u4e0d\u662f\u90a3\u4e48\u5b8f\u4f1f\uff0c\u4ed6\u4eec\u53ea\u662f\u626d\u8f6c\u4e86\u4e00\u4e9b\u5c40\u9762\u3002\u5c3d\u7ba1\u6709\u4e86\u65b0\u7684\u540d\u79f0\uff0c\u8d44\u6e90\u7ba1\u7406\u5668\u4e0e\u6587\u4ef6\u7ba1\u7406\u5668\u7684\u5dee\u522b\u5e76\u4e0d\u662f\u5f88\u5927\u3002\u9ed8\u8ba4\u6587\u4ef6\u5939\u89c6\u56fe\u975e\u5e38\u7b80\u5355\u3002\u6211\u4eec\u4e22\u5931\u4e86Windows 3.1\u6587\u4ef6\u7ba1\u7406\u5668\u7684\u5927\u90e8\u5206\u529f\u80fd\u3002\u6211\u4eec\u4e0d\u4ec5\u5931\u53bb\u4e86\u4e0d\u5fc5\u8981\u7684\u5de5\u5177\u680f\uff0c\u800c\u4e14\u51e0\u4e4e\u5931\u53bb\u4e86\u4e00\u5207\u3002\u5f53\u60a8\u6253\u5f00\u201c\u6211\u7684\u7535\u8111\u201d\u65f6\uff0c\u9664\u4e86\u78c1\u76d8\u3001\u63a7\u5236\u9762\u677f\u548c\u6253\u5370\u673a\u5916\uff0c\u60a8\u4ec0\u4e48\u4e5f\u770b\u4e0d\u5230\u3002\u8fd9\u662fWindows\u5386\u53f2\u4e0a\u4e00\u4e2a\u8010\u4eba\u5bfb\u5473\u7684\u65f6\u523b\u3002\u901a\u4fd7\u5730\u8bf4\uff0c\u6211\u4eec\u628a\u5706\u70b9\u5f04\u4e22\u4e86\u3002\u8fd9\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u6982\u5ff5\u70b9\uff0c\u6240\u4ee5\u6211\u8981\u5728\u8fd9\u65b9\u9762\u505a\u4e00\u6bb5\u65f6\u95f4\u7684\u78e8\u7ec3\u3002\u4ecePC\u4e00\u5f00\u59cb\uff0c\u60a8\u4e0e\u7cfb\u7edf\u7684\u754c\u9762\u5c31\u662f\u4e8c\u7ef4\u7684\u3002\u5728\u4efb\u4f55\u7ed9\u5b9a\u7684\u65f6\u523b\uff0c\u60a8\u90fd\u6709\u4e09\u4e2a\u53ef\u7528\u7684\u64cd\u4f5c\uff1a\u67e5\u770b\u60a8\u6240\u5728\u7ea7\u522b\u7684\u6587\u4ef6\uff0c\u5411\u4e0b\u4e0b\u964d\u4e00\u4e2a\u7ea7\u522b\uff0c\u8fdb\u5165\u5c42\u6b21\u7ed3\u6784\uff0c\u6216\u8005\u5728\u5c42\u6b21\u7ed3\u6784\u4e2d\u5411\u4e0a\u79fb\u52a8\u4e00\u4e2a\u7ea7\u522b\u3002\u5728DOS\u4e2d\uff0c\u60a8\u53ef\u4ee5\u952e\u5165cd..\u3002\u4efb\u4f55\u65f6\u5019\u90fd\u53ef\u4ee5\u8f6c\u5230\u60a8\u5f53\u524d\u4f4d\u7f6e\u7684\u7236\u6587\u4ef6\u5939\uff1b\u4e00\u76f4\u5230\u78c1\u76d8\u7684\u6839\u76ee\u5f55\u3002Windows1\u3001Windows2\u548cWindows3\u90fd\u4fdd\u7559\u4e86\u8fd9\u4e00\u529f\u80fd\uff1b\u5b83\u4eec\u90fd\u63d0\u4f9b\u4e86\u70b9-\u70b9\u3002\u770b\u4e00\u4e0b\u524d\u9762\u7684\u622a\u56fe\uff0c\u4f60\u4f1a\u5728\u6bcf\u4e2a\u6587\u4ef6\u5939\u4e2d\u770b\u5230\u5b83\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e5f\u51fa\u73b0\u5728\u5927\u591a\u6570\u5236\u670d\u4e2d\u3002Windows 95\u5df2\u5c06\u6307\u5357\u9488\u7684\u6574\u4e2a\u65b9\u5411\u4ece\u5176\u9ed8\u8ba4\u8d44\u6e90\u7ba1\u7406\u5668\u89c6\u56fe\u4e2d\u5220\u9664\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u5728\u7b2c\u4e00\u5f20\u622a\u56fe\u4e2d\uff0c\u6ca1\u6709\u529e\u6cd5\u4e0a\u53bb\u3002\u4f60\u60f3\u600e\u4e48\u627e\u5c31\u600e\u4e48\u627e\u5427\uff0c\u6839\u672c\u6ca1\u6709\u529e\u6cd5\u3002\u5c4f\u5e55\u4e0a\u4ec0\u4e48\u4e5f\u6ca1\u6709\uff0c\u83dc\u5355\u4e0a\u4e5f\u4ec0\u4e48\u90fd\u6ca1\u6709\u3002\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u9000\u683c\u7b26\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f46\u8fd9\u7eaf\u7cb9\u662f\u8fd0\u6c14\u3002\u8fd9\u79cd\u6a21\u5f0f\u5c31\u662f\u6211\u7684\u4e00\u4e2a\u670b\u53cb\u6240\u8bf4\u7684Spatial Explorer--\u4e4b\u6240\u4ee5\u79f0\u4e3aSpatial\uff0c\u662f\u56e0\u4e3a\u5b83\u80fd\u8bb0\u4f4f\u60a8\u4e0a\u6b21\u6253\u5f00\u6bcf\u4e2a\u6587\u4ef6\u5939\u7684\u4f4d\u7f6e\u3002\u8fd9\u6a21\u4eff\u4e86MacOS\u5728NeXT\u610f\u8bc6\u5f62\u6001\u5165\u4fb5\u4e4b\u524d\u6240\u505a\u7684\u4e8b\u60c5\u3002\u800c\u4e14\uff0c\u5c31\u50cfMacOS\u4e00\u6837\uff0c\u5f53\u4f60\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u5939\u65f6\uff0c\u8be5\u6587\u4ef6\u5939\u7acb\u5373\u6210\u4e3a\u5b64\u7acb\u7684\uff0c\u4e0e\u5176\u7236\u6587\u4ef6\u5939\u5206\u79bb\u3002\u4e00\u65e6\u6253\u5f00\u6587\u4ef6\u5939\uff0c\u5c31\u65e0\u6cd5\u4ece\u8be5\u6587\u4ef6\u5939\u8fd4\u56de\uff0c\u9664\u975e\u8ba9\u7236\u7ea7\u4fdd\u6301\u6253\u5f00\u72b6\u6001\u3002\u5982\u679c\u5173\u95ed\u7236\u7ea7\uff0c\u5219\u5fc5\u987b\u4ece\u684c\u9762\u91cd\u65b0\u6253\u5f00\u786c\u76d8\uff0c\u7136\u540e\u518d\u6b21\u5f00\u59cb\u5411\u4e0b\u94bb\u53d6\u3002\u81f3\u5c11\uff0c\u9664\u975e\u4f60\u77e5\u9053\u9000\u683c\u5feb\u6377\u952e\u3002\u6211\u771f\u7684\u65e0\u6cd5\u7406\u89e3\u4e3a\u4ec0\u4e48\u5fae\u8f6f\u8ba4\u4e3a\u8fd9\u662f\u4e2a\u597d\u4e3b\u610f\uff0c\u9664\u975e\u4ed6\u4eec\u53ea\u662f\u76f4\u63a5\u8bd5\u56fe\u6a21\u4effMacOS\uff0c\u540e\u8005\u540c\u6837\u4f1a\u5c06\u7528\u6237\u56f0\u5728\u4ed6\u4eec\u6253\u5f00\u7684\u6bcf\u4e2a\u6587\u4ef6\u5939\u4e2d\u3002\u8fd9\u662f\u4e00\u4e2a\u663e\u8457\u7684\u529f\u80fd\u4e0b\u964d-\u6211\u4eec\u4e0d\u4ec5\u4eceWin 3.1\u4e2d\u5931\u53bb\u4e86\u5de5\u5177\u680f\u548c\u78c1\u76d8\u9009\u62e9\u5668\uff0c\u6211\u4eec\u8fd8\u5931\u53bb\u4e86\u6574\u4e2a\u5bfc\u822a\u65b9\u5411\u3002\u4e8b\u5b9e\u4e0a\uff0c\u76f4\u5230\u5f00\u53d1\u5f88\u665a\u7684\u65f6\u5019\uff0c\u4ed6\u4eec\u624d\u8ba4\u4e3a\u8fd9\u662f\u4e2a\u597d\u4e3b\u610f--\u770b\u770b\u8fd9\u5f20\u56fe\u7247(ToastyTech\u63d0\u4f9b)\uff0c\u5b83\u662f95\u5e74\u540e\u671f\u5efa\u9020\u7684\u3002\u4ecd\u7136\u5b58\u5728\uff0c\u4ee5\u53ca\u663e\u793a\u7684\u83dc\u5355\u4e2d\u6267\u884c\u76f8\u540c\u64cd\u4f5c\u7684\u7236\u9879\u9009\u9879\u3002\u70b9\u53f7\u5192\u72af\u4e86\u5fae\u8f6f\u7684\u4ec0\u4e48\uff1f\u6211\u65e0\u6cd5\u7406\u89e3\u5b83\u53ef\u80fd\u662f\u4ec0\u4e48\u6837\u5b50\u3002\u66f4\u5947\u602a\u7684\u662f\uff0c\u867d\u7136\u8d44\u6e90\u7ba1\u7406\u5668\u7684\u5e38\u7528\u914d\u7f6e\u662f\u8fd9\u6837\u7684\uff0c\u4f46\u60a8\u53ef\u4ee5\u8fdb\u5165\u83dc\u5355\u5e76\u6253\u5f00\u5de5\u5177\u680f\uff0c\u8fd9\u5c06\u6062\u590d\u78c1\u76d8\u9009\u62e9\u5668\u548c\u5411\u4e0a\u6309\u94ae\uff0c\u5982\u60a8\u5728\u6b64\u5904\u6240\u89c1\u3002\u8fd9\u8ba9\u6211\u4eec\u56de\u5230\u4e863.1\u7684\u72b6\u6001\uff0c\u5728\u8fd9\u4e2a\u72b6\u6001\u4e0b\uff0c\u6bcf\u4e2a\u6587\u4ef6\u5939\u89c6\u56fe\u90fd\u662f\u81ea\u7ed9\u81ea\u8db3\u7684\uff0c\u800c\u4e0d\u662f\u4e00\u65e6\u6df1\u5165\u5c31\u9700\u8981\u6254\u6389\u3002\u6211\u4e0d\u5f97\u4e0d\u60f3\u8c61\uff0c\u5728\u5b83\u662f\u5982\u6b64\u8d64\u88f8\u88f8\u7684\u60c5\u51b5\u4e0b\uff0c\u6709\u76f8\u5f53\u6570\u91cf\u7684\u4eba\u56db\u5904\u641c\u7d22\u5e76\u53d1\u73b0\u4e86\u8fd9\u4e00\u70b9\u3002\u542f\u7528\u5de5\u5177\u680f\u540e\uff0cWindows 95\u7684\u8d44\u6e90\u7ba1\u7406\u5668\u4e0e3.1\u6587\u4ef6\u7ba1\u7406\u5668\u4e2d\u7684\u6587\u4ef6\u5939\u89c6\u56fe\u57fa\u672c\u76f8\u540c\uff0c\u53ea\u662f\u7f3a\u5c11\u6811\u72b6\u89c6\u56fe\u3002\u8fd9\u770b\u8d77\u6765\u6709\u70b9\u65b0\u5947\uff0c\u76f4\u5230\u60a8\u53d1\u73b095\uff0c\u7531\u4e8e\u4e0d\u660e\u663e\u7684\u539f\u56e0\uff0c\u4e3aExplorer\u5f15\u5165\u4e86\u7b2c\u4e8c\u79cd\u6a21\u5f0f\uff0c\u79f0\u4e3a.\u3002\u63a2\u7d22\u3002\u5982\u679c\u60a8\u53f3\u952e\u5355\u51fb\u4efb\u4f55\u6587\u4ef6\u5939\uff0c\u7136\u540e\u5355\u51fbExplore\uff0c\u60a8\u5c06\u4ece\u7b2c\u4e8c\u4e2a\u5c4f\u5e55\u622a\u56fe\u4e2d\u83b7\u5f97\u8be5\u6a21\u5f0f\u3002\u5c06\u5176\u4e0e3.1\u4e2d\u7684\u6587\u4ef6\u7ba1\u7406\u5668\u5e76\u6392\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4f60\u53ea\u5173\u6ce8\u8d44\u6e90\u7ba1\u7406\u5668\u672c\u8eab\uff0c\u800c\u5ffd\u7565\u4e86\u65b0\u76843D\u7a97\u53e3\u8fb9\u6846\uff0c\u5e03\u5c40\u4e5f\u6ca1\u4ec0\u4e48\u4e0d\u540c\u3002\u5b83\u5177\u6709\u5de6\u4fa7\u5e26\u6709\u6811\u7684\u62c6\u5206\u7a97\u683c\uff0c\u5de5\u5177\u680f\u51e0\u4e4e\u4e0ewfw#s\u76f8\u540c\uff0c\u53ea\u662f\u6709\u4e24\u4e2a\u65b0\u6309\u94ae\uff0c\u4e24\u4e2a\u7a97\u683c\u4e0a\u65b9\u6709\u4e00\u4e2a\u65b0\u7684\u72b6\u6001\u680f\uff0c\u4f46\u5927\u4f53\u4e0a\u662f\u76f8\u540c\u7684\u3002\u6211\u611f\u5230\u5947\u602a\u7684\u662f\uff0c\u5fae\u8f6f\u4fdd\u7559\u4e86\u8fd9\u79cd\u6a21\u5f0f\uff0c\u4f46\u6216\u591a\u6216\u5c11\u5730\u9690\u85cf\u4e86\u5b83\u3002\u60a8\u4e0d\u80fd\u5c06\u6587\u4ef6\u5939\u7a97\u53e3\u5347\u7ea7\u5230\u8d44\u6e90\u7ba1\u7406\u5668\u7a97\u53e3\uff0c\u60a8\u5fc5\u987b\u53f3\u952e\u5355\u51fb\u6587\u4ef6\u5939\uff0c\u7136\u540e\u5355\u51fb\u8d44\u6e90\u7ba1\u7406\u5668\u624d\u80fd\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\u3002\u6beb\u65e0\u7591\u95ee\uff0c\u65e0\u6570\u7528\u6237\u4ece\u672a\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\u3002\u6b63\u5982\u4f60\u4f1a\u770b\u5230\u7684\uff0c\u4ed6\u4eec\u5f88\u5feb\u5c31\u610f\u8bc6\u5230\u8fd9\u6837\u505a\u6ca1\u6709\u591a\u5927\u610f\u4e49\u3002\u6bd4\u5bf9UI\u7684\u66f4\u6539\u66f4\u91cd\u8981\u7684\u662f\u5bf9\u5b58\u50a8\u5c42\u6b21\u7ed3\u6784\u7684\u66f4\u6539\u3002\u5bf9\u6211\u6765\u8bf4\uff0c\u8fd9\u5c31\u662fWindows95\u7684\u5de8\u5927\u5f71\u54cd\u3002\u4eceDOS\u5f00\u59cb\uff0c\u5fae\u8f6f\u5df2\u7ecf\u5904\u7406\u4e86\u6587\u4ef6", "note_en": "First commercial release (or close enough.) Explorer had not been coined yet; this is  MS-DOS Executive. \t\tVery simple interface. You can see basically everything it does.\n  Basically identical except for screen dimensions.\u00a0This version \t\tof Windows has overlapping windows but you can&#39;t open multiple  \t\tExecutive windows.\n  First version of Windows where the file explorer is a discrete \t\tapplication you can either close completely or open multiple instances \t\tof. It&#39;s called  File Manager for the next several \t\tyears.   \t\tThis version is still visually very similar to the  Windows 2.x \t\tfile explorer. The root window,  Directory Tree, retains the\t\t 2.x drive selector, and you can&#39;t duplicate this \t\twindow. However, it now displays a tree view that didn&#39;t exist in\t\t 2.x, and only shows folders.   \t\tTo see files you need to select a folder or disk to get a folder view, \t\tof which you can have many. You can&#39;t see it in this particular shot, \t\tbut the folder view displays a virtual   .. \t\tobject for going up one directory.\n  A significant revamp, introducing the two-pane \t\tview that would become available in every future version of  \t\tWindows. This essentially combines the  Directory Tree \t\twith the file view, which is certainly useful, but it&#39;s interesting what \t\tthey&#39;ve changed here.   \t\tFirst, opening folders doesn&#39;t open new windows; they open in the \t\tcurrent view, although you can request a new window from the menu if \t\tdesired. It would remain this way until  Windows 95 \t\tbrought back the 3.0 behavior.   \t\tSecond, folders in the tree view no longer show  + \t\tor  - symbols by default (it&#39;s turned on in the \t\tscreenshots). This was a standard feature in  3.0 that \t\ttold you whether a folder in the tree view had more folders under it. \t\tYou can toggle this back on from a menu, but I guess they figured it was \t\tvisually noisy as a default.   \t\tAlso note in the second screenshot that windows can be switched to \t\tdirectory-only view, with no tree at all,  or to tree-only view.\n  While  Win 3.11 was a minor delta from  \t\t\tWin 3.1,\t\t Windows For Workgroups 3.1 made a number of significant \t\t\tchanges regarding networking. The primary impact on  File Manager \t\t\thowever was the introduction of a toolbar that substantially alters \t\t\tits look, if not its function.   \t\tThe toolbar offers a disk selector combo box, which is almost completely \t\tredundant to the  Win 1-era disk selector except that it \t\tdisplays the disk label. I&#39;m not really sure why they kept the old-style \t\tone if they were adding this. This gets even\t\t\t wackier when you \t\t\tfind the Select Disk option in the menu.   \t\tThe buttons on the toolbar are all redundant to options in the menus, so \t\tthis is nothing revolutionary except that in 1993 I think Microsoft was \t\tjust getting hot for toolbars.   \t\tMy understanding is that if I had the network stack working there would \t\tbe some network commands on that toolbar, but I can&#39;t confirm that, and \t\tI assume they would have been in the menus anyway.\n  When I first learned there was an  NT 3.x, I only \t\tknew about  3.51, and even after I learned  3.1 \t\tcame out I had been under the impression that it was only out for a \t\tmoment before  3.51 hit the market. It turns out this is \t\tcompletely false;  3.1 is from 1993, there was a  \t\t3.50 in 1994, and  3.51 was in 1995.     3.1 inherits the  File Manager from  WFW \t\t3.11, not surprisingly since you can see the aforementioned \t\tbuttons for mapping network drives. I wonder if  WFW was \t\tessentially a dry run for &#34;networking in Windows&#34; as they ramped up to \t\tthe  NT release?   \t\tThere&#39;s also a button for permissions which is offscreen here.\n  3.50 is essentially identical to  3.1.\u00a0I \t\tinclude it because I&#39;d already taken the screenshot before I realized \t\tthere was really nothing to distinguish it.\n  There is no significant delta between  3.1/ 3.50 \t\tin  3.51, except that the buttons on the toolbar are now \t\trendered in the  95 style.   \t\tThe behind the scenes explanation for this that I&#39;ve been given is that \t\tthe purpose of 3.51 was an urgent update to get support for the APIs of \t\tthe upcoming  Windows 95 into  NT, since \t\tthe release of the next major version,  NT 4, wouldn&#39;t \t\tbe until 1996.   \t\tTo which degree this is responsible for the changed buttons is an \t\tintriguing question for me. Obviously the other common controls like \t\tmenubars and scrollbars have not changed, and in my experience when \t\trunning apps from  3.x on  95 those \t\tcontrols do update. I suppose this could be an unfinished version of the\t\t 95 UI updates.\n  Needless to say this is the\t\t   Big Wallop, the\t\t   Great Uplift, the\t\t   Grand Remake, except... Well, \t\tit&#39;s not  that Grand, they just kinda turned some things around. \t\tDespite the new name,  Explorer is not that deeply altered from\t\t File Manager.   \t\tThe default folder view is extremely plain. We have lost most of  \t\tWindows 3.1&#39;s  File Manager. We&#39;ve not only lost the \t\tsemi-unnecessary toolbar, we&#39;ve lost almost everything. When you open\t\t My Computer you see absolutely nothing other than your disks, \t\tControl Panel, and Printers. This is an intriguing moment in Windows \t\thistory. To put it colloquially,  we have lost the dot-dot.   \t\tThis is an important conceptual point so I&#39;m going to groove on it for a \t\twhile.   \t\tFrom the beginning of the PC, your interface to the system was two \t\tdimensional. At any given moment you had three actions available: look \t\tat files that are  at your level, descend  down a level, \t\tinto the hierarchy, or go  up a level out of the hierarchy.   \t\tIn DOS, you could type  CD .. at any time to go  up, to \t\tthe parent folder of your current location; all the way to the root of \t\tthe disk.  Windows 1, 2 and  3 all \t\tpreserved this capability; they all offered the dot-dot. Look in the \t\tearlier screenshots and you&#39;ll see it in every folder. Notably, this was \t\talso present in most Unixes.  Windows 95 has removed an entire direction of the compass rose from its \t\tdefault  Explorer view.   \t\t\tIn short, in the first screenshot, there is no way \t\tto go  up. Search all you like, there&#39;s no way to do it. There&#39;s \t\t\tnothing on screen, nothing in the menus either. You might discover \t\t\tthat  backspace will do it, but this would be pure luck.   \t\t\tThis mode is what a friend of mine refers to as  Spatial Explorer \t\t\t- referred to as  Spatial because it remembers where every \t\t\tfolder was the last time you opened it.  This mimics what MacOS was doing at the time, prior to the \t\tintrusion of NeXT&#39;s ideology. And, like MacOS, when you open a folder, the folder is \t\tinstantly orphaned, separated from its parent. There&#39;s no way to go  \t\tback from a folder once you&#39;ve opened it except to keep the parent \t\topen. If you close the parent, you have to reopen the hard drive from \t\tthe desktop and begin drilling down again. Unless you know about the \t\t\tbackspace shortcut, at least.   \t\tI can&#39;t really comprehend why Microsoft thought this was a good idea  \t\tunless they were simply directly trying to mimic  MacOS,\t\twhich similarly traps users in each folder they open. It is a \t\tsignificant decrease in functionality - we&#39;ve not only lost the toolbar \t\tand disk selector from  Win 3.1, we&#39;ve lost an entire \t\tdirection of navigation. In fact, they  didn&#39;t think this was a \t\tgood idea until very late in development - see\t\t this image (courtesy of\t\t ToastyTech) of a \t\tlate 95 build where the .. is still present, as well as a &#34;parent&#34; \t\toption in the displayed menu that does the same thing.   \t\tWhat offended Microsoft about the dot-dot? I can&#39;t fathom what it could \t\thave been.   \t\t\tEven more strangely, while the stock configuration of  Explorer is like this, you \t\t\tcan go to the menu and turn on  Toolbar, which restores the disk selector  and \t\ta &#34;go up&#34; button, as you can see\t\t\t here. This gets us back to the \t\t\t 3.1 state of affairs, in \t\twhich every folder view is self-sufficient instead of needing to be \t\tthrown away as soon as its gone too deep. I have to imagine that, with \t\t\thow barebones it is, a reasonable number of people searched around \t\t\tand discovered this.   \t\tOnce the toolbar is enabled,  Windows 95&#39;s explorer is essentially the same as the folder view from  \t\t3.1  File Manager, except that the tree view is missing. That looks a \t\tlittle novel until you discover that  95, for un-obvious \t\treasons, introduces a  second mode for  Explorer, called...  \t\tExplore.   \t\tIf you right click on any folder and hit  Explore you get the \t\tmode from the second screenshot. Compare this side by side with  File \t\tManager in  3.1.   \t\tIf you focus on  Explorer itself and tune out the new 3D window \t\tborders, the layout is not all that different. It has the split-pane \t\twith the tree on the left, the toolbar is nearly identical to  \t\tWFW&#39;s except for two new buttons, there&#39;s a new status bar  \t\tabove the two panes, but by and large it&#39;s the same.   \t\tIt&#39;s curious to me that Microsoft left this mode in but more or less hid \t\tit. You cannot &#34;upgrade&#34; a folder window to an  Explore window, \t\tyou have to right click on a folder and click Explore to create one. Unquestionably, tons of users never realized this was there.  As you&#39;ll see, they realized before very long that it didn&#39;t make \t\tmuch sense to do this.   \t\tMore important than the changes to the UI were the changes to the \t\tstorage hierarchy. This, to me, is the big impact of  Windows 95. \t\tFrom  DOS onwards, Microsoft had treated file management \t\tas a dry depiction of the exact same disk/folder/file structure that \t\tstretched back to the first IBM PC (and arguably to S-100 systems that \t\tinspired it.)   \t\tBeginning with  95, Microsoft makes new assertions about \t\tthe hierarchy. While file  paths haven&#39;t changed (C:\\Windows is \t\tstill valid),  Explorer is now used to make a strong statement \t\tabout how Microsoft wishes you to perceive your computer.   \t\tNow disks are children of  My Computer, which is not simply a \t\tlink to open  Explorer, but in fact a virtual location that \t\tcontains your storage devices (among other things.) And even that is not \t\tthe root of the storage hierarchy. The tree begins at  Desktop. \t\tIndeed, you can see with your eyes that the object - &#34;My Computer&#34; - \t\tresides on your desktop.   \t\tWith this change, Microsoft has asserted that your physical computer \t\texists in a metaphysical space.  Windows exists in \t\tanother dimension, and has mapped your physical computer into its \t\tspacial awareness. Your computer sits alongside things like  Network \t\tNeighborhood, where other computers live, and  My Briefcase, \t\twhich is literally a meta-representation of portable devices or storage \t\tmedia that exist outside of your computer.   \t\tSo in essence Microsoft made very  few  direct changes to  \t\tFile Manager for  95, but made dramatic changes to \t\t\tthe concepts of computing. I am working on an essay about the larger \t\t\timplications of this topic.\n  It&#39;s often said that  NT4 was  NT \t\twith the  95 shell &#34;dropped into&#34; it - there are tons of \t\tchanges in functionality, naturally, so this is like when someone says they &#34;slapped&#34; a \t\tnew engine into their car despite the process taking four months of \t\tgrinding, fabricating adapters, etc. However, I think the images here \t\tspeak for themselves.     Explorer, as far as the distinct file browser itself goes, is \t\tabsolutely indistinguishable from the version in  95. If \t\tyou dig into dialogs you start finding things, but at a glance I do not \t\tbelieve it&#39;s possible to tell the difference between  95 \t\tand  NT4.   \t\tThe toolbar is disabled by default just like  95, I just \t\tturned it on before I took the screenshots. The stock  NT4  Explorer is trapped in whatever folder it ends up in.\n  Windows 98 was famously \t\tcontroversial, at least in nerd circles, for the integration of  \t\tInternet Explorer into  Explorer itself, but again there&#39;s \t\tvery little alteration to the layout of the  Explorer part of\t\t Explorer. The icons now have higher color depth, which makes \t\tthem feel more spritely and alive, but otherwise the differences are \t\tlimited to having obtained the thicker  IE toolbar, although \t\tthat can be turned off for the most part.   \t\tA new development is that the folder tree view can be toggled now from \t\tany window. You can still launch the  Explore view separately \t\thowever, and we can tell that this calls  Explorer in some \t\tdifferent way because the  Tools menu only appears on windows \t\tlaunched via that method.   \t\tThe toggle for the tree view is buried up in a menu, so still, many \t\tusers may not have noticed this feature was available unless they \t\thappened to right click on a folder and noticed the  Explore \t\toption.      I cannot for the life of me figure out what triggers it, but \t\tsometimes  98 will hide the colorful &#34;web content&#34; \t\tsidebar. When this happens, it actually does something fairly pleasant \t\twhere it displays the folder title in\t\t big text at the top. I \t\tthought it might be caused by running in 16 color mode, but I&#39;ve tried \t\tit in  high-color mode \t\tand it still happens. I have never seen this happen before now.\n  There are no notable changes I can find in  SE. I include it only because they changed \t\tthe throbber between  First and  Second Edition.\n  Windows 2000, if you \t\tdon&#39;t know, is where Windows lept in to the 20th century. But seriously, \t\tfolks,     2K and the associated  NT5 kernel were \t\tleaps and bounds ahead of  NT4 or the  9x \t\tbranch. The improvements were myriad including a completely new graphics \t\tAPI but, again,  Explorer remains mostly the same.   \t\tThe new smaller toolbar comes from  IE5.5 which had \t\tgained the side-labeled buttons at the same time, enabling the toolbar \t\tto shrink by 50%. The cut/copy/paste buttons have been shuffled forward \t\t\thowever to make room for some new things.   \t\t\tA  Search button - \t\t\tfile search is now integrated into Explorer, which is reasonable on \t\t\tits face. A  History button - more on that in a later \t\t\tedition. And finally, a  Folders button, allowing the user \t\t\tto upgrade any window to  Explore style with a tree view \t\t\twithout needing to find it in a menu.    \t\tProbably the most significant addition to the main UI was just the hard \t\tdisk space pie chart, but that&#39;s not a small feature frankly - it was \t\textremely handy to not have to pull up  Properties just to see \t\thow slammed your disk was. Microsoft had a neat idea here with putting \t\tquick info in their (otherwise useless) sidebar, but unfortunately it \t\tdidn&#39;t quite play out.   \t\tThis is also the edition where  Program Files began \t\t\t hiding \t\titself behind a scare link, although that was somewhat sensible - \t\tsoftware was by and large now being installed using apps that registered \t\tthemselves with  Add/Remove Programs, and Microsoft wanted to \t\tdiscourage users from deleting apps instead of using  Uninstall. \t\tThe warning message was also present in  Windows 98 \t\talthough it didn&#39;t require the user to acknowledge it in order to see \t\tthe folder.   \t\tFinally, when in the root of  My Computer (and a couple other \t\tplaces), the sidebar displays a  See Also list as you can see in \t\tthe second screenshot. This was the beginning of Microsoft&#39;s growing \t\tfascination with suggesting things to the user without any idea if the \t\tuser wanted them, presumably in an attempt to diminish the confusing \t\teffects of growing UI complexity.   \t\tThis was sort-of born in  WFW3.11 with the addition of \t\tcut/copy/paste to the toolbar even though those options were available \t\tin menus or on the keyboard. The user was being shown options they \t\thadn&#39;t asked after, but they were at least very common ones and they \t\tsaved a click - a click into menus that had been growing for some time, \t\tat that.\n  Windows ME again got the \t\tappellation of &#34; Windows 98 with the  2000 \t\tshell dropped into it,&#34; which is historically interesting only because \t\tit shows the direction Microsoft&#39;s product lines had shifted - suddenly\t\t NT was the line where new UI developments were being \t\tmade and  9x was getting hand-me-downs.     Explorer has made one significant leap in this release: Microsoft has decided to hide the  entire hard drive \t\tfrom the user. I doubt this was well received by anyone (indeed, they \t\tremoved it several releases later.)", "posttime": "2020-06-12 11:41:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "windows,\u8d44\u6e90\u7ba1\u7406,explorer,\u6253\u5f00", "title": "\u591a\u5e74\u6765\u7684Windows\u8d44\u6e90\u7ba1\u7406\u5668", "title_en": "Windows Explorer Through the Years", "transed": 1, "url": "https://gekk.info/articles/explorer.html", "via": "", "real_tags": ["windows", "\u8d44\u6e90\u7ba1\u7406", "explorer", "\u6253\u5f00"]}, {"category": "", "categoryclass": "", "imagename": "2d1d337b88fa14f4451a42230dc72611.jpg", "infoid": 1006251, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5e03\u5170\u767b\u00b7\u97e6\u7279(Brandon Waite)\u548c\u670b\u53cb\u4eec\u73a9\u4e86\u4e00\u4e2a\u665a\u4e0a\u7684\u68cb\u76d8\u6e38\u620f\u540e\u6b63\u5728\u6536\u62fe\u884c\u674e\uff0c\u8fd9\u65f6\u4ed6\u6ce8\u610f\u5230\u5176\u4e2d\u4e00\u4e2a\u76d2\u5b50\u7684\u4fa7\u9762\u5199\u7740\u201c1\u52304\u540d\u73a9\u5bb6\u201d\u3002\u5c31\u8fd9\u6837\uff0c\u4ed6\u65e0\u610f\u4e2d\u4ea7\u751f\u4e86\u81ea\u5df1\u73a9\u6e38\u620f\u7684\u60f3\u6cd5\u3002\n\u201c\u6211\u53ea\u662f\u4ece\u6765\u6ca1\u6709\u542c\u8bf4\u8fc7\uff0c\u6216\u8005\u6211\u4ee5\u4e3a\u6211\u6ca1\u6709\u542c\u8bf4\u8fc7\uff0c\u201d\u4ed6\u56de\u5fc6\u9053\u3002\u201c\u5f53\u7136\uff0c\u6211\u4eec\u5927\u591a\u6570\u4eba\u90fd\u66fe\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u73a9\u8fc7(\u7eb8\u724c)\u5355\u4eba\u7eb8\u724c\u3002\u201d\n\u81ea\u4ece1995\u5e74\u201c\u5361\u5766\u5c9b\u7684\u5b9a\u5c45\u8005\u201d\u4e0a\u6620\u4ee5\u6765\uff0c\u4e1a\u4f59\u68cb\u76d8\u6e38\u620f\u7684\u53d7\u6b22\u8fce\u7a0b\u5ea6\u98d9\u5347\u3002\u53bb\u5e74\uff0c\u6570\u4ee5\u5343\u8ba1\u7684\u65b0\u6e38\u620f\u53d1\u5e03\uff0c\u6570\u4ee5\u767e\u4e07\u8ba1\u7684\u4eba\u5728\u73a9\u5b83\u4eec\u3002\u5728\u6211\u4eec\u5982\u6b64\u591a\u7684\u5de5\u4f5c\u548c\u5a31\u4e50\u90fd\u53d1\u751f\u5728\u5c4f\u5e55\u4e0a\u7684\u65f6\u5019\uff0c\u8001\u5f0f\u7684\u68cb\u76d8\u6e38\u620f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0e\u6709\u5f62\u7684\u4e1c\u897f\u8131\u8282\u548c\u53c2\u4e0e\u7684\u673a\u4f1a\uff0c\u8bb8\u591a\u73a9\u5bb6\u8bf4\u8fd9\u662f\u4e3b\u8981\u7684\u5438\u5f15\u529b\u3002\n\u73b0\u5728\uff0c\u8fd9\u4e9b\u4e1a\u4f59\u7231\u597d\u8005\u4e2d\u6709\u4e00\u5c0f\u90e8\u5206\u4eba\u9009\u62e9\u81ea\u5df1\u73a9\uff0c\u4f46\u8fd9\u4e00\u6bd4\u4f8b\u5728\u4e0d\u65ad\u589e\u957f\u3002\n2008\u5e74\uff0cZ-Man\u6e38\u620f\u516c\u53f8\u53d1\u5e03\u4e86\u9a6c\u7279\u00b7\u5229\u79d1\u514b(Matt Leacock)\u7684\u201c\u6d41\u884c\u75c5\u201d--\u8bb8\u591a\u4eba\u73b0\u5728\u89c9\u5f97\u8fd9\u662f\u4e00\u6b3e\u5ba3\u6cc4\u60c5\u7eea\u7684\u5408\u4f5c\u6e38\u620f--\u968f\u540e\u63a8\u51fa\u4e86\u4e00\u7cfb\u5217\u884d\u751f\u4ea7\u54c1\u3002\u5229\u79d1\u514b\u8bf4\uff0c\u5728\u90a3\u4e4b\u540e\u7684\u51e0\u5e74\u91cc\uff0c\u4ed6\u6ce8\u610f\u5230\u4eba\u4eec\u5bf9\u5355\u4eba\u6e38\u620f\u7684\u5174\u8da3\u4e0e\u65e5\u4ff1\u589e\u3002\n\u201c\u6211\u5728\u7f51\u4e0a\u5173\u6ce8\u4e86\u5f88\u591a\u5173\u4e8e\u6211\u81ea\u5df1\u7684\u6e38\u620f\u7684\u5e16\u5b50\uff0c\u201d\u4ed6\u8bf4\uff0c\u201c\u6211\u770b\u5230\u4eba\u4eec\u5bf9\u7eb8\u724c\u6e38\u620f\u7684\u9700\u6c42\u8d8a\u6765\u8d8a\u5927\u3002\u8fd9\u5b9e\u9645\u4e0a\u662f\u6211\u8ba1\u5212\u5728\u5373\u5c06\u5230\u6765\u7684\u6e38\u620f\u4e2d\u505a\u5f97\u66f4\u591a\u7684\u4e8b\u60c5--\u8bd5\u7740\u652f\u6301\u66f4\u591a\u7684\u7eb8\u724c\u6e38\u620f\u7248\u672c\u3002\u201c\u3002\n\u968f\u7740\u4eba\u4eec\u5728\u4e16\u754c\u5404\u5730\u8fdb\u884c\u9694\u79bb\uff0c\u62e5\u6709\u4e00\u4e2a\u53ef\u9760\u7684\u3001\u4e0d\u9700\u8981\u522b\u4eba\u7684\u5ba4\u5185\u7231\u597d\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u6709\u4ef7\u503c\u3002\u548cLeacock\u4e00\u6837\uff0c\u5404\u516c\u53f8\u4e5f\u5728\u5173\u6ce8\uff1a\u5728\u8fc7\u53bb\u7684\u51e0\u4e2a\u6708\u91cc\uff0c\u6709\u51e0\u5bb6\u516c\u53f8\u53d1\u5e03\u4e86\u73b0\u6709\u6e38\u620f\u7684\u65b0\u5355\u4eba\u7248\u672c\u3002\n\u201c\u7a81\u7136\u4e4b\u95f4\uff0c\u8fd9\u4f3c\u4e4e\u6210\u4e86\u516c\u53f8\u4e2d\u7684\u4e00\u79cd\u8d8b\u52bf\uff0c\u201d\u97e6\u7279\u8bf4\uff0c\u4ed6\u73b0\u5728\u4e0e\u670b\u53cb\u5361\u7279\u00b7\u9ea6\u57fa(Carter McKie)\u5171\u540c\u4e3b\u6301\u4e86\u201c\u592a\u9633\u9f99\u201d(Solosaurus)\uff0c\u8fd9\u662f\u4e00\u4e2a\u81f4\u529b\u4e8e\u5355\u72ec\u73a9\u68cb\u76d8\u6e38\u620f\u7684\u64ad\u5ba2\u3002\u201c\u6211\u8ba4\u4e3a\uff0c\u5728\u9700\u8981\u9f13\u52b1\u7684\u65f6\u5019\uff0c\u8fd9\u4f20\u8fbe\u4e86\u5bf9\u4eba\u4eec\u7684\u4e00\u4e9b\u5173\u5fc3\u548c\u5173\u5fc3\uff0c\u8fd9\u5728\u73b0\u5728\u662f\u4ee4\u4eba\u9f13\u821e\u7684\u3002\u201d\n\u5bf9\u4e8e\u4e00\u4e9b\u73a9\u5bb6\u6765\u8bf4\uff0c\u5355\u4eba\u6253\u7403\u751a\u81f3\u6bd4\u4e0e\u4eba\u6253\u7403\u66f4\u597d\u3002\u739b\u4e3d\u7279\u00b7\u963f\u62c9\u5b81(Marit Alanen)\u57282019\u5e74\u521d\u5f00\u59cb\u73a9\u5355\u4eba\u68cb\u76d8\u6e38\u620f\uff0c\u5979\u8bf4\u5979\u66f4\u559c\u6b22\u8fd9\u79cd\u65b9\u5f0f\u3002\n\u201c\u6211\u77e5\u9053\u8fd9\u542c\u8d77\u6765\u5f88\u5947\u602a\uff0c\u201d\u5979\u8bf4\uff0c\u201c\u4f46\u6211\u786e\u5b9e\u5982\u6b64\u3002\u6211\u53d1\u73b0\u6211\u53ef\u4ee5\u60f3\u82b1\u591a\u5c11\u65f6\u95f4\u5c31\u82b1\u591a\u5c11\u65f6\u95f4\uff0c\u5982\u679c\u6211\u9700\u8981\u7684\u8bdd\uff0c\u6211\u53ef\u4ee5\u4e0d\u65ad\u5730\u53c2\u8003\u89c4\u5219\uff0c\u800c\u4e14\u6ca1\u6709\u4eba\u6307\u671b\u6211\u786e\u5207\u5730\u77e5\u9053\u600e\u4e48\u73a9\u3002\u7136\u540e\u6211\u53ef\u4ee5\u60f3\u73a9\u591a\u5c11\u6b21\u5c31\u73a9\u591a\u5c11\u6b21\uff0c\u8f6c\u79fb\u5230\u5176\u4ed6\u4e8b\u60c5\u4e0a\uff0c\u5728\u8f6e\u6d41\u4e4b\u95f4\u4f11\u606f\u4e00\u5929-\u4e0d\u540c\u7684\u65b9\u5f0f\u53ea\u4f1a\u8ba9\u5b83\u66f4\u7075\u6d3b\u3002\u201c\u3002\n\u5bf9\u53e6\u4e00\u4e9b\u4eba\u6765\u8bf4\uff0c\u72ec\u594f\u662f\u5fd9\u788c\u7684\u6210\u5e74\u4eba\u751f\u6d3b\u7684\u5b9e\u9645\u526f\u4ea7\u54c1-\u6700\u8fd1\uff0c\u662f\u81ea\u6211\u5b64\u7acb\u7684\u526f\u4ea7\u54c1\u3002\u201c\u6211\u559c\u6b22\u5355\u4eba\u6e38\u620f\uff0c\u201d\u97e6\u7279\u8bf4\uff0c\u201c\u4f46\u5927\u591a\u6570\u6e38\u620f\u6211\u60f3\u73a9\u591a\u4eba\u6e38\u620f\uff0c\u6211\u786e\u5b9e\u60f3\u548c\u6211\u7684\u670b\u53cb\u4eec\u793e\u4ea4\u3002\u4f46\u8fd9\u662f\u5bf9\u751f\u6d3b\u53d8\u5316\u7684\u59a5\u534f\u3002\u201c\u3002\n\u201c\u6211\u662f\u4e2a\u5185\u5411\u7684\u4eba\uff0c\u5bb6\u91cc\u6709\u4e24\u4e2a\u8e52\u8dda\u5b66\u6b65\u7684\u5b69\u5b50\uff0c\u201d\u97e6\u7279\u8bf4\uff0c\u201c\u6211\u7684\u5de5\u4f5c\u5c31\u662f\u6574\u5929\u548c\u4eba\u6253\u4ea4\u9053\u3002\u5bf9\u6211\u6765\u8bf4\uff0c\u80fd\u591f\u5728\u665a\u4e0a\u5750\u4e0b\u6765\u73a9\u6e38\u620f\uff0c\u5728\u5b89\u9759\u7684\u623f\u95f4\u91cc\u5446\u4e0a\u4e00\u6bb5\u65f6\u95f4\uff0c\u53ea\u662f\u4eab\u53d7\u8fd9\u79cd\u4f53\u9a8c\uff0c\u8fd9\u5bf9\u6211\u6765\u8bf4\u662f\u4e00\u79cd\u653e\u677e\u7684\u611f\u89c9\u3002\u201c\u3002\n\u5728\u4e00\u4e9b\u72ec\u594f\u7248\u672c\u4e2d\uff0c\u73a9\u5bb6\u8bd5\u56fe\u51fb\u8d25\u68cb\u76d8\u3002\u5176\u4ed6\u4eba\u5219\u6dfb\u52a0\u4e86\u4e00\u79cd\u88ab\u79f0\u4e3a\u201c\u81ea\u52a8\u201d\u7684\u5143\u7d20-\u4e00\u79cd\u4eba\u9020\u73a9\u5bb6\uff0c\u901a\u8fc7\u963b\u6b62\u79fb\u52a8\u6216\u62ff\u8d70\u8d44\u6e90\u6765\u6a21\u4eff\u4eba\u7c7b\u5bf9\u624b\u5bf9\u6e38\u620f\u7684\u5f71\u54cd\u3002\u6839\u636e\u521b\u9020\u8fd9\u4e00\u672f\u8bed\u7684\u8bbe\u8ba1\u5e08\u83ab\u6ed5\u00b7\u8499\u62c9\u5fb7\u00b7\u5f7c\u5f97\u68ee(Morten Monrad Pedersen)\u7684\u8bf4\u6cd5\uff0c\u81ea\u52a8\u6c7d\u8f66\u901a\u5e38\u7531\u4e00\u4e2a\u7b80\u5355\u7684\u673a\u5236\u63a7\u5236\uff0c\u6bd4\u5982\u63b7\u9ab0\u5b50\u6216\u4e00\u526f\u724c\u3002\n\u97e6\u7279\u8bf4\uff0c\u5728\u4e00\u4e9b\u8f83\u8001\u7684\u6e38\u620f\u4e2d\uff0c\u76ee\u6807\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u51fb\u8d25\u4f60\u81ea\u5df1\u7684\u5206\u6570\uff0c\u201c\u5c31\u50cf\u4eba\u4eec\u8fc7\u53bb\u53bb\u62f1\u5eca\u6253\u9ad8\u5206\u4e00\u6837\u3002\u201d\u4f46\u8fd9\u7c7b\u6e38\u620f\u6b63\u5728\u5931\u53bb\u4eba\u6c14\uff0c\u201c\u800c\u7535\u5b50\u6e38\u620f\u4e5f\u4e0d\u518d\u662f\u8fd9\u6837\u8fd0\u4f5c\u7684\u3002\u4eba\u4eec\u60f3\u8981\u4e0e\u67d0\u79cd\u4e1c\u897f\u7ade\u4e89\uff0c\u65e0\u8bba\u662f\u73af\u5883\u65b9\u9762\u7684\uff0c\u8fd8\u662f\u5176\u4ed6\u53c2\u4e0e\u8005\u7684\u3002\u201c\u3002\n\u5982\u679c\u4f60\u5bb6\u91cc\u6709\u68cb\u7c7b\u6e38\u620f\uff0c\u4f46\u4ece\u6765\u6ca1\u6709\u5c1d\u8bd5\u8fc7\u5355\u4eba\u6e38\u620f\uff0c\u770b\u770b\u6709\u6ca1\u6709\u4eba\u6709\u5355\u4eba\u6a21\u5f0f\u3002\u201c\u5f53\u4ed6\u4eec\u78b0\u5de7\u6ce8\u610f\u5230\u4ed6\u4eec\u7684\u6e38\u620f\u76d2\u5b50\u4e0a\u6709\u4e00\u4e2a\u20181\u2019\u65f6\uff0c\u5f88\u591a\u4eba\u5c31\u662f\u8fd9\u6837\u5f00\u59cb\u7684\uff0c\u201d\u97e6\u7279\u8bf4\u3002\n\u5373\u4f7f\u662f\u6ca1\u6709\u6b63\u5f0f\u5355\u4eba\u6a21\u5f0f\u7684\u6e38\u620f\uff0c\u4e5f\u53ef\u4ee5\u5728BoardGameGeek.com\u4e0a\u53d1\u5e03\u7c89\u4e1d\u81ea\u5236\u7684\u5355\u4eba\u6e38\u620f\u53d8\u4f53\uff0cBoardGameGeek.com\u662f\u6700\u5927\u7684\u68cb\u7c7b\u6e38\u620f\u7231\u597d\u8005\u5728\u7ebf\u8bba\u575b\u3002(\u5982\u679c\u6709\u7591\u95ee\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528\u6e38\u620f\u540d\u79f0+\u5355\u4eba\u53d8\u4f53\u5728\u7ebf\u641c\u7d22\uff0c\u67e5\u770b\u5f39\u51fa\u7684\u5185\u5bb9\u3002)\n\u963f\u5c14\u4f2f\u7279\u00b7\u8d6b\u5c14\u5357\u5fb7\u65af(Albert Hernandez)\u5efa\u8bae\uff1a\u201c\u8bd5\u8bd5\u4f60\u5df2\u7ecf\u62e5\u6709\u7684\uff0c\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u81ea\u5df1\u4f1a\u4e0d\u4f1a\u559c\u6b22\uff0c\u5c31\u4e0d\u8981\u6295\u8d44\u5b83\u3002\u201d\u4ed6\u521b\u7acb\u4e86\u5e7f\u53d7\u6b22\u8fce\u76841\u4eba\u534f\u4f1a(BoardGameGeek.com)\uff0c\u5e76\u4e3b\u6301\u4e86\u4e00\u4e2a\u540c\u540d\u64ad\u5ba2\u3002\n\u8d6b\u5c14\u5357\u5fb7\u65af\u8bf4\uff0c\u603b\u7684\u6765\u8bf4\uff0c\u5408\u4f5c\u6e38\u620f-\u73a9\u5bb6\u4f5c\u4e3a\u4e00\u4e2a\u56e2\u961f\u5408\u4f5c\u53d6\u80dc\uff0c\u800c\u4e0d\u662f\u76f8\u4e92\u7ade\u4e89-\u975e\u5e38\u9002\u5408\u5355\u72ec\u73a9\u3002\u60a8\u53ef\u4ee5\u7b80\u5355\u5730\u9009\u62e9\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u89d2\u8272\uff0c\u7136\u540e\u540c\u65f6\u64ad\u653e\u8fd9\u4e24\u4e2a\u89d2\u8272\u3002\n\u6bcf\u5e74\u90fd\u6709\u5982\u6b64\u591a\u7684\u65b0\u6e38\u620f\u53d1\u5e03\uff0c\u5f04\u6e05\u695a\u4ece\u54ea\u91cc\u5f00\u59cb\u53ef\u80fd\u662f\u4e00\u4ef6\u4ee4\u4eba\u4e0d\u77e5\u6240\u63aa\u7684\u4e8b\u60c5\u3002\u97e6\u7279\u548c\u9ea6\u57fa\u5efa\u8bae\u67e5\u770b\u4ed6\u4eec\u5728\u64ad\u5ba2\u4e0a\u8ba8\u8bba\u7684\u524d10\u540d\u540d\u5355\uff0c\u5e76\u5173\u6ce8\u4e00\u573a\u6e38\u620f\u9700\u8981\u591a\u957f\u65f6\u95f4\u624d\u80fd\u73a9\u5b8c\u3002\n\u201c\u5bf9\u5f88\u591a\u4eba\u6765\u8bf4\uff0c\u8fd9\u5c06\u662f\u4e00\u4ef6\u975e\u5e38\u91cd\u8981\u7684\u4e8b\u60c5\uff0c\u201d\u97e6\u7279\u8bf4\u3002\u201c\u4f60\u53ef\u4ee5\u627e\u5230\u9700\u898110\u5206\u949f\u7684\u5355\u4eba\u6e38\u620f\uff0c\u6709\u4e9b\u9700\u89816\u4e2a\u5c0f\u65f6\u3002\u201d\n\u97e6\u7279\u5efa\u8bae\uff0c\u9009\u62e9\u4e00\u6b3e\u770b\u8d77\u6765\u4e0d\u9519\u7684\u6e38\u620f\uff1a\u201c\u867d\u7136\u542c\u8d77\u6765\u5f88\u80a4\u6d45\uff0c\u4f46\u5f53\u4f60\u6709\u5176\u4ed6\u4e1c\u897f\u4e89\u76f8\u5438\u5f15\u4f60\u7684\u6ce8\u610f\u529b\u65f6\uff0c\u827a\u672f\u54c1\u7684\u8d28\u91cf\u548c(\u6e38\u620f\u4e2d)\u68cb\u5b50\u7684\u8d28\u91cf\u5bf9\u4f60\u4e0b\u67b6\u7684\u53ef\u80fd\u6027\u8d77\u7740\u5f88\u5927\u7684\u4f5c\u7528\u3002\u201d\n\u8d6b\u5c14\u5357\u5fb7\u65af\u8bf4\uff0c\u4ed6\u4e5f\u5728\u5bfb\u627e\u4e00\u4e2a\u80fd\u4e0e\u4ed6\u5bf9\u8bdd\u7684\u4e3b\u9898\uff1a\u201c\u5982\u679c\u4f60\u5bf9\u4e3b\u9898\u4e0d\u611f\u5174\u8da3\uff0c\u4e0d\u8981\u4ec5\u4ec5\u56e0\u4e3a\u4f60\u542c\u8bf4\u8fd9\u662f\u4e00\u6b3e\u975e\u5e38\u597d\u7684\u5355\u4eba\u6e38\u620f\uff0c\u5c31\u73a9\u8fd9\u4e2a\u6e38\u620f\u3002\u6bcf\u6b21\u6211\u8bd5\u7740\u73a9\u90a3\u6837\u7684\u6e38\u620f\uff0c\u7ed3\u679c\u90fd\u4ee5\u5931\u8d25\u544a\u7ec8\u3002\u673a\u68b0\u5730\u8bb2\u53ef\u80fd\u5f88\u597d\u542c\uff0c\u4f46\u6211\u5c31\u662f\u65e0\u804a\u6b7b\u4e86\uff0c\u56e0\u4e3a\u6211\u5c31\u662f\u4e0d\u611f\u5174\u8da3\u3002\u201c\u3002\n\u5982\u679c\u4f60\u5bb6\u91cc\u53ea\u6709\u4e00\u526f\u724c\u548c\u4e00\u4e9b\u9ab0\u5b50\uff0c\u963f\u62c9\u5b81\u5efa\u8bae\u4ece\u4e3b\u9898\u5355\u4eba\u7eb8\u724c\u7eb8\u724c\u6e38\u620f\u5f00\u59cb\uff1a\u201c\u53ef\u4ee5\u628a\u8fd9\u4e9b\u770b\u4f5c\u662f\u8d85\u8d8a\u5355\u4eba\u7eb8\u724c\u6e38\u620f\u7684\u4e00\u6b65\uff0c\u5728\u5355\u4eba\u7eb8\u724c\u6e38\u620f\u4e2d\u53ef\u80fd\u4f1a\u6709\u66f4\u591a\u7684\u53d6\u80dc\u7b56\u7565\uff0c\u8fd8\u6709\u4e00\u4e2a\u4e3b\u9898\uff0c\u628a\u6e38\u620f\u8054\u7cfb\u5728\u4e00\u8d77\uff0c\u8ba9\u5b83\u53d8\u5f97\u4e0d\u90a3\u4e48\u62bd\u8c61\u3002\u201d\nAlanen\u4eab\u53d7\u7684\u53e6\u4e00\u4e2a\u514d\u8d39\u9009\u9879\u662fPrint and Play\uff0c\u6216\u79f0PnP\u6e38\u620f\uff1a\u201c\u8fd9\u4e9b\u6e38\u620f\u662f\u7531\u6e38\u620f\u793e\u533a\u5f00\u53d1\u7684\uff0c\u514d\u8d39\u63d0\u4f9b\u7ed9\u4eba\u4eec\u5728\u5bb6\u91cc\u4e0b\u8f7d\u548c\u6253\u5370\u3002\u201d\nHernandez\u8bf4\uff0c\u5728\u7ebf\u68cb\u7c7b\u6e38\u620f\u793e\u533a\u975e\u5e38\u53cb\u597d\uff0c\u6240\u4ee5\u4e0d\u8981\u5bb3\u6015\u8054\u7cfb\u6709\u7ecf\u9a8c\u7684\u5355\u4eba\u6e38\u620f\u73a9\u5bb6\u5e76\u63d0\u51fa\u95ee\u9898\u3002\u4ed6\u63a8\u8350\u50cfBoardGameGeek.com\u8fd9\u6837\u7684\u7f51\u7ad9-\u4ed6\u521b\u529e\u76841\u4eba\u5de5\u4f1a\u73b0\u5728\u6709\u8d85\u8fc713,000\u540d\u4f1a\u5458-\u6216\u8005\u5355\u4eba\u7248\u6e38\u620f\u73a9\u5bb6Facebook\u7fa4\u3002\n\u4ed6\u8bf4\uff1a\u201c\u6211\u8ba4\u4e3a\u6700\u91cd\u8981\u7684\u662f\uff0c\u5982\u679c\u4f60\u5728\u5bfb\u627e\u4e00\u6b3e\u6e38\u620f\uff0c\u4f46\u4f60\u4e0d\u786e\u5b9a\u4ece\u54ea\u91cc\u5f00\u59cb\uff0c\u4f60\u4e0d\u5fc5\u72ec\u81ea\u884c\u52a8\u3002\u201d\u201c\u5373\u4f7f\u4f60\u662f\u4e00\u4e2a\u4eba\u73a9\u3002\u201d", "note_en": "Brandon Waite was packing up after an evening playing board games with his friends when he noticed \u201c1 to 4 players\u201d written on the side of one of the boxes. Just like that, he stumbled onto the idea of playing games by himself.\n \u201cI had just never heard of that before, or I thought I hadn\u2019t,\u201d he recalls. \u201cBut of course, most of us have played [card] solitaire at some point.\u201d\n Since the release of \u201cSettlers of Catan,\u201d in 1995, the popularity of hobby board games has soared. Last year thousands of new titles were released, and millions of people are playing them. At a time when so much of our work and entertainment takes place on a screen, old-fashioned board games offer a chance to disconnect and engage with something tangible, which many players say is the primary appeal.\n And now, a small but growing fraction of these hobbyists are choosing to play by themselves.\n In 2008, Z-Man Games released Matt Leacock\u2019s \u201cPandemic\u201d\u2014a cooperative game that many are finding cathartic right now\u2014followed by a series of spinoffs. In the years since, Leacock says, he\u2019s noticed an increased interest in solo play.\n  \u201cI follow a lot of posts online about my own games,\u201d he says, \u201cand I\u2019m seeing more and more demand for solitaire versions. It\u2019s actually something I\u2019m planning to do more in upcoming games\u2014try to support more solitaire versions of them.\u201d\n With people quarantining worldwide, having a reliable indoor hobby that doesn\u2019t require others is more valuable than ever. Like Leacock, companies are taking note: In the past few months, several have released new single-player variants of existing games.\n \u201cAll of a sudden that seems to be a trend among companies,\u201d says Waite, who now co-hosts \u201cSolosaurus,\u201d a podcast dedicated to solitary board games, with his friend Carter McKie. \u201cI think that communicates some care and concern for people that\u2019s encouraging right now, at a time when encouragement is needed.\u201d\n For some players, going solo is even better than playing with people. Marit Alanen, who picked up solitary board gaming in early 2019, says she prefers it that way.\n \u201cI know that sounds weird,\u201d she says, \u201cbut I do. I find that I can take as much time as I want, and I can constantly reference the rules if I need to, and there\u2019s nobody counting on me to know exactly how to play. And then I can play as many times as I want, move on to something else, take a day between turns\u2014different ways that just make it more flexible.\u201d\n  For others, playing solo is a practical byproduct of a busy adult life\u2014and, recently, of self-isolation. \u201cI enjoy solo gaming,\u201d Waite says, \u201cbut most games I want to play multiplayer, and I do want to socialize with my friends. But this is a compromise to changes in life.\u201d\n  \u201cI\u2019m an introvert in a house with two toddlers,\u201d says Waite, \u201cand my job is working with people all day. There\u2019s something relaxing for me about being able to sit down with a game in the evenings, spend some time in a quiet room, and just enjoy this experience.\u201d\n In some solo versions, players try to beat the board. Others have added an element known as an \u201cautoma\u201d\u2014an artificial player that mimics the effect a human opponent would have on the game by blocking moves or taking away resources. According to Morten Monrad Pedersen, the designer who coined the term, automa are usually controlled by a simple mechanism, like a dice roll or a deck of cards.\n In some older games, says Waite, the goal is simply to beat your own score, \u201cin the same way that people used to go to arcades to beat high scores.\u201d But such games are losing their popularity, \u201cand video games just don\u2019t operate that way anymore. People want to compete against something, whether it be environmental or another player.\u201d\n   If you have board games at home but have never tried playing solo, see if any of them have a solitary mode. \u201cThat\u2019s how a lot of people get started, when they happen to notice that their game has a \u20181\u2019 on the box,\u201d Waite says.\n  Even games without an official solo mode can have a fan-made solo variant posted on BoardGameGeek.com, the biggest online forum for board-game hobbyists. (When in doubt, try searching using the game name + solo variant online to see what pops up.)\n \u201cTry the ones you already have, and don\u2019t invest in something if you don\u2019t know whether you\u2019re going to like it or not,\u201d recommends Albert Hernandez, who founded the popular 1 Player Guild (on BoardGameGeek.com) and hosts a podcast of the same name.\n  In general, Hernandez says, cooperative games\u2014where the players work as a team to win, rather than competing against each other\u2014are perfect for solo play. You can simply choose two or more characters and play them both.\n  With so many new game releases each year, figuring out where to get started can be overwhelming. Waite and McKie recommend checking out  Top 10 lists like the ones they discuss on their podcast, and paying attention to how long a game takes to play.\n \u201cFor a lot of people, that\u2019s going to be a very big deal,\u201d Waite says. \u201cYou can find solo games that take 10 minutes, and some that take six hours.\u201d\n  Choose a game that looks good, Waite recommends: \u201cAs shallow as it sounds, the quality of the artwork and the quality of the pieces [in the game] play a big role in how likely you are to pull if off your shelf when you\u2019ve got other things competing for your attention.\u201d\n  Hernandez says he also looks for a theme that speaks to him: \u201cDon\u2019t play a game just because you\u2019ve heard it\u2019s a really good solitary game, if you\u2019re not interested in the theme. Every time I try to play a game like that it ends up falling flat for me. Mechanically it may be very sound, but I\u2019m just bored out of my mind because I\u2019m just not interested.\u201d\n  If all you have at home is a deck of cards and some dice, Alanen recommends starting with  thematic solitaire card-playing games: \u201cThink of these as a step beyond solitaire, where there may be more strategy involved to win, as well as a theme to tie the game together and make it less abstract.\u201d\n Another free option Alanen enjoys is called print and play, or PnP games: \u201cThese are games developed by the gaming community that are provided for free to people to download and print at home.\u201d\n   The online board-game community is very friendly, says Hernandez, so don\u2019t be afraid to reach out to experienced solo players and ask questions. He recommends places like BoardGameGeek.com\u2014where the 1 Player Guild he started now has over 13,000 members\u2014or the  Solo Board Gamers Facebook group.\n \u201cI think the main thing is, if you\u2019re looking for a game and you\u2019re not sure where to start, you don\u2019t have to go it alone,\u201d he says. \u201cEven if you\u2019re playing solo.\u201d", "posttime": "2020-06-12 10:18:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6e38\u620f,\u68cb\u7c7b,pleasures", "title": "\u81ea\u5df1\u73a9\u68cb\u7c7b\u6e38\u620f\u7684\u529f\u5229\u4e50\u8da3", "title_en": "The Utilitarian Pleasures of Playing Board Games by Yourself", "transed": 1, "url": "https://www.atlasobscura.com/articles/utilitarian-pleasures-playing-board-games-by-yourself", "via": "", "real_tags": ["\u6e38\u620f", "\u68cb\u7c7b", "pleasures"]}, {"category": "", "categoryclass": "", "imagename": "139b74ead05f3327f4e19cdc593f1f8a.png", "infoid": 1006250, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u4f7f\u7528\u5bc6\u7801\u7ba1\u7406\u5668\u6765\u5b89\u5168\u5730\u5b58\u50a8\u6211\u4eec\u7684\u8bb8\u591a\u552f\u4e00\u5bc6\u7801\u3002\u5bc6\u7801\u7ba1\u7406\u5668\u7684\u5173\u952e\u90e8\u5206\u662f\u4e3b\u5bc6\u7801\u3002\u6b64\u5bc6\u7801\u4fdd\u62a4\u6240\u6709\u5176\u4ed6\u5bc6\u7801\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u662f\u6709\u98ce\u9669\u7684\u3002\u4efb\u4f55\u62e5\u6709\u5b83\u7684\u4eba\u90fd\u53ef\u4ee5\u5047\u626e\u6210\u4f60\u2026\u3002\u4efb\u4f55\u5730\u65b9\uff01\u5f88\u81ea\u7136\u5730\uff0c\u60a8\u4f1a\u8ba9\u60a8\u7684\u4e3b\u5bc6\u7801\u5f88\u96be\u88ab\u731c\u5230\uff0c\u8bb0\u4f4f\u5b83\uff0c\u7136\u540e\u505a\u60a8\u5e94\u8be5\u505a\u7684\u6240\u6709\u5176\u4ed6\u4e8b\u60c5\u3002\n\u4f46\u662f\u5982\u679c\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u800c\u4f60\u5374\u5fd8\u4e86\u5462\uff1f\u4e5f\u8bb8\u4f60\u53bb\u4e00\u4e2a\u53ef\u7231\u7684\uff0c\u6ca1\u6709\u79d1\u6280\u7684\u9065\u8fdc\u5c0f\u5c9b\u5ea6\u5047\u4e86\u4e00\u4e2a\u6708\u3002\u6bcf\u5929\u5728\u6c34\u91cc\u5b09\u620f\u548c\u5403\u83e0\u841d\u4e4b\u540e\uff0c\u4f60\u5c31\u4e0d\u592a\u8bb0\u5f97\u4f60\u7684\u5bc6\u7801\u4e86\u3002\u4e5f\u8bb8\u662f\u56e0\u4e3a\u957f\u817f\u8dd1\u5f97\u5feb\u5427\uff1f\u8fd8\u662f\u50cf\u950b\u5229\u7684\u52fa\u5b50\u5403\u5f97\u5feb\uff1f\u5f53\u4f60\u60f3\u5230\u5b83\u7684\u65f6\u5019\uff0c\u5b83\u7edd\u5bf9\u662f\u806a\u660e\u7684\u3002\n\u5f53\u7136\uff0c\u4f60\u4ece\u6765\u6ca1\u6709\u544a\u8bc9\u8fc7\u4efb\u4f55\u4eba\u4f60\u7684\u5bc6\u7801\u3002\u4e3a\u4ec0\u4e48\uff0c\u8fd9\u786e\u5b9e\u662f\u5bc6\u7801\u7ba1\u7406\u7684\u7b2c\u4e00\u6761\u89c4\u5219\u3002\u4f60\u8fd8\u80fd\u505a\u4e9b\u4ec0\u4e48\u4e0d\u540c\u7684\u4e8b\u5417\uff1f\n\u8fdb\u5165Shamir&#39\uff1b\u7684\u79d8\u5bc6\u5171\u4eab\uff0c\u8fd9\u662f\u4e00\u79cd\u7b97\u6cd5\uff0c\u5141\u8bb8\u7528\u6237\u5c06\u79d8\u5bc6\u5206\u6210\u53ea\u80fd\u4e0e\u5176\u4ed6\u90e8\u5206\u7ed3\u5408\u4f7f\u7528\u7684\u90e8\u5206\u3002\n\u8ba9\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u53e4\u4ee3\u548c\u73b0\u4ee3\u7684\u6545\u4e8b\u6765\u770b\u770b\u6c99\u7c73\u5c14\u5728\u884c\u52a8\u4e2d\u7684\u79d8\u5bc6\u5206\u4eab\u3002\n\u8fd9\u4e2a\u6545\u4e8b\u786e\u5b9e\u5047\u8bbe\u4e86\u4e00\u4e9b\u5bc6\u7801\u5b66\u77e5\u8bc6\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u8fd9\u7bc7\u5173\u4e8e\u5bc6\u7801\u5b66\u548c\u516c\u94a5\u57fa\u7840\u8bbe\u65bd\u7684\u4ecb\u7ecd\u6765\u6e29\u4e60\u4e00\u4e0b\u3002\n\u5728\u4e00\u4e2a\u53e4\u8001\u7684\u738b\u56fd\u91cc\uff0c\u56fd\u738b\u6709\u4e00\u4e2a\u79d8\u5bc6\u3002\u4e00\u4e2a\u53ef\u6015\u7684\u79d8\u5bc6\uff1a\ndef int_from_bytes(S)\uff1as\uff1as\u4e2d\u7684b\u7684\u8fd4\u56de\u5bc6\u7801=0\uff1b*acc=acc*256\uff1b*acc+=b\u8fd4\u56de\u8bbf\u95ee\u5bc6\u7801=int_from_bytes(&#34\uff1b\u53ef\u6015\u7684\u79d8\u5bc6&#34\uff1b\u3002\u7f16\u7801(&#34\uff1butf-8&#34\uff1b)\n\u592a\u53ef\u6015\u4e86\uff0c\u56fd\u738b\u4e0d\u80fd\u628a\u5b83\u6258\u4ed8\u7ed9\u4ed6\u7684\u5b50\u5b59\u3002\u4ed6\u6709\u4e94\u4e2a\u4eba\uff0c\u4f46\u4ed6\u77e5\u9053\u524d\u9762\u7684\u8def\u4f1a\u6709\u5371\u9669\u3002\u56fd\u738b\u77e5\u9053\u4ed6\u7684\u5b69\u5b50\u4eec\u5728\u4ed6\u6b7b\u540e\u9700\u8981\u8fd9\u4e2a\u79d8\u5bc6\u6765\u4fdd\u62a4\u738b\u56fd\uff0c\u4f46\u4ed6\u65e0\u6cd5\u5fcd\u53d7\u5728\u4ed6\u4eec\u8fd8\u5728\u54c0\u60bc\u4ed6\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u79d8\u5bc6\u88ab\u77e5\u9053\u4e8620\u5e74\u3002\n\u6240\u4ee5\u4ed6\u7528\u5f3a\u5927\u7684\u9b54\u6cd5\u628a\u79d8\u5bc6\u5206\u6210\u4e86\u4e94\u5757\u788e\u7247\u3002\u4ed6\u77e5\u9053\u53ef\u80fd\u6709\u4e00\u4e2a\u751a\u81f3\u4e24\u4e2a\u5b69\u5b50\u4e0d\u4f1a\u5c0a\u91cd\u4ed6\u7684\u610f\u613f\uff0c\u4f46\u4ed6\u4e0d\u76f8\u4fe1\u5176\u4e2d\u4e09\u4e2a\u4f1a\uff1a\n\u56fd\u738b\u7cbe\u901a\u6709\u9650\u57df\u548c\u968f\u673a\u6027\u7684\u9b54\u672f\u3002\u4f5c\u4e3a\u4e00\u4e2a\u660e\u667a\u7684\u56fd\u738b\uff0c\u4ed6\u4f7f\u7528\u5de8\u87d2\u6765\u62c6\u5206\u79d8\u5bc6\u3002\n\u4ed6\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u9009\u62e9\u4e86\u4e00\u4e2a\u5927\u8d28\u6570-\u7b2c13\u4e2a\u6885\u68ee\u8d28\u6570(2**521-1)-\u5e76\u4e0b\u4ee4\u5728\u5bab\u6bbf\u4e0a\u65b9\u752810\u82f1\u5c3a\u9ad8\u7684\u9ec4\u91d1\u953b\u9020\u7684\u5b57\u6bcd\u4e66\u5199\uff1a\n\u56fd\u738b\u77e5\u9053\uff0c\u5982\u679cP\u662f\u7d20\u6570\uff0c\u4ee5P\u4e3a\u6a21\u7684\u6570\u5b57\u5c31\u5f62\u6210\u4e86\u4e00\u4e2a\u6570\u5b66\u57df\uff1a\u53ea\u8981\u9664\u6570\u4e0d\u662f\u96f6\uff0c\u5b83\u4eec\u5c31\u53ef\u4ee5\u88ab\u52a0\u3001\u4e58\u3001\u51cf\u3001\u9664\u3002\n\u4e3a\u4e86\u8ba9\u4e09\u4e2a\u540e\u4ee3\u91cd\u5efa\u8fd9\u4e2a\u79d8\u5bc6\uff0c\u56fd\u738b\u4e0d\u5f97\u4e0d\u518d\u4ea7\u751f\u4e24\u4e2a\u90e8\u5206\u6765\u6df7\u5408\u5728\u4e00\u8d77\uff1a\n\u56fd\u738b\u63a5\u4e0b\u6765\u9700\u8981\u5728\u4efb\u610f\u70b9\u8ba1\u7b97\u8fd9\u4e2a\u591a\u9879\u5f0f\u3002\u6c42\u4e00\u4e2a\u591a\u9879\u5f0f\u662f\u8ba1\u7b97\u591a\u9879\u5f0f[0]+\u591a\u9879\u5f0f[1]*x+\u591a\u9879\u5f0f[2]*x**2.\u3002\n\u867d\u7136\u6709\u8ba1\u7b97\u591a\u9879\u5f0f\u7684\u7b2c\u4e09\u65b9\u6a21\u5757\uff0c\u4f46\u5b83\u4eec\u4e0d\u9002\u7528\u4e8e\u6709\u9650\u57df\u3002\u56fd\u738b\u9700\u8981\u81ea\u5df1\u5199\u8bc4\u4f30\u4ee3\u7801\uff1a\ndef EVALUATE(\u7cfb\u6570\uff0cx)\uff1a\u7cfb\u6570\u4e2d\u7684c\u7684def Evaluate(\u7cfb\u6570\uff0cx)=0\uff0cx\uff0cpower=1\uff0cc*power\uff0c*power\uff0c*\uff0c*power\uff0c*=x\uff0cx\uff0cReturn Acc\u3002\n\u63a5\u4e0b\u6765\uff0c\u56fd\u738b\u5728\u4e94\u4e2a\u4e0d\u540c\u7684\u70b9\u8ba1\u7b97\u591a\u9879\u5f0f\uff0c\u7ed9\u6bcf\u4e2a\u540e\u4ee3\u4e00\u5757\uff1a\n\u5bf9\u4e8e\u8303\u56f4(5)\u5185\u7684i\uff0c\u788e\u7247={}\uff1a\u788e\u7247[i]=(x\uff0cy)=Mod(int_from_bytes(urandom(16)\uff0cP)\uff1b\uff1by=Evaluate(\u591a\u9879\u5f0f\uff0cx)\uff1b\u788e\u7247[i]=(x\uff0cy))\u3002\n\u53ef\u60b2\u7684\u662f\uff0c\u6b63\u5982\u56fd\u738b\u6240\u62c5\u5fc3\u7684\u90a3\u6837\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u5b50\u5b59\u90fd\u662f\u8bda\u5b9e\u7684\u3002\u5176\u4e2d\u4e24\u4e2a\u4eba\uff0c\u5728\u4ed6\u6b7b\u540e\u4e0d\u4e45\uff0c\u8bd5\u56fe\u4ece\u4ed6\u4eec\u62e5\u6709\u7684\u96f6\u4ef6\u4e2d\u627e\u51fa\u53ef\u6015\u7684\u79d8\u5bc6\u3002\u4ed6\u4eec\u5c3d\u4e86\u6700\u5927\u52aa\u529b\uff0c\u4f46\u6ca1\u6709\u6210\u529f\u3002\u7136\u800c\uff0c\u5176\u4f59\u7684\u4eba\u77e5\u9053\u4e86\uff0c\u5c31\u628a\u4ed6\u4eec\u4ece\u738b\u56fd\u6c38\u8fdc\u653e\u9010\u51fa\u53bb\u3002\n20\u5e74\u540e\uff0c\u6309\u7167\u56fd\u738b\u7684\u547d\u4ee4\uff0c\u6700\u5e74\u957f\u7684\u5144\u5f1f\u59d0\u59b9\u548c\u6700\u5c0f\u7684\u4e24\u4e2a\u8d70\u5230\u4e86\u4e00\u8d77\uff0c\u60f3\u5f04\u6e05\u695a\u4ed6\u4eec\u7236\u4eb2\u7684\u53ef\u6015\u79d8\u5bc6\u3002\u4ed6\u4eec\u628a\u788e\u7247\u62fc\u5728\u4e00\u8d77\uff1a\n\u4ed6\u4eec\u82b1\u4e8640\u592940\u591c\u52aa\u529b\u5bfb\u627e\u56fd\u738b\u7684\u79d8\u5bc6\u3002\u6446\u5728\u4ed6\u4eec\u9762\u524d\u7684\u4efb\u52a1\u5e76\u975e\u6613\u4e8b\u3002\u548c\u56fd\u738b\u4e00\u6837\uff0c\u4ed6\u4eec\u4e5f\u77e5\u9053\u87d2\u86c7\uff0c\u4f46\u662f\u6ca1\u6709\u4eba\u6bd4\u4ed6\u66f4\u806a\u660e\u3002\n\u68c0\u7d22\u4ee3\u7801\u57fa\u4e8e\u4e00\u4e2a\u79f0\u4e3a\u62c9\u683c\u6717\u65e5\u63d2\u503c\u7684\u6982\u5ff5\u3002\u5b83\u6839\u636e\u591a\u9879\u5f0f\u5728\u5176\u4ed6n\u4e2a\u4f4d\u7f6e\u7684\u503c\u6765\u8ba1\u7b970\u5904\u7684\u591a\u9879\u5f0f\uff0c\u5176\u4e2dn\u662f\u591a\u9879\u5f0f\u7684\u6b21\u6570\u3002\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u662f\uff0c\u4f60\u53ef\u4ee5\u663e\u5f0f\u5730\u627e\u5230\u4e00\u4e2a\u516c\u5f0f\uff0c\u5bf9\u4e8ei\u4e0d\u540c\u4e8e0\u7684\u591a\u9879\u5f0f\uff0c\u5728t[0]\u5904\u4e3a1\uff0c\u5728t[i]\u5904\u4e3a0\u3002\u7531\u4e8e\u8ba1\u7b97\u591a\u9879\u5f0f\u662f\u7ebf\u6027\u51fd\u6570\uff0c\u56e0\u6b64\u9700\u8981\u8ba1\u7b97\u6bcf\u4e2a\u591a\u9879\u5f0f\uff0c\u5e76\u4f7f\u7528\u591a\u9879\u5f0f\u5177\u6709\u7684\u503c\u5bf9\u8ba1\u7b97\u7ed3\u679c\u8fdb\u884c\u63d2\u503c\uff1a\nFROM Functools IMPORT RECLUTE FROM OPERATOR IMPORT mul def RETRIEVE_Original(Secret)\uff1ax_s=[s[0]for s in Secret]For acc=Mod(0\uff0cP)For i in Range(len(Secrets))\uff1aList_Other=List(X_S)*List_cur=Other\u3002POP(I)**\u56e0\u5b50=Mod(1\uff0cP)*(el-cur)\uff1a*(el-cur)**=el*(el-cur)\uff1a*(el-cur)*=el*(el-cur)\u3002INVERSE()\u8fd4\u56de\u8bbf\u95ee\u6743\u9650+=factor*\u5bc6\u7801[i][1]\u8fd4\u56de\u8bbf\u95ee\u6743\u9650\n\u6beb\u4e0d\u5947\u602a\uff0c\u8fd9\u82b1\u4e86\u4ed6\u4eec40\u592940\u591c--\u8fd9\u4e2a\u4ee3\u7801\u76f8\u5f53\u590d\u6742\uff01\u4f46\u4ed6\u4eec\u5728\u5e78\u5b58\u7684\u788e\u7247\u4e0a\u8fd0\u884c\uff0c\u5c4f\u606f\u7b49\u5f85\uff1a\n\u6570\u5b66\u9b54\u529b\u7684\u7f8e\u5999\u4e4b\u5904\u5728\u4e8e\u5b83\u6bcf\u6b21\u90fd\u80fd\u53ef\u9760\u5730\u53d1\u6325\u4f5c\u7528\uff01\u5b69\u5b50\u4eec\u73b0\u5728\u957f\u5927\u4e86\uff0c\u80fd\u591f\u7406\u89e3\u4ed6\u4eec\u7236\u4eb2\u7684\u9009\u62e9\uff0c\u4ed6\u4eec\u7528\u8fd9\u4e2a\u53ef\u6015\u7684\u79d8\u5bc6\u6765\u4fdd\u536b\u738b\u56fd\u3002\u8fd9\u4e2a\u738b\u56fd\u7e41\u8363\u660c\u76db\uff0c\u53d1\u5c55\u58ee\u5927\u3002\n\u5728\u73b0\u4ee3\uff0c\u6211\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u8fd8\u80cc\u8d1f\u7740\u4e00\u4e2a\u53ef\u6015\u7684\u79d8\u5bc6\uff1a\u5bc6\u7801\u7ba1\u7406\u5668\u7684\u4e3b\u5bc6\u7801\u3002\u867d\u7136\u5f88\u5c11\u4eba\u6709\u4e00\u4e2a\u4eba\u53ef\u4ee5\u5b8c\u5168\u4fe1\u4efb\u4e00\u4e2a\u4eba\uff0c\u544a\u8bc9\u4ed6\u4eec\u6700\u6df1\u3001\u6700\u9ed1\u6697\u7684\u79d8\u5bc6\uff0c\u4f46\u8bb8\u591a\u4eba\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u4e94\u4eba\u5c0f\u7ec4\uff0c\u5176\u4e2d\u4e09\u4e2a\u4eba\u4e0d\u592a\u53ef\u80fd\u4e00\u8d77\u7834\u574f\u4ed6\u4eec\u7684\u4fe1\u4efb\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u5728\u73b0\u5728\u8fd9\u4e2a\u65f6\u4ee3\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u50cf\u56fd\u738b\u90a3\u6837\u81ea\u5df1\u62c6\u6563\u6211\u4eec\u7684\u79d8\u5bc6\u3002\u901a\u8fc7\u73b0\u4ee3\u5f00\u6e90\u6280\u672f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u73b0\u6709\u7684\u8f6f\u4ef6\u3002\n\u5047\u8bbe\u4f60\u6709\u4e94\u4e2a\u4f60\u4fe1\u4efb\u7684\u4eba--\u4e0d\u662f\u7edd\u5bf9\u4fe1\u4efb\uff0c\u800c\u662f\u76f8\u5f53\u4fe1\u4efb\uff1a\u4f60\u6700\u597d\u7684\u670b\u53cb\u3001\u4f60\u7684\u914d\u5076\u3001\u4f60\u7684\u6bcd\u4eb2\u3001\u4e00\u4f4d\u4eb2\u5bc6\u7684\u540c\u4e8b\u548c\u4f60\u7684\u5f8b\u5e08\u3002\n$ECHO&#39\uff1b\u957f\u817f\u8fd0\u884c\u901f\u5ea6\u5f88\u5feb|SSSS-Split-t3-n5\u4f7f\u7528\u5177\u6709\u52a8\u6001\u5b89\u5168\u7ea7\u522b\u7684(3\uff0c5)\u65b9\u6848\u751f\u6210\u5171\u4eab\u3002\u8f93\u5165\u5bc6\u7801\uff0c\u6700\u591a128\u4e2aASCII\u5b57\u7b26\uff1a\u4f7f\u7528168\u4f4d\u5b89\u5168\u7ea7\u522b\u30021-797842b76d80771f04972feb31c66f3927e7183609 2-947925f2fbc23dc9bca950ef613da7a4e42dc1c296 3-14647bdfc4e6596e0dbb0aa6ab839b195c9d15906d 4-97c77a805cd3d3a30bff78d\u3002\n\u554a\uff0c\u4e00\u4e2a\u5f3a\u6709\u529b\u7684\u3001\u5f3a\u6709\u529b\u7684\u3001\u4e07\u80fd\u7684\u5bc6\u7801\uff1a\u957f\u817f\u8d70\u5f97\u5feb\u3002\u5b83\u6c38\u8fdc\u4e0d\u80fd\u6258\u4ed8\u7ed9\u4efb\u4f55\u4e00\u4e2a\u7075\u9b42\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u628a\u8fd9\u4e94\u4e2a\u788e\u7247\u9001\u7ed9\u4f60\u7684\u4e94\u4e2a\u5b88\u62a4\u8005\u3002\n\u73b0\u5728\uff0c\u5047\u8bbe\u4f60\u8981\u548c\u5bb6\u4eba\u4e00\u8d77\u53bb\u5ea6\u5047\u3002\u4e00\u4e2a\u6708\u6765\uff0c\u4f60\u5728\u6e29\u6696\u7684\u6c99\u6ee9\u4e0a\u5b09\u620f\u3002\u5f53\u4f60\u5b09\u620f\u7684\u65f6\u5019\uff0c\u4f60\u4e00\u4e2a\u7535\u5b50\u8bbe\u5907\u90fd\u4e0d\u80fd\u78b0\u3002\u5f88\u5feb\uff0c\u60a8\u5f3a\u5927\u7684\u4e3b\u5bc6\u7801\u5c31\u4f1a\u88ab\u9057\u5fd8\u3002\n\u4f60\u4eb2\u7231\u7684\u914d\u5076\u548c\u4eb2\u7231\u7684\u6bcd\u4eb2\u548c\u4f60\u4e00\u8d77\u5ea6\u5047\u3002\u4ed6\u4eec\u5c06\u788e\u7247\u4fdd\u5b58\u5728\u5bc6\u7801\u7ba1\u7406\u5668\u4e2d\uff0c\u5e76\u4e14\u5fd8\u8bb0\u4e86\u5bc6\u7801\u3002\n\u4f60\u8054\u7cfb\u4f60\u6700\u597d\u7684\u670b\u53cbF\uff0c\u5979\u4f1a\u7ed9\u4f601-797842b76d80771f04972feb31c66f3927e7183609\u3002\u4ee3\u73ed\u7684\u540c\u4e8b\u5f88\u9ad8\u5174\u4f60\u56de\u6765\uff0c\u7ed9\u4f604-97c77a805cd3d3a30bff7841f3158ea841cd41a611\u3002\u4f60\u7684\u5f8b\u5e08\u6536\u53d6\u4f60\u6bcf\u5c0f\u65f6150\u7f8e\u5143\u7684\u8d39\u7528\uff0c\u8fdb\u5165\u4ed6\u4eec\u7684\u5bc6\u7801\u7ba1\u7406\u5668\uff0c\u7136\u540e\u6316\u51fa5-17da24ad63f7b704baed220839abb215f97d95f4f8\u3002\n$SSSS-Combine-t 3\u8f93\u5165\u4ee5\u6362\u884c\u7b26\u5206\u9694\u76843\u4e2a\u4efd\u989d\uff1ashare[1/3]\uff1a1-797842b76d80771f04972feb31c66f3927e7183609 share[2/3]\uff1a4-97c77a805cd3d3a30bff7841f3158ea841cd41a611 share[3/3]\uff1a5-17da24ad63f7b704ba.\u3002\n\u56e0\u6b64\uff0c\u6709\u4e86\u5f00\u6e90\u6280\u672f\uff0c\u60a8\u4e5f\u53ef\u4ee5\u50cf\u56fd\u738b\u4e00\u6837\u751f\u6d3b\uff01\n\u5bc6\u7801\u7ba1\u7406\u662f\u5f53\u4eca\u5728\u7ebf\u751f\u6d3b\u4e2d\u7684\u4e00\u9879\u57fa\u672c\u6280\u80fd\u3002\u5f53\u7136\uff0c\u521b\u5efa\u4e00\u4e2a\u590d\u6742\u7684\u5bc6\u7801\uff0c\u4f46\u4e0d\u8981\u6b62\u6b65\u4e8e\u6b64\u3002\u4f7f\u7528\u65b9\u4fbf\u7684Shamir\u79d8\u5bc6\u5171\u4eab\u7b97\u6cd5\u4e0e\u4ed6\u4eba\u5b89\u5168\u5171\u4eab\u3002", "note_en": "Many of us use password managers to securely store our many unique passwords. A critical part of a password manager is the master password. This password protects all others, and in that way, it is a risk. Anyone who has it can pretend to be you\u2026 anywhere! Naturally, you keep your master password hard to guess, commit it to memory, and do all the other things you are  supposed to do.\n But what if something happens and you forget it? Maybe you took a vacation to a lovely, far-away island with no technology for a month. After frolicking in the water daily and eating pineapples, you cannot quite remember your password. Maybe it was &#34;long legs travel fast&#34;? Or was it something like &#34;sharp spoons eat quick&#34;? It was definitely clever when you thought of it.\n   Of course, you never told a single soul your password. Why, this is literally the first rule of password management. What could you have done differently?\n Enter  Shamir&#39;s Secret Sharing , an algorithm that allows users to divide a secret into parts that can be used only in combination with the other pieces.\n Let&#39;s take a look at Shamir&#39;s Secret Sharing in action through a story of ancient times and modern times.\n This story does assume some knowledge of cryptography. You can brush up on it with this  introduction to cryptography and public key infrastructure.\n  In an ancient kingdom, it came to pass that the king had a secret. A terrible secret:\n def int_from_bytes (s ): \u00a0 \u00a0 acc  =  0 \u00a0 \u00a0  for b  in s: \u00a0 \u00a0 \u00a0 \u00a0 acc  = acc *  256 \u00a0 \u00a0 \u00a0 \u00a0 acc + = b \u00a0 \u00a0  return acc  secret  = int_from_bytes ( &#34;terrible secret&#34;. encode ( &#34;utf-8&#34; ) )\n So terrible, the king could entrust it to none of his offspring. He had five of them but knew that there would be dangers on the road ahead. The king knew his children would need the secret to protect the kingdom after his death, but he could not bear the thought of the secret being known for two decades,\u00a0while they were still mourning him.\n So he used powerful magic to split the secret into five shards. He knew that it was possible that one child or even two would not respect his wishes, but he did not believe three of them would:\n  The king was well-versed in the magical arts of  finite fields and  randomness. As a wise king, he used Python to split the secret.\n The first thing he did was choose a large prime\u2014the 13th  Mersenne Prime\u00a0( 2**521 - 1)\u2014and ordered it be written in letters 10 feet high, wrought of gold, above the palace:\n   The king knew that if  P is a prime, numbers modulo  P form a mathematical  field: they can be added, multiplied, subtracted, and divided as long as the divisor is not zero.\n       In order to allow three offspring to reconstruct the secret, the king had to generate two more parts to mix together:\n   The king next needed to evaluate this  polynomial at random points. Evaluating a polynomial is calculating  polynomial[0] + polynomial[1]*x + polynomial[2]*x**2 ...\n While there are third-party modules to evaluate polynomials, they do not work with finite fields. The king needed to write the evaluation code himself:\n def evaluate (coefficients , x ): \u00a0 \u00a0 acc  =  0 \u00a0 \u00a0 power  =  1 \u00a0 \u00a0  for c  in coefficients: \u00a0 \u00a0 \u00a0 \u00a0 acc + = c * power \u00a0 \u00a0 \u00a0 \u00a0 power * = x \u00a0 \u00a0  return acc\n Next, the king evaluated the polynomial at five different points, to give one piece to each offspring:\n shards  =  { }  for i  in  range ( 5 ): \u00a0 \u00a0 x  = Mod (int_from_bytes (urandom ( 16 ) ) , P ) \u00a0 \u00a0 y  = evaluate (polynomial , x ) \u00a0 \u00a0 shards [i ]  =  (x , y )\n Sadly, as the king feared, not all his offspring were honest and true. Two of them, shortly after his death, tried to figure out the terrible secret from the parts they had. Try as they could, they did not succeed. However, when the others learned this, they exiled them from the kingdom forever:\n  Twenty years later, as the king had decreed, the oldest sibling and the two youngest came together to figure out their father&#39;s terrible secret. They put together their shards:\n  For 40 days and 40 nights, they struggled with finding the king&#39;s secret. No easy task was it before them. Like the king, they knew Python, but none were as wise as he.\n  The retrieval code is based on a concept called  lagrange interpolation. It evaluates a polynomial at  0 based on its values in  n other places, where  n is the degree of the polynomial. The way it works is that you can explicitly find a formula for a polynomial that is  1 at  t[0] and  0 at  t[i] for  i different from  0. Since evaluating a polynomial is a linear function, you evaluate each of  these polynomials and interpolate the results of the evaluations with the values the polynomial has:\n from functools  import  reduce  from  operator  import mul   def retrieve_original (secrets ): \u00a0 \u00a0 x_s  =  [s [ 0 ]  for s  in secrets ] \u00a0 \u00a0 acc  = Mod ( 0 , P ) \u00a0 \u00a0  for i  in  range ( len (secrets ) ): \u00a0 \u00a0 \u00a0 \u00a0 others  =  list (x_s ) \u00a0 \u00a0 \u00a0 \u00a0 cur  = others. pop (i ) \u00a0 \u00a0 \u00a0 \u00a0 factor  = Mod ( 1 , P ) \u00a0 \u00a0 \u00a0 \u00a0  for el  in others: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 factor * = el *  (el - cur ). inverse ( ) \u00a0 \u00a0 \u00a0 \u00a0 acc + = factor * secrets [i ] [ 1 ] \u00a0 \u00a0  return acc\n It is no surprise this took them 40 days and 40 nights\u2014this code is pretty complicated! But they ran it on the surviving shards, waiting with bated breath:\n     The beauty of math&#39;s magic is that it works reliably every time! The children, now older and able to understand their father&#39;s choices,\u00a0used the terrible secret to defend the kingdom. The kingdom prospered and grew.\n  In modern times, many of us are also burdened with a terrible secret: the master password to our password manager. While few people have one person they can trust completely with their deepest, darkest secrets, many can find a group of five where it is unlikely three will break their trust together.\n Luckily, in these modern times, we do not need to split our secrets ourselves, as the king did. Through the modern technology of  open source, we can use software that exists.\n Let&#39;s say you have five people you trust\u2014not absolutely, but quite a bit: Your best friend, your spouse, your mom, a close colleague, and your lawyer.\n  $  echo  &#39;long legs travel fast&#39;  | ssss-split  -t  3  -n  5 Generating shares using a  ( 3, 5 ) scheme with dynamic security level. Enter the secret, at most  128 ASCII characters: Using a  168 bit security level.  1-797842b76d80771f04972feb31c66f3927e7183609  2-947925f2fbc23dc9bca950ef613da7a4e42dc1c296  3-14647bdfc4e6596e0dbb0aa6ab839b195c9d15906d  4-97c77a805cd3d3a30bff7841f3158ea841cd41a611  5-17da24ad63f7b704baed220839abb215f97d95f4f8\n Ah, a strong, powerful, master password:  long legs travel fast. Never can it be entrusted to a single soul, but you can send the five shards to your five guardians.\n  Now, say you go on a family vacation. For a month, you frolic on the warm sands of the beach. While\u00a0you frolic, you touch not one electronic device. Soon enough, your powerful master password is forgotten.\n Your loving spouse and your dear mother were with you on vacation. They kept their shards safe in their password manager\u2014and they have forgotten  their passwords.\n  You contact your best friend, F, who gives you  1-797842b76d80771f04972feb31c66f3927e7183609. Your colleague, who covered all your shifts, is glad to have you back and gives you  4-97c77a805cd3d3a30bff7841f3158ea841cd41a611. Your lawyer charges you $150 per hour, goes into their password manager, and digs up  5-17da24ad63f7b704baed220839abb215f97d95f4f8.\n  $ ssss-combine  -t  3 Enter  3 shares separated by newlines: Share  [ 1 / 3 ]:  1-797842b76d80771f04972feb31c66f3927e7183609 Share  [ 2 / 3 ]:  4-97c77a805cd3d3a30bff7841f3158ea841cd41a611 Share  [ 3 / 3 ]:  5-17da24ad63f7b704baed220839abb215f97d95f4f8  Resulting secret: long legs travel fast\n And so, with the technology of  open source, you too can live like a king!\n  Password management is an essential skill for today&#39;s online life. Create a complex password, of course, but don&#39;t stop there. Use the handy Shamir&#39;s Secret Sharing algorithm to safely share it with others.", "posttime": "2020-06-12 10:16:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5bc6\u7801,\u7b97\u6cd5,python,password,\u56fd\u738b", "title": "\u4f7f\u7528\u6b64Python\u52a0\u5bc6\u7b97\u6cd5\u6c38\u8fdc\u4e0d\u4f1a\u5fd8\u8bb0\u60a8\u7684\u5bc6\u7801", "title_en": "Never forget your password with this Python encryption algorithm", "transed": 1, "url": "https://opensource.com/article/20/6/python-passwords", "via": "", "real_tags": ["\u5bc6\u7801", "\u7b97\u6cd5", "python", "password", "\u56fd\u738b"]}]