[{"category": "", "categoryclass": "", "imagename": "cc246a971d376e6effd568f7db33a617.jpg", "infoid": 1000413, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "10\u5206\u949f\u9605\u8bfb\u6211\u59bb\u5b50\u662f\u52a8\u7269\u7a7f\u8d8a\u7684\u94c1\u6746\u7c89\u4e1d\u3002\u6211\u627f\u8ba4\u6211\u5927\u90e8\u5206\u4e0d\u7406\u89e3\u8fd9\u4e2a\u6e38\u620f\uff0c\u4f46\u662f\u6211\u89c9\u5f97\u5b83\u5f88\u53ef\u7231\u3002\u51e0\u5929\u524d\uff0c\u5f53\u52aa\u514b\u94f6\u884c\u51b3\u5b9a\u5c06\u5229\u7387\u964d\u81f30.05%\u65f6\uff0c\u5979\u975e\u5e38\u6cae\u4e27\uff0c\u5f53\u65f6\u5979\u95ee\u9053\uff1a\u201c\u6211\u73b0\u5728\u600e\u4e48\u8d5a\u94b1\u5462\uff01\u201d\n\u8fd9\u4e2a\u6e38\u620f\u4f3c\u4e4e\u6709\u67d0\u79cd\u841d\u535c\u5e02\u573a\u3002\u57fa\u672c\u4e0a\uff0c\u4f60\u53ef\u4ee5\u5728\u5468\u65e5\u4ee5\u7ed9\u5b9a\u7684\u4ef7\u683c\u8d2d\u4e70\u841d\u535c\uff0c\u7136\u540e\u4f60\u5c31\u6709\u673a\u4f1a\u5728\u63a5\u4e0b\u6765\u7684\u4e00\u5468\u5356\u51fa\u4f60\u7684\u841d\u535c\u3002\u5982\u679c\u4f60\u4e0d\u5728\u4e0b\u5468\u65e5\u4e4b\u524d\u5356\u51fa\u53bb\uff0c\u4f60\u5c31\u4f1a\u5931\u53bb\u5b83\u4eec(\u4ece\u800c\u4f7f\u4f60\u7684\u635f\u5931\u5177\u4f53\u5316)\u3002\u4f60\u6bcf\u5929\u6709\u4e24\u79cd\u5c4f\u5e55\u4ef7\u683c\uff0c\u4e00\u79cd\u5728\u4e0a\u5348\uff0c\u53e6\u4e00\u79cd\u5728\u4e0b\u5348\u3002\u90a3\u4e48\uff0c\u4ece\u5468\u4e00\u5230\u5468\u516d\uff0c\u4f60\u4f1a\u5f97\u523012\u79cd\u4ef7\u683c\u3002\n\u7b2c\u4e00\u4e2a\u95ee\u9898\u662f\uff1a\u841d\u535c\u4ef7\u683c\u662f\u5b8c\u5168\u968f\u673a\u7684\u5417\uff1f\u4e00\u5bf9\u8c37\u6b4c\u641c\u7d22\u663e\u793a\uff0c\u5b83\u4eec\u9075\u5faa\u56db\u79cd\u6a21\u5f0f\uff1a\n\u597d\u7684\uff0c\u6240\u4ee5\u770b\u8d77\u6765\u8fd9\u5e76\u4e0d\u5b8c\u5168\u662f\u968f\u673a\u7684\u3002\u90a3\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u60f3\u51fa\u4e00\u4e2a\u841d\u535c\u4ef7\u683c\u7684\u6a21\u578b(\u6982\u7387)\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5fcd\u8005\u5df2\u7ecf\u67e5\u770b\u4e86\u6e90\u4ee3\u7801\uff0c\u5e76\u5f04\u6e05\u695a\u4e86\u56fe\u6848\u662f\u5982\u4f55\u5206\u914d\u7684\uff0c\u4ef7\u683c\u662f\u5982\u4f55\u4e0a\u6da8\u7684\u3002\u6b64\u5916\uff0cTurnipProphet\u5df2\u7ecf\u91c7\u7528\u4e86\u8fd9\u4e00\u70b9\uff0c\u5e76\u5efa\u7acb\u4e86\u4e00\u4e2a\u7a0b\u5e8f\u6765\u83b7\u5f97\u6210\u4ea4\u4ef7\u7684\u6982\u7387\u5206\u5e03\u3002\n\u6bcf\u4e2a\u841d\u535c\u6295\u8d44\u8005(\u6295\u673a\u8005)\u90fd\u5fc5\u987b\u505a\u51fa12\u4e2a\u51b3\u5b9a\uff1a\u5728\u6bcf\u4e2a\u5c4f\u5e55\u4ef7\u683c\u4e0b\u5356\u591a\u5c11\u841d\u535c\u3002\u663e\u7136\uff0c\u6bcf\u4e2a\u8f6c\u6295\u6295\u8d44\u8005(\u6295\u673a\u8005)\u90fd\u6709\u4e0d\u540c\u7684\u98ce\u9669\u504f\u597d\uff1a\u6211\u53ef\u80fd\u613f\u610f\u6301\u6709\u841d\u535c\u66f4\u957f\u65f6\u95f4\uff0c\u5bfb\u627e\u66f4\u9ad8\u7684\u56de\u62a5\uff0c\u4f46\u6839\u636e\u6211\u4eec\u7684\u6982\u7387\u5206\u5e03\uff0c\u8fd9\u53ef\u80fd\u662f\u4e0d\u592a\u53ef\u80fd\u7684\uff0c\u6216\u8005\u53ef\u80fd\u6211\u4e0d\u592a\u559c\u6b22\u5192\u9669\uff0c\u4e00\u65e6\u60c5\u51b5\u53d8\u5f97\u8270\u96be\uff0c\u6211\u5c31\u4f1a\u5bf9\u51b2\u6211\u7684\u8d4c\u6ce8\u3002\u4e00\u5207\u90fd\u5f88\u597d\u3002\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u4e00\u5207\u90fd\u662f\u6211\u4eec\u73b0\u5728\u6240\u77e5\u7684\u73b0\u4ee3Portfolio\u7406\u8bba\u7684\u4e00\u90e8\u5206\u3002Markowitz)\u3002\u4f60\u6709\u4e00\u4e9b\u98ce\u9669\u8d44\u4ea7\uff0c\u4f60\u6709\u98ce\u9669\u504f\u597d\uff0c\u4f60\u60f3\u505a\u4e00\u4e2a\u591a\u6837\u5316\u7684\u6295\u8d44\u7ec4\u5408\uff0c\u4f7f\u4f60\u7684\u6536\u76ca\u65b9\u5dee\u6700\u5c0f\u5316\uff0c\u5e76\u4f7f\u4f60\u7684\u9884\u671f\u6536\u76ca\u6700\u5927\u5316\u3002\u8fd9\u542c\u8d77\u6765\u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684\uff0c\u5c31\u8fd9\u4e48\u529e\u5427\u3002\n\u6211\u4eec\u5c06\u628a\u841d\u535c\u5efa\u6a21\u4e3a12\u79cd\u4e0d\u540c\u7684\u8d44\u4ea7\uff1a\u6211\u4eec\u5c06\u5728\u5468\u4e00\u4e0a\u5348\u51fa\u552e\u841d\u535c\uff0c\u6211\u4eec\u5c06\u5728\u5468\u4e00\u4e0b\u5348\u51fa\u552e\u841d\u535c\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u591a\u4e8f\u4e86\u524d\u4e00\u8282\u6240\u505a\u7684\u5de5\u4f5c\uff0c\u6211\u4eec\u77e5\u9053\u4e86\u6211\u4eec12\u9879\u8d44\u4ea7\u7684\u9884\u671f\u56de\u62a5\u7387\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u6211\u4eec\u4f1a\u6709\u4e00\u4e9b\u6536\u76ca\uff0c\u4e5f\u4f1a\u6709\u4e00\u4e9b\u4e8f\u635f\u3002\n\u8ba9\u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\u3002\u6211\u5728\u5468\u4e09\u4e0b\u5348\u964d\u4f4e\u4e86\u841d\u535c\u7684\u4ef7\u683c\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u6ca1\u6709\u5356\u51fa\u4efb\u4f55\u841d\u535c\u3002TurnipProphet\uff0c\u5f97\u5230\u4e86\u4ee5\u4e0b\u6982\u7387\u5206\u5e03\uff1a\n\u6211\u592a\u61d2\u4e86\uff0c\u4e0d\u80fd\u8ba9TurnipProphet\u7684\u4ee3\u7801\u8fd0\u884c\uff0c\u6240\u4ee5\u6211\u53ea\u662f\u590d\u5236\u3001\u7c98\u8d34\u5e76\u624b\u52a8\u5904\u7406\u5b83\uff1a\n\u4ece\u96c6\u5408\u5bfc\u5165defaultdict from functools\u5bfc\u5165\u90e8\u5206\u5bfc\u5165Numpy\u4f5c\u4e3aNP\u5bfc\u5165\u718a\u732b\u4f5c\u4e3aPD\u5bfc\u5165scipy.Optimize as scoMONDAY\uff0c\u5468\u4e8c\u3001\u5468\u4e09\u3001\u5468\u56db\u3001\u5468\u4e94\u3001\u5468\u516d=Range(6)AM\uff0cPM=&#34\uff1bAM&#34\uff1b\uff0c&#34\uff1bPM&#34\uff1bdef CONVERT_RANGE_WITH_PRICE(p\uff0cs)\uff1aa\uff0cb=s.Split(&#34\uff1bto&#34\uff1b\uff1bto&#34\uff1bto&#34\uff1b)a=a.strie()b=b.strie()\u8fd4\u56de\u5217\u8868(RANGE(INT(A)-p\uff0cINT(B)+1-p))TURNIP_PRICE=98CONVERT_RANGE=PARTIAL(CONVERT_RANGE_WITH_PRICE\uff0cTURNIP_PRICE)DATA=[(0.664\uff0c{(\u661f\u671f\u4e09\uff0cPM)\uff1a.\u3002\n\u6240\u4ee5\uff0c\u73b0\u5728\u6211\u4eec\u6709\u4e86\u4fdd\u5b58\u6bcf\u4e2a\u53ef\u80fd\u56de\u62a5\u7684\u6982\u7387\u7684\u6570\u636e\u53d8\u91cf(\u5373\uff0c\u6211\u4eec\u53ef\u80fd\u5f97\u5230\u7684\u4ef7\u683c\u51cf\u53bb\u6211\u4eec\u4e3a\u841d\u535c\u652f\u4ed8\u7684\u4ef7\u683c)\u3002\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8ba1\u7b97\u51fa\u6bcf\u9879\u8d44\u4ea7\u7684\u9884\u671f\uff1a\ndef expect_of(R1)\uff1a\u5bf9\u4e8ep\uff0cexp=0\uff0c\u6570\u636e\u4e2d\u7684\u9879\uff1an=\u6d6e\u52a8(len(\u9879[r1]))exp+=(p*sum(\u9879[r1]))/n\u8fd4\u56deexp\u3002\n\u6211\u53ea\u662f\u5047\u8bbe\uff0c\u5982\u679cTurnipProphet\u8bf4\u4ef7\u683c\u8303\u56f4\u572851\u523055\u4e4b\u95f4\uff0c5%\uff0c51\u67091%\u7684\u53ef\u80fd\u6027\uff0c52\u67091%\u7684\u53ef\u80fd\u6027\u3002\u8fd9\u663e\u7136\u53ef\u80fd\u662f\u9519\u8bef\u7684\u3002\n\u56e0\u6b64\uff0c\u56de\u5230Markowitz\uff0c\u6211\u4eec\u611f\u5174\u8da3\u7684\u662f\u4e3a\u6bcf\u79cd\u8d44\u4ea7\u5236\u5b9a\u4e00\u4e2a\u6743\u91cd\u5411\u91cf(\u4f8b\u5982\uff0c\u5728\u5468\u4e94\u4e0b\u5348\u51fa\u552e50%\u7684\u841d\u535c)\uff0c\u8fd9\u5728\u6211\u4eec\u7684\u98ce\u9669\u504f\u597d\u8303\u56f4\u5185(\u66f4\u9ad8\u7684\u98ce\u9669\u504f\u597d\u610f\u5473\u7740\u6211\u613f\u610f\u4e3a\u4e86\u66f4\u9ad8\u7684\u56de\u62a5\u800c\u627f\u62c5\u66f4\u591a\u98ce\u9669)\u3002\u6211\u4eec\u5e0c\u671b\u8fd9\u4e9b\u6743\u91cd\u575a\u6301\u4ee5\u4e0b\u4f18\u5316\u95ee\u9898(\u611f\u8c22\u7ef4\u57fa\u767e\u79d1)\uff1a\n\u597d\u7684\uff0c\u8fd9\u770b\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u8ba1\u7b97\u9884\u671f\u6536\u76ca\uff0c\u8ba9\u6211\u4eec\u6784\u5efa\u534f\u65b9\u5dee\u77e9\u9635\uff1a\ndef Joint_prob(r1\uff0cr2)\uff1aprob=p\u7684defaultdict(\u6d6e\u70b9\u6570)\uff0c\u6570\u636e\u4e2d\u7684\u9879\uff1ar1_opts=\u9879[r1]r2_opts=\u9879[r2]\u7ed3\u679c=\u6d6e\u70b9\u6570(len(R1_Opts)*len(R2_Opts))\u5bf9\u4e8er1_opts\u4e2d\u7684x\uff1a\u5bf9\u4e8er2_opts\u4e2d\u7684y\uff1aprob[x\uff0cy]+=p/output\u8fd4\u56deprob def covariance_of(r1\uff0cr2)\uff1ae_r1=expect_of(r1\uff0cr2)\u3002r2)\u8054\u5408\u9879\u76ee\u4e2d(x\uff0cy)\uff0c\u63a2\u6d4b\u7684\u8054\u5408_exp=0\uff1a\u8054\u5408_exp+=x*y*\u63a2\u6d4b\u8fd4\u56de\u8054\u5408_exp-E_r1*E_r2\u3002\n\u6211\u4eec\u5c06\u8ba1\u7b97\u5c4f\u5e55\u4ef7\u683c\u5728\u4e24\u4e2a\u4e0d\u540c\u65f6\u95f4\u7684\u8054\u5408\u6982\u7387\u5206\u5e03(\u4f8b\u5982\uff0c\u5468\u4e00\u4e0b\u5348\u4ef7\u683c\u4e3aX\uff0c\u5468\u4e94\u4e0b\u5348\u4ef7\u683c\u4e3aY\u7684\u6982\u7387\u662f\u591a\u5c11)\u3002\u4f7f\u7528\u4f17\u6240\u5468\u77e5\u7684\u534f\u65b9\u5dee\u6052\u7b49\u5f0fCoV(X\uff0cY)=E[XY]-E[X]E[Y]\u3002\u96f7\u65af\u6258\u3002\n\u6211\u4eec\u73b0\u5728\u628a\u6240\u6709\u7684\u841d\u535c\u6392\u6210\u4e00\u6392\u5427\u3002\u6211\u4eec\u60f3\u8981\u5f97\u51fa\u8fd9\u4e2a\u6743\u91cd\u77e2\u91cf\u3002\u6211\u4eec\u6709\u4e00\u4e2a\u4f18\u5316\u95ee\u9898", "note_en": "10 min read   My wife is big fan of Animal Crossing. I will admit that I mostlydon\u2019t understand the game but I find it very cute. She was very upset acouple of days ago when the Bank of Nook decided to cut the interestrate down to 0.05%, at which point she asked: \u201chow am I supposed tomake money now!?\u201d\n  It seems there\u2019s some sort of turnip market in the game. Basically,you can buy turnips on Sunday for a given price, and then you willhave opportunities to sell your turnips over the upcoming week. If youdon\u2019t sell them by next Sunday, you lose them (and thus materializeyour loss). You get two screen prices every day, one in the AM and onein the PM. So, you\u2019ll get 12 prices from Monday to Saturday.\n   The first question is: are turnip prices completely random? A coupleof Google searches reveal that they follow four patterns:\n  Ok, so it seems it\u2019s not completely random. In that case, we should beable to come up with a model (probabilities) for the turnip prices. Itturns out that Ninjihas already looked into the source code and figured out how thepatterns are allocated and how the prices come up. Also, TurnipProphet has already taken this andbuilt a procedure to get the probability distribution for the turnipprices.\n   Every turnip investor (speculator) has to make 12 decisions: how manyturnips to sell at every screen price. Evidently, every turnipinvestor (speculator) has a different risk appetite: I might bewilling to hold on to my turnips for longer looking for a higherpayout which might be unlikely given our probability distribution,or maybe I am not so fond of risk and I hedge my bets out as soon asthings get tough. That\u2019s all okay.\n Turns out this is all part of what we now know as  Modern PortfolioTheory (thanksMr. Markowitz). You have some risky assets, you have a risk appetite,you want to make a well diversified portfolio that minimizes thevariance of your returns, and maximizes your expected returns. Thatsounds like what we want, let\u2019s do that.\n We will model our turnips as 12 different assets: turnips we will sellon Monday AM, turnips we will sell on Monday PM, and so on. Thanks tothe work that has been done in the previous section, we know what\u2019sthe expected return of each of our 12 assets. As time progresses wewill materialize some earnings and some losses.\n Let\u2019s work with an example. I put down my turnip prices on WednesdayPM having sold zero turnips so far. TurnipProphet and got the followingprobability distribution:\n  I was too lazy to get the code for TurnipProphet to run, so I justcopy pasted it and played around with it manually:\n from collections  import defaultdict from functools  import partial import numpy  as np import pandas  as pd import scipy.optimize  as scoMONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY  = range( 6)AM, PM  =  &#34;AM&#34;,  &#34;PM&#34; def  convert_range_with_price(p, s): a, b  = s .split( &#34;to&#34;) a  = a .strip() b  = b .strip()  return list(range(int(a)  - p, int(b)  +  1  - p))turnip_price  =  98convert_range  = partial(convert_range_with_price, turnip_price)data  = [ (  0.664, { (WEDNESDAY, PM):  ...\n So, now we have our data variable holding the probability of eachpossible return (i.e. price we might get minus the price we paid forthe turnips). We can easily calculate the expectation of each asset:\n def  expectation_of(r1): exp  =  0  for p, items  in data: n  = float(len(items[r1])) exp  += (p  * sum(items[r1]))  / n  return exp\n I just assumed that if TurnipProphet says a price range of 51 to 55with 5%, 51 would have a 1% chance of happening, 52 would have a 1%chance of happening. That might obviously be wrong.\n So, going back to Markowitz, what we are interested in doing is comingup with a vector of weights for each asset (e.g. sell 50% of yourturnips on Friday PM) that is within our risk appetite (higher riskappetite means I am willing to take more risk for higher payout). Wewould like those weights to stick to the following optimizationproblem (thanks to the Wikipedia):\n    Ok that seems simple enough, we already know how to compute theexpected returns, let\u2019s build the covariance matrix:\n def  joint_prob(r1, r2): prob  = defaultdict(float)  for p, items  in data: r1_opts  = items[r1] r2_opts  = items[r2] outcomes  = float(len(r1_opts)  * len(r2_opts))  for x  in r1_opts:  for y  in r2_opts: prob[x, y]  += p  / outcomes  return prob def  covariance_of(r1, r2): E_r1  = expectation_of(r1) E_r2  = expectation_of(r2) joint  = joint_prob(r1, r2) joint_exp  =  0  for (x, y), prob  in joint .items(): joint_exp  += x  * y  * prob  return joint_exp  - E_r1  * E_r2\n We are going to calculate the joint probability distribution of thescreen prices at two different times (e.g. what\u2019s the probability thatthe price is X on Monday PM and Y on Friday PM). Using that we use thewell known covariance identity Cov(X, Y) = E[XY] - E[X]E[Y]. Presto.\n Let\u2019s get all our turnips in a row now. We want to come up with thatvector of weights. We have an optimization problem here, we want toselect the weights that minimize the formula above. Turns out, we canuse scipy just for that.\n def  objective(weights, covs, expected_returns, risk):  # the `@` operator is matrix multiplication  return weights  @ covs  @ weights  - risk  * expected_returns  @ weights def  get_weights(data, possibilities, risk): num_assets  = len(possibilities) expected_returns_dict  = {}  for p  in poss: expected_returns_dict[p]  = expectation_of(p) er  = pd .DataFrame({ &#34;returns&#34;: expected_returns_dict}) cov_dict  = defaultdict(dict)  for x  in poss:  for y  in poss: cov_dict[x][y]  =covariance_of(x,  ...\n  In [171]: poss = [ ...: (WEDNESDAY, PM), ...: (THURSDAY, AM), ...: (THURSDAY, PM), ...: (FRIDAY, AM), ...: (FRIDAY, PM), ...: (SATURDAY, AM), ...: (SATURDAY, PM), ...: ] ...:In [172]: w, exp, covs = get_weights(data, poss, 0)In [173]: w[&#39;x&#39;]Out[173]:array([9.99973926e-01, 2.60740769e-05, 0.00000000e+00, 0.00000000e+00, 1.71303943e-17, 0.00000000e+00, 0.00000000e+00])In [174]: exp.T @ w[&#39;x&#39;]Out[174]: array([-31.99986786])In [174]: exp.T @ w[&#39;x&#39;]Out[174]:  ...\n Unsurprisingly, if we are willing to take zero risk, we are told to tosell now as that price has zero variance. The expected returns of thatallocation is losing -32 for each turnip. Let\u2019s try a couple ofdifferent risk appetites:\n In [186]: for risk in (10, 50, 100, 250, 500): ...: w, exp, covs = get_weights(data, poss, risk) ...: print(w) ...: print(exp.T @ w[&#39;x&#39;]) ...: print(w[&#39;x&#39;] @ covs @ w[&#39;x&#39;]) ...: fun: 311.77365532878 jac: array([320. , 341.42121124, 346.91123962, 320.00033188, 320.00043488, 441.86499786, 514.03258133]) message: &#39;Optimization terminated successfully.&#39; nfev: 68 nit: 6 njev: 6 status: 0 success: True x: array([9.72724596e-01, 1.01876057e-10,  ...\n So what are we observing? As our risk appetite increases, our weightsshift from \u201ccash out now\u201d to \u201cwait it out till Friday because that\u2019swhen the prices could peak\u201d, we see our expected returns steadilyincrease. However, this comes at a cost: the variance of our portfolioincreased considerably, thus we are taking on a lot more risk (andpossibility to both gain more and lose more).\n Ideally, the way you use this is that every time you have a new screenprice, you\u2019ll update your portfolio.\n On Monday AM price you\u2019ll have a new portfolio. You possibly willsell some at the current price, and have the remaining turnipshanging around.\n On Monday PM price you\u2019ll recompute the weights. You can\u2019t changewhat you already sold, that ship has gone. But you can make animproved decision (because you have more information) to update theweights of the remaining 11 decisions. You will, again, decide tosell some and keep some given your risk appetite.\n Continue until you exhaust your weekly turnips. Or evidently, yourbest friend tells you they have killer prices on their island.\n  There\u2019s an interesting scenario I didn\u2019t get to investigate but Ithink makes for a cool problem which is very similar. Every island hasa different turnip price, so turnips are more valuable in some placesthan others. Let\u2019s say you have access to many islands and access totheir turnip probability distribution. How do you select when andwhere to sell your turnips?", "posttime": "2020-05-03 05:04:08", "tags": "\u6742\u4ea4,animal,\u841d\u535c,risk", "title": "\u5173\u4e8e\u52a8\u7269\u6742\u4ea4\u829c\u83c1\u5e02\u573a\u7684\u51e0\u70b9\u601d\u8003", "title_en": "Speculating on Animal Crossing Turnip Market", "transed": 1, "url": "https://insignificantbits.com/2020/05/02/turnips/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u6742\u4ea4", "animal", "\u841d\u535c", "risk"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000412, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "1986\u5e74\uff0c\u6211\u5236\u4f5c\u4e86\u4e00\u4e2a\u534f\u8c03\u52a8\u7269\u8fd0\u52a8\u7684\u8ba1\u7b97\u673a\u6a21\u578b\uff0c\u6bd4\u5982\u9e1f\u7fa4\u548c\u9c7c\u7fa4\u3002\u5b83\u57fa\u4e8e\u8ba1\u7b97\u673a\u52a8\u753b\u6216\u8ba1\u7b97\u673a\u8f85\u52a9\u8bbe\u8ba1\u4e2d\u901a\u5e38\u4f7f\u7528\u7684\u90a3\u79cd\u4e09\u7ef4\u8ba1\u7b97\u51e0\u4f55\u3002\u6211\u79f0\u4e4b\u4e3a\u4e00\u822c\u7684\u6a21\u62df\u7fa4\u4f53\u751f\u7269\u4f53\u3002\u57fa\u672c\u7684\u7fa4\u4f53\u6a21\u578b\u7531\u4e09\u4e2a\u7b80\u5355\u7684\u8f6c\u5411\u884c\u4e3a\u7ec4\u6210\uff0c\u5b83\u4eec\u63cf\u8ff0\u4e86\u4e2a\u4f53\u7fa4\u4f53\u662f\u5982\u4f55\u6839\u636e\u5b83\u9644\u8fd1\u7684\u7fa4\u4f53\u4f19\u4f34\u7684\u4f4d\u7f6e\u548c\u901f\u5ea6\u8fdb\u884c\u673a\u52a8\u7684\uff1a\n\u6bcf\u4e2a\u7269\u4f53\u90fd\u53ef\u4ee5\u76f4\u63a5\u63a5\u89e6\u5230\u6574\u4e2a\u573a\u666f\u7684\u51e0\u4f55\u63cf\u8ff0\uff0c\u4f46\u662f\u690d\u7ed2\u8981\u6c42\u5b83\u53ea\u5bf9\u81ea\u5df1\u5468\u56f4\u67d0\u4e00\u5c0f\u5757\u90bb\u57df\u5185\u7684\u9e1f\u7fa4\u6210\u5458\u505a\u51fa\u53cd\u5e94\u3002\u90bb\u91cc\u5173\u7cfb\u7684\u7279\u70b9\u662f\u8ddd\u79bb(\u4ece\u8f66\u8eab\u4e2d\u5fc3\u6d4b\u91cf)\u548c\u89d2\u5ea6\uff0c\u4ece\u8f66\u8eab\u7684\u98de\u884c\u65b9\u5411\u6d4b\u91cf\u3002\u8fd9\u4e2a\u793e\u533a\u4ee5\u5916\u7684\u9e1f\u7fa4\u6210\u5458\u4f1a\u88ab\u5ffd\u7565\u3002\u8fd9\u4e2a\u793e\u533a\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u79cd\u6709\u9650\u7684\u611f\u77e5\u6a21\u5f0f(\u5c31\u50cf\u6d51\u6d4a\u7684\u6c34\u4e2d\u7684\u9c7c)\uff0c\u4f46\u5b83\u53ef\u80fd\u66f4\u76f4\u622a\u4e86\u5f53\u2026\u3002\n\u5728\u65e9\u671f\u7684\u5b9e\u9a8c\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e2a\u7a0d\u5fae\u7cbe\u7ec6\u4e00\u4e9b\u7684\u884c\u4e3a\u6a21\u578b\uff0c\u5b83\u5305\u62ec\u9884\u6d4b\u6027\u7684\u907f\u969c\u548c\u5bfb\u627e\u76ee\u6807\u3002\u969c\u788d\u7269\u907f\u514d\u5141\u8bb8\u673a\u5668\u4eba\u5728\u6a21\u62df\u73af\u5883\u4e2d\u98de\u884c\uff0c\u540c\u65f6\u8eb2\u907f\u9759\u6001\u7269\u4f53\u3002\u5bf9\u4e8e\u8ba1\u7b97\u673a\u52a8\u753b\u4e2d\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f4e\u4f18\u5148\u7ea7\u7684\u76ee\u6807\u5bfb\u627e\u884c\u4e3a\u5bfc\u81f4\u8702\u7fa4\u9075\u5faa\u811a\u672c\u8def\u5f84\u3002\n\u5728\u7b26\u53f7\u56fe\u5f62\u4e8b\u4e1a\u90e8\u548c\u60e0\u7279\u5c3c/\u6f14\u793a\u5236\u4f5c\u516c\u53f8\u7684\u8bb8\u591a\u540c\u4e8b\u7684\u5408\u4f5c\u4e0b\uff0c\u6211\u4eec\u5236\u4f5c\u4e86\u4e00\u90e8\u52a8\u753b\u77ed\u7247\uff0c\u4ee5\u8eab\u4f53\u6a21\u578b\u65af\u5766\u5229(Stanley)\u548c\u65af\u7279\u62c9(Stella)\u4e3a\u4e3b\u89d2\uff0c\u62cd\u6444\u4e86\u201c\u7834\u51b0\u8bb0\u201d(The Break The Ice)\u3002\u8fd9\u90e8\u7535\u5f71\u9996\u5148\u5728SIGGRAPH&87\u7684\u7535\u5b50\u5267\u9662\u653e\u6620\u3002\u5728\u540c\u4e00\u6b21\u4f1a\u8bae\u4e0a\u53d1\u8868\u4e86\u4e00\u7bc7\u5173\u4e8e\u4eba\u4f53\u7684\u6280\u672f\u8bba\u6587\u3002\u5728SIGGRAPH#88\u7684\u8bfe\u7a0b\u7b14\u8bb0\u4e2d\uff0c\u6709\u4e00\u7bc7\u5173\u4e8e\u907f\u969c\u7684\u975e\u6b63\u5f0f\u8bba\u6587\u3002\n\u81ea1987\u5e74\u4ee5\u6765\uff0c\u4f53\u6a21\u578b\u5728\u884c\u4e3a\u52a8\u753b\u9886\u57df\u5df2\u7ecf\u6709\u4e86\u8bb8\u591a\u5176\u4ed6\u7684\u5e94\u7528\u30021992\u5e74\u8482\u59c6\u4f2f\u987f\u6267\u5bfc\u7684\u7535\u5f71\u201c\u8759\u8760\u4fa0\u5f52\u6765\u201d\u5c31\u662f\u7b2c\u4e00\u90e8\u3002\u5b83\u5305\u542b\u4e86\u8ba1\u7b97\u673a\u6a21\u62df\u7684\u8759\u8760\u7fa4\u548c\u4f01\u9e45\u7fa4\uff0c\u5b83\u4eec\u662f\u7528Symbolics\u5f00\u53d1\u7684\u539f\u59cbBoid\u8f6f\u4ef6\u7684\u4fee\u6539\u7248\u672c\u521b\u5efa\u7684\u3002\u5b89\u8fea\u00b7\u79d1\u666e\u62c9(\u5f53\u65f6\u5728VIFX\u5de5\u4f5c)\u5236\u4f5c\u4e86\u8759\u8760\u7fa4\u7684\u73b0\u5b9e\u4e3b\u4e49\u56fe\u50cf\u3002\u5b89\u5fb7\u91cc\u4e9a\u00b7\u6d1b\u65bd(\u5f53\u65f6\u5728Boss Films\u5de5\u4f5c)\u548cPaulAshdown\u521b\u4f5c\u4e86\u4f01\u9e45\u519b\u961f\u884c\u8fdb\u901a\u8fc7\u2026\u2026\u7684\u52a8\u753b\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u57281987\u5e74Boids\u8bba\u6587\u53d1\u8868\u51e0\u4e2a\u6708\u540e\uff0c\u514b\u91cc\u65af\u00b7\u6717\u987f(Chris Langton)\u7ec4\u7ec7\u4e86\u6700\u521d\u7684\u5f00\u521b\u6027\u4eba\u5de5\u751f\u547d\u7814\u8ba8\u4f1a\u3002\u4e00\u4f4d\u4e50\u4e8e\u52a9\u4eba\u7684\u4e2d\u95f4\u4eba\u5f97\u5230\u4e86\u514b\u91cc\u65af\u7684\u6d88\u606f\uff0c\u4ed6\u8ba9\u6211\u5728\u7814\u8ba8\u4f1a\u4e0a\u505a\u4e00\u4e2a\u5173\u4e8e\u7269\u4f53\u7684\u975e\u6b63\u5f0f\u6f14\u793a\u3002\u7269\u4f53\u6a21\u578b\u5df2\u7ecf\u6210\u4e3a\u4eba\u5de5\u751f\u547d\u539f\u7406\u7684\u4e00\u4e2a\u7ecf\u5e38\u88ab\u5f15\u7528\u7684\u4f8b\u5b50\u3002\u7fa4\u96c6\u662f\u6d8c\u73b0\u7684\u4e00\u4e2a\u7279\u522b\u4ee4\u4eba\u8054\u60f3\u5230\u7684\u4f8b\u5b50\uff1a\u590d\u6742\u7684\u5168\u5c40\u884c\u4e3a\u53ef\u4ee5\u7531\u7b80\u5355\u7684\u5c40\u90e8\u89c4\u5219\u7684\u76f8\u4e92\u4f5c\u7528\u800c\u4ea7\u751f\u3002\n\u5728\u4f53\u6a21\u578b\u4e2d\uff0c\u4e2a\u4f53\u7684\u7b80\u5355\u884c\u4e3a\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\u4f1a\u4ea7\u751f\u590d\u6742\u800c\u6709\u7ec4\u7ec7\u7684\u7fa4\u4f53\u884c\u4e3a\uff0c\u800c\u7ec4\u6210\u884c\u4e3a\u672c\u8eab\u5c31\u662f\u975e\u7ebf\u6027\u7684\uff0c\u56e0\u6b64\u5c06\u5b83\u4eec\u6df7\u5408\u5728\u4e00\u8d77\u4f1a\u7ed9\u65b0\u5174\u7684\u7fa4\u4f53\u52a8\u529b\u5b66\u5e26\u6765\u6df7\u6c8c\u7684\u4e00\u9762\u3002\u540c\u65f6\uff0c\u884c\u4e3a\u63a7\u5236\u5668\u63d0\u4f9b\u7684\u8d1f\u53cd\u9988\u4f7f\u7fa4\u4f53\u52a8\u529b\u5b66\u8d8b\u4e8e\u6709\u5e8f\u3002\u7ed3\u679c\u5c31\u662f\u6829\u6829\u5982\u751f\u7684\u7fa4\u4f53\u884c\u4e3a\u3002\n\u62df\u771f\u4eba\u884c\u4e3a\u7684\u4e00\u4e2a\u91cd\u8981\u7279\u5f81\u662f\u4e0d\u53ef\u9884\u6d4b\u6027\uff0c\u65f6\u95f4\u5c3a\u5ea6\u8fc7\u4e8e\u9002\u4e2d\u3002\u4f8b\u5982\uff0c\u5728\u67d0\u4e2a\u65f6\u523b\uff0c\u4e0a\u9762\u5c0f\u7a0b\u5e8f\u4e2d\u7684\u5929\u4f53\u53ef\u80fd\u4e3b\u8981\u662f\u4ece\u5de6\u5411\u53f3\u98de\u884c\u3002\u4f46\u662f\u8981\u9884\u6d4b(\u6bd4\u5982\u8bf4)\u4e94\u5206\u949f\u540e\u4ed6\u4eec\u4f1a\u671d\u54ea\u4e2a\u65b9\u5411\u79fb\u52a8\u662f\u5b8c\u5168\u6709\u53ef\u80fd\u7684\u3002\u5728\u5f88\u77ed\u7684\u65f6\u95f4\u5c3a\u5ea6\u5185\uff0c\u8fd0\u52a8\u662f\u76f8\u5f53\u53ef\u9884\u6d4b\u7684\uff1a\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u4e00\u4e2a\u7269\u4f53\u5c06\u6cbf\u7740\u5927\u81f4\u76f8\u540c\u7684\u65b9\u5411\u8fd0\u52a8\u3002\u8fd9\u4e00\u7279\u6027\u662f\u590d\u6742\u7cfb\u7edf\u6240\u7279\u6709\u7684\uff0c\u4e0e\u8fd9\u4e24\u8005\u5f62\u6210\u9c9c\u660e\u5bf9\u6bd4\u7684\u662f\u2026\u3002\nBoids\u6a21\u578b\u662f\u57fa\u4e8e\u4e2a\u4eba\u7684\u6a21\u578b\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8fd9\u662f\u4e00\u7c7b\u7528\u4e8e\u6355\u83b7\u5927\u91cf\u4ea4\u4e92\u81ea\u6cbbAgent\u7684\u5168\u5c40\u884c\u4e3a\u7684\u4eff\u771f\u3002\u57fa\u4e8e\u4e2a\u4f53\u7684\u6a21\u578b\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u751f\u7269\u5b66\u3001\u751f\u6001\u5b66\u3001\u7ecf\u6d4e\u5b66\u7b49\u7814\u7a76\u9886\u57df\u3002\n\u8bf7\u6ce8\u610f\uff0cBoids\u7b97\u6cd5\u7684\u76f4\u63a5\u5b9e\u73b0\u5177\u6709O(N)\u7684\u6e10\u8fd1\u590d\u6742\u5ea6\u3002\u6bcf\u4e2a\u8eab\u4f53\u90fd\u9700\u8981\u8003\u8651\u5f7c\u6b64\u7684\u8eab\u4f53\uff0c\u5373\u4f7f\u53ea\u662f\u4e3a\u4e86\u786e\u5b9a\u5b83\u662f\u5426\u4e0d\u662f\u8fd1\u4eb2\u3002\u7136\u800c\uff0c\u6709\u53ef\u80fd\u901a\u8fc7\u4f7f\u7528\u9002\u5f53\u7684\u7a7a\u95f4\u6570\u636e\u7ed3\u6784\u5c06\u8fd9\u4e00\u6210\u672c\u964d\u4f4e\u5230\u65e9\u671f\u7684O(N)\uff0c\u8be5\u7a7a\u95f4\u6570\u636e\u7ed3\u6784\u5141\u8bb8\u6309\u5176\u4f4d\u7f6e\u5bf9\u7269\u4f53\u8fdb\u884c\u5206\u7c7b\u3002\u7136\u540e\uff0c\u8981\u627e\u5230\u9644\u8fd1\u7684Agivenboid\u7fa4\u4f53\u4f19\u4f34\uff0c\u53ea\u9700\u8981\u68c0\u67e5\u7fa4\u4f53\u4e2d\u5728\u4e00\u822c\u8303\u56f4\u5185\u7684\u90a3\u90e8\u5206\u3002..\u3002\n\u5728ACM SIGGRAPH\u6559\u80b2\u59d4\u5458\u4f1a\u7684HyperGraph\u9879\u76ee\u4e2d\u5173\u4e8e\u8ba1\u7b97\u673a\u52a8\u753b\u4e2d\u7684\u4eba\u5de5\u751f\u6d3b\u7684\u62a5\u544a\u4e2d\u5bf9\u7f8a\u7fa4\u3001\u725b\u7fa4\u548c\u5b66\u6821\u7684\u603b\u7ed3\u3002\n\u63cf\u8ff0\u7269\u4f53\u6d3b\u7740\u7684\u4e66\u7c4d\u548c\u6587\u7ae0\uff0c\u79d1\u5b66\u5bb6\u4eec\u5728\u4ed6\u4eec\u81ea\u5df1\u521b\u9020\u7684\u4e8c\u5143\u5b87\u5b99\u4e2d\u626e\u6f14\u4e0a\u5e1d\u7684\u89d2\u8272&(1998)\uff0c\u67ef\u7279\u00b7\u82cf\u666e\u5229(Curt Suplee)\u3002\n\u5e03\u62c9\u59c6\u00b7\u8d1d\u514b(Bram Bakker)\u7684\u201c\u5fc3\u7406\u5b66\u7684\u9002\u5e94\u884c\u4e3a\u65b9\u6cd5\u201d(2000)\u4e3a\u8ba4\u77e5\u5fc3\u7406\u5b66\u7684\u8bfb\u8005\u63cf\u8ff0\u4e86\u5305\u62ec\u8eaf\u4f53\u5728\u5185\u7684\u9002\u5e94\u884c\u4e3a\u3002(PDF)\u3002\n\u8096\u6069\u00b7\u5361\u5c14\u68ee(Shawn Carlson)\u7684\u201c\u4eba\u5de5\u751f\u6d3b\uff1a\u7fbd\u6bdb\u7684\u8eab\u4f53\u805a\u96c6\u5728\u4e00\u8d77\u201d(2000)\u3002\u8fd9\u662f\u4e00\u9879\u79d1\u5b66\u7814\u7a76", "note_en": "In 1986 I made a computer model of coordinated animal motion such asbirdflocks and fish schools. It was based on three dimensionalcomputationalgeometry of the sort normally used in computer animation or computeraideddesign. I called the generic simulated flocking creatures boids.The basic flocking model consists of three simple steering behaviors which describe how anindividualboid maneuvers based on the positions and velocities its nearbyflockmates:\n  Each boid has direct access to the whole scene&#39;s geometric description,butflocking requires that it reacts only to flockmates within a certainsmallneighborhood around itself. The neighborhood is characterized by a distance (measured from the center of the boid) and an  angle,measured from the boid&#39;s direction of flight. Flockmates outside thislocalneighborhood are ignored. The neighborhood could be considered a modeloflimited perception (as by fish in murky water) but it is probably morecorrectto  ...\n  A slightly more elaborate behavioral model was used in the earlyexperiments.It included predictive obstacle avoidance and goal seeking. Obstacleavoidance allowed the boids to fly through simulated environments whiledodging static objects. For applications in computer animation, a lowpriority goal seeking behavior caused the flock to follow a scriptedpath.\n  In cooperation with many coworkers at the Symbolics Graphics DivisionandWhitney / Demos Productions, we made an animated short featuring theboidsmodel called  Stanley and Stella in: Breaking the Ice. This filmwas first shown at the Electronic Theater at SIGGRAPH &#39;87. There was a technical paper on boidspublished atthe same conference. In the course notes for SIGGRAPH &#39;88 there was an informal paper about obstacle avoidance.\n Since 1987 there have been many other applications of the boids modelin therealm of  behavioral animation. The 1992TimBurton film  Batman Returns was the first. It contained computer simulated batswarmsand penguin flocks which were created with modified versions of theoriginalboids software developed at Symbolics. Andy Kopra(then at VIFX )produced realisticimagery of bat swarms. Andrea Losch (then at Boss Films) and PaulAshdowncreated animation of an &#34;army&#34; of penguins marching through the  ...\n  As luck would have it,  Chris Langtonorganized the original ground-breaking  Artificial Life Workshop a few months after the boids paper waspublishedin 1987. A helpful go-between got word to Chris and he let me give aninformal presentation on boids at the Workshop. Theboidsmodel has become an oft-cited example of principles of ArtificialLife. Flocking is a particularly evocative example of  emergence:wherecomplex global behavior can arise from the interaction of simple localrules.\n In the boids model   interactionbetweensimple behaviors of individuals produce complex yet organized groupbehavior.The component behaviors are inherently nonlinear, so mixing them givestheemergent group dynamics a chaotic aspect. At the same time, thenegativefeedback provided by the behavioral controllers tends to keep the groupdynamics ordered. The result is  life-like group behavior.\n A significant property of life-like behavior is  unpredictabilityovermoderate time scales. For example at one moment, the boids in theappletabove might be flying primarily from left to right. It would be all butimpossible to predict which direction they will be moving (say) fiveminuteslater. At very short time scales the motion is quite predictable: onesecondfrom now a boid will be traveling in approximately the same direction.Thisproperty is unique to complex systems and contrasts with both  ...\n The boids model is an example of an  individual-basedmodel, a class of simulation used to capture the global behavior ofalarge number of interacting autonomous agents. Individual-based modelsarebeing used in biology, ecology, economics and other fields of study.\n Note that the straightforward implementation of the boids algorithm hasanasymptotic complexity of O(n ). Each boidneeds toconsider each other boid, if only to determine if it is not a  nearbyflockmate. However it is possible to reduce this cost down tonearly O(n)by the use of a suitable  spatial data structurewhich allowsthe boidsto be kept sorted by their location. Finding the nearby flockmates of agivenboid then requires examining only the portion of the flock which iswithin thegeneral vicinity.  ...\n    A summary of  Flocks,Herds, and Schools in the report on  ArtificialLife in  ComputerAnimation in the  HyperGraph project of the ACM SIGGRAPH Education Committee.\n  Books and articles that describe boids  Its Alive&#34;Scientists play god in a binary universe of their own making&#34; (1998)by Curt Suplee\n        TheAdaptive Behavior Approach to Psychology (2000) by  Bram Bakkerdescribes adaptive behavior, including boids, for a cognitivepsychology audience. ( PDF)\n  ArtificialLife: Boids of a Feather Flock Together (2000) by  Shawn Carlson. This  ScientificAmerican  Amateur Scientist column discusses the role ofsoftware experiments as a tool in understanding biological phenomena.\n  Articles on other topics that mention boids as example ormetaphor:  Self-organizationand its catalysts in  Human Values as Strange Attractors:Coevolution of classes of governance principles (1993) by  Anthony Judge\n        Rulesfor &#34;Flocking Behavior&#34; in the Web (1997) is an attempt to applyconcepts of emergent behavior to problems of business management.\n  Messy,Exciting and Anxiety-Ridden: Adaptive Software Development (1997)by  JimHighsmith draws a parallel between  complex adaptive systemsand flexible software development practices.\n  SomeEmerging Principles for Managing in Complex Adaptive Systems (1997)by Paul Plsek, Curt Lindberg, and Brenda Zimmerman.\n  ComplexityTheory: Fact-Free Science Or Business Tool? (1998) by  David Berreby reports on the fifth  Chaos in Manufacturingconference. The boids model is described (albeit incorrectly) on  page 2.\n  Thriving atthe Edge of Chaos: What HealthCare Organizations Can Learn fromComplexity Science (2000) by  Sheri M.Gon.\n  Computer animation  Eurythmy by Susan Amkraut and Michael Girard containedthe first procedural animation of flocks when it was shown at the Film&amp; Video Show of SIGGRAPH &#39;85. It is available on SIGGRAPH Videoreview  (SVR Issue 21, Entry 2). Some imagery from the  final versionappear on this page from  Ars Electronica 89. Amkraut andGirard also created flocking and herding in the 1993 VR production  Menagerie.\n  JessicaHodgins and colleagues at Georgia Tech&#39;s GVU have created severalphysically-based models of  group behaviors such as herding one-legged hoppers and a pack ofbicyclists.\n  Disney&#39;s    TheLion King (1994) included a wildebeest stampede by Kiran Joshi,MJ Turner,  et al.. Here are two stampede-related items from  Brian Tiemann&#39;s excellent  The Lion King WWW Archive:  Stampedesequence (QuickTime Movie, 21.9 MB. Also available as   low res QT(1.2 MB) and  MPEG1(28.7 MB))\n  XiaoyuanTu implemented a realistic, physically-based model of fishschooling as part of her dissertation research on artificial animals.See also:  A non-technical article called  Fishes of the Silicon Sea, by Gene Levinson which appeared in  TheWorld &amp; I Magazine.\n  While at Santa Barbara Studios,  Mark Wendell used the Dynamationparticle system software to create animation of flocking spacecreatures for  Elogiuman episode of  Star Trek: Voyager.\n  Course  CS206at George Washington University includes an assignment to implement a  BehavioralMotion Control System like boids. You can see some of thestudent&#39;s animations from:  1997,  1998 and  1999.\n  Games, Interactive graphics and virtual reality  Rip-Off(1980) a videoarcade game designed by  TimSkelly featured a group of three autonomous &#34;enemy tanks&#34; whichexhibited coordinatedgroup motion. They avoided collisions with each other and would seekthe goalobjects (&#34;canisters&#34;), or if they got too close, the player controlledvehicles. The combination of goal seeking and collision avoidanceproduced amotion like flocking. For more details, read Tim Skelly&#39;s own  description  ...\n  Plasm:A FishSample (1985) by  PeterBroadwell ,  Rob Myers, RobinSchaufler,  Eva Manolis,  etal., premieredat the SIGGRAPH 85 art show. On at least one occasion, a schoolaccidentallyarose in this &#34;virtual fish tank&#34;.\n  ParallelBird Flocking Simulation (1993) by  Helmut Lorek and Matthew White. Describes an implementation ofboids using up to 50 parallel Transputer processors to simulate flocksof up to 100 boids at interactive rates (6 frames per second orbetter). The simulation included obstacle avoidance. The full articleis available in  PDF.\n  The Virtual Fishtankintroduces visitors to the sciences of complexity, artificial life andrelated fields. It is an online version of a project that started as an  installationat  The Computer Museumin Boston. Its goal is to introduce visitors to the sciences ofcomplexity and artificial life. The original project was jointlydeveloped by the  MIT Media Lab(see their  project page) and  NearLife Inc.(see their  recentprojects page).\n  VirtualGreat Barrier Reef: A theoretical approach towards an evolving,interactive VR environment using a distributed DOME and CAVE System(1998) by  Scot Thrane Refsland,  Takeo Ojika,  Tom Defanti,  Andy Johnson,  Jason Leigh,  Carl Loeffler, and  Xiaoyuan Tu inProceedings of Virtual Worlds &#39;98. Paris, France, July 1-3, 1998. Alsoavailable in  PDF.\n  Robotics  Maja Mataricheads  The InteractionLab at the University of Southern California which studies robotic   group behaviors.See also Maja&#39;s  dissertation and these  videos of robotsperforming various group behaviors, including flocking.\n  CooperativeMobile Robotics: Antecedents and Directions by Y. UnyCao, Alex S. Fukunaga, and Andrew B. Kahng (UCLA 1996) surveys researchin robot groups.\n  TheRobot Sheepdog Project by  Richard Vaughan  etal. provides an interesting contrast to much of the work cited onthis page: the flocking/herding involved is of natural animals while arobot plays a role similar to a sheepdog. As is done when training realsheepdogs, ducks are used here as a less challenging stand-in forsheep. Read the delightful  paper for more detail. See also  Neil Sumpter&#39;s pagesabout the  visionresearch related to robo-sheepdog.\n  TheExamination and Exploration of Algorithms and Complex Behaviour toRealistically Control Multiple Mobile Robots (1997) by  Duncan Crombie,examines algorithms to control multiple mobile robots, focuses onbehaviors that can be obtained through local control, and demonstratescreateing complex behaviours with simple algorithms.\n  Self-Organizationin Large Populations of Mobile Robots (1993) by  Cem \u00dcnsal Describesthe use of a homogeneous population of robots, an  Army-ant swarm,for transportation of material. Investigates both spatial andbehaviroal self-organization.\n  SocialBehavior in  The Antsa community of cubic-inch microrobots which form a  structured robotic community capable of task such as clustering,following the leader, and playing tag.\n    CollectiveLocomotion (1998) by  PierreArnaud of the  LAMICollective Robotics Group. Includes papers and  Labot,a Java demonstation applet.\n  Aerospace (coordinated groups of aircraft or spacecraft)  SubsumptiveArchitecture of Populous Satellite Constellations (1995) by  Brian J. Mork discussespotential applications and designs for groups of reactive communicatingsatellites: &#34;design goals are embedded in the constellation rather thanindividual satellites, and the constellation exhibits emergentbehavior.&#34;\n  Solar-PoweredUltralight Aircraft Designed To Fly in Formation(1996) describes early test of a potential fleet of solar-poweredautonomous aircraft that fly at high altitude in &#34;V&#34; formations likegeese, and this  press release of the test flight of a prototype.\n  BirdsInspire Formation-Flying Satellites (1999), US Air Force pressrelease describing the US AFRL&#39;s &#34;Technology Satellite of the 21stCentury&#34; ( TechSat 21)program, including plans for a system of &#34;formation-flying&#34; satellitesthat can quickly adapt to rapidly changing mission requirements. Seealso  Space Missions Using Satellite Clusters.\n  Education (about distributed and complex systems)  MitchelResnick developed  StarLogo a programmable modeling environment for exploring thebehaviors of  decentralized systems such as bird flocks, traffic jams, and antcolonies. For more information see Mitchel&#39;s book  Turtles, Termites, and Traffic Jams\n  OK, while not strictly a &#34; computational model ofgroup motion,&#34;  Schools are for Fish is a collection of participatory activitiesfor young students to help them learn about group motion and complexsystems.\n  Artificial life and  Evolutionary computation  AnInvestigation Into Computational Flocking Techniques (1999) by  Phil Pocknellinvestigates flocking (herding) under the influence of a predator.Specifically, it models a situation very much like the interactionbetween a sheep-dog and a flock of sheep, such as in a sheep-dog trial.See the  Tadpoidsapplet, and the related   PestControl applet.\n  BehaviouralSimulation in Voxel Space (1997) by   HongwenZhang and  BrianWyvill uses as its example a group of butterflies navigating byolfactory sensors. Based on Zhang&#39;s 1996 Ph.D. thesis. See the fullpaper in  PDF.\n  Art  As part of this MFA work,   Terry Franguiadakis createda virtual reality art piece called  Swallows ofCapistrano which included a flock of swallows that would fly overto eat food dispensed from the user&#39;s 3d wand.\n  At SIGGRAPH 93  Ken Rinaldo&#39;s  Emergent Systemspresented  TheFlock, a robotic art installation composed of reactive sculpturaland musical elements.\n  EIDEA( Environment for the Interactive Design of Emergent Art, by  John Mitchell and  Robb Lovell) is an artpiece based on artificial life which includes a flock of birds.\n  An art piece called   A Flock ofWords by   DorisVila, Robert Rowe and  EricL. Singer, performed at NYU in 1995, and another version installedthat same year in Bonn under the title  Opera Clones. It was also presented at the  SIGGRAPH 96 Applications venue.\n  Emergence isthe system underlying the 1997 and 1998 installations known as   TheBush Soul by  RebeccaAllen  et al. This interactive 3D world is full ofautonomous objects and characters, including flock-like groups.\n  Biology  Ornithologist  Frank Heppner andmathematician  UlfGrenander describe a model of flocking and roosting in  AStochastic Nonlinear Model for Coordinated Bird Flocks (1990)appearing in  The Ubiquity of Chaos edited by Saul Krasner.\n  The   EcoToolsproject uses individual-based models to study animal behavior andecological issues. Models of  schooling fish and  flocking birds have been created in EcoTools. There is also a  Java-based fish school simulation at this site.\n  Physics  Tam\u00e1s Vicsekpublished an analysis of flocking particles in Physical Review Letterson August 7, 1995, which focused on transitions in collective behavior.(I will provide a more complete description here when I betterunderstand Prof. Vicsek&#39;s work.)\n  J DanaEckart implemented a cellular automata model of  flocking using his    Cellularsystem based on  Vicsek&#39;swork.\n  Workby  Yu-hai Tu and  John Tonerpublished in Physical Review Letters (Volume 75, page 4326, December 4,1995) includes a proof that motion of a flock or herd is essential toits collective ability to align. That is, group alignment is notpossible with local perception in the absence of motion.\n    Flocks,Herds, and Schools: A quantitative theory of flocking by  Toner and  Tu in Physical Review E,October 1998, Volume 58, Issue 4, pp. 4828-4858. See the AIP summary:   Birdsof a Feather: The Physics of Flocks, this summary from  Academic Press, and this article from  Newsweek.\n  Physics of Flocks ( Part 1and  Part2) by  Karl Kruszelnicki,transcripts and audio recordings from  GreatMoments in Science on the Australian Broadcasting Corporation.\n  Search, optimization and visualization techniques inspired byflocks and swarms  ParticleSwarm Optimization (and see the original   1995PSO paper by  JamesKennedy and  RussEberhart) searchs a multidimensional solution space. Somewhat likea genetic algorithm, but the PSO&#39;s search points move as a swarmthrough the space with a velocity, altered by steering accelerations.See also this  PSO demoapplet.\n  Theuse of Flocks to drive a Geographic Analysis Machine (1998) by   JamesMacgill and  Stan Openshaw, uses a flock model, with communication betweenboids, to better search for clusters in spacial datasets, just as anatural flock provides better foraging than individual birds couldmanage. See this demo   applet.\n  AntColony Optimization introduced in 1992 by  Marco Dorigo&#34;...studies artificial systems that take inspiration from the behaviorof  real antcolonies and which are used to solve function or combinatorialoptimization problems...&#34;\n  InformationRetrieval in the World-Wide Web: Making Client-based searching feasible  (1994) by  PaulDe Bra and  Reinier Post,uses a school of fish metaphor to search the web.\n  InformationFlocking by Glenn Proctor is a data visualizationtechnique that portrays datapoints as  fish that  schoolthrough a 3d space, revealing correlations in the data by their motionand clustering. See the paper  InformationFlocking: Data Visualisation in Shared Worlds Using Emergent Behaviours(1998, PDF 91KB) by Glenn Proctor and Chris Winter.\n  Ant-basedLoad Balancing in Telecommunications Networks (1996) by   RuudSchoonderwoerd,   Owen Holland.  JanetBruten and  Leon Rothkrantz. See also these related links:   There&#39;san ant in my phone (1998) by Mark Ward in  New Scientist,  British Telecom: Notes from the Ant Colony (1997) by Julia Flynn inBusinessWeek, and   CollectiveIntelligence for Network Control.\n  Other emergent, collective behavior  AmorphousComputing HomePage a research group exploring the question: &#34;How dowe obtain coherent behavior from the cooperation of large numbers ofunreliable parts that are interconnected in unknown, irregular, andtime-varying ways?&#34;\n  Other topics...  G.Keith Still has developed a system called  Legion to simulate the motion of large crowds of people. It canhandle crowds of more than 100,000 people. See also these  related pages, and these articles by  Sheryl Canter in  PC Magazine from   April 1996and  May1996.\n  A page of   Java-baseddemos by the Biological Model Simulation group at Keio University.The demos are in 2d and include basic schooling, predation, interactivefeeding, and schooling with two species.\n  Animation Science Corporationsells tools to model the motion of large crowds with their  Rampagesoftware, based on an efficient engine for   interacting particlesystems.\n    An introduction called   Complexity andSocial Behaviour and a computational model of resource-deprived  termites by  Octavio Miramontes\n    JonathanRobbins&#39; page  The Boids is the report from his Science Project -- his  8thgrade Science Project, mind you. (Yikes! Kids these days!)\n  Simulationof Herding with Dynamics by  HowardZhang uses a simple spring-mass model of animal bodies andsimulates herding on the plane. This report contains good diagrams anddescriptions of the implementation of component steering behaviors.\n  TheComputational Beauty of Nature is the web site for a book of thesame name by  Gary W. Flake(shop for the book  here). He implemented boids and added another rule which cause theboids to attempt to maintain a clear view ahead of them. This resultedin flocks which form the classic &#34;V&#34; formations of migrating geese. Seethe  Javademonstration.\n  In a class project called  A-Life Foodchain Simulation Leon Blackwell extends a boid-likemodel to include predator-prey interactions.\n  TheDuck Pond: Following, Flocking and Herding a 1977 class project byBrian O&#39;Connor. Includes source code and animations.\n  E Pluribus Unum (the January 1999 installment of  Brian Hayes&#39;column on Computing Science in  American Scientist)talks about  emergence using examples such as flocks, schools,herds, traffic jams, ant colonies, and forest fires.\n  Anattempt to replicate the main findings of Craig Reynolds&#39;s (1987)&#39;Boids&#39; by Harry Brignull, reports on a project to implement boidsusing the  POPBUGS package by   Chris Thornton.Includes diagrams of the resulting group motion and source code.\n  Flocking,Boids and Tag (1998) by  AronHelser. This classproject involved an interactive flock which plays the game of tag andallows the use to either ride along passively with a member of theflock, or take control and pilot the boid.\n  GOIDSProject a study of flocking geese objects (1999) by Cathryn JPolinsky. Presentation slides for a Senior Project called &#34;FlightSimulation of Flocking Geese Using Particle Set Animation&#34;\n  Some seminal papers from the (hardcopy) literature:  The Structure and Function of Fish Schools (1982) byBrian Partridge in  Scientific American,June 1982, pages 114-123.\n  The Chorus Line Hypothesis of Manoeuvre Coordination inAvian Flocks (1984) by  Wayne Potts, in  Nature,Volume 309, May 24, 1984, pages 344-345.\n  Animal Groups in Three Dimensions: How Species Aggregate(1997) edited by  Julia K. Parrish and William M. Hamner. A collection of papersrelated to a 1991 workshop on measuring and modeling animalaggregations. Use this link to  shop for the book.\n  A 22 second   movie of aschool of anchovies (160x120 pixels, in  JPEG(1.1 Mb) and  Quicktime(1.8 Mb) formats) swimming in the Kelp Forest tank at the  Monterey Bay Aquarium from a page of  fish videos at  FINS. See also the live  Kelp Cam view ofthis tank.\n    Temple Grandin&#39;s interestingsite on behavior of livestock and other subjects, contains a section on  Recommended Basic Livestock Handling which covers topics such as:  each of which contain pictures and diagrams on geometricalrelationships between herds of livestock, the shapes of theirenclosures, and the positions of human handlers.\n  William H. Calvin&#39;s book  The Ascent of Minddiscusses the predation on herds of early humans in Chapter 8:  Hand-Ax Heaven (youmay wish to search for the first occurance of  herd).\n  Lessons fromGeese: on the structure of migratory goose flocks, and folksythoughts on applying these ideas to groups of humans.\n  V formations: at the bottom of  Jim Rible&#39;s page about the   CanadaGoose there is a discussion about the mixed evidence for anaerodynamic explanation of the &#34;V&#34; formations often seen in migratingducks and geese. See also the cited   references.\n  A page by  UweKils illustrating how individual fish in a school benefit fromreduced predation due to  optical confusion.\n  An essay called  MigrationAdvantages of Shoaling by Tony J. Pritcher in his book  Behaviour of Teleost Fishes describes research by  Uwe Kils into theeffect he calls  synchrokinesis whereby small movements ofindividuals copied through the shoal provide an accurate movementtowards better conditions. (Contrast this with the work of  Tonerand Tu (above) which suggests that individual errors are damped outby interaction with the rest of the group.)\n  Vigilance,Flock Size, and Flock Geometry: Information Gathering byWestern Evening Grosbeaks (1995) by   MarcBekoff a field ethology study of how the size and relativepositioning of this bird affect the vigilance (scanning) behavior ofindividuals in the group.\n  Cutting horses and  herding dogs: these two typesof trained animal behaviors have evolved into modern sportcompetitions. Their origin was to assist humans raising stock animals,and they can still be found in this role today. Both are related toherding behavior in special ways.  The job of a herding dog (stockdog, sheepdog) is to help ashepherd contain and control a herd of stock animals (especially sheep,goats or cattle). A herding dog uses its understanding of the  ...\n  The cutting horse derived from the American cowboy cultureand is specifically trained to handle cattle. A cutting horse&#39;s skillis in being able to  defeatthe cattle&#39;s herding instinct,allowing  ...\n     This is the original 1986-1988 implementation, written inSymbolics Common Lisp, and based on Symbolics&#39; S-Geometry 3d modelingsystem and S-Dynamics animation system.\n    This platform-independent boids implementation by  Christopher Klineincludes C++ source code and an Inventor-based binary executable demofor SGI machines. These boids support both flocking and obstacleavoidance.\n    An  After Dark screen saver module for Macintosh computersby  Simon Fraser. Thisvery nice package implements a parameterized version of boids includingseveral species of creatures (wasps, birds, fish, sheep...) based onaltering the parameters. There are control panels that allow you toexperiment with the parameters. For other sources of this software seeSimon&#39;s  AD page.\n    by  J\u00fcrgen Schmitz. Version 1.0 of a Windows application featuringthree distinct species of flocking birds and nice control panels foradjusting their parameters. See the  readme file for more information.\n    This is a screen saver for NeXT computers by  David Lambert based on theboids model. C code and related files are available for FTP. See the  readme file for details.\n    A screen saver for Windows by  Ric Colasanti. A-Quariumis a fish tank simulator somewhat related to boids. &#34;...a fish will tryto swim with a close neighbour if it is of the same species, and willtry to swim away if it is of a different species. The behaviour of thefish tank is an emergent property of all the individual fishactions...&#34;\n    There is an implementation of boids for  MAX,an interactive real-time graphic programming environment, from  IRCAM and  Opcode.\n    This Windows 3.1 software originally accompanied the book  ArtificialLife Lab by  RudyRucker, Waite Group Press, 1993, now out of print. It includes animplementation of boids and related ALife models.\n        This is an application for a PowerPC Macintosh using QD3D. Otherversions exist for 68000 Macs with FPU, and as After Dark modules. Seethe main page by  Stone(Ishihama Yoshiaki) for other alife-related Mac and Java software.\n    Mattias Fagerlund wrote thisvery nice 2D implementation of boids for Windows 95 or WindowsNT andprovides both executable and source code. A screen shot on the web pageshows the interactive slider controls and a large flock flying aroundseveral obstacles.\n    A boids implementation by Stephen Coy has been included in the  DirectX sample code sinceversion 5. Stephen suggests that better source code is included with  DMBoids the DirectMusic demo based on boids.\n    A boids demo based on Christopher Kline&#39;s implementation (seeabove) is included in  Eric Powers&#39;sOpenGL/OpenInventor tool called  Apprentice which is free fornon-commercial, educational use.\n    By  David S. Hooper, Cool School simulates a school of fish andpredators using behavioral modeling. The O(n )cost of the naive boids algorithm is reduced by by subdividing thepopulation into a hierarchy of &#34;subschools&#34;. He reports running atinteractive rates with 32 subschools each containing 33 fish on a200MHz Pentium-class machine. Cool School was developed as part of the  Virtual Whale projectmentioned above.\n    A 1997 class project at Stanford by Chris Quartetti and Eng-ShienWu, includes a movie file showing flocking and collision avoidance, andC++ source code.\n    Anthony Steed(of University College London) developed the first two implementationsto compare VRML and Java3D, and the third to test the DIVE multi-userVR system. Source is includes for all three.\n    A commercial plug-in from   Northern Lights Productionsfor the  Electric Imageanimation system, creates herds and flocks of animated characters.\n    Keith Wiley createdthese Mac applications to simulate extremely large swarm-likepopulations, using modifications of the basic boid algorithms. See alsohis  FlockWith Obstacles applet.\n    Richard Lowe wrote this boids implementation in Visual Basic andprovided the source code at   PlanetSourceCode&#39;s VBrepository. (I have not seen it run but:) It apparently providesfor interactive specification of obstacles.\n    Robert Platt wrote aboids implementation as a Windows application for a Final Year Projectin college. The original version used Direct3D and he later rewrote itto use  OpenGL. Binaries and sourceare available for download from his page.\n    Olcay Cirit wrote this 2dshooter game based on boids. It runs under Windows 95, 98, and NT andis available for free download. You can shot at the flocking birds, butwatch out, because they can shoot back! And since they are a flock,they can make coordinated group attacks.\n    Bill Powersdeveloped these models of &#34;people moving in relation to other peopleand things&#34; as part of a suite of (Windows PC based) demonstrations ofhis  PerceptualControl Theory. Powers and his colleagues in the  Control Systems Group seek tomodel and understanding the purposeful behavior of living organisms.\n    James Greenbankwrote this ecological simulation of a three species system usingindividual-based local rules. It is written as a Java application. Thispage contains links to a paper, the source code and bothplatform-independent and Windows-specific executables.\n    a StarLogoT implementation of flocking from  Connected Mathematics   Includes links to a movie of the simulation and apage of  background.\n    John Kundert-Gibbs wrotethis flocking plug-in for   Mayain its scripting language  . It is available at the  repository.\n    GregJohnson wrote this boids code to use with the  Persistence of Vision Raytracer, thepage contains links to the code, a movie, and some diagrams of thesteering force vectors used in the boids model.\n  Lexicological note: in addition to common terms like  flock, herd, and  school, English has a rich history ofspecificwords to describe groups of various animals, sometimes known as  collectivenouns or  venereal terms. These words were used morefrequentlywhen hunting wild animals was a major source of food. For an amusingdiscussion of these words see the book  AnExaltation of Larksby James Lipton (Viking Penguin, 1993, ISBN0140170960). Here are some web pages that provide similar information:  ...\n    Send comments to  Craig Reynolds&lt; cwr@red3d.com&gt;  visitors since June 29, 1995 Last update: September 6, 2001", "posttime": "2020-05-03 05:03:56", "tags": "\u7b97\u6cd5,\u6d8c\u73b0,algorithm,\u6a21\u578b,boids", "title": "Boids\u7b97\u6cd5--\u6d8c\u73b0\u884c\u4e3a\u548c\u6742\u97f3", "title_en": "Boids Algorithm \u2013 Emergent behaviour and murmuration", "transed": 1, "url": "http://www.red3d.com/cwr/boids/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u7b97\u6cd5", "\u6d8c\u73b0", "algorithm", "\u6a21\u578b", "boids"]}, {"category": "", "categoryclass": "", "imagename": "fc70034fa6c461fc52b55826a993d5fe.jpg", "infoid": 1000411, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e16\u754c\u5386\u53f2\u4e0a\u51e0\u4e4e\u6ca1\u6709\u6bd4\u65e0\u7ebf\u7535\u66f4\u91cd\u8981\u7684\u53d1\u660e\u4e86\u3002\n\u867d\u7136\u8fd1\u5e74\u6765\u6536\u97f3\u673a\u53ef\u80fd\u6ca1\u6709\u7535\u89c6\u6216\u4e92\u8054\u7f51\u90a3\u4e48\u53d7\u6b22\u8fce\uff0c\u4f46\u53ef\u4ee5\u8bf4\u5b83\u662f\u7b2c\u4e00\u4e2a\u5728\u4eba\u4eec\u751f\u6d3b\u4e2d\u626e\u6f14\u91cd\u8981\u89d2\u8272\u7684\u7535\u5b50\u8bbe\u5907\u3002\n\u5e7f\u64ad\u662f\u4e16\u754c\u4e0a\u7b2c\u4e00\u6b21\u542c\u5230\u82f1\u56fd\u5411\u5fb7\u56fd\u5ba3\u6218\u7684\u5730\u65b9\uff0c\u5965\u68ee\u00b7\u5a01\u5c14\u65af\u5728\u90a3\u91cc\u610f\u5916\u5730\u611a\u5f04\u4e86\u516c\u4f17\uff0c\u8ba9\u4ed6\u4eec\u76f8\u4fe1\u5728\u4ed6\u7684\u8fde\u7eed\u5267\u201c\u4e16\u754c\u5927\u6218\u201d\u4e2d\uff0c\u4e00\u573a\u771f\u6b63\u7684\u5916\u661f\u4eba\u5165\u4fb5\u6b63\u5728\u8fdb\u884c\u4e2d\uff0c\u5e74\u8f7b\u4eba\u4e5f\u662f\u5728\u90a3\u91cc\u7b2c\u4e00\u6b21\u542c\u5230\u6bd4\u5229\u00b7\u9ed1\u5229(Billy Haley)\u7684\u6447\u6eda\u5168\u5929\u5019\u5411\u4e16\u754c\u4f20\u64ad\u6d41\u884c\u97f3\u4e50\u3002\n\u4f46\u5b83\u4e0d\u4ec5\u4ec5\u662f\u4e00\u79cd\u542c\u89c9\u5a92\u4ecb\u3002\u5c31\u50cf\u6240\u6709\u91cd\u8981\u7684\u6280\u672f\u4e00\u6837\uff0c\u8bbe\u8ba1\u5728\u5176\u53d1\u5c55\u8fc7\u7a0b\u4e2d\u8d77\u5230\u4e86\u81f3\u5173\u91cd\u8981\u7684\u4f5c\u7528\u3002\n\u5728\u6536\u97f3\u673a\u8fd9\u4e9b\u5e74\u6765\u4e0d\u65ad\u53d8\u5316\u7684\u5f62\u5f0f\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5b66\u5230\u5f88\u591a\u5173\u4e8e20\u4e16\u7eaa\u73b0\u4ee3\u8bbe\u8ba1\u7684\u77e5\u8bc6\u3002\n\u4ece\u65e9\u671f\u5de8\u5927\u7684\u7ea2\u6728\u6a71\u67dc\u523020\u4e16\u7eaa50\u5e74\u4ee3\u7684\u5eb8\u4fd7\u5e03\u4ec0\u578b\u53f7\uff0c\u4ece\u677e\u4e0b\u72b9\u592a\u4eba\u533a\u7684\u7206\u7834\u5668\u5230\u7b28\u91cd\u7684\u7d22\u5c3c\u8f66\u8f7d\u7acb\u4f53\u58f0\u97f3\u54cd\uff0c\u76f4\u5230\u4eca\u5929\uff0c\u6536\u97f3\u673a\u5f80\u5f80\u53ea\u662f\u7b14\u8bb0\u672c\u7535\u8111\u6216\u624b\u673a\u4e0a\u7684\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002\n\u7ebd\u7ea6\u5e93\u73c0\u00b7\u4f11\u4f0a\u7279\u535a\u7269\u9986(Cooper Hewitt Museum)\u4e3e\u529e\u4e86\u4e00\u573a\u65b0\u7684\u5c55\u89c8\uff0c\u5e86\u795d\u8bbe\u8ba1\u4e0e\u5e7f\u64ad\u4e4b\u95f4\u7684\u8fd9\u79cd\u8054\u7cfb\u3002\n\u8fd9\u672c\u4e66\u540d\u4e3a\u201c\u6536\u97f3\u673a\u7684\u4e16\u754c\u201d\uff0c\u8bb2\u8ff0\u4e86\u8bbe\u8ba1\u754c\u662f\u5982\u4f55\u5f71\u54cd\u8fd9\u4e00\u65e5\u5e38\u7528\u54c1\u7684\uff0c\u4ee5\u53ca\u6536\u97f3\u673a\u5728\u4eba\u4eec\u751f\u6d3b\u4e2d\u7684\u91cd\u8981\u6027\u3002\n\u5e93\u73c0\u00b7\u4f11\u4f0a\u7279(Cooper Hewitt)\u526f\u9986\u957f\u8f9b\u897f\u5a05\u00b7\u7279\u7f57\u666e(Cynthia Trope)\u8bf4\uff0c\u6536\u97f3\u673a\u771f\u7684\u6210\u4e86\u62d3\u5bbd\u4e2a\u4eba\u4e16\u754c\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5a31\u4e50\u5e7f\u64ad\u3001\u65b0\u95fb\u5e7f\u64ad\u4e0e\u4e16\u754c\u5176\u4ed6\u5730\u65b9\u8054\u7cfb\u8d77\u6765\u2026\u2026\u3002\u51e0\u4e4e\u662f\u77ac\u95f4\u7684\u3002&#34\uff1b\n\u7279\u7f57\u666e\u8bf4\uff0c\u4ece\u8865\u507f\u89d2\u5ea6\u770b\uff0c\u6536\u97f3\u673a\u7684\u5916\u89c2\u4e0e\u5b83\u4eec\u5e26\u8fdb\u4eba\u4eec\u5ba2\u5385\u7684\u4fe1\u606f\u4e00\u6837\u91cd\u8981\uff1a\u9664\u4e86\u53ea\u662f\u4e00\u4e2a\u5e7f\u64ad\u7cfb\u7edf\uff0c\u6536\u97f3\u673a\u8fd8\u5fc5\u987b\u5bf9\u56fd\u5185\u5e02\u573a\u6709\u5438\u5f15\u529b\uff0c\u56e0\u4e3a\u5b83\u662f\u5728\u4eba\u4eec\u7684\u5bb6\u91cc\u4f7f\u7528\u7684\u3002\n\u684c\u9762\u6536\u97f3\u673a\u548c\u66f4\u5927\u7684\u90e8\u4ef6\u5fc5\u987b\u5728\u5ba4\u5185\u5de5\u4f5c\uff0c\u5b83\u4eec\u5fc5\u987b\u6210\u4e3a\u73af\u5883\u7684\u4e00\u90e8\u5206\u3002\n\u968f\u7740\u65f6\u4ee3\u7684\u53d1\u5c55\uff0c\u6536\u97f3\u673a\u7684\u5916\u89c2\u548c\u5927\u5c0f\u968f\u7740\u6750\u6599\u548c\u7535\u5b50\u6280\u672f\u7684\u65b0\u53d1\u5c55\u53d1\u751f\u4e86\u5de8\u5927\u7684\u53d8\u5316\u3002\n\u5f53\u5b83\u4eec\u521a\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u4eba\u4eec\u66f4\u591a\u5730\u4ece\u73b0\u6709\u6750\u6599\u7684\u89d2\u5ea6\u6765\u770b\u5f85\u5b83\u4eec\uff0c\u901a\u5e38\u662f\u5728\u6728\u7bb1\u91cc\uff0c\u56de\u987e\u5386\u53f2\u51b3\u5b9a\u8bba\u7684\u98ce\u683c\u3002\u4f46\u5230\u4e8620\u4e16\u7eaa30\u5e74\u4ee3\uff0c\u50cf\u5851\u6599\u8fd9\u6837\u7684\u65b0\u6750\u6599\u786e\u5b9e\u8d77\u5230\u4e86\u4f5c\u7528\u3002\u5b83\u4eec\u5f88\u575a\u56fa\uff0c\u4f46\u4e5f\u53ef\u4ee5\u6210\u578b\uff0c\u53cd\u6620\u4e86\u4e00\u79cd\u73b0\u4ee3\u7684\u3001\u6d41\u7ebf\u578b\u7684\u65b9\u6cd5\u6765\u5e94\u7528\u8fd9\u9879\u65b0\u6280\u672f\u3002\n\u5bf9\u4e8e\u6bd4\u55bb\u6765\u8bf4\uff0c\u65e0\u7ebf\u7535\u7684\u53d8\u5316\u4e0d\u4ec5\u53cd\u6620\u4e86\u6280\u672f\u7684\u8fdb\u6b65\uff0c\u4e5f\u53cd\u6620\u4e86\u65f6\u4ee3\u7684\u8fdb\u6b65\uff0c\u53d7\u5230\u4e86\u5efa\u7b51\u548c\u827a\u672f\u4ee5\u53ca\u79d1\u5b66\u53d1\u5c55\u7684\u5f71\u54cd\u3002\n\u90a3\u91cc\u6709\u4e00\u53f0\u6f02\u4eae\u7684\u6469\u5929\u5927\u697c\u6536\u97f3\u673a\uff0c\u53ef\u4ee5\u8ffd\u6eaf\u523020\u4e16\u7eaa30\u5e74\u4ee3\u3002\u5b83\u975e\u5e38\u6709\u827a\u672f\u88c5\u9970\u98ce\u683c\uff0c\u771f\u6b63\u4ece\u5f53\u65f6\u7684\u5efa\u7b51\u4e2d\u5bfb\u627e\u7075\u611f\u3002\u8fd8\u67091964\u5e74\u751f\u4ea7\u7684Sapper&Amp\uff1bZanuso TS502\uff0c\u6709\u5404\u79cd\u9c9c\u8273\u7684\u989c\u8272\u53ef\u4f9b\u9009\u62e9\u3002\u7d22\u5c3c\u516c\u53f8\u751f\u4ea7\u7684TR620\u4fbf\u643a\u5f0f\u8896\u73cd\u6536\u97f3\u673a\u662f\u4e2a\u4eba\u7684\u6700\u7231\uff0c\u5b83\u786e\u5b9e\u7f29\u5c0f\u4e86\u4f53\u79ef\uff0c\u4f7f\u6536\u97f3\u673a\u6210\u4e3a\u771f\u6b63\u7684\u4e2a\u4eba\u8bbe\u5907\uff0c\u53ef\u4ee5\u653e\u5728\u53e3\u888b\u91cc\u3002\n\u6b63\u662f\u5728\u8fd9\u4e9b\u65e9\u671f\u7684\u4fbf\u643a\u5f0f\u6536\u97f3\u673a\u4e2d\uff0c\u6bd4\u5982TR620\uff0c\u4f60\u5f00\u59cb\u770b\u5230\u4eca\u5929\u5927\u90e8\u5206\u6280\u672f\u7684\u8d77\u6e90\u3002\n\u6676\u4f53\u7ba1\u5141\u8bb8\u8fd9\u4e9b\u5f62\u5f0f\u7684\u5c0f\u578b\u5316\uff0c\u56e0\u6b64\u5b83\u4eec\u53ef\u4ee5\u771f\u6b63\u6210\u4e3a\u4e2a\u4eba\u8bbe\u5907\u3002\u8fd9\u4e5f\u9002\u7528\u4e8e\u540e\u6765\u7684\u8bbe\u5907\uff0c\u5982MP3\u64ad\u653e\u5668\u3001\u624b\u673a\u548c\u6211\u4eec\u4eca\u5929\u643a\u5e26\u7684\u5176\u4ed6\u975e\u5e38\u5c0f\u7684\u8bbe\u5907\u3002\u65e0\u7ebf\u7535\u6280\u672f\u7684\u8fd9\u4e9b\u53d1\u5c55\u786e\u5b9e\u4f7f\u8fd9\u4e00\u5207\u6210\u4e3a\u53ef\u80fd\u3002\n\u968f\u7740\u6536\u97f3\u673a\u53d8\u6210\u4e3b\u5c4f\u5e55\u3001\u7f51\u7edc\u64ad\u653e\u5668\u6216\u58f0\u4e91\u94fe\u63a5\u4e0a\u7684\u56fe\u6807\uff0c\u672c\u6b21\u5c55\u89c8\u4e2d\u5c55\u51fa\u7684\u4f5c\u54c1\u5448\u73b0\u51fa\u4e00\u79cd\u8f9b\u9178\u7684\u611f\u89c9\uff1a\u5a31\u4e50\u5f80\u5f80\u662f\u58f0\u97f3\u548c\u6211\u4eec\u81ea\u5df1\u60f3\u8c61\u529b\u7684\u7ed3\u5408\u7684\u65f6\u4ee3\u7684\u9057\u7269\u3002\n\u7ebd\u7ea6\u5e93\u73c0\u00b7\u4f11\u4f0a\u7279\u535a\u7269\u9986\u6b63\u5728\u64ad\u653e\u201c\u65e0\u7ebf\u7535\u4e16\u754c\u201d\uff0c\u622a\u6b62\u65e5\u671f\u4e3a9\u67081\u65e5\u30022017\u5e7424\u65e5\u3002", "note_en": "There are few more important inventions in the history of the world than the radio.\n While in recent years it may have become less popular than television or the internet, it could be argued that the radio was the first electronic gadget to play a prominent part in people&#39;s lives.\n  Radio is where the world first heard Britain declare war on Germany, where Orson Welles accidentally fooled the public into believing a real alien invasion was under way in his &#34;War Of The Worlds&#34; serial and where young people first heard Billy Haley&#39;s &#34;Rock Around The Clock,&#34; spreading popular music around the world.\n  But it is not just an aural medium. Like all important pieces of technology, design has had an essential part to play in its evolution.\n  Within the radio&#39;s changing form over the years you can learn plenty about 20th century modern design.\n From the giant mahogany chests of the early days to the kitsch Bush models of the 1950s, Panasonic ghetto blasters to chunky Sony in-car stereos and up to today, where radio is so often just an app on a laptop or a phone.\n Celebrating this connection between design and radio is a new exhibition at the  Cooper Hewitt museum in New York.\n  Entitled &#34; The World Of Radio,&#34; it tells the story of how the design world impacted this every day item, and the importance of radio in people&#39;s lives.\n &#34;Radio really became a way of broadening one&#39;s personal world,&#34; says Cynthia Trope, Associate Curator at Cooper Hewitt. &#34;You could link to the rest of the world through entertainment broadcasts, news broadcasts... almost instantaneously.&#34;\n  From the offset, the look of a radio was as important as the information they brought into people&#39;s living rooms: &#34;Aside from being just a broadcast system, radio had to have an appeal to the domestic market, because it was used in people&#39;s homes,&#34; says Trope.\n &#34;Tabletop radios and larger pieces really had to work within interiors, they had to become part of the environment.&#34;\n As times moved on, the look and size of radios changed dramatically with new developments in materials and electronics.\n  &#34;When they first started they were viewed more in terms of available materials, often in wooden cases, looking back to a historicist style. But by the 1930s, new materials like plastics really played a part. They were tough but they could also be molded, reflecting a modern, streamlined approach to this new technology.&#34;\n  For Trope, the changes in radio reflect not only advances in technology, but also the times, taking influence from architecture and art, as well as scientific developments.\n &#34;There&#39;s a wonderful skyscraper radio that dates back to the 1930s. It&#39;s very art deco and really looks towards the architecture of its time for inspiration. There&#39;s also the Sapper &amp; Zanuso TS502 from 1964, which came in all sorts of bright colors. The TR620 portable pocket radio by Sony is a personal favorite, it really reduced the size and made radio a really personal device that could fit in a pocket.&#34;\n  It&#39;s in these early portable radios, such as the TR620 that you start to see the genesis of much of today&#39;s technology.\n &#34;Transistors allowed the miniaturization of these forms, so they could really become personal devices. This goes through to later devices like MP3 players, phones and other really small devices that we carry today. These developments in radio technology really made all that possible.&#34;\n As radio becomes little more than an icon on a homescreen, web player, or Soundcloud link, the pieces featured in this exhibition take on a kind of poignancy: relics from an era when entertainment was so often a combination of sound and our own imagination.\n &#34;The World of Radio&#34; is on at the Cooper Hewitt museum in New York until Sept. 24, 2017.", "posttime": "2020-05-03 05:03:29", "tags": "\u6536\u97f3\u673a,secret,radio", "title": "\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u6536\u97f3\u673a\u79d8\u53f2(2017)", "title_en": "The incredible secret history of the radio (2017)", "transed": 1, "url": "http://edition.cnn.com/2017/07/27/design/history-of-radios-cooper-hewitt-museum/index.html", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u6536\u97f3\u673a", "secret", "radio"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000410, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728WWDC 2015\u4e0a\uff0cDave Abrahams\u5728\u4e00\u4e2a\u975e\u5e38\u6709\u5f71\u54cd\u529b\u7684\u4e3b\u9898\u4e3a\u201cSWIFT\u4e2d\u9762\u5411\u534f\u8bae\u7684\u7f16\u7a0b\u201d\u7684\u4f1a\u8bae\u4e0a\u89e3\u91ca\u4e86\u5982\u4f55\u4f7f\u7528SWIFT\u7684\u534f\u8bae\u6765\u514b\u670d\u7c7b\u7684\u4e00\u4e9b\u7f3a\u70b9\u3002\u4ed6\u5efa\u8bae\u8fd9\u6837\u4e00\u6761\u89c4\u5219\uff1a\u201c\u4e0d\u8981\u4ece\u4e0a\u8bfe\u5f00\u59cb\u3002\u4ece\u534f\u8bae\u5f00\u59cb\u3002\u201c\u3002\n\u4e3a\u4e86\u8bf4\u660e\u8fd9\u4e00\u70b9\uff0cDave\u63cf\u8ff0\u4e86\u4e00\u79cd\u9762\u5411\u534f\u8bae\u7684\u539f\u59cb\u7ed8\u56fe\u5e94\u7528\u7a0b\u5e8f\u65b9\u6cd5\u3002\u8be5\u793a\u4f8b\u4ece\u51e0\u4e2a\u57fa\u672c\u4f53\u5f62\u72b6\u5f00\u59cb\u5de5\u4f5c\uff1a\n\u534f\u8bae\u53ef\u7ed8\u5236{}\u7ed3\u6784\u591a\u8fb9\u5f62\uff1a\u53ef\u7ed8\u5236{var\u89d2\u70b9\uff1a[CGPoint]=[]}\u7ed3\u6784\u5706\uff1a\u53ef\u7ed8\u5236{var center\uff1aCGPoint\u53d8\u91cf\u534a\u5f84\uff1aCGFloat}\u7ed3\u6784\u56fe\uff1a\u53ef\u7ed8\u5236{var\u5143\u7d20\uff1a[\u53ef\u7ed8\u5236]=[]}\u3002\n\u5728\u4f20\u9012\u5bf9\u8c61\u65f6\uff0c\u5bf9\u8c61\u7684\u5f15\u7528\u8bed\u4e49\u589e\u52a0\u4e86\u590d\u6742\u6027\u3002\u5728\u4e00\u4e2a\u4f4d\u7f6e\u66f4\u6539\u5bf9\u8c61\u7684\u5c5e\u6027\u53ef\u80fd\u4f1a\u5f71\u54cd\u6709\u6743\u8bbf\u95ee\u8be5\u5bf9\u8c61\u7684\u5176\u4ed6\u4ee3\u7801\u3002\u5e76\u53d1\u6027\u9700\u8981\u9501\u5b9a\uff0c\u8fd9\u589e\u52a0\u4e86\u5927\u91cf\u7684\u590d\u6742\u6027\u3002\n\u901a\u8fc7\u7ee7\u627f\u91cd\u7528\u4ee3\u7801\u662f\u5f88\u8106\u5f31\u7684\u3002\u7ee7\u627f\u8fd8\u5c06\u63a5\u53e3\u8026\u5408\u5230\u5b9e\u73b0\uff0c\u8fd9\u4f7f\u5f97\u91cd\u7528\u66f4\u52a0\u56f0\u96be\u3002\u8fd9\u662f\u5b83\u81ea\u5df1\u7684\u4e3b\u9898\uff0c\u4f46\u5373\u4f7f\u662fOO\u7a0b\u5e8f\u5458\u4e5f\u4f1a\u544a\u8bc9\u60a8\u201c\u7ec4\u5408\u80dc\u8fc7\u7ee7\u627f\u201d\u3002\n\u5bf9\u4e8e\u5b50\u7c7b\uff0c\u5f88\u96be\u7cbe\u786e\u8bc6\u522b\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u4f7f\u7528NSObject.isEquity()\u65f6\uff0c\u5fc5\u987b\u6ce8\u610f\u4ec5\u4e0e\u517c\u5bb9\u7c7b\u578b\u8fdb\u884c\u6bd4\u8f83\u3002\u534f\u8bae\u4f7f\u7528\u6cdb\u578b\u7cbe\u786e\u6807\u8bc6\u7c7b\u578b\u3002\n\u4e3a\u4e86\u5904\u7406\u5b9e\u9645\u7ed8\u5236\uff0c\u6dfb\u52a0\u4e86\u4e00\u4e2a\u6e32\u67d3\u5668\u534f\u8bae\uff0c\u8be5\u534f\u8bae\u63cf\u8ff0\u4e86\u57fa\u672c\u7ed8\u5236\u64cd\u4f5c\uff1a\n\u534f\u8bae\u6e32\u67d3\u5668{\u51fd\u6570\u79fb\u52a8(\u81f3p\uff1acgPoint)\u51fd\u6570\u7ebf(\u81f3p\uff1acgPoint)\u51fd\u6570\u5f27(\u4e2d\u5fc3\uff1acgPoint\uff0c\u534a\u5f84\uff1acgFloat\uff0c\u8d77\u59cb\u89d2\u5ea6\uff1acgFloat\uff0c\u7ed3\u675f\u89d2\u5ea6\uff1acgFloat)}\u3002\n\u534f\u8bae\u53ef\u7ed8\u5236{\u51fd\u6570\u7ed8\u5236(_renender\uff1arenender)}\u6269\u5c55\u591a\u8fb9\u5f62\uff1a\u53ef\u7ed8\u5236{\u51fd\u6570\u7ed8\u5236(_\u6e32\u67d3\u5668\uff1a\u6e32\u67d3\u5668){\u6e32\u67d3\u5668\u3002\u79fb\u52a8(\u5230\uff1a\u89d2\u843d)\u3002\u6700\u540e\uff01)\u3002\u5bf9\u4e8e\u89d2\u4e2d\u7684p{\u6e32\u67d3\u5668\u3002Line(to\uff1ap)}\u6269\u5c55\u5706\uff1a\u53ef\u7ed8\u5236{\u51fd\u6570\u7ed8\u5236(\u6e32\u67d3\u5668\uff1a\u6e32\u67d3\u5668){\u6e32\u67d3\u5668\u3002\u5706\u5f27(\u5728\uff1a\u4e2d\u5fc3\uff0c\u534a\u5f84\uff1a\u534a\u5f84\uff0c\u5f00\u59cb\u89d2\u5ea6\uff1a0.0\uff0c\u7ed3\u675f\u89d2\u5ea6\uff1a\u4e24\u4e2a\u5706\u70b9)}}\u6269\u5c55\u56fe\uff1a\u53ef\u7ed8\u5236{\u51fd\u6570\u7ed8\u5236(\u6e32\u67d3\u5668\uff1a\u6e32\u67d3\u5668){\u5bf9\u4e8e\u5143\u7d20{f.\u3002\u7ed8\u5236(\u6e32\u67d3\u5668)}\u3002\n\u8fd9\u4f7f\u5f97\u5b9a\u4e49\u4e0d\u540c\u7684\u6e32\u67d3\u5668\u6210\u4e3a\u53ef\u80fd\uff0c\u8fd9\u4e9b\u6e32\u67d3\u5668\u53ef\u4ee5\u8f7b\u677e\u5730\u5904\u7406\u7ed9\u5b9a\u7684\u7c7b\u578b\u3002\u4e00\u4e2a\u4e3b\u8981\u5356\u70b9\u662f\u5b9a\u4e49\u6d4b\u8bd5\u6e32\u67d3\u5668\u7684\u80fd\u529b\uff0c\u5b83\u5141\u8bb8\u60a8\u901a\u8fc7\u6bd4\u8f83\u5b57\u7b26\u4e32\u6765\u9a8c\u8bc1\u7ed8\u56fe\uff1a\nstruct\u6d4b\u8bd5\u6e32\u67d3\u5668\uff1a\u6e32\u67d3\u5668{func move(to p\uff1acgpoint){print(&#34\uff1bmoveto(\\(p.\u3002x)\u3001\\(p.\u3002y))&#34\uff1b)}\u51fd\u6570\u884c(\u5230p\uff1aCGPoint){\u6253\u5370(&#34\uff1blineto(\\(p.\u3002x)\u3001\\(p.\u3002y))&#34\uff1b)}\u51fd\u6570\u5706\u5f27(\u4e2d\u5fc3\uff1aCGPoint\uff0c\u534a\u5f84\uff1aCGFloat\uff0c\u8d77\u59cb\u89d2\u5ea6\uff1aCGFloat\uff0c\u7ed3\u675f\u89d2\u5ea6\uff1aCGFloat){Print(&#34\uff1bArcat(\\(Center)\uff0c\u534a\u5f84\uff1a\\(\u534a\u5f84)\uff0c&#34\uff1b+&#34\uff1b\u5f00\u59cb\u89d2\u5ea6\uff1a\\(\u5f00\u59cb\u89d2\u5ea6)\uff0c\u7ed3\u675f\u89d2\u5ea6\uff1a\\(\u7ed3\u675f\u89d2\u5ea6))&#34\uff1b)}}\u3002\n\u6269\u5c55CGContext\uff1a\u6e32\u67d3\u5668{//CGContext\u5df2\u6709`Move(To\uff1aCGPoint)`\u51fd\u6570\u884c(To p\uff1aCGPoint){addLine(To\uff1ap)}\u51fd\u6570\u5f27(\u4e2d\u5fc3\uff1aCGPoint\uff0c\u534a\u5f84\uff1aCGFloat\uff0c\u8d77\u59cb\u89d2\u5ea6\uff1aCGFloat\uff0c\u7ed3\u675f\u89d2\u5ea6\uff1aCGFloat){addArc(\u4e2d\u5fc3\uff1a\u4e2d\u5fc3\uff0c\u534a\u5f84\uff1a\u534a\u5f84\uff0c\u8d77\u59cb\u89d2\u5ea6\uff1a\u8d77\u59cb\u89d2\u5ea6\uff0c\u7ed3\u675f\u89d2\u5ea6\uff1a\u7ed3\u675f\u89d2\u5ea6\uff0c\u987a\u65f6\u9488\uff1a\u771f)}}\u3002\n\u6269\u5c55\u6e32\u67d3\u5668{\u51fd\u6570\u5706(\u5728\u4e2d\u5fc3\uff1aCGPoint\uff0c\u534a\u5f84\uff1aCGFloat){arc(\u5728\uff1a\u4e2d\u5fc3\uff0c\u534a\u5f84\uff1a\u534a\u5f84\uff0c\u8d77\u59cb\u89d2\u5ea6\uff1a0\uff0c\u7ed3\u675f\u89d2\u5ea6\uff1a\u4e24\u4e2a\u5706\u70b9)}}\u3002\n\u6211\u8ba4\u4e3a\u8fd9\u79cd\u65b9\u6cd5\u76f8\u5f53\u6709\u8bf4\u670d\u529b\u3002\u5b83\u7684\u53ef\u6d4b\u6027\u8981\u5f3a\u5f97\u591a\u3002\u5b83\u8fd8\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u63d0\u4f9b\u5355\u72ec\u7684\u6e32\u67d3\u5668\u6765\u4ee5\u4e0d\u540c\u65b9\u5f0f\u89e3\u91ca\u6570\u636e\u3002\u800c\u4e14\uff0c\u503c\u7c7b\u578b\u5de7\u5999\u5730\u907f\u5f00\u4e86\u9762\u5411\u5bf9\u8c61\u7248\u672c\u53ef\u80fd\u4f1a\u9047\u5230\u7684\u8bb8\u591a\u95ee\u9898\u3002\n\u5c3d\u7ba1\u6709\u8fd9\u4e9b\u6539\u8fdb\uff0c\u4f46\u5728\u9762\u5411\u534f\u8bae\u7684\u7248\u672c\u4e2d\uff0c\u903b\u8f91\u548c\u526f\u4f5c\u7528\u4ecd\u7136\u7d27\u5bc6\u8026\u5408\u3002Polygon.raw\u505a\u4e24\u4ef6\u4e8b\uff1a\u5b83\u5c06\u591a\u8fb9\u5f62\u8f6c\u6362\u4e3a\u591a\u6761\u7ebf\uff0c\u7136\u540e\u5448\u73b0\u8fd9\u4e9b\u7ebf\u3002\u56e0\u6b64\uff0c\u5f53\u9700\u8981\u6d4b\u8bd5\u903b\u8f91\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528TestRenender-\u5c3d\u7ba1WWDC Talk\u6697\u793a\u4e86\u8fd9\u4e00\u70b9\uff0c\u4f46\u5b83\u662f\u4e00\u79cd\u6a21\u62df\u3002\n\u6269\u5c55\u591a\u8fb9\u5f62\uff1a\u53ef\u7ed8\u5236{\u51fd\u6570\u7ed8\u5236(_\u6e32\u67d3\u5668\uff1a\u6e32\u67d3\u5668){\u6e32\u67d3\u5668\u3002\u79fb\u52a8(\u5230\uff1a\u89d2\u843d)\u3002\u6700\u540e\uff01)\u3002\u5bf9\u4e8e\u89d2\u4e2d\u7684p{\u6e32\u67d3\u5668\u3002\u7ebf\u8def(\u81f3\uff1aP)}\u3002\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u903b\u8f91\u548c\u6548\u679c\u5206\u6210\u4e0d\u540c\u7684\u6b65\u9aa4\u6765\u5c06\u5b83\u4eec\u5206\u5f00\u3002\u8ba9\u6211\u4eec\u58f0\u660e\u8868\u793a\u5e95\u5c42\u64cd\u4f5c\u7684\u503c\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u4f7f\u7528MOVE\u3001LINE\u548cARC\u7684\u6e32\u67d3\u5668\u534f\u8bae\u3002\n\u679a\u4e3e\u8def\u5f84\uff1aHasable{struct Arc\uff1aHasable{var center\uff1aCGPoint var Radius\uff1aCGFloat var startangle\uff1aCGFloat var endangle\uff1aCGFloat}\u7ed3\u6784\u7ebf\uff1aHasable{var start\uff1aCGPoint var end\uff1aCGPoint}//\u66ff\u6362`Arc(at\uff1aCGPoint\uff0cRadius\uff1aCGFloat\uff0cstartangle\uff1aCGFloat\uff0cendangle\uff1aCGFloat)`\u6848\u4f8b\u5706\u5f27(Arc)//\u66ff\u6362`\u3002\n\u73b0\u5728\uff0cDrawables\u53ef\u4ee5\u8fd4\u56de\u4e00\u7ec4\u7528\u4e8e\u7ed8\u5236\u5b83\u4eec\u7684\u8def\u5f84\uff0c\u800c\u4e0d\u662f\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\uff1a\n\u534f\u8bae\u53ef\u7ed8\u5236{", "note_en": "At WWDC 2015, in a very influential session titled   Protocol-Oriented Programming in Swift, Dave Abrahams explained how Swift\u2019s protocols can be used to overcome some shortcomings of classes. He suggested this rule: \u201cDon\u2019t start with a class. Start with a protocol\u201d.\n To illustrate the point, Dave described a protocol-oriented approach to a primitive drawing app. The example worked from a few of primitive shapes:\n protocol  Drawable  {} struct  Polygon :  Drawable  {  var  corners :  [ CGPoint ]  =  [] } struct  Circle :  Drawable  {  var  center :  CGPoint  var  radius :  CGFloat } struct  Diagram :  Drawable  {  var  elements :  [ Drawable ]  =  [] }\n  The reference semantics of objects add complexity when passing objects around. Changing a property of an object in one place can affect other code that has access to that object. Concurrency requires locking, which adds tons of complexity.\n Reusing code via inheritance is fragile. Inheritance also couples interfaces to implementations, which makes reuse more difficult. This is its own topic, but even OO programmers will tell you to prefer \u201ccomposition over inheritance\u201d.\n With subclasses, it\u2019s difficult to precisely identify types. e.g. with  NSObject.isEqual(), you must be careful to only compare against compatible types. Protocols work with generics to precisely identify types.\n To handle the actual drawing, a  Renderer protocol was added that describes the primitive drawing operations:\n protocol  Renderer  {  func  move ( to  p :  CGPoint )  func  line ( to  p :  CGPoint )  func  arc ( at  center :  CGPoint ,  radius :  CGFloat ,  startAngle :  CGFloat ,  endAngle :  CGFloat ) }\n  protocol  Drawable  {  func  draw ( _  renderer :  Renderer ) } extension  Polygon  :  Drawable  {  func  draw ( _  renderer :  Renderer )  {  renderer . move ( to :  corners . last !)  for  p  in  corners  {  renderer . line ( to :  p )  }  } } extension  Circle  :  Drawable  {  func  draw ( renderer :  Renderer )  {  renderer . arc ( at :  center ,  radius :  radius ,  startAngle :  0.0 ,  endAngle :  twoPi )  } } extension  Diagram  :  Drawable  {  func  draw ( renderer :  Renderer )  {  for  f  in  elements  {  f . draw ( renderer )  }  } }\n This made it possible to define different renderers that worked easily with the given types. A main selling point was the ability to define a test renderer, which let you verify drawing by comparing strings:\n struct  TestRenderer  :  Renderer  {  func  move ( to  p :  CGPoint )  {  print ( &#34;moveTo( \\( p . x ) ,  \\( p . y ) )&#34; )  }  func  line ( to  p :  CGPoint )  {  print ( &#34;lineTo( \\( p . x ) ,  \\( p . y ) )&#34; )  }  func  arc ( at  center :  CGPoint ,  radius :  CGFloat ,  startAngle :  CGFloat ,  endAngle :  CGFloat )  {  print ( &#34;arcAt( \\( center ) , radius:  \\( radius ) ,&#34;  +  &#34; startAngle:  \\( startAngle ) , endAngle:  \\( endAngle ) )&#34; )  } }\n  extension  CGContext  :  Renderer  {  // CGContext already has `move(to: CGPoint)`  func  line ( to  p :  CGPoint )  {  addLine ( to :  p )  }  func  arc ( at  center :  CGPoint ,  radius :  CGFloat ,  startAngle :  CGFloat ,  endAngle :  CGFloat )  {  addArc (  center :  center ,  radius :  radius ,  startAngle :  startAngle ,  endAngle :  endAngle ,  clockwise :  true  )  } }\n  extension  Renderer  {  func  circle ( at  center :  CGPoint ,  radius :  CGFloat )  {  arc ( at :  center ,  radius :  radius ,  startAngle :  0 ,  endAngle :  twoPi )  } }\n I think that approach is pretty compelling. It\u2019s much more testable. It also allows us to interpret the data differently by providing separate renderers. And value types neatly sidestep a number of problems that an object-oriented version would have.\n  Despite the improvements, logic and side effects are still tightly coupled in the protocol-oriented version.  Polygon.draw does 2 things: it converts the polygon into a number of lines and then renders those lines. So when it comes time to test the logic, we need to use  TestRenderer\u2014which, despite what the WWDC talk implies, is a mock.\n extension  Polygon  :  Drawable  {  func  draw ( _  renderer :  Renderer )  {  renderer . move ( to :  corners . last !)  for  p  in  corners  {  renderer . line ( to :  p )  }  } }\n We can separate logic and effects here by turning them into separate steps. Instead of the  Renderer protocol, with  move,  line, and  arc, let\u2019s declare value types that represent the underlying operations.\n enum  Path :  Hashable  {  struct  Arc :  Hashable  {  var  center :  CGPoint  var  radius :  CGFloat  var  startAngle :  CGFloat  var  endAngle :  CGFloat  }  struct  Line :  Hashable  {  var  start :  CGPoint  var  end :  CGPoint  }  // Replacing `arc(at: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat)`  case  arc ( Arc )  // Replacing `move(to: CGPoint)` and `line(to: CGPoint)`  case  line ( Line ) }\n Now, instead of calling those methods,  Drawables can return a set of  Paths that are used to draw them:\n protocol  Drawable  {  var  paths :  Set &lt; Path &gt;  {  get  } } extension  Polygon  :  Drawable  {  var  paths :  Set &lt; Path &gt;  {  return  Set ( zip ( corners ,  corners . dropFirst ()  +  corners . prefix ( 1 ))  . map ( Path . Line . init )  . map ( Path . line ))  } } extension  Circle  :  Drawable  {  var  paths :  Set &lt; Path &gt;  {  return  [. arc ( Path . Arc ( center :  center ,  radius :  radius ,  startAngle :  0.0 ,  endAngle :  twoPi ))]  } } extension  Diagram  :  Drawable  {  var  paths :  Set &lt; Path &gt;  {  return  elements  . map  {  $0 . paths  }  . reduce ( into :  Set  ...\n  extension  CGContext  {  func  draw ( _  arc :  Path . Arc )  {  addArc (  center :  arc . center ,  radius :  arc . radius ,  startAngle :  arc . startAngle ,  endAngle :  arc . endAngle ,  clockwise :  true  )  }  func  draw ( _  line :  Path . Line )  {  move ( to :  line . start )  addLine ( to :  line . end )  }  func  draw ( _  paths :  Set &lt; Path &gt;)  {  for  path  in  paths  {  switch  path  {  case  let  . arc ( arc ):  draw ( arc )  case  let  . line ( line ):  draw ( line )  }  }  } }\n  extension  Path  {  static  func  circle ( at  center :  CGPoint ,  radius :  CGFloat )  -&gt;  Path  {  return  . arc ( Path . Arc ( center :  center ,  radius :  radius ,  startAngle :  0 ,  endAngle :  twoPi ))  } }\n This works just the same as before and requires roughly the same amount of code. But we\u2019ve introduced a boundary that lets us separate two parts of the system. That boundary lets us:\n We don\u2019t need  TestRenderer anymore. We can verify that a  Drawable will be drawn correctly testing the values return from its  paths property.  Path is  Equatable, so this is a simple test.\n let  polygon  =  Polygon ( corners :  [( x :  0 ,  y :  0 ),  ( x :  6 ,  y :  0 ),  ( x :  3 ,  y :  6 )]) let  paths :  Set &lt; Path &gt;  =  [  . line ( Line ( from :  ( x :  0 ,  y :  0 ),  to :  ( x :  6 ,  y :  0 ))),  . line ( Line ( from :  ( x :  6 ,  y :  0 ),  to :  ( x :  3 ,  y :  6 ))),  . line ( Line ( from :  ( x :  3 ,  y :  6 ),  to :  ( x :  0 ,  y :  0 ))), ] XCTAssertEqual ( polygon . paths ,  paths )\n With the value-oriented approach, we can take our  Set&lt;Path&gt; and transform it directly. Say you wanted to flip the result horizontally. You calculate the size and then return a new  Set&lt;Path&gt; with flipped coordinates.\n In the protocol-oriented approach, it would be somewhat difficult to transform our drawing steps. To flip horizontally, you need to know the final width. Since that width isn\u2019t known ahead of time, you\u2019d need to write a  Renderer that (1) saved all the calls to  move,  line, and  arc and then (2) pass it another  Render to render the flipped result.\n (This theoretical renderer is creating the same boundary we created with the value-oriented approach. Step 1 corresponds to our  .paths method; step 2 corresponds to  draw(Set&lt;Paths&gt;).)\n Say you have a complex  Diagram that isn\u2019t drawing correctly. You drop into the debugger and find where the  Diagram is drawn. How do you find the problem?\n If you\u2019re using the protocol-oriented approach, you\u2019ll need to create a  TestRenderer (if it\u2019s available outside your tests) or you\u2019ll need to use a real renderer and actually render somewhere. Inspecting that data will be difficult.\n But if you\u2019re using the value-oriented approach, you only need to call  paths to inspect this information. Debuggers can display values much more easily than effects.\n The boundary adds another semantic layer, which opens up additional possibilities for testing, transformation, and inspection.\n I\u2019ve used this approach on a number of projects and found it immensely helpful. Even with a simple example like the one given here, values have a number of benefits. But those benefits become much more obvious and helpful when working in larger, more complex systems.\n If you\u2019d like to see a real world example, check out  PersistDB, the Swift persistence library I\u2019ve been working on. The public API presents  Querys,  Predicates, and  Expressions. These are reduced to  SQL.Querys,  SQL.Predicates, and  SQL.Expressions. And each of those is reduced to a  SQL, a value representing some actual SQL.", "posttime": "2020-05-03 04:19:48", "tags": "\u7f16\u7a0b,\u4ef7\u503c,oriented,\u7ed8\u5236,renderer", "title": "\u9762\u5411\u4ef7\u503c\u7684\u7f16\u7a0b", "title_en": "Value-Oriented Programming", "transed": 1, "url": "https://matt.diephouse.com/2018/08/value-oriented-programming/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u7f16\u7a0b", "\u4ef7\u503c", "oriented", "\u7ed8\u5236", "renderer"]}, {"category": "", "categoryclass": "", "imagename": "41c3e622df199dd3e9622d5c1ea0718f.png", "infoid": 1000409, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u96be\u4ee5\u7f6e\u4fe1\u7684\u4ea4\u6613\u3002\u5f15\u4eba\u5165\u80dc\u7684\u6d1e\u5bdf\u529b\u3002\u4e3a\u7cbe\u660e\u7684\u8d2d\u7269\u8005\u8bbe\u8ba1\u7684\u6bcf\u5468\u65f6\u4e8b\u901a\u8baf\u3002", "note_en": "Unbelievable deals. Fascinating insights. A weekly newsletter built for the savvy shopper.", "posttime": "2020-05-03 04:19:45", "tags": "discoverali,weekly,\u96be\u4ee5\u7f6e\u4fe1,newsletter", "title": "DiscoverAli-\u5ec9\u4ef7\u3001\u6709\u8da3\u4ea7\u54c1\u7684\u6bcf\u5468\u65f6\u4e8b\u901a\u8baf", "title_en": "DiscoverAli \u2013 A weekly newsletter of inexpensive, interesting products", "transed": 1, "url": "https://discoverali.com/?ref=HN0", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["weekly", "\u96be\u4ee5\u7f6e\u4fe1"]}, {"category": "", "categoryclass": "", "imagename": "9e510c6e23105b68f1aecd2161bc664b.png", "infoid": 1000408, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u7684\u8d8b\u52bf\u89c2\u5bdf\u5bb6\u6ce8\u610f\u5230\u4e9a\u9a6c\u900a\u4e0a1TB\u56fa\u6001\u786c\u76d8\u7684\u4ef7\u683c\u5927\u5e45\u4e0b\u964d\u3002\u4f60\u73b0\u5728\u53ea\u9700\u82b197.99\u7f8e\u5143\u5c31\u53ef\u4ee5\u4e70\u5230\u8bc4\u7ea7\u6700\u9ad8\u7684\u9a71\u52a8\u5668\u4e4b\u4e00\u3002\n\u552e\u4ef797.99\u7f8e\u5143\u7684Silicon Power 1TB\u56fa\u6001\u786c\u76d83D NAND\u652f\u6301TRIM\u3001\u5783\u573e\u6536\u96c6\u6280\u672f\u3001RAID\u548cECC(\u9519\u8bef\u68c0\u67e5\u4e0e\u7ea0\u6b63)\uff0c\u4ee5\u63d0\u4f9b\u4f18\u5316\u7684\u6027\u80fd\u548c\u589e\u5f3a\u7684\u53ef\u9760\u6027\uff0c\u5148\u8fdb\u7684SLC\u7f13\u5b58\u6280\u672f\u53ef\u63d0\u9ad8\u6027\u80fd\u5e76\u5ef6\u957f\u4f7f\u7528\u5bff\u547d\u3002\n\u4f46\u8fd9\u5e76\u4e0d\u662f\u552f\u4e00\u4e00\u5bb6\u5927\u5e45\u4e0b\u964d\u7684\u4ea7\u54c1\uff0c\u5176\u4ed6\u5236\u9020\u5546\u90fd\u5728\u6548\u4eff\uff0c\u5927\u5e45\u964d\u4ef7\u3002\nAce A55\u91c7\u7528\u5148\u8fdb\u76843D NAND\u95ea\u5b58\uff0c\u6bd4\u914d\u59072D NAND\u95ea\u5b58\u7684\u4f20\u7edf\u56fa\u6001\u786c\u76d8\u5177\u6709\u66f4\u9ad8\u7684\u53ef\u9760\u6027\u548c\u66f4\u9ad8\u7684\u7535\u6e90\u6548\u7387\u3002A55\u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u8010\u7528\u6027\u548c\u66f4\u957f\u7684\u7535\u6c60\u7eed\u822a\u65f6\u95f4\uff0c\u60a8\u53ef\u4ee5\u66f4\u957f\u65f6\u95f4\u5730\u5de5\u4f5c\uff0c\u800c\u65e0\u9700\u9891\u7e41\u7ed9\u7b14\u8bb0\u672c\u7535\u8111\u5145\u7535\u3002\nA55\u7531\u9ad8\u8d28\u91cf\u63a7\u5236\u5668\u548c\u539f\u88c5\u540c\u6b65NAND\u95ea\u5b58\u9a71\u52a8\uff0c\u53ef\u63d0\u4f9b\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u9ad8\u4f20\u8f93\u901f\u5ea6\uff0c\u4ece\u800c\u7f29\u77ed\u542f\u52a8\u65f6\u95f4\u3001\u5feb\u901f\u52a0\u8f7d\u5e94\u7528\u7a0b\u5e8f\u548c\u5feb\u901f\u5904\u7406\u6587\u4ef6\u3002\nA55\u7279\u522b\u5e94\u7528\u4e86\u201cSLC\u7f13\u5b58\u6280\u672f\u201d\uff0c\u5141\u8bb8\u6240\u6709\u6570\u636e\u9996\u5148\u5199\u5165SLC\u90e8\u5206\uff0c\u4ece\u800c\u5b9e\u73b0\u66f4\u9ad8\u7684\u5cf0\u503c\u5199\u5165\u6027\u80fd\u3002\u6b64\u5916\uff0c\u8be5\u6280\u672f\u53ef\u4ee5\u51cf\u5c11\u5199\u5165\u653e\u5927\uff0c\u4ece\u800c\u63d0\u4f9b\u66f4\u597d\u7684\u8010\u7528\u6027\u548c\u66f4\u957f\u7684\u56fa\u6001\u786c\u76d8\u5bff\u547d\u3002\nA55\u9644\u5e26\u514d\u8d39\u4e0b\u8f7d\u7684\u56fa\u6001\u786c\u76d8\u8fd0\u884c\u72b6\u51b5\u76d1\u63a7\u5de5\u5177-SP Toolbox\u8f6f\u4ef6\uff0c\u8be5\u5de5\u5177\u4e13\u4e3a\u60a8\u8bbe\u8ba1\uff0c\u53ef\u8f7b\u677e\u76d1\u63a7\u56fa\u6001\u786c\u76d8\u7684\u5f53\u524d\u8fd0\u884c\u72b6\u51b5\u3002\u8fd9\u6837\uff0c\u60a8\u5c31\u53ef\u4ee5\u8fd0\u884c\u6027\u80fd\u6d4b\u8bd5\u3001\u83b7\u5f97\u603b\u4f53\u8fd0\u884c\u72b6\u51b5\u8bc4\u4f30\u5e76\u68c0\u67e5\u6709\u5173SSD\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5305\u62ec\u8bbe\u5907\u4e0a\u7684\u5df2\u7528\u7a7a\u95f4\u3001\u8bbe\u5907\u6e29\u5ea6\u3001\u5199\u5165\u7684\u603b\u5b57\u8282\u6570\u3001S.M.A.R.T.\u72b6\u6001\u3001\u64e6\u9664\u8ba1\u6570\u72b6\u6001\u548c\u5757\u6570\u3002\nA55\u91c7\u7528\u574f\u5757\u7ba1\u7406\u529f\u80fd\u6784\u5efa\uff0c\u53ef\u6301\u7eed\u76d1\u63a7\u548c\u66f4\u6362\u574f\u5757\uff0c\u4ee5\u5ef6\u957f\u56fa\u6001\u786c\u76d8\u7684\u4f7f\u7528\u5bff\u547d\uff0c\u4f7f\u60a8\u7684\u7cfb\u7edf\u4fdd\u6301\u826f\u597d\u72b6\u6001\u3002\nA55\u662f\u540c\u7c7b\u4e2d\u6700\u8f7b\u3001\u6700\u8584\u7684\u56fa\u6001\u786c\u76d8\u4e4b\u4e00\uff0c\u4f46\u5b83\u662f\u9632\u9707\u548c\u9632\u9707\u7684\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u6d3b\u52a8\u90e8\u4ef6\u3002\u6b64\u5916\uff0c\u8fd8\u914d\u5907\u4e86S.M.A.R.T.\u76d1\u63a7\u7cfb\u7edf\u548cECC\u6280\u672f\uff0c\u4ee5\u4fdd\u8bc1\u66f4\u9ad8\u7684\u6570\u636e\u4f20\u8f93\u5b89\u5168\u6027\u3002", "note_en": "Our trend watchers noticed a significant drop in 1TB SSD prices on Amazon. You can now pick up one of the highest rated drives for just $97.99.\n The  $97.99 Silicon Power 1TB SSD 3D NAND supports TRIM, Garbage Collection technology, RAID, and ECC (Error Checking &amp; Correction) to provide optimized performance, and enhanced reliability and the advanced SLC Cache Technology allows performance boost and longer lifespan.\n  But that\u2019s not the only one that\u2019s dropped significantly, the other manufacturers are all following suit and dropping their prices significantly.\n   Applying the advanced 3D NAND flash, Ace A55 features higher reliability and better power efficiency than traditional SSDs equipped with 2D NAND flash. The A55 offers improved endurance and longer battery life that you\u2019re able to work longer without frequently recharge your laptop.\n  Powered by high quality controller and original synchronous NAND flash, the A55 delivers incredibly high transfer speeds that enable short boot time, fast application loading and quick file processing.\n  The A55 especially applies the \u201dSLC Cache technology\u201d that allows all data to be written in the SLC portion first and leads to higher peak writing performance. In addition, the technology can reduce write amplification and thus offer better endurance and longer lifespan of the SSD.\n  The A55 comes with a free-download SSD health monitor tool \u2013 SP Toolbox Software, which is especially designed for you to easily monitor the current health status of a SSD. By such, you can run a performance test, get an overall health evaluation and check detailed information about your SSD, including used space on device, device temperature, total bytes written, S.M.A.R.T. status, erase count status and block numbers.\n   The A55 is built with Bad Block Management, which can continually monitor and replace bad blocks to keep your system in good condition with prolonged lifespan of a SSD.\n  The A55 is one of the lightest and thinnest SSD of its kind yet it is shock- and vibration-proof since it contains no moving parts. Furthermore, S.M.A.R.T. monitoring system and ECC technology are equipped to promise higher data transmission safety.", "posttime": "2020-05-03 04:19:42", "tags": "\u786c\u76d8,\u56fa\u6001\u786c\u76d8,\u56fa\u6001,ssd,\u5199\u5165", "title": "1 TB\u56fa\u6001\u786c\u76d8\u7684\u6210\u672c\u521a\u521a\u964d\u81f398\u7f8e\u5143\u4ee5\u4e0b", "title_en": "The cost of a 1TB SSD drive just dropped below $98", "transed": 1, "url": "https://arador.com/the-cost-of-a-1tb-ssd-drive-just-dropped-below-98/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u786c\u76d8", "\u56fa\u6001\u786c\u76d8", "\u56fa\u6001", "ssd", "\u5199\u5165"]}, {"category": "", "categoryclass": "", "imagename": "0bc64b67a28f0c524e40524296d717a5.jpg", "infoid": 1000407, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4efb\u4f55\u60f3\u6cd5\u6700\u597d\u7684\u90e8\u5206\u662f\u5f53\u5b83\u662f\u65b0\u9c9c\u7684\u548c\u65b0\u7684\uff0c\u800c\u4f60\u8fd8\u4e0d\u77e5\u9053\u5b83\u7684\u9650\u5236\u548c\u9650\u5236\u3002\u5b83\u51e0\u4e4e\u53ef\u4ee5\u662f\u795e\u5947\u7684\uff01\u54e6\uff0c\u4f60\u4f1a\u5e2e\u52a9\u5ba2\u6237\uff0c\u4f60\u4f1a\u8d5a\u5230\u94b1\uff01\u4f60\u9996\u5148\u8981\u505a\u7684\u5c31\u662f\u2026\u3002\u5199\u5f88\u591a\u4ee3\u7801\u3002\n\u6709\u591a\u5c11\u4ee3\u7801\uff1f\u55ef\uff0c\u5f88\u660e\u663e\uff0c\u8fd9\u53d6\u51b3\u4e8e\u4f60\u7684\u60f3\u6cd5\u548c\u4f60\u8ba1\u5212\u5efa\u7acb\u7684\u4e1a\u52a1\u3002\u4f46\u662f\uff0c\u5728\u4efb\u4f55SaaS\u4e1a\u52a1\u4e2d\uff0c\u90fd\u6709\u5927\u91cf\u7684\u4ee3\u7801\u662f\u60a8\u9700\u8981\u548c\u60f3\u8981\u7684\uff0c\u800c\u4e14\u5728\u60a8\u751a\u81f3\u53ef\u4ee5\u7f16\u5199\u4e00\u884c\u4e1a\u52a1\u903b\u8f91\u4e4b\u524d\uff0c\u60a8\u90fd\u5fc5\u987b\u7f16\u5199\u5176\u4e2d\u7684\u5f88\u591a\u4ee3\u7801\u3002\n\u597d\u7684\uff0c\u9996\u5148\u4f60\u9700\u8981\u4e00\u4e9b\u5f00\u59cb\u7684\u4e1c\u897f\u3002\u9664\u975e\u60a8\u8ba1\u5212\u4ece\u5934\u5f00\u59cb\u7f16\u5199\u6240\u6709\u5185\u5bb9\uff0c\u5426\u5219\u60a8\u5c06\u9700\u8981\u8bbe\u7f6e\u4e00\u4e9b\u901a\u7528\u6846\u67b6\u6765\u652f\u6301\u73b0\u4ee3Web\u5e94\u7528\u7a0b\u5e8f\u7684\u8fd0\u884c\u3002\u5728\u524d\u7aef\uff0c\u8fd9\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a\n\u5982\u679c\u60a8\u7684\u6846\u67b6\u4e2d\u6ca1\u6709HTTP\u8bf7\u6c42\u5e93\uff0c\u90a3\u4e48\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2aHTTP\u8bf7\u6c42\u5e93\u3002\u4f8b\u5982\uff1aSuperAgent\uff0cAxios\uff0cGET\u3002\n\u5c06\u6240\u6709\u8fd9\u4e9b\u4e0d\u540c\u7684\u5de5\u5177\u8bbe\u7f6e\u5728\u4e00\u8d77\u4e5f\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\u3002\u53ea\u8981\u641c\u7d22\u4e00\u4e0b\u4e3aX#34\uff1b\u914d\u7f6ewebpack\u7684\u7248\u672c\uff0c\u5c31\u4f1a\u53d1\u73b0\u4e3a\u4e0d\u540c\u7248\u672c\u7684webpack\u548cX\u5199\u7684\u535a\u5ba2\u5e16\u5b50\u6bd4\u6bd4\u7686\u662f\u3002\u867d\u7136\u6709\u4e9b\u4f1a\u6709\u6240\u5e2e\u52a9\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u4f1a\u8d62\uff0c\u6709\u65f6\u53ea\u6709\u5b9e\u9a8c\u624d\u80fd\u63ed\u6653\u54ea\u4e2a\u662f\u54ea\u4e2a\u3002\n\u8c22\u5929\u8c22\u5730\uff0c\u6709\u4e00\u4e9b\u5de5\u5177\u53ef\u4ee5\u8ba9\u8fd9\u4e00\u5207\u53d8\u5f97\u66f4\u5bb9\u6613\u3002React\u7684Next.js\u548cVue\u7684Nuxt.js\u53ea\u662f\u4e24\u4e2a\u4f8b\u5b50\uff0c\u4f46\u662f\u6709\u8bb8\u591a\u98ce\u683c\u7684UI\u6846\u67b6\u53ef\u4ee5\u663e\u8457\u51cf\u5c11\u4e0a\u9762\u7684\u8bbe\u7f6e\u65f6\u95f4\u3002\u5f53\u7136\uff0c\u73b0\u5728\u60a8\u5fc5\u987b\u4e86\u89e3UI\u6846\u67b6\u548cUI\u5e93\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4f46\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u6743\u8861\u662f\u503c\u5f97\u7684\u3002\n\u8f6c\u5230\u540e\u7aef\uff0c\u60a8\u5c06\u9700\u8981\u4e00\u4e2aWeb\u6846\u67b6\u3002\u201c\u8fd9\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u60a8\u4f7f\u7528\u7684\u8bed\u8a00\uff0c\u4f46\u60a8\u6709\u5f88\u591a\u53ef\u4f9b\u9009\u62e9\u7684\u8bed\u8a00\uff1a\n\u8fd9\u4e2a\u5217\u8868\u51b3\u4e0d\u662f\u5f88\u5e7f\u6cdb--\u4ec5\u4ec5\u662f\u8ffd\u8e2a\u4e00\u79cd\u8bed\u8a00\u7684\u6240\u6709\u53ef\u7528\u7684\u6846\u67b6\u5c31\u662f\u5b83\u81ea\u5df1\u7684\u4e00\u7bc7\u6587\u7ae0\u4e86\u3002\u4f46\u5b83\u786e\u5b9e\u663e\u793a\u4e86\u5404\u79cd\u53ef\u7528\u7684\u9009\u62e9\u3002\u6bcf\u79cd\u8bed\u8a00\u548c\u6846\u67b6\u90fd\u6709\u81ea\u5df1\u7684\u80fd\u529b\u548c\u53d6\u820d\uff0c\u8fd9\u662f\u4f60\u5728\u505a\u51fa\u9009\u62e9\u4e4b\u524d\u5fc5\u987b\u8003\u8651\u7684\u3002\u73b0\u5728(\u6216\u4e4b\u540e\uff01)\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u4f60\u5f88\u96be\u6539\u53d8\u4e3b\u610f\u3002)\u3002\n\u5b9e\u9645\u4e0a\uff0c\u8ba9\u6211\u4eec\u9000\u4e00\u6b65\u8bf4\u3002\u5f53\u7136\uff0c\u8fd9\u4e9b\u90fd\u662f\u57fa\u672c\u7684\uff0c\u4f46\u60a8\u4ecd\u7136\u9700\u8981\u67d0\u4e2a\u5730\u65b9\u6765\u8fd0\u884c\u6240\u6709\u8fd9\u4e9b\u4ee3\u7801\uff0c\u5e76\u4ee5\u67d0\u79cd\u65b9\u5f0f\u52a0\u5feb\u5bf9\u4ee3\u7801\u66f4\u6539\u7684\u8bc4\u4f30\u3002\n\u4f60\u53ef\u4ee5\u5728\u4f60\u7684\u672c\u5730\u673a\u5668\u4e0a\u8fd0\u884c\u6240\u6709\u7684\u4e1c\u897f\uff0c\u4f46\u8fd9\u5f88\u5c11\u662f\u7406\u60f3\u7684\u3002\u9996\u5148\uff0c\u60a8\u7684\u672c\u5730\u73af\u5883\u4e0d\u592a\u53ef\u80fd\u4e0e\u60a8\u7684\u751f\u4ea7\u73af\u5883\u76f8\u4f3c\uff0c\u5e76\u4e14\u60a8\u4e0d\u5e0c\u671b\u5728\u90e8\u7f72\u65f6\u770b\u4f3c\u5fae\u4e0d\u8db3\u9053\u7684\u5dee\u5f02\u9020\u6210\u95ee\u9898\u3002\u6b64\u5916\uff0c(\u76f8\u5bf9\u800c\u8a00)\u81ea\u52a8\u6267\u884c\u672c\u5730\u73af\u5883\u8bbe\u7f6e\u975e\u5e38\u56f0\u96be\uff0c\u56e0\u6b64\u5c06\u5176\u4ed6\u4efb\u4f55\u4eba\u6dfb\u52a0\u5230\u9879\u76ee\u4e2d\u5fc5\u7136\u4f1a\u5bfc\u81f4\u51b2\u7a81\uff0c\u7279\u522b\u662f\u5982\u679c\u4ed6\u4eec\u60f3\u8981\u4f7f\u7528\u4e0e\u60a8\u5b8c\u5168\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002\n\u865a\u62df\u673a\u7684\u4f18\u52bf\u5728\u4e8e\u975e\u5e38\u6613\u4e8e\u7406\u89e3\u548c\u4f7f\u7528\u3002\u5982\u679c\u4f60\u77e5\u9053\u5982\u4f55\u6d4f\u89c8\u4f60\u81ea\u5df1\u7684\u7cfb\u7edf\uff0c\u4f60\u5c31\u4f1a\u77e5\u9053\u5982\u4f55\u6d4f\u89c8\u865a\u62df\u7684\u7cfb\u7edf\u3002\u4f7f\u7528Ansible\u8fd9\u6837\u7684\u5de5\u5177\uff0c\u5b83\u4eec\u5f88\u5bb9\u6613\u5b9e\u73b0\u81ea\u52a8\u5316\uff1b\u4f7f\u7528Vagant\u8fd9\u6837\u7684\u5de5\u5177\uff0c\u5f00\u53d1\u65f6\u4e5f\u5f88\u5bb9\u6613\u4f7f\u7528\u3002\u6b64\u5916\uff0c\u60a8\u53ef\u80fd\u53ea\u9700\u8981\u4fee\u6539\u5c11\u91cfAnsible\u811a\u672c\u6216\u53d8\u91cf\uff0c\u5373\u53ef\u5c06\u60a8\u7684\u5f00\u53d1\u90e8\u7f72\u811a\u672c\u8f6c\u6362\u4e3a\u751f\u4ea7\u90e8\u7f72\u811a\u672c\u3002\n\u4f46\u5b83\u4eec\u53ef\u80fd\u6709\u70b9\u91cd\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u5728\u6a21\u62df\u53e6\u4e00\u53f0\u5b8c\u6574\u7684\u673a\u5668\u3002\u8fd9\u65b9\u9762\u6709\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848(\u542f\u7528CPU\u4f18\u5316\uff0c\u4f7f\u7528AMI\u6216\u5176\u4ed6\u673a\u5668\u6620\u50cf\u51cf\u5c11\u90e8\u7f72\u65f6\u95f4\u7b49)\uff0c\u4f46\u4e5f\u6709\u66ff\u4ee3\u65b9\u6848\u3002\n\u7801\u5934\u96c6\u88c5\u7bb1\u8f7b\u5f97\u79bb\u8c31\u3002\u4ece\u672c\u8d28\u4e0a\u8bf4\uff0c\u4ed6\u4eec\u53ea\u662f\u6309\u7167\u60a8\u7684\u6307\u793a\u8fd0\u884c\u8fd0\u884c\u60a8\u7684\u4ee3\u7801\u6240\u9700\u7684\u7cfb\u7edf\u90e8\u5206\u3002\u6b64\u5916\uff0c\u5f88\u591aCI\u7cfb\u7edf\u90fd\u63a5\u53d7dockerfile\u4f5c\u4e3a\u8f93\u5165\uff0c\u4ee5\u81ea\u52a8\u8fd0\u884c\u4ee3\u7801\u7684\u6d4b\u8bd5\u548c\u90e8\u7f72\u3002\u4e00\u4e2a\u5efa\u9020\u826f\u597d\u7684\u7801\u5934\u8bbe\u7f6e\u662f\u4e00\u4ef6\u7f8e\u4e3d\u7684\u4e8b\u60c5\u3002\n\u7136\u800c\uff0cdocker\u53ef\u80fd\u4f1a\u8ba9\u4eba\u6709\u70b9\u56f0\u60d1\u3002*\u5b83\u9700\u8981\u5b66\u4e60\u4e0e\u76f4\u63a5\u5728\u673a\u5668\u6216\u865a\u62df\u673a\u4e0a\u5de5\u4f5c\u4e0d\u540c\u7684\u5fc3\u6001\u548c\u5de5\u5177\uff0c\u5e76\u4e14\u53ef\u4ee5\u81ea\u7136\u5730\u5f15\u5bfc\u60a8\u8f6c\u5411\u66f4\u590d\u6742\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5426\u5219\u66f4\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u4f1a\u66f4\u9002\u5408\u60a8\u7684\u7528\u4f8b\u3002(\u5fae\u670d\u52a1\u60a8\u597d\uff01)\u3002\n\u53ef\u4ee5\u4e3a\u60a8\u8282\u7701\u5927\u91cf\u65f6\u95f4\u7684\u4e00\u4ef6\u5c0f\u4e8b\u662f\u5728\u60a8\u7684\u4ee3\u7801\u4e0a\u8bbe\u7f6e\u76d1\u89c6\u5668\u3002*\u8fd9\u4e9b\u7a0b\u5e8f\u4f1a\u5bc6\u5207\u5173\u6ce8\u4ee3\u7801\u4e2d\u7684\u66f4\u6539\uff0c\u7136\u540e\u91cd\u65b0\u7f16\u8bd1\u5e76\u91cd\u65b0\u542f\u52a8\u670d\u52a1\u5668\uff0c\u4ee5\u4fbf\u5728\u60a8\u5237\u65b0\u6d4f\u89c8\u5668\u65f6\u59cb\u7ec8\u8fd0\u884c\u6700\u65b0\u7248\u672c\u7684\u4ee3\u7801\u3002\u201c\u60a8\u5c06\u4f7f\u7528\u7684\u8bb8\u591a\u5de5\u5177\u90fd\u5e26\u6709\u5185\u7f6e\u7684\u89c2\u5bdf\u5668(\u4f8b\u5982webpack)\uff0c\u4f46\u5bf9\u4e8e\u5176\u4ed6\u5de5\u5177\uff0c\u60a8\u9700\u8981\u5b89\u88c5\u81ea\u5df1\u7684(nodemon\u6765\u76d1\u89c6\u60a8\u7684node.js\u670d\u52a1\u5668)\u3002\n\u4e0e\u4efb\u4f55\u5176\u4ed6\u914d\u7f6e\u4e00\u6837\uff0c\u60a8\u5fc5\u987b\u6267\u884c\u4ee5\u4e0b\u914d\u7f6e\uff0c\u4ee5\u786e\u4fdd\u6bcf\u4e2a\u76d1\u89c6\u5668\u53ea\u76d1\u89c6\u6b63\u786e\u7684\u76ee\u5f55\uff0c\u786e\u4fdd\u6587\u4ef6\u5728\u60a8\u7684\u4e3b\u673a\u7cfb\u7edf\u548cVM/docker\u5bb9\u5668\u4e4b\u95f4\u4ee5\u4e00\u79cd\u4e0d\u4f1a\u7eca\u5012\u60a8\u7684\u76d1\u89c6\u5668\u7684\u5feb\u901f\u65b9\u6cd5\u5171\u4eab\uff0c\u7b49\u7b49\u3002\n\u5982\u679c\u8fd0\u6c14\u597d\u7684\u8bdd\uff0c\u4f60\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u8bbe\u8ba1\u8981\u7528\uff0c\u4f46\u662f\u4f60\u8fd8\u6ca1\u6709\u3002", "note_en": "The best part of any idea is when it&#39;s fresh and new, and you don&#39;t yet know the limitations and restrictions. \u00a0It can be almost magical! \u00a0Oh, the customers you&#39;ll help and the money you&#39;ll make! \u00a0All you have to do first is... write a lot of code.\n How much code? \u00a0Well, obviously that depends on your idea and what business you&#39;re planning on setting up. \u00a0But there&#39;s a huge amount of code you&#39;ll need and want for  any SaaS business, and a lot of it you&#39;ll have to write before you can write even  line one of your business logic.\n    Okay, first you&#39;re gonna need something to start from. \u00a0Unless you plan on writing  everything from scratch, you&#39;ll need to set up some common frameworks to enable a modern web app to run. \u00a0On the front-end, that&#39;s something like:\n An HTTP requests library, if your framework doesn&#39;t come with one. \u00a0Examples:  Superagent,  Axios,  got.\n Getting all these various tools set up to work together will take some time as well. \u00a0Just searching &#34;configuring webpack for X&#34; reveals a minefield of blog posts written for various versions of webpack and X. \u00a0Some will help, some won&#39;t, and sometimes only experimentation will reveal which is which.\n Thankfully, there are tools that make a lot of this easier. \u00a0 Next.js for React and  Nuxt.js for Vue are just two examples, but there are many flavours of UI frameworks that can significantly reduce the setup time for the above. \u00a0Of course, now you have to learn how your UI framework works as well as your UI library, but generally that trade-off is worthwhile.\n Moving on to the back-end, you&#39;re going to want a web framework. \u00a0This will largely depend on the language you&#39;re working with, but you have plenty to choose from:\n  This list is by no means extensive - just tracking down all the available frameworks for a single language would be an article in it&#39;s own. \u00a0But it does display the variety of choices available. \u00a0Each language and framework has its own capabilities and trade-offs, and that&#39;s something you&#39;ll have to take into account before you make your choice. \u00a0(Or after! \u00a0It&#39;s just harder to change your mind at that point.)\n  Actually, let&#39;s take a step back for a second. \u00a0Sure, those are the basics, but you still need someplace to  run all that code, and in a way that speeds up your evaluation of code changes.\n You could run everything on your local machine, but that&#39;s rarely ideal. \u00a0For starters, your local environment is highly unlikely to resemble your production environment, and you don&#39;t want seemingly-minor differences causing problems when you deploy. \u00a0Plus, it&#39;s very hard (comparatively) to automate local environment setup, so adding anyone else to the project is bound to cause conflict, especially if they want to use an entirely different OS from you.\n   Virtual Machines have the advantage of being very simple to understand and work with. \u00a0If you know how to navigate your own system, you&#39;ll know how to navigate a virtual one just fine. \u00a0They&#39;re easily automated with something like  Ansible, and easy to use for development with something like  Vagrant. \u00a0Plus, you&#39;ll likely only need to modify a bit of your Ansible scripts or variables to turn your development deploy script into a production deploy script.\n But they can be a bit  heavy, as they are emulating an entire other machine. \u00a0There are good solutions to this (enabling CPU optimizations, using AMIs or other machine images to reduce deploy time, etc), but there&#39;s also an alternative.\n  Docker containers are  crazy lightweight. \u00a0Essentially, they just run the bits of the system required to run your code, as dictated by you. \u00a0Plus, a great many CI systems accept dockerfiles as input to automatically run tests and deploys of your code. \u00a0A well-built docker setup is a thing of beauty.\n However, docker can be a bit  confusing. \u00a0It requires learning a different mindset and tooling from working directly on a machine or virtual machine, and can lead you naturally towards more-complex solutions where a simpler one would otherwise work better for your use case. \u00a0(Hello, microservices!)\n  A small thing that can save you a lot of time is setting watchers on your code. \u00a0These are programs that keep an eye out for changes in your code, then re-compile and restart servers so that the latest version of your code is always running when you refresh your browser. \u00a0Many of the tools you&#39;ll use will come with built-in watchers (webpack, for example), but for others, you&#39;ll need to install your own ( nodemon to watch your Node.js server).\n And like with anything else, there&#39;s configuration you have to do to make sure that each watcher is only watching the correct directories, that files are shared between your host system and VM/docker container in a fast method that won&#39;t trip up your watchers, etc.\n  With any luck, you&#39;ll have a design already to work with, but you still need to translate that design into an application template and common UI components and architecture. A good CSS framework can really help here, allowing you to set up common colours and sizes that you can use across the entire project, and using component-based development can allow you to, say, create a TextInput element once, then use it across your project multiple times. You&#39;ll also need to set  ...\n  Proper logging can give you more and more-useful information than a slapdash setup can. \u00a0You&#39;ll want to log requests and request data, useful checkpoint information, and the usual stuff - errors, stack traces, etc. \u00a0But you also want to make sure not to log  too much. \u00a0For example, you&#39;ll obviously want to omit passwords, but you should also in general omit headers, especially headers containing authentication tokens, for obvious security reasons.\n  Database schemas are part of your app as well, and that means they need to be represented as code somewhere and checked into version control. \u00a0Manually updating your production database to match your development database is amateur-hour.\n So in addition to your back-end frameworks and your front-end frameworks, you&#39;ll need a database migration framework, and you&#39;ll need to write migrations for it.\n  Users are the fundamental primitive of a SaaS application, and there&#39;s a common set of interactions you&#39;ll require: sign-up, login, logout, edit profile, etc. \u00a0But sitting underneath all that is a bit of a contentious topic: user authentication.\n There are a bunch of ways to do user authentication, but most of them are wrong and will end up leaving you with security vulnerabilities. \u00a0 JWTs are popular and can be secured, but you need to follow some best practices:\n Don&#39;t store JWTs in localStorage, since any JS that runs on your page can access them, and if you get hit with a cross-site scripting attack, they can export your tokens en masse.\n  Include a global version code in your JWTs so that you can instantly invalidate all JWTs every issued.\n Include a user version code in your JWTs so that a user can instantly invalidate all JWTs ever issued for them specifically. \u00a0This is useful to include a &#34;log out all devices&#34; option for users who may have lost a device or had their account compromised.\n Send a  Cross-Site Request Forgery token with every request as a javascript-injected header, and make sure that token matches one you&#39;ve stored for the user on login.\n You&#39;ll notice a lot of these practices are &#34;in case of a security breach&#34;, and you&#39;d hope that if you did everything correctly, they&#39;d be unnecessary. \u00a0However, that&#39;s a fantasy and should be treated as such. \u00a0No site is 100% secure and bug-free, and yours won&#39;t be either. \u00a0Instead, you need to work in layers, so that if any one layer of security fails, there are still other layers and countermeasures in place.\n  When users sign up, log in, and really all throughout your app, they&#39;ll be filling out and submitting forms. These forms will need to be validated for the appropriate data, preferably on both the front-end (before the data is sent to the server, to provide the best experience to the user) and the back-end (to ensure no junk data is saved to the database). If your back-end isn&#39;t in JavaScript, you&#39;ll need validation libraries for both languages that have the  ...\n  Transactional email is the email you send when certain events happen for your users. \u00a0These can be lifecycle events, like welcome emails, &#34;trial about to expire&#34; emails, etc, or service-related emails like email address confirmation emails, password reset emails, notifications about your service, etc.\n You&#39;ll need to find and configure a decent mailer module, and usually perform some DNS configuration at your mail service host&#39;s instruction. \u00a0Some mailer modules will come with template capabilities built-in, while others will leave you to install your own.\n  Getting paid is why most people are going to start a SaaS in the first place, so processing payments and subscriptions is mightily important. Choosing and setting up an account with a payments provider is up to individual preference, but Stripe offers probably the best API and developer experience out there, while PayPal is usually the most-requested provider of choice from users. It&#39;s likely that you&#39;ll want to offer multiple ways to pay through multiple providers,  ...\n If you offer subscriptions, you&#39;ll want to allow users to choose between a monthly billing cycle and an annual one. \u00a0Annual billing is a great way for dedicated users to save money, while also offering you the benefits of higher  LTV and getting you the money up-front, increasing your liquidity.\n If you have multiple levels of plans, you&#39;ll need to implement the ability for users to change between those levels, usually offering a prorated fee for the month of transition.\n Though it&#39;s definitely not the &#34;happy path&#34;, you&#39;ll need to offer users the ability to cancel subscriptions. \u00a0You shouldn&#39;t add extra friction to this, since some users will just be cancelling temporarily, and you want to leave a good impression on them, but it&#39;s important to try to capture the reason they&#39;re leaving, so you can improve your service.\n  Once you&#39;ve fully-developed your fancy new SaaS, you&#39;re going to need to put it up on the web for people to interact with, and for that, you&#39;re going to need a deploy system. \u00a0Even if that system is largely manual, you&#39;re going to want defined, repeatable, documented steps that ensure that deploys go off without incident.\n   There are a whole lot more things you can do to ensure a safe and clean deploy, but this list is at least a good starting place.\n  Much like how we discussed security in layers above, backups of production data are another layer of defence in case something goes wrong. \u00a0If you&#39;re still using manual processes to alter user data, it can be very easy for a slip of the keys to accidentally alter or delete the wrong user&#39;s data. \u00a0And if you&#39;re using automated processes, it&#39;s usually a lot harder to make those simple mistakes, but more complex mistakes can make it very easy to edit or delete  huge  ...\n What makes a proper backup, then? \u00a0That&#39;s a whole topic on its own, but you should start with:\n Complete: Don&#39;t just backup the database - if the user uploads files, those should be backed up as well.\n  Retained: You&#39;ll want to keep your backups around for a while, though you might want to set up a schedule for longer-retained backups. \u00a0(i.e. Daily backups retained for 30 days, weekly backups retained for 3 months, monthly backups retained for 1 year.)\n Secure: Your backups should be kept with the same level of security as your data. \u00a0If your data is encrypted at rest, your backups should be as well. \u00a0Make sure to keep your encryption keys secure. \u00a0If you lose those keys, you lose the backup.\n Tested: A backup that hasn&#39;t been tested  is not a backup. \u00a0You don&#39;t want to find out that your backup process doesn&#39;t work (or stopped working) when you need to restore critical data. \u00a0There should be an automated test process that runs after backups are created.\n If you&#39;re lucky, your hosting platform will offer some level of database backup as a service, which will save you a lot of time and effort setting up. \u00a0It likely won&#39;t cover 100% of your needs, but it will get you a lot closer than starting from scratch.\n  Okay! \u00a0That&#39;ll get you off the ground, but once you start seeing any success at all, you&#39;re going to start wanting something a little more... robust. \u00a0Eventually, manually editing the database is going to get tedious (not to mention dangerous), and users will start asking the same questions over and over. \u00a0You&#39;re going to have to slow down on development related to your core business and implement a bunch more supporting features.\n  You can edit and delete users directly from the database, sure, but all it takes is one time forgetting to add a  WHERE or  LIMIT clause to a statement to make you long for a proper administration console. \u00a0(And backups. \u00a0You set up backups, right?)\n An admin console is also a great place for dashboards, user statistics, summaries, metrics, etc. \u00a0Your admin console can become your one-stop-shop for running your SaaS.\n  Documentation can serve multiple purposes. \u00a0Primarily, it&#39;s for user education, but conveniently, this is user education you don&#39;t have to do manually. \u00a0Think about it like automated customer support - a user that answer their question from your documentation is a user that doesn&#39;t email you.\n If your documentation is publicly available, it can also help users make purchasing decisions. \u00a0By answering questions about your service openly and up-front, you can let users more-easily determine if your service will work for them, as well as reassure them about your transparency.\n Public documentation also helps with SEO, since your keywords will likely naturally come up frequently on your documentation pages.\n  Once you have a sufficient number or sufficiently large customers, you&#39;ll likely start getting requests around tax time for their billing history. \u00a0Your payment system will keep track of payments for you, and many of them will be able to generate invoices from their web interface that you can send to customers who request it.\n That might hold you for a while, but eventually, you&#39;ll want this functionality built into your system, so clients can self-serve, and your customer support team can focus on more-important issues.\n  Making the right decisions early on and as your service grows can have compounding benefits, but frequently, it&#39;s difficult to find time to devote to tasks that aren&#39;t seen as critical. \u00a0Still, if you can make the time to invest in them, it can pay off for you and your users as well.\n  Especially now, when people are trying to cut costs in both their lives and businesses, the ability to  pause a subscription instead of  cancel it outright can mean the difference between saving a customer and losing them. \u00a0Similarly, the ability to credit customers some free time or usage on your service can aid in retention, especially if something goes wrong and you want to make it up to them.\n  When displaying publicly-visible auto-incrementing IDs (such as user IDs), it can be a good idea to obfuscate what that number actually is. \u00a0This prevents competitors and skittish customers from identifying how much usage your service has seen so far. \u00a0A great library for this is  Hashids, which has many compatible implementations across many languages.\n  The fewer languages your app uses, the less common code that you&#39;ll have to duplicate between the various services and projects you require. Some are going to be unavoidable, such as JavaScript if you have a web app with any serious browser interactions, Swift for iOS, and Java/Kotlin for Android. Web apps, however, offer a truly terrifying number of languages you can choose for server code: PHP, Ruby, JavaScript, Typescript, Go, Rust, Java,  ...\n In extreme situations, you can limit yourself to just one language, even across multiple disparate platforms. \u00a0JavaScript can do front-end and back-end web development, desktop development through Electron, and mobile development through Cordova. \u00a0There are definite trade-offs for going this route, but for a smaller studio, this opens up a multi-platform strategy on a limited budget.\n  Linters like  ESLint,  RuboCop, and  Flake8 can make a  marked improvement in your code. \u00a0They can catch stylistic errors long before they make it into production, and many stylistic errors are really just shortcomings of your chosen language, where hard-to-find bugs breed and propagate.\n  Monorepos are  great! \u00a0They&#39;re especially great if you&#39;re just starting your SaaS, as they&#39;re far simpler than trying to work with multiple repositories when managing dependencies, figuring out code re-use, and ensuring that all the correct code is committed before deploys go out.\n Everyone&#39;s situation is different, of course, and it may make sense in your case to go with multiple repositories, or even one day switch to such a strategy, but when you&#39;re starting out, you want to limit the complexity of your project as much as you can, and the monorepo strategy will definitely pay off in this regard.\n  Being able to log in as your users from your Admin Console can help immensely when trying to sort out customer service issues. Instead of having several back-and-forth &#34;what do you see now?&#34; emails, you can just log in as them and find out. There are a lot of things to consider when writing a user impersonation feature, however: Do you require special access to impersonate users? Do you require the user&#39;s permission to impersonate  ...\n These aren&#39;t the only considerations, but ideally it&#39;s enough to make the point that there&#39;s a lot more to user impersonation than simply changing a token ID.\n  Once you start getting enough customers with sufficient expectations, you&#39;ll have to make modifications to your deploy process for increased reliability and flexibility:\n Updating in-place won&#39;t work forever. \u00a0Eventually, switching to  blue/green deploys or even something as simple as displaying a maintenance mode page while you update will be necessary to keep people from interacting with the system while performing significant changes.\n If you have a complex  SPA, you&#39;ll want to be able to inform users when you&#39;ve made an update that requires reloading that code. \u00a0Tracking version numbers both in your UI code and on the server will allow you to pop up a notification, allowing the user to save their work and then reload.\n Ideally, you should be using a  bug  tracking  service. \u00a0If you also send your  source maps to them when performing a deploy, they can provide even better error messages when UI errors occur.\n Serving your UI JavaScript from your server is simple and easy, but users appreciate  fast, and your job is to do the hard work so that users have a good time. \u00a0A relatively easy way to speed up your user&#39;s experience is to upload your UI JavaScript on release to a  CDN. \u00a0This is a one-time change you need to make that pays dividends for your users going forwards.\n You&#39;ll likely be manually checking that releases go as expected, but automated smoke tests that run on every deploy are a better way to catch issues that might otherwise slip by you when you&#39;re tired, distracted, or in a hurry.\n  If you don&#39;t want to start from an empty folder and write all this code yourself, you should consider using a SaaS starter kit, and it just so happens that you&#39;re reading the blog for one right now! \u00a0With Nodewood, you can get started writing business logic today, saving weeks or even months of development time.\n Nodewood starts you off with a full working web app, with a Vue front-end and Express back-end, built entirely from JavaScript. \u00a0Form validation, testing, user authentication and management, subscription/billing are all built-in, alongside a sleek and customizable application theme with an easy-to-extend admin console.", "posttime": "2020-05-03 04:19:37", "tags": "\u4ee3\u7801,saas,code,users", "title": "\u542f\u52a8SaaS\u9700\u8981\u7f16\u5199\u7684\u4ee3\u7801\u5217\u8868", "title_en": "The List of Code You Need to Write to Start a SaaS", "transed": 1, "url": "https://nodewood.com/blog/the-huge-list-of-code-you-need-to-write-to-start-a-saas/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u4ee3\u7801", "saas", "code", "users"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000406, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fd9\u7bc7\u4e3a\u201c\u5723\u5730\u4e9a\u54e5\u6cd5\u5f8b\u8bc4\u8bba\u201d\u7814\u8ba8\u4f1a\u64b0\u5199\u7684\u77ed\u6587\u4e2d\uff0c\u4e39\u5c3c\u5c14\u00b7\u7d22\u6d1b\u592b(Daniel Solove)\u6559\u6388\u7814\u7a76\u4e86\u201c\u6ca1\u6709\u4ec0\u4e48\u53ef\u9690\u7792\u201d\u7684\u8bba\u70b9\u3002\u5f53\u88ab\u95ee\u53ca\u653f\u5e9c\u76d1\u63a7\u548c\u6570\u636e\u6316\u6398\u65f6\uff0c\u8bb8\u591a\u4eba\u7684\u56de\u7b54\u662f\uff1a\u6211\u6ca1\u6709\u4ec0\u4e48\u53ef\u9690\u7792\u7684\u3002\u6839\u636e\u201c\u6ca1\u4ec0\u4e48\u53ef\u9690\u85cf\u201d\u7684\u8bba\u70b9\uff0c\u9664\u975e\u653f\u5e9c\u53d1\u73b0\u975e\u6cd5\u6d3b\u52a8\uff0c\u5426\u5219\u9690\u79c1\u4e0d\u4f1a\u53d7\u5230\u5a01\u80c1\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u4eba\u6ca1\u6709\u6b63\u5f53\u7406\u7531\u58f0\u79f0\u5b83\u662f\u79c1\u4eba\u7684\u3002\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684..\u3002\n\u7d22\u6d1b\u592b\uff0c\u4e39\u5c3c\u5c14\u00b7J\uff0c\u6211\u6ca1\u6709\u4ec0\u4e48\u53ef\u9690\u7792\u7684\uff0c\u4e5f\u6ca1\u6709\u5176\u4ed6\u5bf9\u9690\u79c1\u7684\u8bef\u89e3\u3002\u201c\u5723\u5730\u4e9a\u54e5\u6cd5\u5f8b\u8bc4\u8bba\u201d\uff0c\u7b2c44\u5377\uff0c\u7b2c745\u9875\uff0c2007\u5e74\uff1b\u534e\u76db\u987f\u5927\u5b66\u6cd5\u5b66\u9662\u516c\u6cd5\u7814\u7a76\u8bba\u6587\u7b2c289\u53f7\u3002\u53ef\u5728srn\uff1ahttps://ssrn.com/abstract=998565\u4e0a\u83b7\u5f97\u3002", "note_en": "In this short essay, written for a symposium in the San Diego Law Review, Professor Daniel Solove examines the nothing to hide argument. When asked about government surveillance and data mining, many people respond by declaring: &#34;I&#39;ve got nothing to hide.&#34; According to the nothing to hide argument, there is no threat to privacy unless the government uncovers unlawful activity, in which case a person has no legitimate justification to claim that it remain private. The nothing to  ...\n           Solove, Daniel J., &#39;I&#39;ve Got Nothing to Hide&#39; and Other Misunderstandings of Privacy. San Diego Law Review, Vol. 44, p. 745, 2007; GWU Law School Public Law Research Paper No. 289. Available at SSRN:  https://ssrn.com/abstract=998565", "posttime": "2020-05-03 04:19:26", "tags": "\u6ca1\u4ec0\u4e48,hide,law", "title": "\u201c\u6211\u6ca1\u4ec0\u4e48\u597d\u9690\u7792\u7684\u201d\u548c\u5176\u4ed6\u5bf9\u9690\u79c1\u7684\u8bef\u89e3(2007)", "title_en": "'I've Got Nothing to Hide' and Other Misunderstandings of Privacy (2007)", "transed": 1, "url": "https://papers.ssrn.com/sol3/papers.cfm?abstract_id=998565&", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u6ca1\u4ec0\u4e48", "hide", "law"]}, {"category": "", "categoryclass": "", "imagename": "5db30ed4131a273bbb8e928a119566b5.jpg", "infoid": 1000405, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u6700\u8fd1\u7684\u4e00\u6b21AWS\u6210\u672c\u4f18\u5316\u95ee\u7b54\u4e2d\uff0cCorey Quinn\u8c08\u5230\u4e86\u4ed6\u4f7f\u7528DynamoDB\u7684\u5b9e\u9a8c\uff1a\n\u6211\u5728\u8fea\u7eb3\u6469\u6f5c\u6c34\u7684\u6df1\u5ea6\u6bd4\u6211\u9884\u60f3\u7684\u8981\u6df1\u3002\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u8fd9\u771f\u662f\u592a\u68d2\u4e86\u3002\u6211\u5bf9\u6570\u636e\u5e93\u4e86\u89e3\u4e0d\u591a\uff0c\u4f46\u6211\u6b63\u5728\u770b\u5b83\uff0c\u73b0\u5728\u6211\u5728\u60f3\uff1a\u201c\u8fea\u7eb3\u6469\u592a\u68d2\u4e86\uff0c\u6211\u80fd\u628a\u5b83\u8bef\u7528\u6210\u4ec0\u4e48\u5462\uff1f\u201dS3\u662f\u6211\u6700\u559c\u6b22\u7684\u6d88\u606f\u961f\u5217\uff0c\u8def\u753153\u662f\u6211\u6700\u559c\u6b22\u7684\u6570\u636e\u5e93\uff0c\u4f46\u6211\u4e0d\u80fd\u5b8c\u5168\u786e\u5b9a\u5230\u76ee\u524d\u4e3a\u6b62\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u81f3\u4e8e\u5176\u4ed6\u521b\u9020\u6027\u7684\u7528\u9014\uff0c\u6211\u53ef\u4ee5\u6ee5\u7528\u7684\u4e1c\u897f\u3002\u4e5f\u8bb8\u4f7f\u7528\u8fea\u7eb3\u6469\u4f5c\u4e3a\u4e00\u79cd\u8ba1\u7b97\u673a\u670d\u52a1-\u6211\u6253\u8d4c\u6211\u53ef\u4ee5\u6559\u5b83\u4e0b\u68cb\u3002\nDynamoDB\u662f\u4e9a\u9a6c\u900a\u6258\u7ba1\u7684NoSQL\u670d\u52a1-\u57fa\u672c\u4e0a\u662f\u4e00\u4e2a\u6570\u636e\u5e93\u3002\u5b83\u662f\u7528\u4e8e\u4fdd\u5b58\u5927\u91cf\u975e\u7ed3\u6784\u5316\u6570\u636e\u7684\u952e\u503c\u5b58\u50a8\u3002\u6211\u4eec\u5728\u5de5\u4f5c\u4e2d\u4f7f\u7528DynamoDB\u6765\u5b58\u50a8\u6570\u636e\uff0c\u6240\u4ee5\u6211\u5bf9\u4f7f\u7528\u5b83\u7565\u77e5\u4e00\u4e8c\uff0c\u800c\u4e14\u6211\u559c\u6b22\u91c7\u7eb3\u7cdf\u7cd5\u900f\u9876\u7684\u597d\u4e3b\u610f\uff0c\u5e76\u5c06\u5b83\u4eec\u62e8\u523011\u3002\n\u5f53\u4f60\u5b66\u4e60\u7f16\u7a0b\u65f6\uff0c\u4e00\u9879\u5e38\u89c1\u7684\u4efb\u52a1\u662f\u6784\u5efa\u8ba1\u7b97\u5668\uff1a\u52a0\u6cd5\u3001\u51cf\u6cd5\u3001\u4e58\u6cd5\u548c\u9664\u6cd5\u3002\u8fd9\u5c06\u662f\u6d4b\u8bd5Amazon\u6700\u4e0d\u53d7\u6b22\u8fce\u7684\u8ba1\u7b97\u5e73\u53f0\u7684\u597d\u65b9\u6cd5-\u6211\u4eec\u53ef\u4ee5\u5728DynamoDB\u4e4b\u4e0a\u6784\u5efa\u8ba1\u7b97\u5668\u5417\uff1f\u4e8b\u5b9e\u8bc1\u660e\u6211\u4eec\u53ef\u4ee5\u505a\u5230\uff0c\u8fd9\u5c31\u662f\u6211\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u8981\u7ecf\u5386\u7684\u3002(\u5c06\u8fd9\u4e2a\u5b9e\u9a8c\u6269\u5c55\u5230\u56fd\u9645\u8c61\u68cb\uff0c\u7559\u7ed9\u8bfb\u8005\u4f5c\u4e3a\u7ec3\u4e60\u3002)\u3002\n\u4e3a\u4e86\u907f\u514d\u6000\u7591\uff1a\u8fd9\u662f\u4e00\u4e2a\u574f\u4e3b\u610f\u2122\u3002\u8bf7\u52ff\u5728\u751f\u4ea7\u4e2d\u4f7f\u7528\u6b64\u4ee3\u7801\uff0c\u4e5f\u4e0d\u8981\u5728\u751f\u4ea7\u73af\u5883\u7684\u5341\u82f1\u91cc\u534a\u5f84\u5185\u4f7f\u7528\u6b64\u4ee3\u7801\u3002\u8fd9\u662f\u4e00\u7bc7\u8bbd\u523a\u6587\u7ae0\uff0c\u4e0d\u662f\u4e25\u8083\u7684\u8282\u76ee\u3002\nDynamoDB\u652f\u6301\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0c\u5305\u62ecJava\u3001.NET\u548cPython\u3002\u6211\u5c06\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u4f7f\u7528Python\uff0c\u56e0\u4e3a\u8fd9\u662f\u6211\u6240\u719f\u6089\u7684\uff0c\u4f46\u662f\u8fd9\u4e9b\u60f3\u6cd5\u4e5f\u53ef\u4ee5\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u4f7f\u7528\u3002\n\u5728DynamoDB\u4e2d\uff0c\u6211\u4eec\u6240\u6709\u7684\u8ba1\u7b97\u90fd\u5728Table\u4e2d\u8fd0\u884c\u3002\u5728\u8868\u4e2d\uff0c\u64cd\u4f5c\u5728\u884c\u5185\u8fd0\u884c\u3002\u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e9b\u4ee3\u7801\u6765\u4e3a\u6211\u4eec\u521b\u5efa\u8868\uff0c\u5e76\u5206\u914d\u53ef\u4ee5\u7528\u6765\u8ddf\u8e2a\u5355\u4e2a\u8ba1\u7b97\u7684\u884cID\uff1a\n\u5bfc\u5165contextlib\u5bfc\u5165UUID\u5bfc\u5165boto3 DynamoDB=boto3\u3002\u8d44\u6e90(&#34\uff1bDynamoDB&#34\uff1b)\u7c7bDynamoCalculator\uff1a&#34\uff1b&#34\uff1b&#34\uff1b\u4f7f\u7528DynamoDB\u8fdb\u884c\u8ba1\u7b97\u7684\u6574\u6570\u8ba1\u7b97\u5668\u3002&#34\uff1b&#34\uff1b&#34\uff1bdef__enter__(Self)\uff1atable_name=f&#34\uff1b\u8ba1\u7b97\u5668-{uuid.uuid4()}&#34\uff1bDynamoDB\u3002CREATE_TABLE(AttributeDefinitions=[{&#34\uff1bAttributeName&#34\uff1b\uff1a&#34\uff1bCalculation_id&#34\uff1b\uff0c&#34\uff1b\uff1a&#34\uff1bS&#34\uff1b\uff0c}]\uff0cTableName=TABLE_NAME\uff0cKeySchema=[{&#34\uff1bAttributeName&#34\uff1b\uff1a&#34\uff1bCalculation_id&#34\uff1b.\u3002\n\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u4e3a\u6211\u4eec\u5904\u7406\u521b\u5efa\u548c\u6e05\u7406-\u5b83\u4e0d\u4ec5\u4e3a\u6211\u4eec\u521b\u5efa\u8868\uff0c\u8fd8\u4f1a\u5728\u4e4b\u540e\u5220\u9664\u5b83\u3002\u5728\u60a8\u53ef\u4ee5\u8fdb\u884c\u7b2c\u4e00\u6b21\u8ba1\u7b97\u4e4b\u524d\uff0c\u8fd9\u786e\u5b9e\u4f1a\u9020\u6210\u4e00\u4e9b\u5ef6\u8fdf\uff0c\u4f46\u8fd9\u610f\u5473\u7740\u6211\u4eec\u7684\u5e10\u6237\u4e2d\u6ca1\u6709\u95f2\u7f6e\u7684\u8868\u3002\n\u8bb0\u4f4f\uff1a\u4e91\u7684\u6602\u8d35\u90e8\u5206\u4e0d\u662f\u60a8\u4f7f\u7528\u7684\uff0c\u800c\u662f\u60a8\u5fd8\u8bb0\u5173\u95ed\u7684\u90e8\u5206\u3002\u6b64API\u786e\u4fdd\u6211\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u5fd8\u8bb0\u5173\u95ed\u6211\u4eec\u7684\u8868\uff01\n\u91cd\u8981\u63d0\u793a\uff1a\u5982\u679c\u60a8\u521b\u5efa\u7684\u8d44\u6e90\u5177\u6709\u5e94\u8be5\u59cb\u7ec8\u8fd0\u884c\u7684\u6e05\u7406\uff0c\u5219\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u662f\u5728Python API\u4e2d\u5f3a\u5236\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u597d\u65b9\u6cd5\u3002\u4f8b\u5982\u5957\u63a5\u5b57\u6216\u6587\u4ef6\uff0c\u60a8\u5e94\u8be5\u5728\u5b8c\u6210\u540e\u59cb\u7ec8\u5173\u95ed\u5b83\u4eec\u3002\n\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528Try\u2026\u3002\u9664\u4e86\u2026\u3002\u6700\u540e\uff0c\u4f46\u662f\u8c03\u7528\u8005\u5fc5\u987b\u8bb0\u5f97\u505a\u6e05\u7406\u3002Python\u4f7f\u7528WITH\u8bed\u53e5\u5411\u8c03\u7528\u8005\u9690\u85cf\u8fd9\u79cd\u590d\u6742\u6027\u3002\u60a8\u53ef\u80fd\u5df2\u7ecf\u4f7f\u7528\u8fc7\u4e00\u4e2a-\u4f7f\u7528OPEN(\u2026)\u3002\uff0c\u5b83\u603b\u662f\u5728\u60a8\u4f7f\u7528\u5b8c\u6587\u4ef6\u540e\u5c06\u5176\u5173\u95ed\uff0c\u65e0\u8bba\u60a8\u7684\u4ee3\u7801\u8fd4\u56de\u8fd8\u662f\u629b\u51fa\u5f02\u5e38\u3002\n\u5982\u679c\u60a8\u4e0d\u4f7f\u7528\u5b83\u4eec\uff0c\u5b83\u4eec\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u529f\u80fd\uff0c\u503c\u5f97\u5b66\u4e60\u3002\nDynamoDB\u652f\u6301\u5c06\u6570\u5b57\u4f5c\u4e3a\u4e00\u7ea7\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u4f7f\u7528GetItem\u548cPutItem API\u8bfb\u53d6\u548c\u5199\u5165\u6570\u5b57\u503c\u3002PutItem API\u5b8c\u5168\u66ff\u6362\u4e86\u884c\u7684\u5185\u5bb9\uff0c\u8fd9\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5f88\u6709\u7528\u5e76\u4e14\u6613\u4e8e\u6279\u5904\u7406\uff0c\u4f46\u5b83\u5e76\u4e0d\u603b\u662f\u9002\u5408\u8fd9\u9879\u5de5\u4f5c\u7684\u5de5\u5177\u3002\n\u5047\u8bbe\u6211\u4eec\u4f7f\u7528DynamoDB\u6765\u5b58\u50a8\u8ba1\u6570\u5668\u3002\u6211\u4eec\u5e0c\u671b\u9012\u589e\u8ba1\u6570\u5668\u7684\u503c\uff0c\u4f46\u4e0d\u4ece\u8868\u4e2d\u8bfb\u53d6\u73b0\u6709\u503c-\u5982\u679c\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u5728\u8bfb\u53d6\u548c\u5199\u5165\u4e4b\u95f4\u66f4\u65b0\u8ba1\u6570\u5668\uff0c\u6211\u4eec\u5c06\u4e22\u5931\u6570\u636e\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528UpdateItem API\uff0c\u5b83\u53ef\u4ee5\u6839\u636e\u884c\u7684\u73b0\u6709\u503c\u4fee\u6539\u884c\u3002\n\u7c7b\u53d1\u7535\u673a\u8ba1\u7b97\u5668\uff1a.\u3002def add(self\uff0cx\uff1aint\uff0cy\uff1aint)-&gt\uff1bint\uff1a&#34\uff1b&#34\uff1b&#34\uff1b\u5c06\u4e24\u4e2a\u6574\u6570\u76f8\u52a0\u5e76\u8fd4\u56de\u7ed3\u679c\u3002&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b\u4e0e\u81ea\u5df1\u3002row_id()AS CALCULATION_ID\uff1aSelf\u3002\u684c\u5b50\u3002put_item(Item={&#34\uff1bCalculation_id&#34\uff1b\uff1aCalculation_id\uff0c&#34\uff1bsum&#34\uff1b\uff1ax})\u81ea\u8eab\u3002\u684c\u5b50\u3002UPDATE_ITEM(Key={&#34\uff1bCalculation_id&#34\uff1b\uff1aCalculation_id}\uff0cUpdateExpression=&#34\uff1bSet#sum=#sum+\uff1aY&#34\uff1b\uff0cExpressionAttributeNames={&#34\uff1b#sum&#34\uff1b\uff1a&#34\uff1bsum&#34\uff1b}\uff0cExpressionAttributeValues.\u3002\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528PutItem\u5c06\u7b2c\u4e00\u4e2a\u6570\u5b57(X)\u5199\u5165\u5230\u8868\u4e2d\u3002\u7136\u540e\uff0c\u6211\u4eec\u6267\u884c\u4e00\u4e2aUpdateItem\uff0c\u5c06\u7b2c\u4e8c\u4e2a\u6570\u5b57(Y)\u6dfb\u52a0\u5230\u73b0\u6709\u503c\u4e2d\u3002\u6700\u540e\uff0c\u6211\u4eec\u8c03\u7528GetItem\u6765\u68c0\u7d22\u603b\u548c\u3002\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e09\u4e2aAPI\u8c03\u7528\u5408\u5e76\u4e3a\u4e00\u4e2a\u3002UpdateItem API c", "note_en": "On a recent  AWS Cost Optimisation Q&amp;A, Corey Quinn talked about his experiments with  DynamoDB:\n  I\u2019ve been diving deeper into Dynamo than I would expect. It\u2019s surprisingly awesome. I don\u2019t know much about databases, but I\u2019m looking at it, and now I\u2019m wondering:  \u201cDynamo\u2019s awesome, what can I misuse it as?\u201d S3 is my favourite message queue, Route\u00a053 is my favourite database, but I\u2019m not entirely sure what\u2019s going on as far. As far as other creative uses, the things I could misuse. Maybe using Dynamo as a compute service \u2013 I bet I can teach that thing to place chess.\n  DynamoDB is Amazon\u2019s hosted NoSQL service \u2013 basically, a database. It\u2019s a key-value store for holding large amounts of unstructured data. We use DynamoDB for data storage at work, so I know a bit about using it, and I love taking  terrible brilliant ideas and dialling them up to 11.\n  When you\u2019re learning to program, a common task is building a calculator: addition, subtraction, multiplication and division.  This would be a good way to test Amazon\u2019s least-loved compute platform \u2013 can we build a calculator on top of DynamoDB? It turns out we can, and that\u2019s what I\u2019m going to walk through in this post. (Extending this experiment to play chess is left as an exercise for the reader.)\n  For the avoidance of doubt: this is a Bad Idea\u2122. Do not use this code in production, or within a ten-mile radius of a production environment. This is a satire post, not serious programming.\n       DynamoDB supports a wide variety of programming languages, including  Java,  .NET and  Python. I\u2019m going to use Python in this post, because that\u2019s what I\u2019m familiar with, but these ideas can be used in other languages.\n  Within DynamoDB, we run all our computing inside  Table. Within a table, operations run within  Rows. Let\u2019s write some code to create a table for us, and to assign a row ID that we can use to track an individual calculation:\n  import  contextlib import  uuid import  boto3 dynamodb  =  boto3 . resource ( &#34;dynamodb&#34; ) class  DynamoCalculator :  &#34;&#34;&#34; An integer calculator that uses DynamoDB for compute. &#34;&#34;&#34;  def  __enter__ ( self ):  table_name  =  f &#34;calculator-{uuid.uuid4()}&#34;  dynamodb . create_table (  AttributeDefinitions = [{  &#34;AttributeName&#34; :  &#34;calculation_id&#34; ,  &#34;AttributeType&#34; :  &#34;S&#34; ,  }],  TableName = table_name ,  KeySchema = [{  &#34;AttributeName&#34; :  &#34;calculation_id&#34;  ...\n  The context manager handles creation  and cleanup for us \u2013 not only does it create a table for us, it deletes it afterwards. This does create a bit of latency before you can do your first calculation, but it means we don\u2019t have tables hanging around in our account.\n  Remember: the expensive part of the cloud isn\u2019t what you use, it\u2019s what you forget to turn off. This API ensures that we\u2019ll never forget to turn off our table!\n  Serious point:  if you create resources that have cleanup that should always run, context managers are a great way to enforce this in a Python API. Examples are sockets or files, which you should always close when you\u2019re done.\n  In other languages, you use  try \u2026 except \u2026 finally, but the caller has to remember to do the cleanup. Python has the  with statement to hide this complexity from the caller. You\u2019ve probably used one already \u2013  with open(\u2026), which always closes the file once you\u2019re done using it, whether your code returned or threw an exception.\n  If you\u2019re not using them, they\u2019re a powerful feature and worth learning.\n    DynamoDB supports numbers as a first-class type, and we can read and write numeric values with the GetItem and PutItem APIs, respectively. The PutItem API completely replaces the contents of a row, which is useful in some cases and easy to batch, but it\u2019s not always the right tool for the job.\n  Suppose we were using DynamoDB to store a counter. We want to increment the value of the counter, but without reading the existing value from the table \u2013 if another process updated the counter between the read and the write, we\u2019d lose data. For this, we can use the UpdateItem API, which can modify a row based on its existing values.\n    class  DynamoCalculator :  ...  def  add ( self ,  x :  int ,  y :  int )  -&gt;  int :  &#34;&#34;&#34; Adds two integers and returns the result. &#34;&#34;&#34;  with  self . row_id ()  as  calculation_id :  self . table . put_item (  Item = { &#34;calculation_id&#34; :  calculation_id ,  &#34;sum&#34; :  x }  )  self . table . update_item (  Key = { &#34;calculation_id&#34; :  calculation_id },  UpdateExpression = &#34;SET #sum = #sum + :y&#34; ,  ExpressionAttributeNames = { &#34;#sum&#34; :  &#34;sum&#34; },  ExpressionAttributeValues  ...\n  Here we use PutItem to write the first number ( x) to the table. Then we do an UpdateItem to add the second number ( y) to the existing value. Finally, we call GetItem to retrieve the sum.\n  It turns out we can consolidate these three API calls into one. The UpdateItem API creates a row if it doesn\u2019t exist yet (saving the PutItem), and we can also ask it to give us the value it just wrote to the row (saving the GetItem). Here\u2019s what the consolidated version looks like:\n  class  DynamoCalculator :  ...  def  add ( self ,  x :  int ,  y :  int )  -&gt;  int :  &#34;&#34;&#34; Adds two integers and returns the result. &#34;&#34;&#34;  with  self . row_id ()  as  calculation_id :  resp  =  self . table . update_item (  Key = { &#34;calculation_id&#34; :  calculation_id },  UpdateExpression = &#34;SET #sum = :x + :y&#34; ,  ExpressionAttributeNames = { &#34;#sum&#34; :  &#34;sum&#34; },  ExpressionAttributeValues = { &#34;:x&#34; :  x ,  &#34;:y&#34; :  y },  ReturnValues = &#34;ALL_NEW&#34;  )  return  ...\n    with  DynamoCalculator ()  as  calculator :  print ( calculator . add ( 1 ,  2 ))  # 3  print ( calculator . add ( 5 ,  3 ))  # 8  print ( calculator . add ( 5 ,  - 1 ))  # 4\n  Addition is a very common operation, so it\u2019s important we make it as fast as possible. Consolidating three API calls into one is a good optimisation!\n    Subtraction is the opposite of addition, with the convenient property that subtracting  y is the same as adding (negative  y). This leads some people to define subtraction like so:\n  def  subtract ( self ,  x :  int ,  y :  int )  -&gt;  int :  &#34;&#34;&#34; Subtracts one integer from another and returns the result. &#34;&#34;&#34;  return  self . add ( x ,  - y )\n  But you and I know these people are feeble and weak-willed. This approach uses Python to reverse the sign of  y for us, which is a computational operation. What\u2019s the point of having a compute platform like DynamoDB if we don\u2019t use it for computing?\n  DynamoDB\u2019s UpdateItem API supports subtraction as well as addition, which is a much better approach:\n  class  DynamoCalculator :  ...  def  subtract ( self ,  x :  int ,  y :  int )  -&gt;  int :  &#34;&#34;&#34; Subtracts one integer from another and returns the result. &#34;&#34;&#34;  with  self . row_id ()  as  calculation_id :  resp  =  self . table . update_item (  Key = { &#34;calculation_id&#34; :  calculation_id },  UpdateExpression = &#34;SET #difference = :x - :y&#34; ,  ExpressionAttributeNames = { &#34;#difference&#34; :  &#34;difference&#34; },  ExpressionAttributeValues = { &#34;:x&#34;\n      This is where things get a bit trickier \u2013 the UpdateExpression used by the UpdateItem API doesn\u2019t support multiplication, only addition and subtraction. We\u2019ll have to build our own implementation of multiplication. A simple approach is to use a recursive algorithm:\n  def multiply(x, y): if y == 0: return 0 else: return x + multiply(x, y - 1)\n    multiply(5, 3) = 5 + multiply(5, 2) = 5 + (5 + multiply(5, 1)) = 5 + (5 + (5 + multiply(5, 0))) = 5 + (5 + (5 + 0)) = 15\n    If we want to implement this, we need a test for equality, and branching statements. How do we do that? We could use Python, or we could find a way to do them with DynamoDB. We both know what the correct answer is.\n  Let\u2019s start by testing if two integers are the same. For this, we can misuse  conditional operations.\n  Suppose we were using DynamoDB to store date-based information. Each row includes a timestamp, and we want newer data to replace older data, but not the other way around. We could do a GetItem and then a PutItem before we write anything, but if the row changes between the Get and the Put, we could write bad data.\n  A better approach would be to supply a condition with our PutItem \u2013 for example,  \u201conly update this row if the timestamp in the new row is greater than the timestamp in the already-stored row\u201d. If the condition is true, the write succeeds. If the condition is false, the write fails and we get an error.\n  One of the conditions you can specify is that two values are the same. So let\u2019s try to write to the table with this condition \u2013 if it succeeds, the numbers are equal; if it fails, they\u2019re not.\n  class  DynamoCalculator :  ...  def  eq ( self ,  x :  int ,  y :  int )  -&gt;  bool :  &#34;&#34;&#34; Returns True if two integers are equal, False otherwise. &#34;&#34;&#34;  with  self . row_id ()  as  calculation_id :  try :  self . table . put_item (  Item = { &#34;calculation_id&#34; :  calculation_id },  ConditionExpression = &#34;:x = :y&#34; ,  ExpressionAttributeValues = { &#34;:x&#34; :  x ,  &#34;:y&#34; :  y },  )  except  Exception  as  exc :  return  False  else :  return  ...\n  (We are using a bit of Python control flow for the  try \u2026 except block \u2013 I can\u2019t think of a better way to do this, but at least the equality testing is done inside DynamoDB.)\n  Next, let\u2019s use DynamoDB to implement basic control flow. For an IF statement, we have a condition, an \u201cif true\u201d action, and an \u201cif false\u201d action. We can continue to misuse conditional operations, and pass the boolean directly to DynamoDB:\n  from  typing  import  Callable class  DynamoCalculator :  ...  def  if_ (  self ,  condition :  bool ,  if_true :  Callable [[],  int ],  if_false :  Callable [[],  int ]  )  -&gt;  bool :  &#34;&#34;&#34; If ``condition`` is True, returns the output of ``if_true``. If ``condition`` is False, returns the output of ``if_false``. &#34;&#34;&#34;  with  self . row_id ()  as  calculation_id :  try :  self . table . put_item (  Item = { &#34;calculation_id&#34; :  calculation_id  ...\n  Notice that this code doesn\u2019t call \u201cif_true\u201d or \u201cif_false\u201d until they\u2019re needed. This is a sophisticated programming technique called   lazy evaluation, and our ability to use it here speaks to the power of DynamoDB as a computing platform.\n    class  DynamoCalculator :  ...  def  multiply ( self ,  x :  int ,  y :  int )  -&gt;  int :  &#34;&#34;&#34; Multiplies two integers and returns the result. &#34;&#34;&#34;  def  if_y_non_zero ():  return  self . add ( x ,  self . multiply ( x ,  self . subtract ( y ,  1 )))  return  self . if_ (  self . eq ( y ,  0 ),  if_true = lambda :  0 ,  if_false = if_y_non_zero  )\n  This works if  y is positive or zero, but if  y is negative it keeps decrementing forever. We need to tweak our algorithm slightly:\n  def multiply(x, y): if y == 0: return 0 elif y &lt; 0: return -1 * multiply(x, -y) else: return x + multiply(x, y - 1)\n  We can get  -y by computing  0 - y, and similar for  -1 * multiply(x, -y). This leaves the problem of working out if  y is negative.\n  DynamoDB supports all the logical operators in conditional updates, so we can follow the same technique we\u2019ve already used twice:\n  class  DynamoCalculator :  ...  def  lt ( self ,  x :  int ,  y :  int )  -&gt;  int :  &#34;&#34;&#34; Returns True if x &lt; y, False otherwise. &#34;&#34;&#34;  with  self . row_id ()  as  calculation_id :  try :  self . table . put_item (  Item = { &#34;calculation_id&#34; :  calculation_id },  ConditionExpression = &#34;:x &lt; :y&#34; ,  ExpressionAttributeValues = { &#34;:x&#34; :  x ,  &#34;:y&#34; :  y },  )  except  Exception  as  exc :  return  False  else  ...\n  This gives us the last piece we need to create a fully working multiplication function:\n  class  DynamoCalculator :  ...  def  multiply ( self ,  x :  int ,  y :  int )  -&gt;  int :  &#34;&#34;&#34; Multiplies two integers and returns the result. &#34;&#34;&#34;  def  if_y_non_negative ():  return  self . add ( x ,  self . multiply ( x ,  self . subtract ( y ,  1 )))  def  if_y_negative ():  y_pos  =  self . subtract ( 0 ,  y )  return  self . subtract ( 0 ,  self . multiply ( x ,  y_pos ))  return  self . if_ (  self . eq ( y ,  0 ),  if_true = lambda :  0 ,  if_false = lambda  ...\n      def divide(x, y): if y &lt; 0: return -1 * divide(x, -y) else: if x &lt; y: return 0 else: return 1 + divide(x - y, y)\n    class  DynamoCalculator :  ...  def  divide ( self ,  x :  int ,  y :  int )  -&gt;  int :  &#34;&#34;&#34; Divides x by y and returns the result. Assumes y != 0. &#34;&#34;&#34;  def  if_y_negative ():  return  self . subtract ( 0 ,  self . divide ( x ,  self . subtract ( 0 ,  y )))  def  if_y_positive ():  return  self . if_ (  self . lt ( x ,  y ),  if_true = lambda :  0 ,  if_false = lambda :  self . add ( 1 ,  self . divide ( self . subtract ( x ,  y ),  y ))  )  return  self  ...\n  This is the great thing about building our calculator from a library of reusable functions and operators: we can combine them to create more sophisticated functions.\n    We can continue to compose the functions we\u2019ve already written to round out our calculator.\n  We can get \u201cnot equal to\u201d by defining a NOT operator, and applying that to the output of \u201ceq()\u201d:\n  def  not_ ( self ,  condition :  bool )  -&gt;  bool :  &#34;&#34;&#34; Returns the negation of ``condition``. &#34;&#34;&#34;  return  self . if_ (  condition ,  if_true = lambda :  False ,  if_false = lambda :  True  )  def  ne ( self ,  x :  int ,  y :  int )  -&gt;  bool :  &#34;&#34;&#34; Returns True if two integers are different, False otherwise. &#34;&#34;&#34;  return  self . not_ ( self . eq ( x ,  y ))\n  We can define \u201cless than or equal to\u201d by defining an OR operator, and applying that to the output of \u201clt()\u201d and \u201ceq()\u201d:\n  def  or_ ( self ,  condition1 :  bool ,  condition2 :  bool )  -&gt;  bool :  &#34;&#34;&#34; Returns True if at least one of ``condition1`` and ``condition2`` is True. &#34;&#34;&#34;  int_1  =  self . if_ ( condition1 ,  if_true = lambda :  1 ,  if_false = lambda :  0 )  int_2  =  self . if_ ( condition2 ,  if_true = lambda :  1 ,  if_false = lambda :  0 )  return  self . ne ( self . add ( int_1 ,  int_2 ),  0 )  def  le ( self ,  x :  int ,  y :  int )  -&gt;  ...\n  We can define \u201cgreater than\u201d and \u201cgreater than or equal to\u201d as the negation of \u201cless than or equal to\u201d and \u201cless than\u201d, respectively:\n  def  gt ( self ,  x :  int ,  y :  int )  -&gt;  bool :  &#34;&#34;&#34; Returns True if x &gt; y, False otherwise. &#34;&#34;&#34;  return  self . not_ ( self . le ( x ,  y ))  def  ge ( self ,  x :  int ,  y :  int )  -&gt;  bool :  &#34;&#34;&#34; Returns True if x &gt;= y, False otherwise. &#34;&#34;&#34;  return  self . not_ ( self . lt ( x ,  y ))\n  And finally, for completion\u2019s sake, let\u2019s define an AND operator and a NAND operator:\n  def  and_ ( self ,  condition1 :  bool ,  condition2 :  bool )  -&gt;  bool :  &#34;&#34;&#34; Returns True if both ``condition1`` and ``condition2`` are True. &#34;&#34;&#34;  int_1  =  self . if_ ( condition1 ,  if_true = lambda :  1 ,  if_false = lambda :  0 )  int_2  =  self . if_ ( condition2 ,  if_true = lambda :  1 ,  if_false = lambda :  0 )  return  self . eq ( self . add ( int_1 ,  int_2 ),  2 )  def  nand ( self ,  condition1 :  bool  ...\n  The  NAND gate is a key part of processor design, and being able to do it only using DynamoDB proves its capabaility as a computing platform.\n    This post shows the potential for using DynamoDB as a cloud computing platform. We were able to implement a simple calculator, comparison operators, and even better, a set of  logical gates (AND, OR, NOT and NAND). This lays the foundation for building far more sophisticated programs.\n  Performance remains an issue. As we \u2019d expect, simple operations (addition, subtraction) are faster than more complex operations (multiplication, division), but there \u2019s room for improvement in both areas. It \u2019s not clear whether the bottleneck is DynamoDB itself, or my home internet connection. Hopefully a future update will bring the ability to run code directly  ...\n  Pricing follows the usual AWS model of \u201cclear as mud\u201d. DynamoDB pricing is based on  how many read and write \u201cunits\u201d you use, but it\u2019s not obvious how many units a given operation might require.\n  It\u2019s too soon to recommend using DynamoDB for production compute workloads, but these early signs are promising. I hope Amazon continues to work on improving DynamoDB, and I look forward to seeing how other people use it in future.\n        DynamoDB isn\u2019t a compute platform, it\u2019s a database. Still not a question. And you\u2019re wrong \u2013 it  is a compute platform, as this experiment shows.\n  Why did you do this? Finally, a proper question! Partly for fun, partly as a way to get some practice with the gnarly bits of the DynamoDB API that I forget every time I use.\n  Can I get all the code you\u2019ve written? Sure, it\u2019s all here:\n      #!/usr/bin/env python &#34;&#34;&#34;What happens if you try to use DynamoDB as an integer calculator?&#34;&#34;&#34; import  contextlib from  typing  import  Callable import  uuid import  boto3 dynamodb  =  boto3 . resource ( &#34;dynamodb&#34; ) class  DynamoCalculator :  &#34;&#34;&#34; An integer calculator that uses DynamoDB for compute. &#34;&#34;&#34;  def  __enter__  ...", "posttime": "2020-05-03 04:19:22", "tags": "dynamodb", "title": "\u4f7f\u7528DynamoDB\u4f5c\u4e3a\u8ba1\u7b97\u5668", "title_en": "Using DynamoDB as a Calculator", "transed": 1, "url": "https://alexwlchan.net/2020/04/using-dynamodb-as-a-calculator/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["dynamodb"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000404, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6d88\u9664\u5197\u4f59\u901a\u5e38\u88ab\u89c6\u4e3a\u63d0\u9ad8\u751f\u4ea7\u6548\u7387\u548c\u51cf\u5c11\u6d6a\u8d39\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u4f46\u662f\uff0c\u6b63\u786e\u7684\u5197\u4f59\u53ef\u4ee5\u6781\u5927\u5730\u63d0\u9ad8\u8d28\u91cf\u3002\u4f8b\u5982\uff0c\u4e2d\u4e16\u7eaa\u53d1\u660e\u7684\u590d\u5f0f\u7c3f\u8bb0\u662f\u4f1a\u8ba1\u7684\u4e00\u5927\u8fdb\u6b65\uff0c\u56e0\u4e3a\u5b83\u5f15\u5165\u4e86\u5197\u4f59\uff0c\u51e0\u4e4e\u6d88\u9664\u4e86\u5e38\u89c1\u7684\u7b97\u672f\u9519\u8bef\u3002\n\u826f\u597d\u7684\u5197\u4f59\u901a\u8fc7\u5177\u6709\u901a\u5f80\u76f8\u540c\u7ed3\u679c\u7684\u4e24\u4e2a\u72ec\u7acb\u8def\u5f84\u6765\u68c0\u6d4b\u6545\u969c\u3002\u4e00\u6761\u8def\u5f84\u4e2d\u7684\u6545\u969c\u4e0d\u4f1a\u5f71\u54cd\u53e6\u4e00\u6761\u8def\u5f84\uff0c\u56e0\u6b64\u7ed3\u679c\u4e2d\u7684\u5dee\u5f02\u8868\u660e\u5b58\u5728\u9519\u8bef\u3002\n\u4e0d\u826f\u5197\u4f59\u7684\u533a\u522b\u5728\u4e8e\u8981\u4e48\u4e0d\u63d0\u4f9b\u53ef\u68c0\u67e5\u7684\u7ed3\u679c\uff0c\u8981\u4e48\u5197\u4f59\u8def\u5f84\u76f8\u4e92\u4f9d\u8d56\uff0c\u4f7f\u5f97\u4e00\u6761\u8def\u5f84\u4e2d\u7684\u9519\u8bef\u4f20\u64ad\u5230\u53e6\u4e00\u6761\u8def\u5f84\uff0c\u56e0\u6b64\u9519\u8bef\u7684\u7ed3\u679c\u662f\u4e00\u81f4\u7684\u3002\n\u7f16\u7a0b\u8bed\u8a00\u5e7f\u6cdb\u4f7f\u7528\u5b83\u6765\u51cf\u5c11\u7f16\u7801\u9519\u8bef\u3002\u5982\u679c\u4e00\u79cd\u8bed\u8a00\u5b8c\u5168\u6ca1\u6709\u5197\u4f59\uff0c\u90a3\u4e48\u4efb\u4f55\u968f\u673a\u7684\u5b57\u7b26\u5e8f\u5217\u90fd\u662f\u6709\u6548\u7684\u7a0b\u5e8f\u3002\u7f16\u8bd1\u5668\u751f\u6210\u7684\u6bcf\u6761\u9519\u8bef\u6d88\u606f\u90fd\u662f\u67e5\u627e\u7528\u6237\u9519\u8bef\u7684\u8bed\u8a00\u4e2d\u7684\u5197\u4f59\u793a\u4f8b\u3002\u51e0\u4e4e\u6ca1\u6709\u5197\u4f59\u7684\u8bed\u8a00\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u673a\u5668\u4ee3\u7801-\u51e0\u4e4e\u4efb\u4f55\u4f4d\u6a21\u5f0f\u90fd\u662f\u6709\u6548\u7684\u64cd\u4f5c\u7801\u3002\u4efb\u4f55\u4e3a\u673a\u5668\u4ee3\u7801\u7f16\u5199\u8fc7\u53cd\u6c47\u7f16\u7a0b\u5e8f\u7684\u4eba\u90fd\u77e5\u9053\u8fd9\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u7684\u2026\u2026\u3002\n\u53d8\u91cf\u58f0\u660e\u5c31\u662f\u5176\u4e2d\u4e4b\u4e00\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u7f16\u8bd1\u5668\u53ef\u4ee5\u6839\u636e\u4e0a\u4e0b\u6587\u8ba1\u7b97\u51fa\u58f0\u660e\u7684\u9700\u8981\uff0c\u6240\u4ee5\u58f0\u660e\u4f3c\u4e4e\u662f\u53ef\u4ee5\u4e22\u5f03\u7684\u4e3b\u8981\u5197\u4f59\u3002\u8fd9\u79f0\u4e3a\u9690\u5f0f\u53d8\u91cf\u58f0\u660e\u3002\u8fd9\u542c\u8d77\u6765\u662f\u4e2a\u597d\u4e3b\u610f\uff0c\u800c\u4e14\u5b83\u7ecf\u5e38\u88ab\u8f7d\u5165\u65b0\u7684\u8bed\u8a00\u4e2d\u3002\u95ee\u9898\u662f\uff0c\u7f16\u8bd1\u5668\u65e0\u6cd5\u533a\u5206\u9884\u671f\u7684\u65b0\u58f0\u660e\u548c\u6253\u5b57\u9519\u8bef-\u7ef4\u62a4\u4e0d\u5584\u7684\u7a0b\u5e8f\u5458\u4e5f\u65e0\u6cd5\u533a\u5206\u3002\u4e0d\u8fc7\uff0c\u8fc7\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u90a3\u4e2a..\u3002\n\u4e3a\u4ec0\u4e48\u9700\u8981\u5206\u53f7\uff1f\u7f16\u8bd1\u5668\u5b8c\u5168\u6709\u80fd\u529b\u5f04\u6e05\u695a\u8fd9\u4e00\u70b9\u3002\u4f46\u662f\uff0c\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\u5462\uff1a\n\u8fd9\u53ef\u4ee5\u662f(x=3+y*p++)\uff0c\u5176\u4e2d*\u662f\u4e58\u6cd5\u800c\u4e0d\u662f\u95f4\u63a5\u7684\u3002\u7f3a\u5c11\u5206\u53f7\u4e5f\u4f1a\u4f7f\u9519\u8bef\u6062\u590d\u53d8\u5f97\u5f88\u5dee\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u65e0\u6cd5\u8ba1\u7b97\u51fa\u5f53\u524d\u9519\u8bef\u8bed\u53e5\u7684\u7ed3\u675f\u4f4d\u7f6e\u548c\u4e0b\u4e00\u4e2a\u9519\u8bef\u8bed\u53e5\u7684\u5f00\u59cb\u4f4d\u7f6e\u3002\u5206\u53f7\u5728\u6587\u672c\u4e2d\u5f62\u6210\u6f02\u4eae\u7684\u201c\u951a\u201d\uff0c\u5e2e\u52a9\u7f16\u8bd1\u5668\u548c\u9605\u8bfb\u5668\u4e0e\u4ee3\u7801\u7ed3\u6784\u540c\u6b65\u3002\n(JavaScript\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u5176\u4e2d\u5206\u53f7\u662f\u53ef\u9009\u7684\uff0c\u5e76\u4e14\u662f\u4ece\u8bed\u6cd5\u4e2d\u63a8\u65ad\u51fa\u6765\u7684\u3002Python\u4e0d\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u56e0\u4e3a\u5b83\u4ecd\u7136\u4f7f\u7528\u50cf\\n\u8fd9\u6837\u7684\u8bcd\u6cd5\u63d0\u793a\u6765\u6307\u793a\u8bed\u53e5\u7684\u7ed3\u675f\u3002)\u3002\n\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5197\u4f59\u7684\u6700\u4f73\u793a\u4f8b\u53ef\u80fd\u662f\u5355\u5143\u6d4b\u8bd5\u3002\u5355\u5143\u6d4b\u8bd5\u662f\u51fd\u6570\u529f\u80fd\u7684\u53e6\u4e00\u79cd\u89c4\u8303\uff0c\u4f46\u5b83\u4eec\u6307\u5b9a\u7684\u4e0d\u662f\u65b9\u6cd5\uff0c\u800c\u662f\u7ed3\u679c\u3002\u5728\u7ed3\u679c\u4e2d\u91cd\u73b0\u7684\u65b9\u6cd5\u4e2d\u51fa\u73b0\u76f8\u540c\u9519\u8bef\u7684\u51e0\u7387\u975e\u5e38\u3001\u975e\u5e38\u4f4e\u3002\u8fd9\u610f\u5473\u7740\u5373\u4f7f\u53ea\u9002\u5ea6\u4f7f\u7528\u5355\u5143\u6d4b\u8bd5\u4e5f\u53ef\u4ee5\u663e\u8457\u63d0\u9ad8\u7a0b\u5e8f\u8d28\u91cf\uff0c\u8fd9\u5c31\u662fD\u7f16\u7a0b\u8bed\u8a00\u5185\u7f6e\u5355\u5143\u6d4b\u8bd5\u652f\u6301\u7684\u539f\u56e0\u3002\n\u5197\u4f59\u5e76\u4e0d\u603b\u662f\u597d\u7684\u3002\u4f8b\u5982\uff0c\u5728C\u8bed\u8a00\u4e2d\uff0c\u6e90\u4ee3\u7801\u5206\u4e3a\u5934\u6587\u4ef6\u548c\u5b9e\u73b0\u6587\u4ef6\u3002\u58f0\u660e\u5728\u8fd9\u4e24\u4e2a\u7248\u672c\u4e2d\u90fd\u6709\u8f6c\u8f7d\u3002\u8fd9\u79cd\u5197\u4f59\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u526f\u672c\u662f\u5b57\u9762\u4e0a\u590d\u5236\u7684\u6587\u672c-\u5176\u4e2d\u4e00\u4e2a\u4e2d\u7684\u9519\u8bef\u88ab\u7b80\u5355\u5730\u590d\u5236\u5230\u53e6\u4e00\u4e2a\u4e2d\uff0c\u6ca1\u6709\u8d4b\u4e88\u5197\u4f59\u4efb\u4f55\u4ef7\u503c\u3002\u6709\u7528\u7684\u5197\u4f59\u9700\u8981\u662f\u72ec\u7acb\u7684\u3002\n\u4e4d\u4e00\u770b\uff0c\u8fd9\u770b\u8d77\u6765\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5197\u4f59\u3002\u5b83\u6b63\u5728\u68c0\u67e5tmp\u7684\u7c7b\u578b\u662f\u5426\u4e3aint\u3002\u4f46\u662f\u4e0d\uff0c\u5b83\u6ca1\u6709\u68c0\u67e5\u7c7b\u578b\uff0c\u5b83\u5f3a\u5236\u7c7b\u578b\u4e3aint\uff0c\u5e76\u5c06\u521d\u59cb\u5316\u5f0f(a+b)\u8f6c\u6362\u4e3aint\u3002\u5982\u679ca\u548cb\u88ab\u91cd\u65b0\u58f0\u660e\u4e3a\u67d0\u4e2a\u5176\u4ed6\u7c7b\u578b(\u5982\u65e0\u7b26\u53f7\u6216\u6d6e\u70b9\u578b)\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u95ee\u9898\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cD\u7f16\u7a0b\u8bed\u8a00\u5f15\u5165\u4e86auto\uff0c\u5c06tmp\u58f0\u660e\u4e3a(a+b)\u7c7b\u578b\uff1a\n\u4e00\u79cd\u5e38\u89c1\u7684\u60c5\u51b5\u662fC++\u4e2d\u58f0\u660e\u548c\u8868\u8fbe\u5f0f\u4e4b\u95f4\u7684\u8bed\u6cd5\u6b67\u4e49\u3002\u4f8b\u5982\uff1a\n\u8fd9\u662f\u5c06P\u58f0\u660e\u4e3a\u6307\u5411T\u7684\u6307\u9488\uff0c\u8fd8\u662f\u5c06T\u548cP\u76f8\u4e58\uff1f\u5728\u8fd9\u91cc\uff0c\u5c11\u91cf\u7684\u5197\u4f59\u5c06\u4f1a\u6709\u5f88\u5927\u7684\u5e2e\u52a9\u3002\n\u5728C++\u4e2d\uff0c\u91cd\u8f7d\u4f7f\u7528&lt\uff1b\u548c&gt\uff1b\u6765\u8868\u793a\u6a21\u677f\u53c2\u6570\u5217\u8868\u3002\u4ec0\u4e48\u529f\u80fd\uff1a\n\u523b\u8584\uff1f\u8fd9\u79cd\u7f3a\u4e4f\u5197\u4f59\u6027\u7684\u540e\u679c\u662f\u51fa\u4e86\u540d\u7684\u8fdf\u949d\u9519\u8bef\u6d88\u606f\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u6ca1\u6709\u592a\u591a\u7684\u4fe1\u606f\u6765\u6307\u5bfc\u5b83\u731c\u6d4b\u7528\u6237\u7684\u610f\u56fe\u3002\nC++\u6dfb\u52a0\u4e86\u4e00\u4e9b\u5173\u952e\u5b57\uff0c\u5982typeName\uff0c\u4ee5\u53ca\u4e00\u4e9b\u4ea7\u54c1\uff0c\u5982-&gt\uff1btemplate\uff0c\u4ee5\u589e\u52a0\u5197\u4f59\uff0c\u4ece\u800c\u6539\u8fdb\u9519\u8bef\u68c0\u67e5\u548c\u8bca\u65ad\u3002\n\u901a\u8fc7\u67e5\u770b\u7f16\u8bd1\u5668\u5b9e\u73b0\u8005\u503e\u5411\u4e8e\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u6dfb\u52a0\u7684\u8b66\u544a\u8bca\u65ad\uff0c\u60a8\u53ef\u4ee5\u611f\u89c9\u5230\u8bed\u8a00\u4e2d\u7f3a\u5c11\u5197\u4f59\u7684\u5730\u65b9\u3002\u5bf9\u4e8e\u65b0\u8bed\u8a00\u7684\u8bbe\u8ba1\u8005\u6765\u8bf4\uff0c\u5e38\u89c1\u7684\u8b66\u544a\u662f\u6539\u8fdb\u7075\u611f\u7684\u4e30\u5bcc\u6765\u6e90\u3002\n\u8bb8\u591a\u7f16\u7a0b\u8bed\u8a00\u8bbe\u8ba1\u8005\u9519\u8bef\u5730\u8ba4\u4e3a\u6d88\u9664\u5197\u4f59\u53ef\u4ee5\u63d0\u9ad8\u7a0b\u5e8f\u5458\u7684\u5de5\u4f5c\u6548\u7387\u3002\u8fd9\u4e00\u70b9\u901a\u8fc7\u5c0f\u7684\u57fa\u51c6\u6765\u5c55\u793a\uff0c\u8868\u660e\u5b83\u4eec\u662f\u591a\u4e48\u7b80\u6d01\uff0c\u6697\u793a\u7b80\u6d01\u4f7f\u4e00\u79cd\u8bed\u8a00\u53d8\u5f97\u5f3a\u5927\u548c\u5bcc\u6709\u8868\u73b0\u529b\u3002\u8fd9\u5bf9\u4e8e\u5c0f\u7a0b\u5e8f\u786e\u5b9e\u5f88\u6709\u6548\uff0c\u6bd4\u5982\u53ea\u6709\u51e0\u4e2a\u811a\u672c", "note_en": "Eliminating redundancy is often viewed as a way to streamline\rproductivity and reduce waste. But the right kind of redundancy\rcan dramatically improve quality. For example,\r double entry bookkeeping,\rinvented in the middle ages, was a great advance\rin accounting because it introduced a redundancy that nearly eliminated\rcommon arithmetic errors.\n    A good redundancy detects faults by having two independent\rpaths to the same result. A failure in one path does not affect the other,\rso the discrepancy in result indicates an error.\n  A bad redundancy is distinguished by either not providing a checkable\rresult, or by having the redundant paths dependent on each other in\rsuch a way that an error in one path propagates to the other, so the wrong\rresults agree.\n  Programming languages extensively use this to reduce coding errors. If there was no redundancy at all in a language, then any random sequence of characters would be a valid program. Every error message generated by the compiler is an example of redundancy in the language that finds user errors. An example of a language with next to no redundancy is machine code \u2014nearly any bit pattern is a valid opcode. Anyone who \u2019s written a disassembler for machine code knows that it \u2019s nearly impossible  ...\n    Variable declarations are one. But since the compiler can figure the need for declarations from the context, declarations seem like prime redundancies that can be jettisoned. This is called implicit variable declaration. It sounds like a great idea, and it gets regularly enshrined into new languages. The problem is, the compiler cannot tell the difference between an intended new declaration and a typo \u2014and the poor maintenance programmer can \u2019t tell, either. After a while, though, the  ...\n      why would semicolons be needed? The compiler is perfectly capable of figuring\rthat out. But what about:\n    that could be  (x = 3 + y * p++) where the  * is a multiply rather than an\rindirection. Lack of semicolons also makes error recovery poor, as the\rcompiler cannot figure out where the current wrong statement ends and the\rnext one starts. Semicolons make for nice \u201canchors\u201d in the text that help\rboth the compiler and the reader synchronize with the code structure.\n  (Javascript is an example where the semicolon is optional and is inferred\rfrom the grammar. Python is not an example, because it still uses lexical\rcues like  \\n to indicate the end of a statement.)\n  Probably the best example of redundancy in a programming language is\runit tests. Unit tests are an alternative specification for what a function\rdoes, but rather than specify the method, they specify the results.\rThe odds of the same error in the method being reproduced in the results\rare very, very low. This means that even only moderate use of\runit tests can dramatically improve program quality, which is why\runit test support is built in to the D programming language.\n    Redundancy isn\u2019t always good. In C, for example, source code is divided\rup into header files and implementation files. The declarations are reproduced\rin both. The problem with this redundancy is that the copies are literally\rcopied text \u2014 an error in one is simply copied to the other, giving no\rvalue to the redundancy. A useful redundancy needs to be independent.\n      At first glance, this looks like a good redundancy. It\u2019s checking that the\rtype of  tmp is  int. But no, it isn\u2019t checking the type, it\u2019s forcing\rthe type to be  int, and converting the initializer  (a+b) to be  int.\rThis can result in problems if  a and  b are redeclared as some other type,\rlike  unsigned or  float. To\rsolve this problem, the D programming language has introduced  auto to\rhave  tmp declared as the type of  (a+b):\n        A common case is the syntactic ambiguity between declarations and expressions\rin C++. For example:\n    Is that a declaration of  P as a pointer to  T, or is it multiplying  T and  P?\rA little redundancy would go a long way here.\n  There\u2019s the overloaded use of  &lt; and  &gt; to denote template argument lists in C++.\rWhat does:\n    mean? The consequence of this lack of redundancy is notoriously obtuse error\rmessages as the compiler has too little to guide it in guessing at what\rthe user\u2019s intent is.\n  C++ has added some keywords, like  typename, and some productions, like\r -&gt;template, to add redundancy and so improve\rerror checking and diagnostics.\n  You can get a feel for where redundancy in a language is lacking by looking\rat warning diagnostics the compiler implementors tend to add over time.\rFor the designer of a new language, common warnings are a rich source of\rinspiration for improvements.\n    Many programming language designers mistakenly assume that removing redundancy makes programmers more productive. This is exhibited with small benchmarks showing how terse they are, with the implication that terseness makes a language powerful and expressive. And this does work great for small programs, such as scripts that are only a few lines long. But it doesn \u2019t scale well, and this rapidly becomes apparent as the source code gets larger and  ...\n  Well\u2014designed redundancy can, however, dramatically improve productivity\rwith its ability to uncover errors early in the development process.\rRedundancy not only helps find errors, it helps produce better error\rmessages, and helps the maintenance programmer in understanding the intent\rof the code.\n  The trick, of course, is figuring out which redundancies are good,\rand which aren\u2019t.", "posttime": "2020-05-03 04:19:16", "tags": "\u7f16\u7a0b,programming language,\u7f16\u7a0b\u8bed\u8a00,programming,\u9519\u8bef", "title": "\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u5197\u4f59", "title_en": "Redundancy in Programming Languages", "transed": 1, "url": "https://www.digitalmars.com/articles/b05.html", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u7f16\u7a0b", "language", "\u7f16\u7a0b\u8bed\u8a00", "\u9519\u8bef"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000403, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ece\u4e00\u5f00\u59cb\uff0cBluecore\u5c31\u8fd0\u884c\u5728Google Cloud Platform(GCP)\u4e0a\u3002\u5230\u4e86\u6784\u5efa\u9ad8\u6027\u80fd\u670d\u52a1\u7684\u65f6\u5019\uff0c\u6211\u4eec\u81ea\u7136\u800c\u7136\u5730\u5e0c\u671b\u5229\u7528GCP\u57fa\u7840\u8bbe\u65bd\uff0c\u800c\u4e0d\u662f\u81ea\u5df1\u6784\u5efa\u5b83\u3002\u901a\u8fc7\u4f7f\u7528Kubernetes(GKE)\u3001Redis(MemoryStore)\u3001BigTable\u548c\u5176\u4ed6GCP\u6280\u672f\uff0c\u6211\u4eec\u80fd\u591f\u6784\u5efa\u5177\u6709\u8db3\u591f\u5e26\u5bbd\u548c\u5ef6\u8fdf\u7684\u670d\u52a1\uff0c\u6bcf\u79d2\u53d1\u900110000\u4e2a\u4e2a\u6027\u5316\u63a8\u8350\u3002\n\u4f60\u5f88\u53ef\u80fd\u6536\u5230\u4e86\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\uff0c\u5f15\u8bf1\u4f60\u8d2d\u4e70\u4f60\u653e\u5728\u7f51\u4e0a\u8d2d\u7269\u8f66\u91cc\u7684\u4e00\u79cd\u4ea7\u54c1\uff0c\u800c\u4e14\u5b83\u53ef\u80fd\u8fd8\u9644\u5e26\u4e86\u4e00\u4e9b\u5176\u4ed6\u63a8\u8350\u7684\u4ea7\u54c1\u3002\u6211\u4eec\u662f\u600e\u4e48\u60f3\u51fa\u8fd9\u4e9b\u4ea7\u54c1\u6765\u63a8\u8350\u6d88\u8d39\u8005\u7684\u5462\uff1f\u5728Bluecore\uff0c\u6211\u4eec\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u521b\u5efa\u4ea7\u54c1\u63a8\u8350\uff1a\u901a\u8fc7\u4ea7\u54c1\u63a8\u8350\u6216\u901a\u8fc7\u6d88\u8d39\u8005\u884c\u4e3a\u63a8\u8350\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u6839\u636e\u6700\u8fd1\u67e5\u770b\u6216\u4ee5\u524d\u8d2d\u4e70\u7684\u4ea7\u54c1\u6765\u63a8\u8350\u4ea7\u54c1\u3002Bluecore\u5df2\u7ecf\u5f00\u53d1\u51fa\u5f3a\u5927\u7684\u6570\u636e\u6a21\u578b\u6765\u8ba1\u7b97.\u3002\n\u5c06\u4ea7\u54c1\u6620\u5c04\u5230\u7528\u6237\u5e76\u4e0d\u662f\u4e00\u4e2a\u770b\u8d77\u6765\u90a3\u4e48\u7b80\u5355\u7684\u8fc7\u7a0b\u3002\u6211\u4eec\u8bc4\u4f30\u6709\u5173\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u5c06\u54ea\u4e9b\u4ea7\u54c1\u63d2\u5165\u7535\u5b50\u90ae\u4ef6\u7684\u89c4\u5219\u3002\u4f8b\u5982\uff0c\u4e0d\u5305\u62ec\u7f3a\u8d27\u6216\u6253\u6298\u7684\u4ea7\u54c1\u3002\u56e0\u4e3a\u6211\u4eec\u53ea\u5c55\u793a\u6709\u6548\u7684\u4ea7\u54c1\u662f\u5f88\u91cd\u8981\u7684\uff0c\u6211\u4eec\u5fc5\u987b\u6709\u4e00\u4e2a\u6700\u65b0\u7684\u4ea7\u54c1\u76ee\u5f55\u3002\u5bf9\u4e8e\u4efb\u4f55\u4e00\u5bb6\u7ed9\u5b9a\u7684\u96f6\u552e\u5e97\uff0c\u4ea7\u54c1\u90fd\u662f\u4e0d\u65ad\u53d8\u5316\u7684\u3002\u56e0\u6b64\uff0c\u4f7f\u6211\u4eec\u7684\u4ea7\u54c1\u4fdd\u6301\u6700\u65b0\u9700\u8981\u5176\u81ea\u8eab\u7684\u670d\u52a1\u3002\n\u867d\u7136\u7535\u5b50\u90ae\u4ef6\u662f\u6211\u4eec\u7684\u4e3b\u8981\u4ea7\u54c1\uff0c\u4f46Bluecore\u4e5f\u5728\u96f6\u552e\u5546\u7684\u7f51\u7ad9\u4e0a\u63d0\u4f9b\u5b9e\u65f6\u4ea7\u54c1\u63a8\u8350\uff0c\u8fd9\u5e26\u6765\u4e86\u6bd4\u7535\u5b50\u90ae\u4ef6\u66f4\u4e25\u683c\u7684\u5ef6\u8fdf\u9650\u5236\u3002\u73b0\u573a\u63a8\u8350\u8feb\u4f7f\u6211\u4eec\u91cd\u65b0\u8003\u8651\u6211\u4eec\u7684\u63a8\u8350\u57fa\u7840\u8bbe\u65bd\u3002\u63a8\u8350\u670d\u52a1\u7684\u6784\u5efa\u8003\u8651\u5230\u4e86Bluecore\u7684\u5de5\u7a0b\u4ef7\u503c\u4e4b\u4e00\uff0c\u5373\u6784\u5efa\u201c\u5c3d\u53ef\u80fd\u7b80\u5355\uff0c\u5c3d\u53ef\u80fd\u5f3a\u5927\u201d\u7684\u4e1c\u897f\u3002\u5728\u63a8\u8350\u670d\u52a1\u7684\u6574\u4e2a\u53d1\u5c55\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u2026\u2026\u3002\n\u5236\u4f5c\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u6709\u4e09\u4e2a\u7ec4\u6210\u90e8\u5206\uff1a\u6a21\u677f(\u7535\u5b50\u90ae\u4ef6\u7684\u8bbe\u8ba1\u5927\u7eb2)\u3001\u53d7\u4f17(\u5c06\u63a5\u6536\u7535\u5b50\u90ae\u4ef6\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u5217\u8868)\u548c\u63a8\u8350(\u6211\u4eec\u638c\u63e1\u7684\u6bcf\u4e2a\u6536\u4ef6\u4eba\u7684\u6570\u636e\u79d1\u5b66\u6a21\u578b\u6d3e\u751f\u7684\u503c)\u3002\u6a21\u677f\u5728\u4e91\u6570\u636e\u5b58\u50a8\u4e2d\uff0c\u6211\u4eec\u7684\u53d7\u4f17\u5728BigQuery\u4e2d\u751f\u6210\uff0c\u6211\u4eec\u7684\u63a8\u8350\u5728\u6570\u636e\u5b58\u50a8\u4e2d\u3002\u7535\u5b50\u90ae\u4ef6\u662f\u5728Google App Engine Standard(GAE)\u4e2d\u751f\u6210\u7684\uff0c\u6211\u4eec\u6309\u6bcf\u5c01\u7535\u5b50\u90ae\u4ef6\u67e5\u8be2\u4e91\u6570\u636e\u5b58\u50a8(\u6709\u65f6.\u3002\n\u597d\u5427\uff0c\u4e0d\u3002\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u7684\uff0c\u6211\u4eec\u73b0\u5728\u652f\u6301\u5f53\u6d88\u8d39\u8005\u5728\u7f51\u7ad9\u4e0a\u65f6\u663e\u793a\u7684\u63a8\u8350\u3002\u8fd9\u610f\u5473\u7740\u5ef6\u8fdf\u73b0\u5728\u786e\u5b9e\u5f88\u91cd\u8981\u3002\u4ece\u4ec5\u9650\u7535\u5b50\u90ae\u4ef6\u5230\u540c\u65f6\u63d0\u4f9b\u73b0\u573a\u548c\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u7684\u8f6c\u53d8\u8feb\u4f7f\u6211\u4eec\u91cd\u65b0\u8bc4\u4f30\u6211\u4eec\u7684\u67b6\u6784\u3002\u73b0\u573a\u5efa\u8bae\u8981\u6c42\u6211\u4eec\u6709\u66f4\u4e25\u683c\u7684SLO(300-400\u6beb\u79d2)\u3002\u5728\u7f51\u7ad9\u5f00\u59cb\u611f\u89c9\u7f13\u6162\u4e4b\u524d\uff0c\u8fd9\u5c31\u662f\u4f60\u5f97\u5230\u7684\u5168\u90e8\u4fe1\u606f\u3002\u5728\u8003\u8651\u5230\u5176\u4ed6\u670d\u52a1\u3001\u7f51\u7edc\u548c\u4f20\u8f93\u5230.\u7684\u60c5\u51b5\u4e0b\uff0c\u5efa\u8bae\u83b7\u53d6\u53ea\u662f\u52a0\u8f7d\u65f6\u95f4\u7684\u4e00\u90e8\u5206\u3002\n\u53d7\u4f17(\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u5217\u8868)\u751f\u6210\u548c\u4e2a\u6027\u5316(\u5c06\u5730\u5740\u4e0e\u4ed6\u4eec\u7684\u63a8\u8350\u8fdb\u884c\u6620\u5c04)\u662f\u5206\u5f00\u7684\uff0c\u8fd9\u610f\u5473\u7740\u6a21\u677f\u4ec5\u9650\u4e8e\u9644\u52a0\u5230\u53d7\u4f17\u67e5\u8be2\u884c\u7684\u6570\u636e\u3002\u5982\u679c\u63a8\u8350\u7c7b\u578b\u5728\u5355\u4e2a\u6a21\u677f\u5185\u8fdb\u884c\u4e2a\u6027\u5316\uff0c\u5219\u53d7\u4f17\u67e5\u8be2\u5c06\u65e0\u6cd5\u7ba1\u7406\u3002\n\u5728\u65b0\u7248\u672c\u7684\u63a8\u8350\u670d\u52a1\u4e2d\uff0c\u6211\u4eec\u60f3\u8981\u505a\u4e94\u4ef6\u57fa\u672c\u7684\u4e8b\u60c5\uff1a\n\u8003\u8651\u5230\u6211\u4eec\u7684\u65b0\u76ee\u6807\uff0c\u672c\u7740\u201c\u5c3d\u53ef\u80fd\u7b80\u5355\uff0c\u5c3d\u53ef\u80fd\u5f3a\u5927\u201d\u7684\u7cbe\u795e\uff0c\u8ba9\u6211\u4eec\u6784\u5efa\u4e00\u4e2a\u5929\u771f\u7684\u670d\u52a1\u5b9e\u73b0\u3002\u6211\u4eec\u77e5\u9053\u6211\u4eec\u9700\u8981GRPC\u670d\u52a1\uff0c\u6211\u4eec\u7684\u63a8\u8350\u6570\u636e\u6765\u81eaBigQuery/Datastore\uff0c\u800c\u6211\u4eec\u7684\u4ea7\u54c1\u6570\u636e\u9a7b\u7559\u5728Datastore\u4e2d\u3002\u6211\u4eec\u7684\u63a8\u8350\u670d\u52a1(\u7528GO\u7f16\u5199)\u652f\u6301\u8fd0\u884c\u65f6\u4e2a\u6027\u5316\uff0c\u56e0\u4e3a\u73b0\u5728\u6211\u4eec\u5c06\u4ea7\u54c1\u548c\u63a8\u8350\u6570\u636e\u63d0\u4f9b\u7ed9\u670d\u52a1\uff0c\u5e76\u5c06\u63a8\u8350\u7684\u4ea7\u54c1\u63d0\u4f9b\u7ed9\u4e2a\u6027\u5316\u2026\u2026\u3002\n\u6570\u636e\u5b58\u50a8\u975e\u5e38\u6602\u8d35\uff0c\u800c\u4e14BigQuery\u65e0\u6cd5\u6ee1\u8db3\u6211\u4eec\u7684\u5ef6\u8fdf\u8981\u6c42\u3002\u6240\u4ee5\u518d\u8bf4\u4e00\u6b21\uff0c\u4e0d\u662f\u3002\u5373\u4f7f\u6211\u4eec\u5c06\u6240\u6709\u5efa\u8bae\u5bfc\u51fa\u5230\u6570\u636e\u5b58\u50a8\u533a\uff0c\u6211\u4eec\u4ecd\u7136\u65e0\u6cd5\u8fbe\u5230\u5ef6\u8fdf\u76ee\u6807\u3002\u4e0d\u8fc7\u6ca1\u5173\u7cfb\uff0c\u6211\u4eec\u4e0d\u80fd\u8d23\u602a\u9524\u5b50\u662f\u4e2a\u574f\u87ba\u4e1d\u5200\uff0c\u6211\u4eec\u53ea\u662f\u9700\u8981\u5408\u9002\u7684\u5de5\u5177\uff01\n\u8ba9\u6211\u4eec\u628a\u91cd\u70b9\u653e\u5728\u5982\u4f55\u6539\u8fdb\u56fe\u8868\u7684\u201cRECS\u201d\u90e8\u5206\u3002\u5efa\u8bae\u88ab\u5199\u5165BigQuery\u6216Google Cloud Storage(GCS)\uff0c\u7136\u540e\u4e00\u4e9b\u88ab\u52a0\u8f7d\u5230\u6570\u636e\u5b58\u50a8\u4e2d\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6765\u81eaBigQuery\u548cGCS\u7684\u6240\u6709\u63a8\u8350\u52a0\u8f7d\u5230BigTable\u4e2d\u3002BigQuery Storage API\u7684\u53d1\u5e03\u4f7f\u5f97\u4eceBigQuery\u4e2d\u63d0\u53d6\u6d77\u91cf\u6570\u636e\u53d8\u5f97\u66f4\u5feb\u3002\u6211\u4eec\u56fa\u5b9a\u7684\u63a8\u8350\u6a21\u5f0f\u4f7f\u8303\u56f4\u4fdd\u6301\u5728\u53ef\u7ba1\u7406\u7684\u8303\u56f4\u5185\u3002\n\u5728\u8003\u8651\u63d0\u9ad8\u6027\u80fd\u65f6\uff0c\u5f88\u591a\u65f6\u5019\u7b54\u6848\u662f\u5b9e\u73b0\u7f13\u5b58\u3002\u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u56e0\u4e3a\u63a5\u6536\u8005\u7684\u63a8\u8350\u6570\u636e\u5728\u5176\u65e0\u6548\u4e4b\u524d\u5f88\u53ef\u80fd\u53ea\u88ab\u8bfb\u53d6\u4e00\u6b21\u3002\u7f13\u5b58\u672a\u547d\u4e2d\u610f\u5473\u7740\u6211\u4eec\u5c06\u4ece\u6e90\u8bfb\u53d6\uff0c\u4ece\u800c\u5bfc\u81f4\u5ef6\u8fdf\u3001\u91d1\u94b1\u6216\u4e24\u8005\u90fd\u8981\u4ed8\u51fa\u4ee3\u4ef7\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u524d\u9762\u7684\u7cfb\u7edf\u56fe\u4e2d\u6240\u8bf4\u7684\u90a3\u6837\u3002\u7136\u800c\uff0cBigtable\u5728\u53d7\u5230\u91cd\u521b\u65f6\u8868\u73b0\u826f\u597d\u3002E", "note_en": "From the beginning, Bluecore has run on the  Google Cloud Platform (GCP). When it came time to build a high-performance service, it was only natural that we looked to leverage the GCP infrastructure, rather than building it ourselves. By using Kubernetes ( GKE),  Redis ( MemoryStore),  Bigtable, and other GCP technologies, we were able to build a service with sufficient bandwidth and latency to send 10,000s of personalized recommendations per second.\n  You \u2019ve most likely received an email tempting you to buy a product you left in your online shopping cart, and it probably also came with a few other recommended products. How did we come up with these products to recommend the consumer? At Bluecore, we create product recommendations in two ways: via a product or via the consumer \u2019s behavior. For example, a product may be recommended based on one that was recently viewed or previously purchased. Bluecore has developed powerful data models to calculate  ...\n  Mapping products to users is not as simple a process as it seems. We evaluate rules about which products we can insert into the email at runtime. For example, to exclude products that are out of stock or on discount. Since it is important that we only show valid products, we must have an up-to-date product catalog. Products change constantly for any given retail store. Therefore, keeping our products up-to-date requires a service of its own.\n Though email is our primary product, Bluecore also provides real-time product recommendations on retailer\u2019s websites, which introduces much tighter latency bounds than email would otherwise require. Onsite recommendations forced us to rethink our recommendations infrastructure. The recommendations service was built with one of Bluecore\u2019s engineering values in mind, to build things  \u201cas simple as possible, as powerful as necessary.\u201dThroughout the evolution of the recommendations service, we have  ...\n   Three components go into making an email: the template (design outline of the email), the audience (the list of email addresses that will receive an email), and the recommendations (the values derived from the data science models per recipient we have information on). The templates live in  Cloud Datastore, our audiences are generated in  BigQuery, and our recommendations are in Datastore. Emails are generated in  Google App Engine Standard(GAE), and we query Cloud Datastore as each email (sometimes  ...\n  Well, no. As we mentioned before, we now support recommendations shown while the consumer is on the website. This means latency does matter now. The shift from email-only to both on-site and email services forced us to re-evaluate our architecture. Onsite recommendations require that we have a much tighter SLO of 300 \u2013400 ms. This is about all you get before a website starts to feel slow. Recommendation fetching is only part of the load time given that other services, network, and transit to  ...\n Audience (list of email addresses) generation and personalization (mapping an address with their recommendations) were separate, which means that templates were limited to data appended to the rows of the audience query. If the type of recommendation were personalized within a single template, the audience query would be unmanageable.\n  In the new version of the recommendation service we want to do five basic things:\n   With our new goals in mind, and in the spirit of being  \u201cas simple as possible, as powerful as necessary,\u201d let\u2019s build a naive implementation of the service. We know we want a  gRPC service, our recommendations data comes from BigQuery/Datastore, and our product data lives in Datastore. Our recommendations service, written in  Go, supports runtime personalization because now we feed the products and recommendations data to a service and give those recommended products to the personalization  ...\n   Datastore is expensive and Bigquery can\u2019t meet our latency requirements. So again, no. Even if we exported all of our recommendations to Datastore, we  still wouldn\u2019t hit our latency goals. That\u2019s okay though, we can\u2019t blame a hammer for being a bad screwdriver, we just need the right tool!\n   Let\u2019s focus on how we can improve the \u201crecs\u201d portion of our diagram. Recommendations were written to BigQuery or  Google Cloud Storage (GCS), then some were loaded into Datastore. Instead, we could load all of our recommendations from BigQuery and GCS into Bigtable. The release of the  BigQuery Storage API made pulling massive volumes of data from BigQuery fast. Our fixed schema for recommendations kept the scope manageable.\n    When thinking about improving performance, many times the answer is to implement caching. In our case, this isn \u2019t a good solution because a recipient \u2019s recommendations data is most likely only read once before it is invalidated. Cache-miss means that we would read from the source, costing us latency, money, or both as in our previous system diagram. Bigtable, however, performs well when hit hard. Even with only three instances handling 5,000 requests, per second, we saw latency of 15  ...\n  Although we improved our recommendation part of our pipeline, we are still lacking with products. Datastore is still burning a hole in our wallet, and we are still failing our on-site latency requirements.\n   Let\u2019s talk about latency. Our products are ~2KB of data (they contain information about various attributes like green, shirt, short-sleeved, etc.). Datastore latencies are 46.5 ms + 4.2 ms/key. This isn\u2019t great, but not disqualifying. Memorystore latencies are 0.09 ms + 0.033 ms/key. This is outstanding! Memorystore takes home the belt.\n   Unlike recommendations, the same products are used thousands of times in a single batch of emails, so caching is a good fit \u2014 we will read the same product many times before it is invalidated. To handle this, we created a GKE-based service, written in Go, called the product update listener.\n  Product catalogs are maintained by our GAE application. Two updates for the same product may come in simultaneously, with the last write to Datastore winning. That makes cache invalidation a challenge. We could have had a short time-to-live (TTL) on cached items, but that would have cost a lot of runtime efficiency unless we had some kind of gate to keep all the recommendation service nodes from trying to fetch from Datastore at the same time. Instead, the product update listener receives  ...\n  Our cache holds objects in Datastore transmitted as  protobuf. While products across partners have different schemas, within a single retailer there is a lot of consistency and repetition. That made products, which average 2KB, a prime candidate for compression. However, most compression schemes do not do well on small files. The authors of  Zstandard recognized this problem and added features specifically to improve performance on  small files. The chart below shows that popular compression  ...\n   Utilizing GCP tools has improved our performance tremendously. Recommendations now come from Bigtable, giving us back literally seconds of latency. Our product cache hit rates are usually above 99.9% because of the long TTL enabled by the proactive refresh from the product update listener. We also improved performance by adding a small  LRU cache with a short TTL, keeping the Memorystore traffic down to a dull roar. So, finally,  YES! It is as powerful as necessary.\n   Let\u2019s prove that we meet our goals. We deployed our service to a GKE cluster, cloned and anonymized data, created attacker clients in Go, and collected metrics for the results. Thanks to the power of GKE, we were able to scale both the service and the attacking clients with a single command. The entire run, including rescaling the components was scripted and hands-off.\n    The main takeaway from this graph is that we were able to handle well above our bandwidth goal of 20 kHz. Woo hoo!\n  The process of creating a recommendation service that meets our goals shows the importance of knowing the strengths of the tools that your service or application is using. GCPs breadth of offerings enabled us to build an incredible service with just a handful of engineers. Here is an overview we use GCP tools in the recommendation service:", "posttime": "2020-05-03 04:19:05", "tags": "\u63a5\u6536,gcp,\u63a8\u8350,recommendations", "title": "\u4f7f\u7528GCP\u4e3a\u6bcf\u79d220K\u4e2a\u6027\u5316\u63a5\u6536\u63d0\u4f9b\u670d\u52a1", "title_en": "Using GCP to Serve 20K Personalized Recs per Second", "transed": 1, "url": "https://medium.com/bluecore-engineering/using-google-cloud-to-serve-10-000s-of-personalized-recs-per-second-d86b7cf6b6da", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u63a5\u6536", "gcp", "\u63a8\u8350"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000402, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u7684\u804c\u4e1a\u751f\u6daf\u4e00\u76f4\u662f\u5173\u4e8e\u8bbe\u8ba1\u7f16\u7a0b\u8bed\u8a00\u548c\u4e3a\u5b83\u4eec\u7f16\u5199\u7f16\u8bd1\u5668\u3002\u8fd9\u5bf9\u6211\u6765\u8bf4\u662f\u4e00\u79cd\u5de8\u5927\u7684\u5feb\u4e50\u548c\u6ee1\u8db3\u611f\uff0c\u5982\u679c\u60a8\u51b3\u5b9a\u8bbe\u8ba1\u548c\u5b9e\u73b0\u4e00\u79cd\u4e13\u4e1a\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e5f\u8bb8\u6211\u53ef\u4ee5\u5e2e\u52a9\u5176\u4ed6\u4eba\u89c2\u5bdf\u4e00\u4e0b\u60a8\u7684\u9700\u6c42\u3002\u5f53\u7136\uff0c\u8fd9\u662f\u4e00\u4e2a\u5168\u4e66\u7bc7\u5e45\u7684\u4e3b\u9898\uff0c\u6240\u4ee5\u6211\u5728\u8fd9\u91cc\u53ea\u4f1a\u987a\u5176\u81ea\u7136\u5730\u8c08\u51e0\u4e2a\u8981\u70b9\uff0c\u800c\u907f\u5f00\u5728\u5176\u4ed6\u5730\u65b9\u5df2\u7ecf\u5f88\u597d\u5730\u8ba8\u8bba\u8fc7\u7684\u8bdd\u9898\u3002\n\u9996\u5148\uff0c\u4f60\u6709\u5f88\u591a\u5de5\u4f5c\u8981\u505a\u3002\u591a\u5e74\u7684\u5de5\u4f5c\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u5c06\u5728\u6c99\u6f20\u4e2d\u6e38\u8361\u3002\u6210\u529f\u7684\u673a\u4f1a\u5bf9\u4f60\u4e0d\u5229\u3002\u5982\u679c\u4f60\u6ca1\u6709\u5f3a\u70c8\u7684\u81ea\u6211\u6fc0\u52b1\u53bb\u505a\u8fd9\u4ef6\u4e8b\uff0c\u5b83\u662f\u4e0d\u4f1a\u53d1\u751f\u7684\u3002\u5982\u679c\u4f60\u9700\u8981\u522b\u4eba\u7684\u8ba4\u53ef\u548c\u9f13\u52b1\uff0c\u8fd9\u662f\u4e0d\u4f1a\u53d1\u751f\u7684\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u505a\u8fd9\u6837\u4e00\u4e2a\u9879\u76ee\u4e0d\u662f\u4e00\u5927\u7b14\u94b1\u7684\u6295\u8d44\uff0c\u5373\u4f7f\u4f60\u5931\u8d25\u4e86\uff0c\u5b83\u4e5f\u4e0d\u4f1a\u8ba9\u4f60\u5d29\u6e83\u3002\u5373\u4f7f\u4f60\u771f\u7684\u5931\u8d25\u4e86\uff0c\u53d6\u51b3\u4e8e\u9879\u76ee\u8fdb\u5c55\u5230\u4ec0\u4e48\u7a0b\u5ea6\uff0c\u5b83\u5728\u4f60\u7684\u7b80\u5386\u4e0a\u770b\u8d77\u6765\u4e5f\u4f1a\u76f8\u5f53\u4e0d\u9519\uff0c\u5bf9\u4f60\u7684\u804c\u4e1a\u751f\u6daf\u4e5f\u6709\u597d\u5904\u3002\n\u6709\u4e00\u4ef6\u4e8b\u975e\u5e38\u6e05\u695a\uff0c\u90a3\u5c31\u662f\u8bed\u6cd5\u5f88\u91cd\u8981\u3002\u8fd9\u975e\u5e38\u91cd\u8981\u3002\u8fd9\u5c31\u50cf\u6c7d\u8f66\u4e0a\u7684\u9020\u578b-\u5982\u679c\u9020\u578b\u4e0d\u5438\u5f15\u4eba\uff0c\u90a3\u4e48\u8868\u6f14\u518d\u706b\u7206\u4e5f\u65e0\u5173\u7d27\u8981\u3002\u8bed\u6cd5\u5fc5\u987b\u662f\u60a8\u7684\u76ee\u6807\u53d7\u4f17\u559c\u6b22\u7684\u5185\u5bb9\u3002\n\u5c1d\u8bd5\u4f7f\u7528\u4ed6\u4eec\u4ee5\u524d\u4ece\u672a\u89c1\u8fc7\u7684\u4e1c\u897f\uff0c\u5c06\u4f7f\u8bed\u8a00\u91c7\u7528\u53d8\u5f97\u66f4\u96be\u63a8\u9500\u3002\n\u6211\u559c\u6b22\u628a\u719f\u6089\u7684\u53e5\u6cd5\u548c\u7f8e\u611f\u7ed3\u5408\u5728\u4e00\u8d77\u3002\u5b83\u5fc5\u987b\u5728\u5c4f\u5e55\u4e0a\u770b\u8d77\u6765\u5f88\u597d\u770b\u3002\u6bd5\u7adf\uff0c\u60a8\u5c06\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u6765\u7814\u7a76\u5b83\u3002\u5982\u679c\u5b83\u770b\u8d77\u6765\u7b28\u62d9\u3001\u7b28\u62d9\u6216\u96be\u770b\uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u73b7\u6c61\u8bed\u8a00\u3002\n\u4e5f\u8bb8\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u6211\u5efa\u8bae\u7684\u51e0\u4ef6\u4e8b\u4e0d\u5e94\u8be5\u662f\u8003\u8651\u56e0\u7d20\u3002\u8fd9\u4e9b\u90fd\u662f\u865a\u5047\u7684\u795e\uff1a\n\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u51fb\u952e\u3002\u5f53\u7a0b\u5e8f\u5458\u4f7f\u7528\u7eb8\u5e26\u65f6\uff0c\u8fd9\u53ef\u80fd\u5f88\u91cd\u8981\uff0c\u800c\u4e14\u5bf9\u4e8ebash\u6216awk\u8fd9\u6837\u7684\u5c0f\u578b\u8bed\u8a00\u4e5f\u5f88\u91cd\u8981\u3002\u5bf9\u4e8e\u8f83\u5927\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u7f16\u7a0b\u65f6\u95f4\u82b1\u5728\u8bfb\u5199\u4e0a\u7684\u65f6\u95f4\u8981\u6bd4\u5199\u591a\u5f97\u591a\uff0c\u56e0\u6b64\u51cf\u5c11\u51fb\u952e\u672c\u8eab\u4e0d\u5e94\u8be5\u662f\u4e00\u4e2a\u76ee\u6807\u3002\u5f53\u7136\uff0c\u6211\u5e76\u4e0d\u662f\u8bf4\u5927\u91cf\u7684\u6837\u677f\u6587\u4ef6\u662f\u4e2a\u597d\u4e3b\u610f\u3002\n\u6613\u4e8e\u89e3\u6790\u3002\u7f16\u5199\u5177\u6709\u4efb\u610f\u5148\u884c\u529f\u80fd\u7684\u89e3\u6790\u5668\u5e76\u4e0d\u96be\u3002\u4e0d\u5e94\u8be5\u4e3a\u4e86\u5728\u89e3\u6790\u5668\u4e2d\u8282\u7701\u51e0\u884c\u4ee3\u7801\u800c\u5f71\u54cd\u8bed\u8a00\u7684\u5916\u89c2\u3002\u8bf7\u8bb0\u4f4f\uff0c\u60a8\u5c06\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u76ef\u7740\u4ee3\u7801\u3002\u8fd9\u662f\u7b2c\u4e00\u4f4d\u7684\u3002\u5982\u4e0b\u6240\u8ff0\uff0c\u5b83\u4ecd\u7136\u5e94\u8be5\u662f\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\u3002\n\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u5173\u952e\u5b57\u7684\u6570\u91cf\u3002\u8fd9\u4e2a\u6307\u6807\u5f88\u611a\u8822\uff0c\u4f46\u6211\u770b\u5230\u5b83\u53cd\u590d\u51fa\u73b0\u3002\u82f1\u8bed\u6709\u4e00\u767e\u4e07\u4e2a\u5355\u8bcd\uff0c\u6211\u4e0d\u8ba4\u4e3a\u6709\u4efb\u4f55\u8feb\u5728\u7709\u776b\u7684\u77ed\u7f3a\u3002\u53ea\u8981\u7528\u4f60\u6b63\u786e\u7684\u5224\u65ad\u529b\u5c31\u884c\u4e86\u3002\n\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\u3002\u8fd9\u5b9e\u9645\u4e0a\u610f\u5473\u7740\u4ee3\u7801\u5e94\u8be5\u662f\u53ef\u89e3\u6790\u7684\uff0c\u800c\u4e0d\u5fc5\u5728\u7b26\u53f7\u8868\u4e2d\u67e5\u627e\u3002\u4f17\u6240\u5468\u77e5\uff0cC++\u4e0d\u662f\u4e0a\u4e0b\u6587\u65e0\u5173\u7684\u8bed\u6cd5\u3002\u4e0a\u4e0b\u6587\u65e0\u5173\u7684\u8bed\u6cd5\uff0c\u9664\u4e86\u4f7f\u4e8b\u60c5\u53d8\u5f97\u7b80\u5355\u4e4b\u5916\uff0c\u8fd8\u610f\u5473\u7740IDE\u53ef\u4ee5\u5728\u4e0d\u96c6\u6210\u5230\u5927\u591a\u6570\u7f16\u8bd1\u5668\u524d\u7aef\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u8bed\u6cd5\u7a81\u51fa\u663e\u793a\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u7b2c\u4e09\u65b9\u5de5\u5177\u53d8\u5f97\u66f4\u6709\u53ef\u80fd\u5b58\u5728\u3002\n\u5197\u4f59\u3002\u662f\u7684\uff0c\u8bed\u6cd5\u5e94\u8be5\u662f\u591a\u4f59\u7684\u3002\u4f60\u4eec\u90fd\u542c\u4eba\u8bf4\u8fc7\uff0c\u8bed\u53e5\u7ec8\u6b62\u662f\u4e0d\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u8fd9\u662f\u771f\u7684-\u4f46\u8fd9\u79cd\u975e\u5197\u4f59\u4f1a\u5bfc\u81f4\u65e0\u6cd5\u7406\u89e3\u7684\u9519\u8bef\u6d88\u606f\u3002\u8003\u8651\u4e00\u79cd\u6ca1\u6709\u5197\u4f59\u7684\u8bed\u6cd5\u3002\u7136\u540e\uff0c\u4efb\u4f55\u968f\u673a\u7684\u5b57\u7b26\u5e8f\u5217\u90fd\u5c06\u662f\u6709\u6548\u7684\u7a0b\u5e8f\u3002\u751a\u81f3\u4e0d\u53ef\u80fd\u51fa\u73b0\u9519\u8bef\u6d88\u606f\u3002\u826f\u597d\u7684\u8bed\u6cd5\u9700\u8981\u5197\u4f59\uff0c\u4ee5\u4fbf\u8bca\u65ad\u9519\u8bef\u5e76\u63d0\u4f9b\u6b63\u786e\u7684\u9519\u8bef\u6d88\u606f\u3002\n\u4e45\u7ecf\u8003\u9a8c\uff0c\u5343\u771f\u4e07\u786e\u3002\u5982\u679c\u6ca1\u6709\u975e\u5e38\u6709\u529b\u7684\u7406\u7531\uff0c\u5bf9\u4e8e\u719f\u6089\u7684\u7ed3\u6784\uff0c\u6700\u597d\u575a\u6301\u4f7f\u7528\u4e45\u7ecf\u8003\u9a8c\u7684\u771f\u5b9e\u8bed\u6cd5\u5f62\u5f0f\u3002\u5b83\u786e\u5b9e\u7f29\u77ed\u4e86\u8be5\u8bed\u8a00\u7684\u5b66\u4e60\u66f2\u7ebf\uff0c\u5e76\u5c06\u63d0\u9ad8\u91c7\u7528\u7387\u3002\u60f3\u60f3\u770b\uff0c\u5982\u679c\u8fd9\u79cd\u8bed\u8a00\u4ea4\u6362\u4e86+\u548c*\u7684\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\uff0c\u4eba\u4eec\u4f1a\u591a\u4e48\u8ba8\u538c\u5b83\u3002\u5c06\u5206\u6b673\u4fdd\u5b58\u4e3a\u4ee5\u524d\u672a\u89c1\u7684\u7279\u5f81\uff0c\u8fd9\u4e5f\u5411\u7528\u6237\u53d1\u51fa\u8fd9\u662f\u65b0\u7684\u4fe1\u53f7\u3002\n\u4e00\u5982\u65e2\u5f80\uff0c\u8fd9\u4e9b\u539f\u5219\u4e0d\u5e94\u88ab\u89c6\u4e3a\u53e3\u5934\u7985\u3002\u8981\u6709\u6b63\u786e\u7684\u5224\u65ad\u529b\u3002\u4efb\u4f55\u76f2\u76ee\u9075\u5faa\u7684\u8bed\u8a00\u8bbe\u8ba1\u539f\u5219\u90fd\u4f1a\u5bfc\u81f4\u707e\u96be\u3002\u8fd9\u4e9b\u539f\u5219\u5f88\u5c11\u662f\u6b63\u4ea4\u7684\uff0c\u800c\u4e14\u7ecf\u5e38\u53d1\u751f\u51b2\u7a81\u3002\u8fd9\u5f88\u50cf\u8bbe\u8ba1\u4e00\u5ea7\u623f\u5b50--\u628a\u4e3b\u8863\u6a71\u505a\u5f97\u66f4\u5927\uff0c\u610f\u5473\u7740\u4e3b\u5367\u5ba4\u4f1a\u53d8\u5c0f\u3002\u8fd9\u4e00\u5207\u90fd\u662f\u4e3a\u4e86\u627e\u5230\u5408\u9002\u7684\u5e73\u8861\u3002\n\u629b\u5f00\u8bed\u6cd5\u4e0d\u8c08\uff0c\u8bed\u8a00\u7684\u6838\u5fc3\u5c06\u662f\u8bed\u4e49\u5904\u7406\uff0c\u4e5f\u5c31\u662f\u5c06\u610f\u4e49\u8d4b\u4e88\u53e5\u6cd5\u7ed3\u6784\u3002\u8fd9\u662f\u60a8\u5c06\u82b1\u8d39\u5927\u91cf\u8bbe\u8ba1\u548c\u5b9e\u73b0\u7684\u5730\u65b9\u3002\u8fd9\u5f88\u50cf\u4f60\u4f53\u5185\u7684\u5668\u5b98--\u5b83\u4eec\u662f\u770b\u4e0d\u89c1\u7684\uff0c\u9664\u975e\u5b83\u4eec\u51fa\u4e86\u95ee\u9898\uff0c\u5426\u5219\u6211\u4eec\u4e0d\u4f1a\u53bb\u60f3\u5b83\u4eec\u3002\u8bed\u4e49\u5de5\u4f5c\u4e0d\u4f1a\u6709\u592a\u591a\u8363\u8000\uff0c\u4f46\u5b83\u5c06\u662f\u8bed\u8a00\u7684\u5168\u90e8\u610f\u4e49\u6240\u5728\u3002\n\u4e00\u65e6\u901a\u8fc7\u8bed\u4e49\u9636\u6bb5\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u8fdb\u884c\u4f18\u5316\uff0c\u7136\u540e\u751f\u6210\u4ee3\u7801\uff0c\u7edf\u79f0\u4e3a\u540e\u7aef\u3002\u8fd9\u4e24\u4e2a\u5173\u90fd\u5f88\u6709\u6311\u6218\u6027\uff0c\u4e5f\u5f88\u590d\u6742\u3002\u6211\uff0c\u6211\u559c\u6b22\u548c\u8fd9\u4e9b\u4e1c\u897f\u6253\u4ea4\u9053\uff0c\u62b1\u6028\u8bf4\u6211\u4e0d\u5f97\u4e0d\u628a\u65f6\u95f4\u82b1\u5728\u5176\u4ed6\u95ee\u9898\u4e0a\u3002\u4f46\u9664\u975e\u4f60\u771f\u7684\u559c\u6b22\u5b83\uff0c\u800c\u4e14\u5b83\u9700\u8981\u4e00\u4e2a\u76f8\u5f53\u7cbe\u795e\u9519\u4e71\u7684\u4eba", "note_en": "My career has been all about designing programming languages and writing compilers for them.\rThis has been a great joy and source of satisfaction to me, and perhaps I can\rhelp others with some observations about what you\u2019re in for if you decide to\rdesign and implement a professional programming language.\rOf course, this is a book length topic, so I\u2019ll just hit on a few highlights here,\rand avoid topics well covered elsewhere.\n    First off, you\u2019re in for a lot of work. Years of work, most of which will be\rwandering in the desert. The odds of success are heavily stacked against you.\rIf you are not strongly self-motivated to do this, it isn\u2019t going to happen.\rIf you need validation and encouragement from others, it isn\u2019t going to happen.\n  Fortunately, doing such a project is not major dollar investment, it won\u2019t break\ryou if you fail. Even if you do fail, depending on how far the project got, it\rcan look pretty good on your resume and be good for your career.\n    One thing abundantly clear is that syntax matters. It matters an awful lot. It\u2019s\rlike the styling on a car \u2014 if the styling is not appealing, it simply doesn\u2019t\rmatter how hot the performance is. The syntax needs to be something your\rtarget audience would like.\n  Trying to go with something they\u2019ve not seen before will make language adoption\ra much tougher sell.\n  I like to go with a mix of familiar syntax and aesthetic beauty. It\u2019s got to look\rgood on the screen. After all, you\u2019re going to spend plenty of time looking at it.\rIf it looks awkward, clumsy, or ugly, so will it taint the language.\n  A couple things I, perhaps surprisingly, suggest should not be considerations. These\rare false gods:\n  Minimizing keystrokes. Maybe this mattered when programmers used paper tape, and it\rmatters for small languages like bash or awk. For larger applications, programming\rtime is spent reading much more than writing so reducing keystrokes shouldn\u2019t be a goal in itself.\rOf course, I\u2019m not suggesting that large amounts of boilerplate is a good idea.\n  Easy parsing. It isn\u2019t hard to write parsers with arbitrary lookahead. The looks\rof the language shouldn\u2019t be compromised to save a few lines of code in the parser.\rRemember, you\u2019ll spend a lot of time staring at the code. That comes first.\rAs mentioned below, it still should be a context free grammar.\n  Minimizing the number of keywords. This metric is just silly, but I see it cropping\rup repeatedly. There are a million words in the english language, I don\u2019t think there\ris any looming shortage. Just use your good judgement.\n    Context free grammars. What this really means is the code should be parseable\rwithout having to look things up in a symbol table. C++ is famously not a context free\rgrammar. A context free grammar, besides making things a lot simpler, means that\rIDEs can do syntax highlighting without integrating in most of a compiler front end,\ri.e. third party tools become much more likely to exist.\n  Redundancy. Yes, the grammar should be redundant. You\u2019ve all heard people say that\rstatement terminating ; are not necessary because the compiler can figure it out. That\u2019s\rtrue \u2014 but such non-redundancy makes for incomprehensible error messages. Consider a\rsyntax with no redundancy. Any random sequence of characters would then be a valid program.\rNo error messages are even possible. A good syntax needs redundancy in order to diagnose\rerrors and give good error messages.\n  Tried and true. Absent a very strong reason, it\u2019s best to stick with tried and true\rgrammatical forms for familiar constructs. It really cuts the learning curve for the language,\rand will increase adoption rates. Think of how people will hate the language if it\rswaps the operator precedence of + and *. Save the divergance3 for features not generally seen\rbefore, such also signals the user that this is new.\n  As always, these principles should not be taken as dicta. Use good judgement.\rAny language design principle blindly followed leads to disaster. The principles\rare rarely orthogonal, and frequently conflict. It\u2019s a lot like designing a house -\rmaking the master closet bigger means the master bedroom gets smaller. It\u2019s all about\rfinding the right balance.\n  Getting past the syntax, the meat of the language will be the semantic processing, which\ris when meaning is assigned to the syntactical constructs. This is where you\u2019ll be spending\rthe vast bulk of design and implementation. It\u2019s a lot like the organs in your body \u2014 they are sight\runseen and we don\u2019t think about them unless they are going wrong. There won\u2019t be a lot of\rglory in the semantic work, but in it will be the whole point of the language.\n  Once through the semantic phase, the compiler does optimizations, and then code generation, collectively called the back end. These two passes are very challenging and complicated. Me, I love working with this stuff, and grumble that I \u2019ve got to spend time on other issues instead. But unless you really like it, and it takes a fairly unhinged programmer to delight in the arcana of such things, I recommend taking the common sense approach and use an existing back end,  ...\n    How best to implement it? I hope I can at least set you off in the right direction.\rThe first tool beginning compiler writers often reach for is regex. Regex is just the wrong\rtool for lexing and parsing. Rob Pike\r explains why\rreasonably well.\rI\u2019ll close that with the famous quote from Jamie Zawinski:\n  Some people, when confronted with a problem, think \r\u201cI know, I\u2019ll use regular expressions.\u201d Now they have two problems.\n  Somewhat more controversial, I wouldn \u2019t bother wasting time with lexer or parser generators and other so-called compiler compilers. They \u2019re a waste of time. Writing a lexer and parser is a tiny percentage of the job of writing a compiler. Using a generator will take up about as much time as writing one by hand, and it will marry you to the generator (which matters when porting the compiler to a new platform). Generators also have the unfortunate reputation of  ...\n  Now that I mentioned it, error messages are a big factor in the quality of implementation of\rthe language. It\u2019s what the user sees, after all. If you\u2019re tempted to put out error messages\rlike \u201cbad syntax\u201d, perhaps you should consider taking up a career as a chartered accountant\rinstead. Good error messages are surprisingly hard to write, and often you won\u2019t discover\rhow bad the error messages are until you work the tech support emails.\n    Print the first message and quit. This is of course the simplest approach, and works\rsurprisingly well. Most compilers\u2019 follow on messages are so bad that the practical programmer\rignores all but the first one anyway. The holy grail is to find all the actual errors in one\rcompile pass, leading to:\n  Guess at what the programmer intended, repair the syntax trees, and continue.\rThis is an ever-popular approach. I\u2019ve tried it\rindefatigably for decades, and it\u2019s just been a miserable failure. The compiler seems to always\rguess wrong, and subsequent messages with the \u201cfixed\u201d syntax trees are just ludicrously wrong.\n  The poisoning approach. This is much like how floating point NaNs are handled. Any operation with a NaN operand silently results in a NaN. Applying this to error recovery, and any constructs that have a leaf for which an error occurred is itself considered erroneous (but no additional error messages are emitted for it). Hence the compiler is able to detect multiple errors as long as the errors are in sections of code with no dependency between them. This  ...\n  What else does the user care about in the hidden part of the compiler? Speed. I hear it over\rand over \u2014 compiler speed matters a lot. In fact, compile speed is often the first thing I\rhear when I ask a company what tipped the balance for choosing D. The reality is, most\rcompilers are pigs. To blow people away with your language, show them that it compiles as\rfast as hitting the return key on the compile command.\n  Wanna know the secret of making your compiler fast? I mean screaming, blinding, lightning fast?\rSend me $$$ in an SASE and I\u2019ll tell you! Ok, ok, I\u2019ll set my naked greed aside and let you\rin on it.\n    Sounds too easy, right? Trite, even. But raise your hands if you routinely use a profiler.\rBe honest, everyone says they do but that profiler manual remains in its pristine shrink wrap.\rI\u2019m just astonished at the programmers who never use profilers. But it\u2019s great for me, as\ra competitive advantage that never ceases to pay dividends.\n    valgrind. I suspect valgrind has almost single-handedly saved C and C++ from oblivion. I\rcan\u2019t heap enough praise on this tool. It has saved my error-prone sorry ass untold numbers of\rfrustrating hours.\n  git and github. Not many tools are transformative, but these are. Not only do they provide\ran automated backup, but they enable collaborative work on the project by people all over the\rworld. They also provide a complete history of where and from whom every line of code came from,\rin case there\u2019s a legal issue.\n  Automated testing framework. Compilers are enormously complicated beasts. Without constant\rtesting of revisions, the project will reach a point where it cannot advance, as more bugs than\rimprovements will be added. Add to this a coverage analyzer, which will show if the test suite\ris exercising all the code or not.\n  Automated documentation generator. The D project of course built our own (Ddoc), and it too\rwas transformative. Before Ddoc, the documentation had only a random correlation with the code,\rand too often they had nothing to do with each other.\rAfter Ddoc, the two were brought in sync.\n  Bugzilla. This is an automated bug tracking tool. This was a great leap forward from my\rpathetic older scheme of emails and folders, a system that simply cannot scale. Programmers\rare far less tolerant of buggy compilers than they used to be, this has to be addressed\raggressively head on.\n    One semantic technique that is obvious in hindsight but it took Andrei Alexandrescu to point out to me is called \u2019lowering \u2019. It consists of, internally, rewriting more complex semantic constructs in terms of simpler ones. For example, while loops and foreach loops can be rewritten in terms of for loops. Then, the rest of the code only has to deal with for loops. This turned out to uncover a couple of latent bugs in how while loops were implemented,  ...\n  If it turns out that there are some special case rules in the language that prevent this\rrewriting, it might be a good idea to go back and revisit the language design.\n  Any time you can find commonality in the handling of semantic constructs, it\u2019s an opportunity\rto reduce implementation effort and bugs.\n    Rarely mentioned, but critical, is you\u2019ll need write a runtime library. This is a major project.\rIt\u2019ll serve as a demonstration of how the language features work, so it had better be good.\rSome critical things to get right:\n  I/O performance. Most programs spend a lot of time in I/O. Slow I/O will make the whole\rlanguage look bad. The benchmark is C stdio. If the language has elegant, lovely I/O APIs but\rruns at only half the speed of C I/O, then it just isn\u2019t going to be attractive.\n  Memory allocation. A high percentage of time in most programs is spent doing mundane\rmemory allocation. Get this wrong at your peril.\n  Transcendental functions. Ok, I lied. Nobody cares about the accuracy of transcendental functions, they only care about the speed of them. My proof comes from trying to port the D runtime library to different platforms, and discovering that the underlying C transcendental functions often fail the accuracy tests in the D library test suite. C library functions also often do a poor job handling the arcana of the IEEE floating point  ...\n  A common trap people fall into with standard libraries is filling them up with trivia.\rTrivia is sand clogging the gears and just dead weight that has to be carried around forever.\rMy general rule is if the explanation for what the function does is more lines than the\rimplementation code, then the function is likely trivia and should be booted out.\n    You \u2019ve done it, you \u2019ve got a great prototype of the new language. Now what? Next comes the hardest part. This is where most new languages fail. You \u2019ll be doing what every nascent rock band does \u2014play shopping malls, high school dances, dive bars, etc., slowly building up an audience. For languages, this means preparing presentations, articles, tutorials, and books on the language. Then, going to programmer meetings, conferences,  ...\n  There\u2019s one huge thing in your favor. With the global reach of the internet, there\u2019s an\rinstantly reachable global audience. Another favorable thing is that programmer meetings,\rconferences, etc., all are looking for great content. They love talks about new languages,\rnew programming ideas, etc. My experience with the audiences is they are friendly and\rwill give you lots of constructive feedback.\n  Of course, then you\u2019ll almost certainly be forced to reevaluate some cherished features of the\rlanguage and reengineer them.", "posttime": "2020-05-03 03:57:09", "tags": "\u7f16\u7a0b,programming language,\u7f16\u5199,truth,\u8bed\u8a00", "title": "\u5173\u4e8e\u7f16\u5199\u7f16\u7a0b\u8bed\u8a00\u7684\u8d64\u88f8\u88f8\u7684\u771f\u76f8", "title_en": "The Naked Truth About Writing a Programming Language", "transed": 1, "url": "https://www.digitalmars.com/articles/b90.html", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u7f16\u7a0b", "language", "\u7f16\u5199", "truth", "\u8bed\u8a00"]}, {"category": "", "categoryclass": "", "imagename": "249446622459809052f700ba44b3d3ba.jpg", "infoid": 1000401, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u534e\u76db\u987f\u5dde\u5e03\u83b1\u6069\u3002-\u5728\u4ed6\u51e0\u5341\u5e74\u7684\u517b\u8702\u751f\u6daf\u4e2d\uff0c\u6cf0\u5fb7\u00b7\u9ea6\u514b\u798f\u5c14(Ted McFall)\u4ece\u672a\u89c1\u8fc7\u8fd9\u6837\u7684\u4e8b\u60c5\u3002\n11\u6708\uff0c\u5f53\u4ed6\u628a\u5361\u8f66\u505c\u5728\u534e\u76db\u987f\u5dde\u5361\u65af\u7279\u9644\u8fd1\u68c0\u67e5\u4e00\u7fa4\u8702\u7bb1\u65f6\uff0c\u4ed6\u53ef\u4ee5\u4ece\u7a97\u6237\u770b\u5230\u5730\u4e0a\u4e00\u56e2\u7cdf\u7684\u871c\u8702\u8eab\u4f53\u3002\u5f53\u4ed6\u4ed4\u7ec6\u89c2\u5bdf\u65f6\uff0c\u4ed6\u770b\u5230\u8702\u5de2\u524d\u6709\u4e00\u5806\u6b7b\u53bb\u7684\u6210\u5458\uff0c\u91cc\u9762\u8fd8\u6709\u66f4\u591a\u7684\u5c60\u6740-\u6210\u5343\u4e0a\u4e07\u7684\u871c\u8702\u4ece\u8eab\u4f53\u4e0a\u6495\u4e0b\u4e86\u5934\uff0c\u6ca1\u6709\u7f6a\u72af\u7684\u8ff9\u8c61\u3002\n\u9ea6\u514b\u798f\u5c14\u8bf4\uff0c\u201c\u6211\u65e0\u6cd5\u7406\u89e3\u5230\u5e95\u662f\u4ec0\u4e48\u9020\u6210\u4e86\u8fd9\u6837\u7684\u540e\u679c\u3002\u201d\n\u76f4\u5230\u540e\u6765\uff0c\u4ed6\u624d\u5f00\u59cb\u6000\u7591\u51f6\u624b\u5c31\u662f\u4e00\u4e9b\u7814\u7a76\u4eba\u5458\u7b80\u5355\u5730\u79f0\u4e4b\u4e3a\u201c\u8c0b\u6740\u5927\u9ec4\u8702\u201d\u7684\u90a3\u4e2a\u4eba\u3002\n\u6709\u4e86\u53ef\u4ee5\u957f\u5230\u4e24\u82f1\u5bf8\u957f\u7684\u8702\u738b\uff0c\u4e9a\u6d32\u5de8\u578b\u9ec4\u8702\u53ef\u4ee5\u7528\u957f\u5f97\u50cf\u5c16\u523a\u7684\u9ca8\u9c7c\u9ccd\u90a3\u6837\u7684\u4e0b\u989a\uff0c\u5728\u51e0\u4e2a\u5c0f\u65f6\u5185\u6d88\u706d\u871c\u8702\u8702\u5de2\uff0c\u65a9\u9996\u871c\u8702\uff0c\u5e26\u7740\u80f8\u7532\u98de\u8d70\uff0c\u5582\u517b\u5b83\u4eec\u7684\u5e7c\u5d3d\u3002\u5bf9\u4e8e\u8f83\u5927\u7684\u76ee\u6807\uff0c\u9ec4\u8702\u5f3a\u5927\u7684\u6bd2\u6db2\u548c\u6bd2\u523a-\u8db3\u591f\u523a\u7a7f\u4e00\u5957\u517b\u8702\u670d-\u6784\u6210\u4e86\u4e00\u79cd\u4ee4\u4eba\u75db\u82e6\u7684\u7ec4\u5408\uff0c\u53d7\u5bb3\u8005\u5c06\u5176\u6bd4\u4f5c\u6eda\u70eb\u7684\u91d1\u5c5e\u523a\u8fdb\u4ed6\u4eec\u7684\u76ae\u80a4\u3002\n\u5728\u65e5\u672c\uff0c\u9ec4\u8702\u6bcf\u5e74\u6740\u6b7b\u591a\u8fbe50\u4eba\u3002\u73b0\u5728\uff0c\u4ed6\u4eec\u7b2c\u4e00\u6b21\u62b5\u8fbe\u7f8e\u56fd\u3002\n\u9ea6\u514b\u798f\u5c14\u4ecd\u7136\u4e0d\u786e\u5b9a\u4e9a\u6d32\u5de8\u578b\u9ec4\u8702\u662f\u4e0d\u662f\u4ed6\u7684\u8702\u5de2\u88ab\u63a0\u593a\u7684\u7f6a\u9b41\u7978\u9996\u3002\u4f46\u5176\u4e2d\u4e24\u79cd\u6355\u98df\u6027\u6606\u866b\u662f\u53bb\u5e74\u79cb\u5929\u5728\u534e\u76db\u987f\u5dde\u897f\u5317\u89d2\u53d1\u73b0\u7684\uff0c\u5c31\u5728\u4ed6\u7684\u623f\u4ea7\u4ee5\u5317\u51e0\u82f1\u91cc\u5904-\u8fd9\u662f\u7f8e\u56fd\u9996\u6b21\u53d1\u73b0\u8fd9\u79cd\u6606\u866b\u3002\n\u81ea\u90a3\u4ee5\u540e\uff0c\u79d1\u5b66\u5bb6\u4eec\u5f00\u59cb\u4e86\u5bf9\u9ec4\u8702\u7684\u5168\u9762\u8ffd\u6355\uff0c\u4ed6\u4eec\u62c5\u5fc3\u5165\u4fb5\u8005\u53ef\u80fd\u4f1a\u5728\u7f8e\u56fd\u5927\u91cf\u6d88\u706d\u871c\u8702\uff0c\u5e76\u5efa\u7acb\u5982\u6b64\u6df1\u5165\u7684\u5b58\u5728\uff0c\u4ee5\u81f3\u4e8e\u53ef\u80fd\u4f1a\u5931\u53bb\u6839\u9664\u7684\u6240\u6709\u5e0c\u671b\u3002\n\u534e\u76db\u987f\u5dde\u519c\u4e1a\u90e8\u7684\u6606\u866b\u5b66\u5bb6\u514b\u91cc\u65af\u00b7\u9c81\u5c3c(Chris Looney)\u8bf4\uff0c\u201c\u8fd9\u662f\u6211\u4eec\u963b\u6b62\u5b83\u5efa\u7acb\u7684\u7a97\u53e3\u3002\u201d\u201c\u5982\u679c\u6211\u4eec\u5728\u672a\u6765\u51e0\u5e74\u505a\u4e0d\u5230\uff0c\u5f88\u53ef\u80fd\u4e5f\u505a\u4e0d\u5230.\u201d\n12\u6708\u521d\u4e00\u4e2a\u5bd2\u51b7\u7684\u65e9\u6668\uff0c\u5728\u9ea6\u514b\u798f\u5c14\u623f\u4ea7\u4ee5\u53172.5\u82f1\u91cc\u5904\uff0c\u6770\u592b\u00b7\u79d1\u5185\u5229\u65af(Jeff Kornelis)\u5e26\u7740\u4ed6\u7684\u6df7\u8840\u72d7\u8e0f\u4e0a\u4e86\u4ed6\u5bb6\u7684\u524d\u5eca\u3002\u4ed6\u4f4e\u5934\u770b\u7740\u4e00\u5e45\u523a\u8033\u7684\u666f\u8c61\uff1a\u201c\u8fd9\u662f\u6211\u89c1\u8fc7\u7684\u6700\u5927\u7684\u9ec4\u8702\u3002\u201d\n\u8fd9\u53ea\u6606\u866b\u6b7b\u4e86\uff0c\u79d1\u5185\u5229\u65af\u5728\u68c0\u67e5\u8fc7\u5b83\u4e4b\u540e\uff0c\u6709\u4e00\u79cd\u9884\u611f\uff0c\u5b83\u53ef\u80fd\u662f\u4e00\u53ea\u4e9a\u6d32\u5de8\u578b\u5927\u9ec4\u8702\u3002\u8003\u8651\u5230\u4ed6\u5728\u4e16\u754c\u4e0a\u7684\u4f4d\u7f6e\uff0c\u8fd9\u6ca1\u6709\u591a\u5927\u610f\u4e49\uff0c\u4f46\u4ed6\u770b\u8fc7YouTube\u540d\u4eba\u90ca\u72fc\u5f7c\u5f97\u68ee(Coyote Peterson)\u88ab\u5176\u4e2d\u4e00\u53ea\u5927\u9ec4\u8702\u72e0\u72e0\u5730\u53ee\u4e86\u4e00\u53e3\u7684\u4e00\u96c6\u3002\n\u9664\u4e86\u5b83\u7684\u5927\u5c0f\uff0c\u5927\u9ec4\u8702\u8fd8\u6709\u4e00\u4e2a\u72ec\u7279\u7684\u5916\u89c2\uff0c\u4e00\u5f20\u5361\u901a\u822c\u7684\u51f6\u731b\u7684\u8138\uff0c\u6709\u7740\u8718\u86db\u4fa0\u90a3\u6837\u7684\u6cea\u773c\uff0c\u50cf\u8001\u864e\u4e00\u6837\u5ef6\u4f38\u5230\u8eab\u4f53\u4e0b\u9762\u7684\u6a59\u8272\u548c\u9ed1\u8272\u6761\u7eb9\uff0c\u4ee5\u53ca\u50cf\u5c0f\u873b\u8713\u4e00\u6837\u5bbd\u5927\u800c\u7ea4\u7ec6\u7684\u7fc5\u8180\u3002\n\u79d1\u5185\u5229\u65af\u8054\u7cfb\u4e86\u56fd\u5bb6\uff0c\u540e\u8005\u51fa\u6765\u786e\u8ba4\u8fd9\u786e\u5b9e\u662f\u4e00\u53ea\u4e9a\u6d32\u5de8\u578b\u5927\u9ec4\u8702\u3002\u4e0d\u4e45\u4e4b\u540e\uff0c\u4ed6\u4eec\u5f97\u77e5\u8be5\u5730\u533a\u7684\u4e00\u540d\u5f53\u5730\u517b\u8702\u4eba\u4e5f\u53d1\u73b0\u4e86\u5176\u4e2d\u4e00\u53ea\u9ec4\u8702\u3002\n\u9c81\u5c3c\u535a\u58eb\u8bf4\uff0c\u5f88\u660e\u663e\uff0c\u8be5\u5dde\u9762\u4e34\u7740\u4e00\u4e2a\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u4f46\u7531\u4e8e\u624b\u4e2d\u53ea\u6709\u4e24\u53ea\u6606\u866b\uff0c\u800c\u4e14\u51ac\u5929\u5373\u5c06\u5230\u6765\uff0c\u51e0\u4e4e\u4e0d\u53ef\u80fd\u786e\u5b9a\u5927\u9ec4\u8702\u5df2\u7ecf\u5728\u5bb6\u91cc\u8d5a\u4e86\u591a\u5c11\u94b1\u3002\n\u6574\u4e2a\u51ac\u5929\uff0c\u5dde\u519c\u4e1a\u751f\u7269\u5b66\u5bb6\u548c\u5f53\u5730\u517b\u8702\u4eba\u5f00\u59cb\u5de5\u4f5c\uff0c\u4e3a\u5373\u5c06\u5230\u6765\u7684\u5b63\u8282\u505a\u51c6\u5907\u3002\u5e2e\u52a9\u7ec4\u7ec7\u540c\u9f84\u4eba\u5bf9\u6297\u9ec4\u8702\u7684\u517b\u8702\u4eba\u9732\u4e1d\u00b7\u4e39\u5c3c\u5c14\u68ee(Ruthie Danielsen)\u5728\u5979\u7684\u6c7d\u8f66\u5f15\u64ce\u76d6\u4e0a\u5c55\u5f00\u4e86\u4e00\u5f20\u5730\u56fe\uff0c\u6307\u51fa\u4e86Whatcom\u53bf\u5404\u5730\u517b\u8702\u4eba\u653e\u7f6e\u9677\u9631\u7684\u5730\u65b9\u3002\n\u4e39\u5c3c\u5c14\u68ee\u8bf4\uff0c\u201c\u5927\u591a\u6570\u4eba\u90fd\u5bb3\u6015\u88ab\u5b83\u4eec\u53ee\u5230\u3002\u201d\u201c\u6211\u4eec\u5bb3\u6015\u4ed6\u4eec\u4f1a\u5f7b\u5e95\u6467\u6bc1\u6211\u4eec\u7684\u8702\u5de2\u3002\u201d\n\u5728\u52a0\u62ff\u5927\u8fb9\u5883\u53e6\u4e00\u8fb9\u53d1\u73b0\u4e86\u4e00\u4e9b\u4e9a\u6d32\u5de8\u578b\u5927\u9ec4\u8702\uff0c\u8fd9\u589e\u52a0\u4e86\u4e0d\u786e\u5b9a\u6027\u548c\u795e\u79d8\u6027\u3002\n\u53bb\u5e7411\u6708\uff0c\u5728\u4e0d\u5217\u98a0\u54e5\u4f26\u6bd4\u4e9a\u7701\u7684\u6000\u7279\u7f57\u514b(White Rock)\u53d1\u73b0\u4e86\u4e00\u53ea\u9ec4\u8702\uff0c\u8ddd\u79bb\u534e\u76db\u987f\u5dde\u7684\u53d1\u73b0\u53ef\u80fd\u670910\u82f1\u91cc\u8fdc-\u5bf9\u4e8e\u9ec4\u8702\u6765\u8bf4\uff0c\u5f88\u53ef\u80fd\u592a\u8fdc\u4e86\uff0c\u4e0d\u53ef\u80fd\u662f\u540c\u4e00\u6b96\u6c11\u5730\u7684\u4e00\u90e8\u5206\u3002\u751a\u81f3\u5728\u66f4\u65e9\u7684\u65f6\u5019\uff0c\u5728\u6e29\u54e5\u534e\u5c9b\u4e0a\u53d1\u73b0\u4e86\u4e00\u4e2a\u8702\u5de2\uff0c\u6a2a\u8de8\u4e00\u6761\u6d77\u5ce1\uff0c\u5bf9\u4e8e\u4e00\u53ea\u5927\u9ec4\u8702\u6765\u8bf4\uff0c\u53ef\u80fd\u592a\u5bbd\u4e86\uff0c\u4e0d\u53ef\u80fd\u4ece\u5927\u9646\u7a7f\u8d8a\u8fc7\u6765\u3002\n\u5de5\u4f5c\u4eba\u5458\u80fd\u591f\u8ffd\u8e2a\u5230\u6e29\u54e5\u534e\u5c9b\u4e0a\u7684\u6bcd\u8230\u3002\u5eb7\u62c9\u5fb7\u00b7\u8d1d\u9c81\u8d1d\u662f\u7eb3\u5948\u83ab\u9547\u7684\u517b\u8702\u4eba\u548c\u6606\u866b\u5b66\u5bb6\uff0c\u4ed6\u88ab\u6307\u6d3e\u53bb\u6d88\u706d\u5b83\u3002\n\u4ed6\u5728\u665a\u4e0a\u51fa\u53d1\uff0c\u90a3\u65f6\u9ec4\u8702\u6b63\u5728\u5b83\u4eec\u7684\u5de2\u7a74\u91cc\u3002\u4ed6\u7a7f\u4e0a\u77ed\u88e4\u548c\u539a\u8fd0\u52a8\u88e4\uff0c\u7136\u540e\u7a7f\u4e0a\u8702\u670d\u3002\u4ed6\u5728\u811a\u8e1d\u548c\u624b\u8155\u4e0a\u6234\u4e0a\u4e86\u51ef\u592b\u62c9\u80cc\u5e26\u3002\n\u4f46\u5f53\u4ed6\u8d70\u8fd1\u8702\u5de2\u65f6\uff0c\u4ed6\u8bf4\uff0c\u5237\u5b50\u7684\u6c99\u6c99\u58f0\u548c\u624b\u7535\u7b52\u7684\u5149\u8292\u5524\u9192\u4e86\u8702\u7fa4\u3002\u8fd8\u6ca1\u6765\u5f97\u53ca\u5f80\u5de2\u91cc\u6d47\u4e8c\u6c27\u5316\u78b3\uff0c\u4ed6\u5c31\u611f\u89c9\u5230\u817f\u90e8\u7b2c\u4e00\u6b21\u88ab\u707c\u70ed\u7684\u523a\u4f24--\u7a7f\u8fc7\u8702\u670d\u548c\u5e95\u5c42\u7684\u8fd0\u52a8\u88e4\u3002\n\u4ed6\u8bf4\uff1a\u201c\u8fd9\u5c31\u50cf\u662f\u628a\u6eda\u70eb\u7684\u56fe\u9489\u523a\u8fdb\u4e86\u6211\u7684\u8089\u91cc\u3002\u201d\u4ed6\u6700\u7ec8\u88ab\u8707\u4e86\u81f3\u5c11\u4e03\u6b21\uff0c\u5176\u4e2d\u4e00\u4e9b\u53ee\u54ac\u6d41\u4e86\u8840\u3002\n\u65e5\u672c\u4eac\u90fd\u5c1a\u7ea6\u5927\u5b66\u7684\u7814\u7a76\u5458\u9ad8\u6865\u4fca\u4e00(Jun-ichi Takahashi)\u8bf4\uff0c\u8fd9\u4e2a\u7269\u79cd\u5728\u90a3\u91cc\u8d62\u5f97\u4e86\u201c\u8c0b\u6740\u5927\u9ec4\u8702\u201d\u7684\u7ef0\u53f7\uff0c\u56e0\u4e3a\u5b83\u5484\u5484\u903c\u4eba", "note_en": "BLAINE, Wash. \u2014 In his decades of beekeeping, Ted McFall had never seen anything like it.\n As he pulled his truck up to check on a group of hives near Custer, Wash., in November, he could spot from the window a mess of bee carcasses on the ground. As he looked closer, he saw a pile of dead members of the colony in front of a hive and more carnage inside \u2014 thousands and thousands of bees with their heads torn from their bodies and no sign of a culprit.\n \u201cI couldn\u2019t wrap my head around what could have done that,\u201d Mr. McFall said.\n Only later did he come to suspect that the killer was what some researchers simply call the \u201cmurder hornet.\u201d\n With queens that can grow to two inches long, Asian giant hornets can use mandibles shaped like spiked shark fins to wipe out a honeybee hive in a matter of hours, decapitating the bees and flying away with the thoraxes to feed their young. For larger targets, the hornet\u2019s potent venom and stinger \u2014 long enough to puncture a beekeeping suit \u2014 make for an excruciating combination that victims have likened to hot metal driving into their skin.\n In Japan, the hornets kill up to 50 people a year. Now, for the first time, they have arrived in the United States.\n Mr. McFall still is not certain that  Asian giant hornets were responsible for the plunder of his hive. But two of the predatory insects were discovered last fall in the northwest corner of Washington State, a few miles north of his property \u2014 the first sightings in the United States.\n Scientists have since embarked on a full-scale hunt for the hornets, worried that the invaders could decimate bee populations in the United States and establish such a deep presence that all hope for eradication could be lost.\n \u201cThis is our window to keep it from establishing,\u201d said Chris Looney, an entomologist at the Washington State Department of Agriculture. \u201cIf we can\u2019t do it in the next couple of years, it probably can\u2019t be done.\u201d\n  On a cold morning in early December, two and a half miles to the north of Mr. McFall\u2019s property, Jeff Kornelis stepped on his front porch with his terrier-mix dog. He looked down to a jarring sight: \u201cIt was the biggest hornet I\u2019d ever seen.\u201d\n The insect was dead, and after inspecting it, Mr. Kornelis had a hunch that it might be an Asian giant hornet. It did not make much sense, given his location in the world, but he had seen an episode of the YouTube personality Coyote Peterson  getting a brutal sting from one of the hornets.\n  Beyond its size, the hornet has a distinctive look, with a cartoonishly fierce face featuring teardrop eyes like Spider-Man, orange and black stripes that extend down its body like a tiger, and broad, wispy wings like a small dragonfly.\n Mr. Kornelis contacted the state, which came out to confirm that it was indeed an Asian giant hornet. Soon after, they learned that a local beekeeper in the area had also found one of the hornets.\n Dr. Looney said it was immediately clear that the state faced a serious problem, but with only two insects in hand and winter coming on, it was nearly impossible to determine how much the hornet had already made itself at home.\n Over the winter, state agriculture biologists and local beekeepers got to work, preparing for the coming season. Ruthie Danielsen, a beekeeper who has helped organize her peers to combat the hornet, unfurled a map across the hood of her vehicle, noting the places across Whatcom County where beekeepers have placed traps.\n \u201cMost people are scared to get stung by them,\u201d Ms. Danielsen said. \u201cWe\u2019re scared that they are going to totally destroy our hives.\u201d\n  Adding to the uncertainty \u2014 and mystery \u2014 were some other discoveries of the Asian giant hornet across the border in Canada.\n In November, a single hornet was seen in White Rock, British Columbia, perhaps 10 miles away from the discoveries in Washington State \u2014 likely too far for the hornets to be part of the same colony. Even earlier, there had been a hive discovered on Vancouver Island, across a strait that probably was too wide for a hornet to have crossed from the mainland.\n Crews were able to track down the hive on Vancouver Island. Conrad B\u00e9rub\u00e9, a beekeeper and entomologist in the town of Nanaimo, was assigned to exterminate it.\n He set out at night, when the hornets would be in their nest. He put on shorts and thick sweatpants, then his bee suit. He donned Kevlar braces on his ankles and wrists.\n But as he approached the hive, he said, the rustling of the brush and the shine of his flashlight awakened the colony. Before he had a chance to douse the nest with carbon dioxide, he felt the first searing stabs in his leg \u2014 through the bee suit and underlying sweatpants.\n \u201cIt was like having red-hot thumbtacks being driven into my flesh,\u201d he said. He ended up getting stung at least seven times, some of the stings drawing blood.\n Jun-ichi Takahashi, a researcher at Kyoto Sangyo University in Japan, said the species had earned the \u201cmurder hornet\u201d nickname there because its aggressive group attacks can expose victims to doses of toxic venom equivalent to that of a venomous snake; a series of stings can be fatal.\n The night he got stung, Mr. B\u00e9rub\u00e9 still managed to eliminate the nest and collect samples, but the next day, his legs were aching, as if he had the flu. Of the thousands of times he has been stung in his lifetime of work, he said, the Asian giant hornet stings were the most painful.\n  After collecting the hornet in the Blaine area, state officials took off part of a leg and shipped it to an expert in Japan. A sample from the Nanaimo nest was sent as well.\n A genetic examination, concluded over the past few weeks, determined that the nest in Nanaimo and the hornet near Blaine were not connected, said Telissa Wilson, a state pest biologist, meaning there had probably been at least two different introductions in the region.\n Dr. Looney went out on a recent day in Blaine, carrying clear jugs that had been made into makeshift traps; typical wasp and bee traps available for purchase have holes too small for the Asian giant hornet. He filled some with orange juice mixed with rice wine, others had kefir mixed with water, and a third batch was filled with some experimental lures \u2014 all with the hope of catching a queen emerging to look for a place to build a nest.\n In a region with extensive wooded habitats for hornets to establish homes, the task of finding and eliminating them is daunting. How to find dens that may be hidden underground? And where to look, given that one of the queens can fly many miles a day, at speeds of up to 20 miles per hour?\n The miles of wooded landscapes and mild, wet climate of western Washington State make it an ideal location for the hornets to spread.\n In the coming months, Dr. Looney said, he and others plan to place hundreds more traps that could catch worker hornets that would start becoming active over the summer. State officials have mapped out the plan in a grid, starting in Blaine and moving outward.\n  The buzz of activity inside a nest of Asian giant hornets can keep the inside temperature up to 86 degrees, so the trackers are also exploring using thermal imaging to examine the forest floors. Later, they may also try other advanced tools that could track the signature hum the hornets make in flight.\n If a hornet does get caught in a trap, Dr. Looney said, there are plans to possibly use radio-frequency identification tags to monitor where it goes \u2014 or simply attach a small streamer and then follow the hornet as it returns to its nest.\n While most bees would be unable to fly with a disruptive marker attached, that is not the case with the Asian giant hornet. It is big enough to handle the extra load.", "posttime": "2020-05-03 03:56:49", "tags": "\u8c0b\u6740,murder,\u9ec4\u8702,hornet", "title": "\u4e9a\u6d32\u8c0b\u6740\u5927\u9ec4\u8702\u5df2\u7ecf\u62b5\u8fbe\u5317\u7f8e", "title_en": "Asian Murder Hornets Have Arrived in North America", "transed": 1, "url": "https://www.nytimes.com/2020/05/02/us/asian-giant-hornet-washington.html", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u8c0b\u6740", "murder", "\u9ec4\u8702", "hornet"]}, {"category": "", "categoryclass": "", "imagename": "24e61a8175af932d24d6bfab5f86fc71.png", "infoid": 1000400, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e5f\u8bb8\u6709\u4e00\u5929\u8fd9\u4f1a\u662f\u4e2a\u66f4\u597d\u7684\u4e3b\u610f\uff0c\u4f46\u90a3\u4e00\u5929\u8fd8\u6ca1\u6709\u5230\u6765\u3002\u811a\u8e1d\u624b\u956f\u5c31\u50cf\u4efb\u4f55\u5176\u4ed6\u7535\u5b50\u8bbe\u5907\u4e00\u6837\uff0c\u5bb9\u6613\u51fa\u73b0\u610f\u60f3\u4e0d\u5230\u7684\u6545\u969c\u3002\u5047\u9634\u6027--\u63d0\u9192\u5047\u91ca\u8005\u4e0d\u5728\u5bb6--\u4ece\u957f\u8fdc\u6765\u770b\u5e76\u4e0d\u6bd4\u5047\u9633\u6027\u597d\u591a\u5c11\uff0c\u5c3d\u7ba1\u524d\u8005\u662f\u552f\u4e00\u80fd\u5265\u593a\u67d0\u4eba\u81ea\u7531\u7684\u4eba\u3002\n\u811a\u8e1d\u624b\u956f\u7684\u8d39\u7528\u7531\u5047\u91ca\u72af\u627f\u62c5\u3002\u667a\u80fd\u624b\u673a\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u7a0d\u5fae\u4fbf\u5b9c\u4e00\u4e9b\uff0c\u2026\u3002\u4f46\u524d\u63d0\u662f\u4f60\u4e0d\u8003\u8651\u667a\u80fd\u624b\u673a\u6216\u5e94\u7528\u7a0b\u5e8f\u672c\u8eab\u7684\u6210\u672c\u3002\u667a\u80fd\u624b\u673a\u5bf9\u4e8e\u5047\u91ca\u72af\u6765\u8bf4\u5e76\u4e0d\u5bb9\u6613\u83b7\u5f97\u3002\u8865\u8d34\u624b\u673a\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u6708\u8d39\u6240\u9700\u7684\u5de5\u4f5c\u4e5f\u4e0d\u591a\u3002\n\u90a3\u4e9b\u6709\u5e78\u4e70\u5230\u667a\u80fd\u624b\u673a\u7684\u4eba\u53d1\u73b0\uff0c\u65b0\u7684\u89e3\u51b3\u65b9\u6848\u548c\u5b83\u7684\u524d\u8eab\u4e00\u6837\u5bb9\u6613\u51fa\u9519\u3002\n\u5728\u83b1\u62c9\u51fa\u72f1\u56de\u5230\u4f50\u6cbb\u4e9a\u5dde\u5bb6\u4e2d\u7684\u90a3\u5929\uff0c\u5979\u88ab\u544a\u77e5\u9700\u8981\u8d2d\u4e70\u4e00\u90e8\u667a\u80fd\u624b\u673a-\u5bf9\u4e8e\u4e00\u4e2a\u521a\u521a\u670d\u5211\u7ed3\u675f\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u65e0\u5173\u7d27\u8981\u7684\u4efb\u52a1\uff0c\u4f46\u83b1\u62c9\u5f88\u5e78\u8fd0\u6709\u4e00\u4e2a\u670b\u53cb\u53ef\u4ee5\u7ed9\u5979\u4e70\u4e00\u90e8\u3002\u5979\u8bf4\uff0c\u51e0\u5929\u540e\uff0c\u5979\u5728\u5bb6\u7761\u89c9\u65f6\uff0c\u6839\u636e\u5979\u7684\u91ca\u653e\u6761\u6b3e\uff0c\u5979\u88ab\u8981\u6c42\u5b89\u88c5\u7684\u5e94\u7528\u7a0b\u5e8f\u51fa\u4eba\u610f\u6599\u5730\u54cd\u8d77\uff0c\u9ad8\u97f3\u7684\u8b66\u544a\u8b66\u62a5\u54cd\u8d77\uff0c\u56e0\u4e3a\u5b83\u5411\u5979\u7684\u5047\u91ca\u5b98\u53d1\u9001\u4e86\u4e00\u4efd\u901a\u77e5\uff0c\u544a\u8bc9.\u3002\n\u60ca\u614c\u5931\u63aa\u7684\u83b1\u62c9\u62cd\u4e86\u4e00\u5f20\u81ea\u5df1\u7684\u7167\u7247\uff0c\u628a\u81ea\u5df1\u7684\u4f4d\u7f6e\u53d1\u7ed9\u4ed6\uff0c\u8bd5\u56fe\u7ea0\u6b63\u8fd9\u6b3e\u5e94\u7528\u7684\u9519\u8bef\u3002\u5979\u8bf4\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u65e0\u60c5\u5730\u91cd\u590d\uff0c\u6bcf\u9694\u534a\u4e2a\u5c0f\u65f6\u5c31\u4f1a\u5728\u591c\u95f4\u53eb\u9192\u5979\u3002\u201c\u6211\u4f1a\u54ed\u7740\u9192\u6765\uff0c\u201d\u5979\u8bf4\u3002\u6709\u65f6\uff0c\u5f53\u5979\u8bd5\u56fe\u9a8c\u8bc1\u81ea\u5df1\u7684\u4f4d\u7f6e\u6216\u7b7e\u5230\u65f6\uff0c\u5e94\u7528\u7a0b\u5e8f\u4f1a\u544a\u8bc9\u5979\uff0c\u5b83\u65e0\u6cd5\u8bc6\u522b\u5979\u7684\u58f0\u97f3\u3002\u201c\u6211\u4f1a\u89c9\u5f97\u5f88\u7d2f\u7684\uff0c\u6211\u60f3\u5982\u679c\u6211\u4e0d\u56de\u7b54\uff0c\u6211\u4f1a\u56de\u5230\u76d1\u72f1\u7684\u3002\u201d\u5f88\u5feb\uff0c\u5979\u8bf4\uff0c\u5979\u201c\u4e5e\u6c42\u6211\u7684\u5047\u91ca\u5b98\u2026\u2026\u201d\n\u201c\u5b88\u62a4\u8005\u201d\u662f\u4e00\u6b3e\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e00\u4e9b\u5047\u91ca\u72af\u8981\u6c42\u6062\u590d\u5230\u4ee5\u524d\u7248\u672c\u7684\u5047\u91ca\u72af\u76d1\u63a7\u529f\u80fd\uff1a\u811a\u8e1d\u624b\u956f\u3002\u6839\u636e\u201c\u536b\u62a5\u201d\u7684\u6570\u636e\uff0c\u201c\u536b\u62a5\u201d\u62e5\u6709\u8fd15\u4e07\u540d\u7528\u6237\uff0c\u800c\u83b1\u62c9\u5e76\u4e0d\u662f\u552f\u4e00\u6709\u53ef\u80fd\u88ab\u8fd9\u6b3e\u51fa\u6545\u969c\u7684\u5e94\u7528\u7a0b\u5e8f\u4fb5\u72af\u56de\u76d1\u72f1\u7684\u5047\u91ca\u72af\u3002Gizmodo\u91c7\u8bbf\u7684\u5176\u4ed6\u5047\u91ca\u72af\u4e5f\u62a5\u544a\u4e86\u540c\u6837\u7684\u95ee\u9898\u3002\u4ed6\u4eec\u8bf4\uff0c\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u51e0\u4e4e\u65e0\u6cd5\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u65e0\u6cd5\u51c6\u786e\u5730\u62a5\u544a\u2026\u2026\u3002\n\u4e0d\u51fa\u6240\u6599\uff0c\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u7684\u6240\u6709\u8005\u662fTelmate\uff0c\u4e5f\u5c31\u662f\u8fd0\u8425Global Tele*Link\u7684\u540c\u4e00\u5bb6\u516c\u53f8\u3002Global Tele*Link\u7684\u4e1a\u52a1\u662f\u5411\u56da\u72af\u51fa\u552e\u901a\u5f80\u5916\u90e8\u4e16\u754c\u7684\u901a\u9053\u3002\u5b83\u8fd0\u8425\u7740\u8bb8\u591a\u76d1\u72f1\u901a\u4fe1\u7f51\u7edc\uff0c\u8fd9\u4e9b\u7f51\u7edc\u4ee5\u5bf9\u4ece\u76d1\u72f1\u6253\u6765\u7684\u7535\u8bdd\u6bcf\u5206\u949f\u6536\u53d6\u8fc7\u9ad8\u7684\u8d39\u7528\u800c\u95fb\u540d\uff0c\u5e76\u63a7\u5236\u7740\u56da\u72af\u53c2\u4e0e\u7684\u51e0\u4e4e\u6240\u6709\u5176\u4ed6\u6570\u5b57\u4e92\u52a8\u7684\u5a31\u4e50\u8bbe\u5907(\u5982\u5e73\u677f\u7535\u8111\u548cMP3\u64ad\u653e\u5668)\u3002\u5b83\u4f1a\u91ca\u653e\u4e00\u4e2a\u7f16\u7801\u8349\u7387\u7684..\u3002\n\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u5177\u6709\u4fb5\u5165\u6027--\u751a\u81f3\u6bd4\u5047\u91ca\u5b98\u672a\u7ecf\u5ba3\u5e03\u7684\u5bb6\u8bbf\u66f4\u5177\u4fb5\u5165\u6027\u3002\u8fd9\u6b3e\u5e94\u7528\u505a\u4e86\u60e9\u6212\u4eba\u5458\u5728\u8eab\u4f53\u4e0a\u505a\u4e0d\u5230\u7684\u4e8b\u60c5\uff1a\u8981\u6c42\u6bcf\u5929\u51e0\u5341\u6b21\u7b7e\u5230\u3002\n\u201cGuardian\u8ba9\u6211\u4e22\u6389\u4e86\u5de5\u4f5c\uff0c\u201d\u53e6\u4e00\u4e2a\u88ab\u76d1\u7981\u4e86\u5341\u591a\u5e74\u7684\u4eba\u8bf4\uff0c\u4ed6\u4f7f\u7528\u4e86\u8fd9\u6b3e\u5e94\u7528\uff0c\u5e76\u8bb0\u5f97\u5b83\u8981\u6c42\u4ed6\u6bcf\u5c0f\u65f6\u7b7e\u5230\u8d85\u8fc710\u6b21\u3002\u201c\u665a\u4e0a\u6211\u7761\u4e0d\u7740\u89c9\uff0c\u7136\u540e\u5728\u5de5\u4f5c\u65f6\uff0c\u6211\u4e0d\u5f97\u4e0d\u4e00\u76f4\u638f\u51fa\u624b\u673a\u3002\u201d\u4ed6\u8bf4\uff0c\u6709\u4e00\u534a\u7684\u65f6\u95f4\uff0c\u5b83\u65e0\u6cd5\u51c6\u786e\u8bc6\u522b\u4ed6\u7684\u8138\u6216\u58f0\u97f3\u3002\n\u536b\u62a5\u8981\u6c42\u66f4\u591a\uff0c\u4f46\u505a\u5f97\u66f4\u5c11\u3002\u5f53\u4e0e\u67d0\u4eba\u9762\u5bf9\u9762\u4f1a\u9762\u65f6\uff0c\u90ae\u5c40\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6838\u5b9e\u4ed6\u4eec\u7684\u8eab\u4efd\u3002\u53d6\u4ee3\u4ed6\u4eec\u4f4d\u7f6e\u7684\u5e94\u7528\u7a0b\u5e8f\u663e\u7136\u65e0\u6cd5\u53ef\u9760\u5730\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u5728\u8fd9\u9879\u7b80\u5355\u7684\u4efb\u52a1\u4e0a\uff0c\u5b83\u65e5\u590d\u4e00\u65e5\u5730\u5728\u4e00\u5c0f\u65f6\u5185\u591a\u6b21\u5931\u8d25\u3002\u4e00\u6b3e\u65e0\u6cd5\u5e73\u8861\u8eab\u4efd\u8bc1\u8d26\u7c3f\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0d\u4f1a\u5e2e\u52a9\u4efb\u4f55\u4eba\u5728\u507f\u8fd8\u4e86\u6b20\u793e\u4f1a\u7684\u503a\u52a1\u540e\u6062\u590d\u6b63\u5e38\u751f\u6d3b\u3002\n\u5feb\u901f\u7684\u6210\u672c\u6548\u76ca\u5206\u6790\u5f88\u5927\u7a0b\u5ea6\u4e0a\u7ad9\u5728\u4e86\u6210\u672c\u7684\u4e00\u8fb9\u3002\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u7684\u6708\u8d39\u4e3a90\u7f8e\u5143\uff0c\u800c\u4e14\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002\u5b83\u6240\u505a\u7684\u5c31\u662f\u8ba9\u987a\u4ece\u7684\u5047\u91ca\u72af\u9762\u4e34\u518d\u6b21\u5165\u72f1\u7684\u98ce\u9669\u3002\u5373\u4f7f\u5b83\u5de5\u4f5c\u5f97\u6709\u70b9\u6b63\u5e38\uff0c\u5b83\u4e5f\u662f\u4e2a\u95ee\u9898\u3002\n\u6b63\u5982\u6211\u4eec\u5728\u8bc4\u8bba\u4e2d\u53d1\u73b0\u7684\u90a3\u6837\uff0cGuardian\u6bcf\u5206\u949f\u90fd\u4f1a\u5411Telmate\u7684\u670d\u52a1\u5668\u7b7e\u5230\uff0c\u5982\u679c\u624b\u673a\u5904\u4e8e\u7761\u7720\u72b6\u6001\uff0c\u5b83\u4f1a\u5524\u9192\u624b\u673a\uff0c\u5e76\u5ffd\u7565\u64cd\u4f5c\u7cfb\u7edf\u4f18\u5316\u7535\u6c60\u7684\u8bf7\u6c42\u3002\u8003\u8651\u5230Guardian\u7684\u7528\u9014\uff0c\u53ef\u4ee5\u9884\u89c1\u7684\u662f\uff0c\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u4f9d\u8d56\u4e8e\u7528\u6237\u6388\u4e88\u5b83\u5bf9\u8bbe\u5907\u4e0a\u4e00\u4e9b\u6f5c\u5728\u4fb5\u72af\u9690\u79c1\u7684\u4f20\u611f\u5668\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u5305\u62ecWiFi\u3001\u84dd\u7259\u3001\u97f3\u9891\u8bbe\u7f6e\u548c\u6444\u50cf\u5934\u8bbf\u95ee\u3002\n\u4e00\u6574\u5929\uff0c\u6bcf\u5929\u7684\u76d1\u89c6\u5047\u91ca\u72af\u90fd\u9700\u8981\u652f\u4ed8\u8d39\u7528\u3002\u5373\u4f7f\u4ed6\u4eec\u9075\u5b88\u4e86\u89c4\u5219\uff0c\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u4e5f\u4f1a\u8bf4\u4ed6\u4eec\u4e0d\u662f\u3002\u4ee3\u7801\u4e2d\u8fd8\u5305\u62ec\u7528\u4e8e\u79d8\u5bc6\u5f55\u97f3\u7684\u6302\u94a9--\u9690\u85cf\u8fdb\u5165\u8bbe\u5907\u7684\u9ea6\u514b\u98ce\uff0c\u53ef\u4ee5\u5728\u5f85\u673a\u6216\u7761\u7720\u6a21\u5f0f\u4e0b\u89e6\u53d1\u3002\u5f53\u5e94\u7528\u7a0b\u5e8f\u6bcf\u969460\u79d2\u7ed9\u5bb6\u91cc\u6253\u4e00\u6b21\u7535\u8bdd\u65f6\uff0c\u7761\u7720\u6a21\u5f0f\u5e76\u4e0d\u610f\u5473\u7740\u4ec0\u4e48\u3002\n\u5047\u91ca\u56da\u72af\u7684\u9690\u79c1\u6743\u671f\u671b\u503c\u5f88\u4f4e\u3002\u4f46\u5b83\u5e76\u4e0d\u662f\u4e0d\u5b58\u5728\u7684\u3002\u8fd9\u6b3e\u6602\u8d35\u7684\u5e94\u7528\u7a0b\u5e8f\u79fb\u9664\u4e86\u5269\u4e0b\u7684\u6240\u6709\u5185\u5bb9\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u4fb5\u5165\u5f0f\u7b7e\u5230", "note_en": "Maybe it will be a better idea someday, but that day isn&#39;t here yet. Ankle bracelets are prone to unexpected failure, just like any other electronic device. False negatives -- alerts saying a parolee isn&#39;t at home -- are no better than false positives in the long run, although the former is the only one that can take away someone&#39;s freedom.\n The costs of ankle bracelets are borne by the parolee. Smartphone apps may be slightly cheaper\u2026 but only if you don&#39;t factor in the cost of a smartphone or the app itself. Smartphones aren&#39;t easy for parolees to obtain. Neither are the jobs needed to subsidize both the phone and the app&#39;s monthly charge.\n Those lucky enough to secure a smartphone are discovering the new solution  is just as prone to error as its predecessor.\n On the day Layla got out of prison and back to her home in Georgia, she was told she would need to purchase a smartphone \u2014not an insignificant task for someone who \u2019d just completed a sentence, but Layla was lucky to have a friend who could buy one for her. She says she was at home in bed a few days later when the app she had been mandated to install under the terms of her release went off unexpectedly, the high-pitched warning alarm blaring as it sent a notification to her parole officers telling  ...\n Panicked, Layla took a picture of herself and sent him her location, trying to correct the app \u2019s mistake. The process would repeat relentlessly, she says, waking her up every half hour during the night. \u201cI \u2019d wake up crying, \u201dshe says. Sometimes, when she tried to authenticate her location or check in the app would tell her it didn \u2019t recognize her voice. \u201cI \u2019d feel so tired, and I thought if I didn \u2019t answer, I was going to go back to prison. \u201dSoon, she says, she was \u201cbegging my parole officer  ...\n Guardian is the app that&#39;s so unable to do its job properly some parolees are asking to be rolled back to the previous version of parolee monitoring: ankle bracelets. Guardian has almost 50,000 &#34;users,&#34; according to its data, and Layla isn&#39;t the only parolee in danger of being violated back into prison by the malfunctioning app. Other parolees spoken to by Gizmodo are reporting the same issues. They say the app is almost &#34;unusable&#34; due to its inability to accurately report  ...\n Unsurprisingly, the app is owned by Telmate, the same company that operates Global Tel*Link. Global Tel*Link is in the business of selling prisoners access to the outside world. It runs a number of prison communication networks -- ones known for  charging exorbitant per-minute fees for phone calls originating from prisons, as well as controlling  the entertainment devices(like tablets and mp3 players) of nearly every other digital interaction engaged in by inmates. That it would release a sloppily-coded  ...\n The app is intrusive -- even more intrusive than unannounced in-home visits by parole officers. The app does what corrections officers physically can&#39;t do: demand dozens of check-ins a day.\n \u201cGuardian cost me my job,\u201d says another person who had been incarcerated for more than a decade who used the app and remembers it asking him to check in more than 10 times an hour. \u201cAt night I couldn\u2019t sleep, and then at work I\u2019d have to pull my phone out all the time.\u201d Half the time, he says, it wouldn\u2019t accurately recognize his face or his voice.\n Guardian demands more but does less. A P.O. could easily verify a person&#39;s identity when meeting them in person. The app taking their place is apparently unable to reliably do this. It fails at this simple task multiple times an hour, day after day. An app unable to balance its ID books isn&#39;t going to help anyone return to a normal life after repaying their debt to society.\n A quick cost-benefit analysis sides heavily with costs. The app costs $90/month and doesn&#39;t work correctly. What it does do is put compliant parolees at risk of being incarcerated again. Even when it&#39;s working somewhat correctly, it&#39;s a problem.\n As we found in the review, Guardian checks in with Telmate\u2019s servers every single minute, waking up a phone if it\u2019s asleep and ignoring the operating system\u2019s requests to optimize the battery. Given what Guardian is used for, the app predictably relies on the user granting it access to a number of potentially privacy-invasive sensors on their device, including wifi, Bluetooth, audio settings, and camera access.\n All day, everyday surveillance parolees are expected to pay for. And even when they follow the rules, the app says they aren&#39;t. Also included in the code are hooks for surreptitious recording -- hidden access to devices&#39; microphones that can be triggered in standby or sleep mode. Not that sleep mode means anything when the app is phoning home every sixty seconds.\n The expectation of privacy for paroled prisoners is low. But it&#39;s not nonexistent. This expensive app removes everything that&#39;s left and replaces it with intrusive check-ins that are so badly implemented they may as well be a malfunctioning ankle bracelet for all the good it&#39;s doing for parolees. But this is likely the best prisoners are ever going to get. Very few people who matter -- those with the power to change things -- care what happens to ex-criminals. Every sentence  ...", "posttime": "2020-05-03 03:56:39", "tags": "\u7a0b\u5e8f,app,\u624b\u673a,\u4e0d\u8d77\u4f5c\u7528,replace", "title": "\u76d1\u72f1\u7528\u4e0d\u8d77\u4f5c\u7528\u7684\u667a\u80fd\u624b\u673a\u5e94\u7528\u7a0b\u5e8f\u66f4\u6362\u811a\u8e1d\u624b\u956f", "title_en": "Prisons Replace Ankle Bracelets with Smartphone App That Doesn't Work", "transed": 1, "url": "https://www.techdirt.com/articles/20200429/10182144405/prisons-replace-ankle-bracelets-with-expensive-smartphone-app-that-doesnt-work.shtml", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u7a0b\u5e8f", "app", "\u624b\u673a", "\u4e0d\u8d77\u4f5c\u7528", "replace"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000399, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u73b0\u5728\u662f\u5f00\u53d1\u65b0\u4ea7\u54c1\u7684\u65f6\u5019\u4e86\uff01\u6211\u51b3\u5b9a\u5206\u4eab\u6211\u6784\u5efaSaaS\u4ea7\u54c1\u4e4b\u65c5\u4e2d\u7684\u6bcf\u4e00\u6b65\uff0c\u4ee5\u4fdd\u6301\u5bf9\u81ea\u5df1\u7684\u8d23\u4efb\u611f\u3002\u6211\u82b1\u51e0\u5929/\u51e0\u5468/\u51e0\u4e2a\u6708\u7684\u65f6\u95f4\u7f16\u5199\u4ee3\u7801\uff0c\u5728ProductHunt\u6216IndieHacker\u4e0a\u5206\u4eab\u7684\u65e5\u5b50\u5df2\u7ecf\u4e00\u53bb\u4e0d\u590d\u8fd4\u4e86\uff0c\u6ca1\u6709\u4efb\u4f55\u5f62\u5f0f\u7684\u5438\u5f15\u529b\u3002\u73b0\u5728\u6211\u4eec\u7684\u505a\u6cd5\u662f\u6b63\u786e\u7684\uff01\n\u4ec0\u4e48\u662f\u6b63\u786e\u7684\u65b9\u5f0f\uff1f\u6211\u8fd8\u4e0d\u5b8c\u5168\u77e5\u9053\uff0c\u4f46\u6211\u8fc7\u53bb\u7684\u7ecf\u9a8c\u544a\u8bc9\u6211\uff0c\u5728\u5efa\u7acb\u6211\u7684MVP\u4e4b\u524d\uff0c\u6211\u9700\u8981\u4e13\u6ce8\u4e8e\u51e0\u4ef6\u4e8b\uff1a\n\u627e\u5230\u9047\u5230\u8be5\u95ee\u9898\u7684\u4eba\uff0c\u5e76\u8be2\u95ee\u4ed6\u4eec\u662f\u5982\u4f55\u89e3\u51b3\u8be5\u95ee\u9898\u7684(\u5ba2\u6237\u91c7\u8bbf)\u3002\n\u8bd5\u7740\u5efa\u7acb\u4e00\u4e2a\u65e9\u671f\u7528\u6237\u7684\u521d\u59cb\u5217\u8868\uff0c\u4ece\u4ed6\u4eec\u90a3\u91cc\u83b7\u5f97\u53cd\u9988\uff0c\u5e76\u6539\u8fdb\u6211\u7684MVP\u3002\n\u73b0\u6709\u7684\u4e66\u7b7e\u89e3\u51b3\u65b9\u6848\u5141\u8bb8\u6211\u5c06\u94fe\u63a5\u4fdd\u5b58\u5728\u6587\u4ef6\u5939\u3001\u6807\u7b7e\u7b49\u4e2d\uff0c\u4f46\u6709\u4e00\u4e2a\u95ee\u9898\u662f\u8981\u8bb0\u5f97\u8fd4\u56de\u5e94\u7528\u7a0b\u5e8f\u5e76\u6253\u5f00\u94fe\u63a5\u3002\u6211\u9047\u5230\u7684\u53e6\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5f53\u6211\u5728\u7f51\u4e0a\u9605\u8bfb\u6587\u7ae0\u3001\u89c2\u770b\u89c6\u9891\u6216\u67e5\u627e\u6709\u8da3\u7684\u5185\u5bb9\u65f6\uff0c\u6211\u60f3\u505a\u7b14\u8bb0\u5e76\u4fdd\u5b58\u7247\u6bb5\u4ee5\u5907\u5feb\u901f\u53c2\u8003\u3002\n\u6211\u8fd9\u6b21\u5b9e\u9645\u4e0a\u505a\u4e86\u4e00\u4e9b\u5ba2\u6237\u8c03\u67e5\uff0c\u6d1e\u5bdf\u4e86\u4eba\u4eec\u76ee\u524d\u662f\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\uff1a\n\u4eba\u4eec\u6b63\u5728\u4f7f\u7528\u57fa\u672c\u7684\u7b14\u8bb0\u5e94\u7528\u7a0b\u5e8f\u4f5c\u4e3a\u4e66\u7b7e\u7ba1\u7406\u5668\uff1a\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u7684\u95ee\u9898\u662f\uff0c\u4f60\u5fc5\u987b\u56f4\u7ed5\u7b14\u8bb0\u5e94\u7528\u7a0b\u5e8f\u5efa\u7acb\u4e00\u4e2a\u7cfb\u7edf\u6765\u4fdd\u6301\u4e00\u5207\u4e95\u7136\u6709\u5e8f\u3002\u4eba\u4eec\u4f7f\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\u6709Google Keep\u548cApple Notes\u3001Bear\u3001Concept\u7b49\u3002\n\u4eba\u4eec\u6b63\u5728\u4f7f\u7528\u73b0\u6709\u7684\u4e66\u7b7e\u5e94\u7528\u7a0b\u5e8f\uff1aRaindrop\u3001Pocket\u548cInstapaper\u7b49\u5e94\u7528\u7a0b\u5e8f\u3002\u5982\u679c\u60a8\u8981\u4fdd\u5b58\u94fe\u63a5\u5e76\u5c06\u5176\u7ec4\u7ec7\u5728\u6587\u4ef6\u5939\u4e2d\u6216\u6309\u6807\u7b7e\u8fdb\u884c\u7ec4\u7ec7\uff0c\u4f46\u5b83\u4eec\u4e0d\u80fd\u5e2e\u52a9\u60a8\u7a0d\u540e\u8fd4\u56de\u5230\u94fe\u63a5\uff0c\u5219\u6b64\u89e3\u51b3\u65b9\u6848\u6709\u6548\u3002\n\u5f00\u53d1\u4eba\u5458\u6b63\u5728\u6784\u5efa\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\uff1a\u5728\u5f00\u53d1\u4eba\u5458\u8bba\u575b\u4e0a\uff0c\u6211\u53d1\u73b0\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u8bd5\u56fe\u901a\u8fc7\u6784\u5efa\u5b9a\u5236\u89e3\u51b3\u65b9\u6848\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u7136\u800c\uff0c\u5e76\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u80fd\u7f16\u7801\u3002\n\u6211\u7684\u4e66\u7b7e\u5e94\u7528\u7a0b\u5e8f\u5c06\u5728\u540c\u4e00\u5c4b\u6a90\u4e0b\u63d0\u4f9b\u6240\u6709\u8fd9\u4e09\u6837\u4e1c\u897f\uff1a\u7ec4\u7ec7\u3001\u7b14\u8bb0\u548c\u63d0\u9192\u3002\n\u901a\u7528\u5e94\u7528\u7a0b\u5e8f\uff1aBear\u3001Concept\u3001RoamResearch\uff1a\u4fdd\u5b58\u94fe\u63a5\u548c\u7b14\u8bb0\uff0c\u4f46\u9700\u8981\u6784\u5efa\u81ea\u5df1\u7684\u7cfb\u7edf\u624d\u80fd\u8fd0\u884c\u3002\n\u9605\u8bfb\u6e05\u5355\u63d0\u9192\u5e94\u7528\u7a0b\u5e8f\uff1aMailist.app(\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u662f\u6211\u627e\u5230\u7684\u552f\u4e00\u4e00\u4e2a)\uff1a\u63d0\u9192\u4f60\u9605\u8bfb\u94fe\u63a5\uff0c\u4f46\u4e0d\u63d0\u4f9b\u7ec4\u7ec7\u529f\u80fd\u3002\nExcel\u548cAirtable\uff1a\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u5728\u8fd9\u4e24\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u4f46\u662f\u4f60\u9700\u8981\u627e\u5230\u65f6\u95f4\u6765\u6784\u5efa\u4e00\u4e2a\u9002\u5408\u4f60\u7684\u7cfb\u7edf\u3002\u8fd9\u53ef\u80fd\u4f1a\u5f88\u9ebb\u70e6\u3002\n\u901a\u8fc7\u5728\u8bba\u575b\u3001Twitter\u3001IndieHacker\u3001HackerNews\u4e0a\u5efa\u7acb\u53d7\u4f17\uff0c\u6211\u6b63\u5728\u8be2\u95ee\u4eba\u4eec\u4ed6\u4eec\u662f\u5982\u4f55\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684\uff0c\u5e76\u8bd5\u56fe\u83b7\u5f97\u4e00\u4e9b\u89c1\u89e3\u3002\u7136\u540e\u6211\u8bd5\u7740\u8054\u7cfb\u4e00\u4e9b\u56de\u7b54\u7684\u4eba\uff0c\u5efa\u7acb\u4e00\u4efd\u65e9\u671f\u91c7\u7528\u8005\u7684\u540d\u5355\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u8fd8\u4e0d\u662f\u5f88\u6210\u529f\uff1a\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u56de\u7b54\u8bf4\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u79cd\u89c2\u4f17\u81f3\u4e0a\u7684\u65b9\u6cd5\u5e76\u4e0d\u987a\u5229\u3002\u6211\u5728Twitter\u548c\u5176\u4ed6\u5e73\u53f0\u4e0a\u6ca1\u6709\u8ffd\u968f\u8005\uff0c\u6240\u4ee5\u6211\u5c1d\u8bd5\u4e86\u4e00\u79cd\u4ee4\u4eba\u6bdb\u9aa8\u609a\u7136\u7684\u65b9\u5f0f\uff0c\u76f4\u63a5\u8054\u7cfb\u4eba\u4eec\u3002\u8fd9\u5bf9\u6211\u4e0d\u8d77\u4f5c\u7528\uff0c\u56e0\u4e3a\u9996\u5148\uff0c\u8fd9\u4e9b\u4eba\u4e0d\u4e86\u89e3\u6211\uff0c\u5176\u6b21\uff0c\u4ed6\u4eec\u4e0d\u5728\u4e4e\u6211\u8981\u8bf4\u4ec0\u4e48\u3002\u6211\u5728\u7f51\u4e0a\u5230\u5904\u770b\u5230\uff0c\u5728\u5f00\u53d1\u4ea7\u54c1\u4e4b\u524d\uff0c\u4f60\u5fc5\u987b\u5148\u5efa\u7acb\u4e00\u4e2a\u53d7\u4f17\uff0c\u4f46\u8981\u5efa\u7acb\u4e00\u4e2a\u53d7\u4f17\uff0c\u4f60\u81f3\u5c11\u9700\u8981\u6709\u613f\u610f\u542c\u4f60\u8bf4\u8bdd\u7684\u4eba\u3002\n\u6211\u8fd8\u521b\u5efa\u4e86\u4e00\u4e2a\u5e26\u6709\u7535\u5b50\u90ae\u4ef6\u8868\u5355\u7684\u767b\u5f55\u9875\u9762\uff0c\u6211\u5c06\u5728Twitter\u548c\u5176\u4ed6\u5730\u65b9\u5206\u4eab\uff0c\u8bd5\u56fe\u83b7\u5f97\u4e00\u4e9b\u65e9\u671f\u7528\u6237\u3002\u7136\u800c\uff0c\u5728\u793e\u4ea4\u5a92\u4f53\u4e0a\u6ca1\u6709\u8ffd\u968f\u8005\u7684\u60c5\u51b5\u4e0b\uff0c\u5f88\u96be\u83b7\u5f97\u5438\u5f15\u529b\u3002\n\u6211\u5df2\u7ecf\u5728Adobe XD\u4e0a\u6784\u5efa\u4e86\u4e00\u4e2a\u6211\u8ba4\u4e3a\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4f1a\u662f\u4ec0\u4e48\u6837\u5b50\u7684\u8bbe\u8ba1\u539f\u578b\u3002\u7136\u800c\uff0c\u6211\u8ba4\u4e3a\u6211\u8bbe\u8ba1\u8fc7\u5ea6\u4e86\uff0c\u6211\u4e0d\u559c\u6b22\u8fd9\u6837\uff0c\u6240\u4ee5\u6211\u9700\u8981\u4ece\u5934\u5f00\u59cb\u3002", "note_en": "It is time build a new product! I have decided to share every step on my journey of building SaaS products to keep myself accountable. Long gone are the days where I would spend days/weeks/months coding something, sharing it on ProductHunt or IndieHackers and have no form of traction. Now we are doing it the right way!\n What is the right way? I don&#39;t fully know yet but my past experiences showed me that I need to focus on a few things before building my MVP:\n Find the people experiencing that problem and ask them how they are solving it (customer interviews)\n Try to build an initial list of early users, get feedback from them and refine my MVP\n       Existing bookmark solutions allow me to save links in folders, tags etc but one issue is to remember to come back to the application and open the links. The other problem I have is that when I read articles, watch videos or find interesting content online I want to take notes and save snippets for quick reference.\n  I have actually done some customer research this time and got some insight on how people are solving this problem at the moment:\n People are using basic note apps as a bookmark manager: The problem with this solution is that you have to build a system around the note app to keep everything organized. Example of apps people use for that are Google Keep and Apple Notes, Bear, Notion etc\n People are using existing bookmark apps: Apps like Raindrop, Pocket and Instapaper. This solution works if you want to save your links and organize them in folders or by tags but they don&#39;t help you come back to your links later\n Developers are building their own apps: On developer forums I found that other developers tried to solve this by building a custom solution. However not everyone can code.\n  My bookmark app will offer all those 3 things under the same roof: organization, notes and reminders.\n  General purpose apps: Bear, Notion, RoamResearch: Save links and notes but need to build your own system to make it work\n Reading list reminder apps: Mailist.app (so far it&#39;s the only one that I found): Reminds you to read links but offer no organization capabilities\n Excel and Airtable: Anybody can do anything in those 2 apps but you need to find time to build a system that works for you. It can be cumbersome.\n  Building an audience by going on forums, Twitter, IndieHackers, HackerNews, I am asking people how they are solving these problems and trying to get some insights. I then try to contact some of the people that answer to build a list of early adopters. So far this have not been very successful: not everybody replies\n  This audience-first approach is not going well so far. I have no following on Twitter and other platforms so I have tried the creepy way by contacting people directly. This is not working for me because first, these people don&#39;t know me and second, they don&#39;t care about what I have to say. I see everywhere online that you have to build an audience before building a product but to build an audience you need at least people that want to listen to you\n     I have also created a  landing page with an email form that I will share on Twitter and other places to try to get some early users. However with no following on social media it will be hard to get traction\n I have built a  design prototype on Adobe XD of what I think the app would look like. However I think I over engineered and don&#39;t like it this so I need to go back to the drawing board", "posttime": "2020-05-03 03:34:42", "tags": "\u7a0b\u5e8f,app,saas,\u5e94\u7528\u7a0b\u5e8f,people", "title": "\u516c\u5f00\u6784\u5efaSaaS\uff1a\u4e66\u7b7e\u5e94\u7528\u7a0b\u5e8f-\u7b2c1\u5929(ISH)", "title_en": "Building a SaaS in Public: Bookmark App \u2013 Day 1(ish)", "transed": 1, "url": "https://charlesthecoder.dev/building-saas-in-public-bookmark-app-day-1/", "via": "", "source_name": "Hacker News", "source_domain": "news.ycombinator.com", "real_tags": ["\u7a0b\u5e8f", "app", "saas", "\u5e94\u7528\u7a0b\u5e8f", "people"]}]