[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1006550, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u9605\u8bfb\u4e86\u5927\u536b\u00b7M\u00b7\u5e03\u5c14\u66fc\u7684\u201c\u5806\u53e0\u8ba1\u7b97\u673a\u5165\u95e8\u201d(Introduction To Stack Computers)\u4e00\u4e66\u540e\uff0c\u6211\u89c9\u5f97\u6709\u5fc5\u8981\u5bf9\u90a3\u4e9b\u5bf9\u8be5\u7cfb\u7edf\u7684\u8bbe\u8ba1\u548c\u67b6\u6784\u505a\u51fa\u8d21\u732e\u7684\u4eba\u8fdb\u884c\u6f84\u6e05\uff0c\u8fd9\u672c\u4e66\u5bf9Burroughs B5000\u8fdb\u884c\u4e86\u5927\u91cf\u7684\u4ecb\u7ecd\u3002\u4ece1959\u5e741\u6708\u52301961\u5e744\u6708\uff0c\u6211\u662fBurroughs Product Planning Group\u7684\u7ecf\u7406-\u7531\u5927\u7ea620\u540d\u4e13\u4e1a\u4eba\u5458\u7ec4\u6210\uff0c\u4f4d\u4e8e\u5e15\u8428\u8fea\u7eb3-\u8d1f\u8d23B200\u548cB5000\u7cfb\u7edf\u7684\u4f53\u7cfb\u7ed3\u6784\u8bbe\u8ba1\u548c\u6307\u5b9a\u3002\u5c3d\u7ba1\u8fd9\u4e2a\u56e2\u961f\u89c4\u6a21\u4e0d\u5927\uff0c\u4f46\u5b83\u62e5\u6709\u4e00\u6279\u975e\u51e1\u7684\u4eba\u624d\uff0c\u7279\u522b\u662f\u4fdd\u7f57\u00b7\u91d1(Paul King)(\u4e0e\u4e1a\u5185\u7684\u8ba1\u7b97\u673a\u4e13\u4e1a\u4eba\u58eb\u4e00\u6837\u624d\u534e\u6a2a\u6ea2)\u548c\u6770\u514b\u00b7\u9ed8\u7eb3(Jack Merner)(\u4e00\u4e2a\u6709\u70b9\u53e4\u602a\u4f46\u6781\u5177\u5929\u8d4b\u7684\u7a0b\u5e8f\u5458)\uff0c\u4ed6\u4eec\u90fd\u662f\u6211\u7684\u5458\u5de5\u3002\u6b64\u5916\uff0c\u5f53\u5510\u7eb3\u5fb7\u00b7\u52aa\u65af(Donald Knuth)\u9009\u62e9\u4ece\u52a0\u5dde\u7406\u5de5\u5927\u5b66(Cal Tech)\u83b7\u5f97\u535a\u58eb\u5b66\u4f4d\uff0c\u6234\u592b\u00b7\u8fbe\u59c6(Dave Dahm)\u4f5c\u4e3a\u517c\u804c\u5458\u5de5\u6216\u987e\u95ee\u65f6\uff0c\u6211\u4eec\u8058\u8bf7\u4e86\u4ed6\u4f5c\u4e3a\u987e\u95ee\u3002\u9c8d\u52c3\u00b7\u4f2f\u987f(Bob Burton)\u5df2\u7ecf\u5728\u4e3aBurroughs\u5de5\u4f5c\uff0c\u62c5\u4efb\u4e00\u9879\u8f6f\u4ef6\u6d3b\u52a8\u7684\u7ecf\u7406\u3002\u5927\u7ea6\u662f\u5728\u6211\u63a5\u624b\u4ea7\u54c1\u8ba1\u5212\u7ec4\u7684\u65f6\u5019\u3002\u9c8d\u52c3\u4ece\u4e00\u540d\u5458\u5de5\u53d8\u6210\u4e86\u4e00\u540d\u987e\u95ee-\u6211\u8ba4\u4e3a\u8fd9\u79cd\u5173\u7cfb\u66f4\u9002\u5408\u4ed6\u7684\u6027\u683c\u548c\u5de5\u4f5c\u98ce\u683c-\u5e76\u6210\u4e3a\u6211\u4eec\u96c6\u56e2\u7684\u4e00\u540d\u987e\u95ee\u3002\u4fdd\u7f57\u00b7\u91d1\u662f\u4ea7\u54c1\u89c4\u5212\u90e8\u95e8B5000\u9879\u76ee\u7684\u7ecf\u7406\uff0c\u5982\u679c\u8be5\u7cfb\u7edf\u7684\u67b6\u6784\u53ef\u4ee5\u8bf4\u5728\u4efb\u4f55\u4e00\u4e2a\u5730\u65b9\u90fd\u5f97\u5230\u4e86\u53d1\u5c55\u548c\u6210\u719f\uff0c\u90a3\u5b83\u4e00\u5b9a\u662f\u4fdd\u7f57\u00b7\u91d1\u7684\u9ed1\u677f\u3002\u9664\u4e86\u5bf9\u7cfb\u7edf\u505a\u51fa\u91cd\u5927\u8d21\u732e-\u5176\u4e2d\u4e00\u4e9b\u5c06\u5728\u4e0b\u9762\u63cf\u8ff0-\u4fdd\u7f57\u8fd8\u5bf9\u9c8d\u52c3\u00b7\u5df4\u987f\u7684\u60f3\u6cd5\u63d0\u4f9b\u4e86\u5fc5\u8981\u7684\u3001\u4f46\u4e0d\u53d7\u6b22\u8fce\u7684\u8fc7\u6ee4\u529f\u80fd\u3002\u5c31\u50cf\u8bb8\u591a\u6781\u5177\u521b\u9020\u529b\u7684\u4eba\u4e00\u6837\u3002\u9c8d\u52c3\u6709\u4e00\u4e9b\u975e\u5e38\u597d\u7684\u60f3\u6cd5\uff0c\u4e5f\u6709\u4e00\u4e9b\u4e0d\u592a\u597d\u7684\u60f3\u6cd5\u3002\u8bc0\u7a8d\u662f\u4f7f\u7528\u524d\u8005\uff0c\u62d2\u7edd\u540e\u8005\u3002\u5728B5000\u7684\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\uff0c\u9c8d\u52c3\u7684\u4e00\u4e9b\u60f3\u6cd5\u51fa\u73b0\u5728\u4fdd\u7f57\u7684\u9ed1\u677f\u4e0a\uff0c\u800c\u53e6\u4e00\u4e9b\u5219\u6ca1\u6709\u3002\u4ee5\u4e0b\u662fB5000\u4e2d\u7684\u4e00\u4e9b\u4e3b\u8981\u521b\u65b0(\u81f3\u5c11\u662f\u7f8e\u56fd\u7684\u521b\u65b0)\uff0c\u4ee5\u53ca\u5b83\u4eec\u7684\u6765\u6e90\u548c\u4e3b\u8981\u8d1f\u8d23\u4eba\uff1a\u865a\u62df\u5185\u5b58\uff1a1960\u5e745\u6708\uff0c\u52a0\u5dde\u5927\u5b66\u6d1b\u6749\u77f6\u5206\u6821(UCLA)\u4e3e\u529e\u4e86\u4e00\u573a\u4e3a\u671f\u4e24\u5468\u7684\u7814\u8ba8\u4f1a\uff0c\u9898\u4e3a\u4f7f\u7528\u548c\u5229\u7528\u5de8\u578b\u8ba1\u7b97\u673a\u3002\u8be5\u8ba1\u5212\u6db5\u76d6\u4e86IBM Stretch\u8ba1\u7b97\u673a\u3001Univac LARC\u3001Ferranti ATLAS 1\u548cOrion\u8ba1\u7b97\u673a\u3001\u672c\u8fea\u514b\u65afG-20\u8ba1\u7b97\u673a\u548c\u5176\u4ed6\u51e0\u53f0\u8ba1\u7b97\u673a\u3002\u4e0e\u4f1a\u8005\u540d\u5355\u663e\u793a\uff0c\u670914\u4eba\u6765\u81eaIBM\uff0c7\u4eba\u6765\u81eaUnivac\u3002\u6211\u4eec\u6d3e\u6765\u4e86\u4fdd\u7f57\u00b7\u91d1\u548c\u4e24\u540d\u6765\u81ea\u4f2f\u7f57\u65af\u7684\u8bbe\u8ba1\u5de5\u7a0b\u5e08\u3002\u4fdd\u7f57\u548c\u6211\u7ecf\u5e38\u82e5\u6709\u6240\u601d\u5730\u8bf4\uff0cIBM\u768414\u4e2a\u4eba\u663e\u7136\u662f\u5982\u6b64\u6c89\u8ff7\u4e8e\u4f38\u5c55\uff0c\u4ee5\u81f3\u4e8e\u4ed6\u4eec\u6ca1\u6709\u9886\u4f1a\u5df2\u6545\u7684\u65af\u5766\u00b7\u5409\u5c14(Stan Gill)\u5173\u4e8eATLAS I\u865a\u62df\u5185\u5b58\u7ec4\u7ec7\u7684\u8a00\u8bba\u7684\u610f\u4e49\u3002\u4fdd\u7f57\u00b7\u91d1\u786e\u5b9e\u7406\u89e3\u5b83\u7684\u91cd\u8981\u6027\uff0c\u5e76\u5bf9\u8fd9\u4e2a\u6982\u5ff5\u975e\u5e38\u5174\u594b\u5730\u56de\u5230\u4e86\u5e15\u8428\u8fea\u7eb3\u3002\u5728\u7ecf\u8fc7\u76f8\u5bf9\u77ed\u6682\u7684\u56de\u987e\u548c\u8ba8\u8bba\u4e4b\u540e\uff0c\u5982\u4f55\u624d\u662f\u6700\u597d\u7684\u3002\u4e3a\u4e86\u5408\u5e76\u5b83\uff0c\u5728B5000\u7cfb\u7edf\u4e2d\u5b9a\u4e49\u4e86\u5206\u6bb5\u865a\u62df\u5185\u5b58(\u5728\u4ea7\u54c1\u8ba1\u5212\u4e2d\uff0c\u5b83\u5f53\u65f6\u7684\u9879\u76ee\u540d\u79f0\u662f4000\u7cfb\u7edf)\u3002\u5728\u7f8e\u56fd\u673a\u5668\u4e0a\u9996\u6b21\u4f7f\u7528\u865a\u62df\u5185\u5b58\u663e\u7136\u8981\u5f52\u529f\u4e8e\u4fdd\u7f57\u00b7\u91d1\uff0c\u800c\u4e0d\u662f\u9c8d\u52c3\u00b7\u5df4\u987f\u3002(\u5728\u8fd9\u4e00\u70b9\u4e0a\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u865a\u62df\u673a\u7684\u6982\u5ff5\u5df2\u7ecf\u6210\u4e3aBurroughs Pasadena\u8bbe\u65bd\u7684\u4e00\u4e2a\u70ed\u95e8\u8bdd\u9898\u3002\u6211\u76f8\u4fe1\u8fd9\u4e2a\u6982\u5ff5\u8d77\u6e90\u4e8e\u6cf0\u5fb7\u00b7\u683c\u62c9\u6cfd\uff0c\u65e9\u57281950\u5e74\u4ee3\uff0c\u6cf0\u5fb7\u5c31\u5728\u5e15\u8428\u8fea\u7eb3\u5de5\u7a0b\u5c0f\u7ec4\u5de5\u4f5c\uff0c\u4ece1956\u5e74\u52301959\u5e74\u4e2d\u671f\u3002)B5000\u7684\u5176\u4ed6\u51e0\u4e2a\u8bbe\u8ba1\u7279\u70b9\u53ef\u4ee5\u8ffd\u6eaf\u52301960\u5e745\u6708\u52a0\u5dde\u5927\u5b66\u6d1b\u6749\u77f6\u5206\u6821\u7684\u7814\u8ba8\u4f1a\u3002\u72ec\u7acb\u7684\u3001\u6a21\u5757\u5316\u7684\u8f93\u5165\u8f93\u51fa\u63a7\u5236\u5668\u7684\u60f3\u6cd5\u53ef\u4ee5\u8ffd\u6eaf\u5230LARC\uff0c\u800c\u5355\u4e00\u6570\u5b57\u5f62\u5f0f\u53ef\u4ee5\u8ffd\u6eaf\u5230G-20\u3002\u6ce2\u5170\u8bed\u8868\u793a\u6cd5\uff1a\u6beb\u65e0\u7591\u95ee\uff0c\u751f\u4ea7\u4e00\u53f0\u76f4\u63a5\u5728\u6ce2\u5170\u8bed\u5b57\u7b26\u4e32\u4e0a\u64cd\u4f5c\u5e76\u4f7f\u7528\u4e0b\u63a8\u64cd\u4f5c\u7b26/\u64cd\u4f5c\u6570\u5806\u6808\u7684\u673a\u5668\u7684\u6982\u5ff5\u662f\u7531Bob Barton\u63d0\u51fa\u7684\uff0c\u4e0a\u4e0b\u6587\u5bfb\u5740\u7684\u6982\u5ff5\u4e5f\u662f\u5982\u6b64\u3002\u57fa\u4e8eALGOL\u7684\u8bbe\u8ba1\uff1a\u8bbe\u8ba1\u7cfb\u7edf\u4ee5\u9ad8\u6548\u5904\u7406\u7ed9\u5b9a\u8bed\u8a00ALGOL\u7684\u6982\u5ff5\u662fBob Burton\u63d0\u51fa\u7684\u3002\u7136\u800c\uff0cJack Merner\u662f\u6211\u4eec\u7684\u5e38\u9a7b\u8bed\u8a00\u4e13\u5bb6\uff0c\u4ed6\u8d21\u732e\u4e86\u5b9e\u73b0\u8fd9\u4e00\u6982\u5ff5\u7684\u5927\u90e8\u5206\u8bbe\u8ba1\u60f3\u6cd5\u3002\u5f53\u7136\uff0cDonald Knuth\u5728\u8fd9\u4e00\u9886\u57df\u8fdb\u884c\u4e86\u54a8\u8be2\u3002\u7a0b\u5e8f\u63a7\u5236\uff1a\u4fdd\u7f57\u00b7\u91d1\u770b\u5230\u4e86\u6155\u5c3c\u9ed1\u5927\u5b66\u5236\u9020\u7684\u5371\u9669\u8ba1\u7b97\u673a\u7684\u63cf\u8ff0\u3002\u5b83\u6709\u4e00\u79cd\u9ad8\u5ea6\u590d\u6742\u7684\u5b50\u4f8b\u7a0b\u63a7\u5236\u65b9\u6cd5\uff0c\u5305\u62ec\u5141\u8bb8\u9012\u5f52\u4f7f\u7528\u5b83\u4eec\u3002Paul\u5728B5000\u4e2d\u52a0\u5165\u4e86\u8be5\u601d\u60f3\u7684\u4e00\u4e2a\u66f4\u901a\u7528\u7684\u7248\u672c\uff0c\u5b83\u6210\u4e3a\u4e86\u8fc7\u7a0b\u63a7\u5236\u6808(Procedure Control Stack)\u3002\u968f\u540e\uff0cJack Merrier\u5efa\u8bae\u5c06\u4e0a\u8ff0\u4e24\u4e2a\u5806\u6808\u5408\u5e76\u4e3a\u4e00\u4e2a\u5806\u6808\u6982\u5ff5\uff0c\u5e76\u5b9e\u73b0\u4e86\u8fd9\u4e00\u70b9\u3002\u4eba\u7269\u64cd\u7eb5\uff1a\u5728B5000\u9879\u76ee(1959\u5e74)\u4e4b\u524d\uff0c\u5e15\u8428\u8fea\u7eb3\u6709\u4e00\u4e2a2111\u4e2a\u8ba1\u7b97\u673a\u8bbe\u8ba1\u9879\u76ee\u3002\u5728\u6cf0\u5fb7\u00b7\u683c\u62c9\u6cfd\u7684\u67b6\u6784\u5e08\u9886\u5bfc\u4e0b\uff0c211", "note_en": "After reading David M. Bulman&#39;s introduction to stack computers, \rwhich dwelt heavily on the Burroughs B5000, I feel compelled to write to set \rthe record straight concerning those who contributed to the design and \rarchitecture of that system.\r From January I959 to April 1961 I was the manager of the Burroughs \rProduct Planning Group - consisting of approximately 20 professionals \rand located in Pasadena - that did the architecture of and specified the \rB200 and B5000 systems. Although the group was small in size, it had \ran extraordinary array of talent, including especially Paul King (as \rbroadly talented a computer professional as there is in the business) \rand Jack Merner (a somewhat eccentric but exceptionally gifted \rprogrammer), both of whom were on my staff. \r In addition, we had Donald Knuth as a consultant when he elected \rto get his PhD from Cal Tech and Dave Dahm as a part-time employee \ror consultant. Bob Burton had already been working for Burroughs as the\t\rmanager of a software activity. About the time I took over responsibility \rfor the Product Planning Group. Bob converted from an employee to a \rconsultant-a relationship which I believe is better suited to his \rtemperament and working style - and became a consultant to our group.\r Paul King was the manager of the B5000 project within Product Planning and if the architecture of that \rsystem can be said to have evolved\t- and matured in any single place, it \rwould have to be Paul King&#39;s black-board. In addition to making major \rcontributions to the system - some of which are delineated below - Paul also\rprovided the necessary, but unpopular filter function on Bob Barton&#39;s \rideas. Like many highly creative people. Bob has some very good ideas \rand some not very good ideas. The trick is to use the former and reject the latter. During the design of the \rB5000 some of Bob&#39;s ideas made it across Paul&#39;s blackboard and some did not.\r Following are some of the major innovations (at least U.S. innovations) \rincorporated in the B5000, along with their source and the person or persons \rprimarily responsible for them:\r\r Virtual memory: In May 1960 UCLA conducted a two-week seminar \rentitled, &#34;Using and Exploiting Giant Computers.&#34; The program covered \rthe IBM STRETCH computer, the Univac LARC, the Ferranti ATLAS 1 \rand Orion computers, the Bendix G-20, and a few other machines. The \rlist of attendees shows that 14 people attended from IBM and seven from \rUnivac. We sent Paul King and two design engineers from Burroughs. \r Paul and I have often mused that the 14 people from IBM were apparently \rso wrapped up in STRETCH that they failed to rasp the significance \rof what the late Stan Gill was saying about the virtual memory organizations \rof the ATLAS I. Paul King did understand its significance and\rreturned to Pasadena greatly excited about the concept. After a relatively \rbrief period of review and discussion about how best. to incorporate it, a \rsegmented virtual memory was defined into the B5000 system \r(its project name in Product Planning at the time was the 4000 system). The credit \rfor this first use of a virtual memory in a U.S. machine clearly lies with \rPaul King, not Bob Barton.\r (It is worth noting at this point that the conceptual notion of a virtual \rmachine had by this time already been a topic of much discussion around \rthe Burroughs Pasadena facility. I believe the notion originated with Ted \rGlaser earlier in the I950&#39;s. Ted was in the Pasadena engineering group \rfrom I956 to mid-1959.)\r Several other B5000 design features can be traced to the May 1960 UCLA \rseminar. The idea of separate, modular input-output controllers can be \rtraced to the LARC and the single number form can be traced to the \rG-20.\r Polish notation: There is no question that the notion of producing a machine \rthat directly operated on Polish strings and that used push down\roperator/operand stacks was contributed by Bob Barton, as was the \rnotion of contextual addressing. \r Algol based design: The notion of designing the system to be efficient \rat handling a given language- Algol - was Bob Burton&#39;s. Jack Merner, \rhowever, was our resident expert on the language and contributed most of the \rdesign ideas that made possible the execution of the concept. Donald \rKnuth, of course, consulted in this area.\r\r Procedure control: Paul King came across a description of the PERIL \rcomputer built by the University of Munich. It had a highly sophisticated \rmethod of subroutine control, including allowing them to be used recursively. \rPaul incorporated a more generalized version of the idea in the \rB5000, and it became the procedure control stack. Subsequently, Jack \rMerrier suggested combining the two aforementioned stacks into a single \rstack concept, and this was done.\r Character manipulation: Prior to the B5000 project (1959) there had been\ra 2111 computer design project in Pasadena. Under Ted Glaser&#39;s architectoral leadership \rthe 211I was probably the most. sophisticated magnetostrictive delay line machine ever \rcontemplated. (The project was abandoned hate in 1959, primarily as \ra result of the I401 announcement in October of that year.) Paul King \rhad contributed the character string-manipulation capabilities to the 2111, \rand these were brought forward into the B5000. Several other B5000 innovators \rcan be traced to the 2111. Among these are the notion of organizing the system around an exchange\r(we borrowed the idea from the telephone system), the notion of floating \rinput-output channels, and the notion of ILO descriptors- (Contrary to David \rBulman&#39;s note, no mention of descriptors was made with the Atlas \rmachine.) It is difficult to attribute some of these ideas to any particular \rperson since they developed in a design discussion group that met weekly. \rThe group included Ted Glaser, Paul King, Don Stevens. myself, and a \rnumber of others.\r Multiprocessor systems: My own awareness of multiprocessor architecture\rcame from reading an article on another German machine, the E??56. \rWhether this led to the B5000 being a multiprocecessor system or whether \rthe idea came from work done on military computers at Burroughs in \rPaolii is hard to say. Certainly the Paoli group contributed the notion of \ra conflict-resolving, switching-interlock system.\r As can be seen from the above, the B5000 had a rich and varied \rancestry. It certainly affirms the notion that good system architecture \rincludes a lot of intelligent plagiarizing. The design of the B5000 system -\rlike the design of any computer system - involves a number of major \rarchitectural contributions and hundreds of less major, but nonetheless significant, design contributions, \rsometimes involving the use of a single bit. Unfortunately, space does \rnot permit mentioning all those who contributed or what they contributed. \r(I hereby ask some of my old friends to understand.)\r The purpose of this letter is not to minimize the contribution of Bob \rBarton to the B5000 or to computer architecture in general. Rather. it is to \rplace those contributions in perspective and to acknowledge that a number \rof other people - some not even mentioned in this letter - made significant \rcontributions to the B5000. The total contribution of Paul King, \rin particular, was probably at least equal to that of Bob Barton.\r\r Although the writer participated in many architectural and design sessions, \rhe makes no direct claim to any of the major innovations in the B5000.\rI do, however, claim that I played the primary role in persuading the \rthen pre-Ray MacDonald top management of Burroughs to proceed with \rand announce the system. Those were heady days in the computer field.\rIt&#39;s doubtful we will see their like again. I wonder if the top management \rof any computer company today, including Burroughs, could be \rpersuaded to proceed with a system which included as many radical \rdepartures from current design philosophy. The reward for Burroughs\rgamble was a system. in the form of the B5000;5500;5700, which stayed in \rmanufacturing for 10 years (probably the longest of any computer in the \rhistory of the field) and gave Burroughs a unique architectural-based \rposition in the industry.\r As a final point, it is worth noting that since my memory is no better \rthan most, I refreshed it by rereading a fair array of detailed design notes \rand\tmaterial that exists from the period under discussion.\r W. R. Lonergan \r Principal, Xerox\r Bulman replies   Editor,\r I am grateful for the additional information about the B5000 project \rcontributed by Mr. Lonergan. Before writing the survey. I talked with \r(among others) most of the people mentioned in his letter. When anyone \rwas mentioned as having contributed significantly to the B5000 architecture, \rI attempted to locate and telephone them. Quite a chain was followed in \rthis way. A significant fact which I should have thought to mention was \rthat W. R. Lonergan was the individual who originally &#34;sold&#34; the idea \rof building a stack machine to Burroughs corporate management.\r As a result, there is little substantial disagreement between my outline of \rthe project and Mr. Lonergan&#39;s letter. Much of the apparent disagreement \rlies in the distinction which should be made between computer architecture \rand product definition. There is little doubt that many people contributed \rheavily to the definition of the B5000 as a product, including many in the \rProduct Planning Group under Mr. Lonergan.\r It is interesting to note that, as early as the summer of 1958. while working \rat Shell Research, Barton brought forward the idea that main storage \rshould be allocated automatically by the hardware, rather than have the \rprogrammer concern himself with overlays from secondary memory. \rThis certainly adds plausibility to the statements of essentially everyone \relse on the project that Barton was responsible for its virtual memory.\r Another important idea of computer architecture is the use of the hardware \rstack for computational history (called procedure control in the letter). All\rthe people from the project I talked with attribute most of this to Barton, \rwith very significant contributions from Jack Merner. In addition to \rcombining the two stacks, the much more important method of handling \rparameters called by name was invented by Merner.\r I fervently agree with Mr. Lonergan that many other people contributed \rsignificantly to the success of the B5000 project. I only wish that I had \rbeen involved, so that I could share more deeply the amusement felt by \rthose on the project. as they watch the features of their circa 1961 \rcomputer gradually being introduced by the major computer vendors of 1977. \r David M. Bulman \r President, Pragmetics, Inc.\r\r Reprinted from the Communications OF THE Association FOR COMPUTING MACHINERY \rVolume 4, Number 9, September 1961\rMade in U.S.A.\r \tA Syntactical Chart of ALGOL 60\rWARREN TAYLOR, LLOYD TURNER, AND RICHARD WAYCHOFF \rBurroughs Corporation, Pasadena, California .\n  I don&#39;t know the copyright status of this document,", "posttime": "2020-06-15 02:34:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "b5000,\u8bbe\u8ba1", "title": "\u5173\u4e8eB5000\u548c\u5728\u90a3\u91cc\u7684\u4eba\u7684\u6545\u4e8b(1979)", "title_en": "Stories about the B5000 and people who were there (1979)", "transed": 1, "url": "http://ed-thelen.org/comp-hist/B5000-AlgolRWaychoff.html", "via": "", "real_tags": ["b5000", "\u8bbe\u8ba1"]}, {"category": "", "categoryclass": "", "imagename": "6333a5a0f6041334322200d5af28c5fd.png", "infoid": 1006549, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "SIX\u9519\u8bef\uff1a1)\u9057\u6f0f\u4e86\u53e3\u7f69\u7684\u590d\u5408\u6548\u5e94\uff0c2)\u9057\u6f0f\u4e86\u611f\u67d3\u75c5\u6bd2\u7684\u6982\u7387\u7684\u975e\u7ebf\u6027\uff0c3)\u9057\u6f0f\u4e86\u7f3a\u5c11(\u6234\u53e3\u7f69\u7684\u76ca\u5904)\u8bc1\u636e\u7684\u8bc1\u636e(\u6234\u53e3\u7f69\u7684\u76ca\u5904)\uff0c4)\u9057\u6f0f\u4e86\u4eba\u4eec\u4e0d\u9700\u8981\u653f\u5e9c\u63d0\u4f9b\u9762\u90e8\u906e\u76d6\u7684\u89c2\u70b9\uff1a\u4ed6\u4eec\u53ef\u4ee5\u81ea\u5df1\u5236\u4f5c\uff0c5)\u9057\u6f0f\u4e86\u7edf\u8ba1\u4fe1\u53f7\u7684\u590d\u5408\u6548\u5e94\uff0c6)\u4f2a\u81ea\u7531\u4e3b\u4e49\u8005\u5ffd\u89c6\u4e86\u4e92\u4e0d\u4fb5\u72af\u539f\u5219(\u53e3\u7f69\u4e5f\u662f\u4e3a\u4e86\u4fdd\u62a4\u4ed6\u4eba\u514d\u53d7\u4f60\u7684\u4f24\u5bb3\uff1b\u8fd9\u662f\u4e00\u4e2a\u500d\u589e\u7684\u95ee\u9898\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u53e3\u7f69(\u548c\u9762\u7f69)\u52a0\u4e0a\u8d85\u7ea7\u4f20\u64ad\u8005\u4e8b\u4ef6\u7684\u7ea6\u675f\uff0c\u53ef\u4ee5\u5728\u672a\u6765\u7684\u5c01\u9501(\u548c\u8bc9\u8bbc)\u4e2d\u4e3a\u6211\u4eec\u8282\u7701\u6570\u4e07\u4ebf\u7f8e\u5143\uff0c\u5e76\u6709\u53ef\u80fd\u8db3\u4ee5(\u5728\u5145\u5206\u9075\u5b88\u7684\u60c5\u51b5\u4e0b)\u904f\u5236\u5927\u6d41\u884c\u3002\u5b98\u50da\u4eec\u4e0d\u559c\u6b22\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u3002\n\u6839\u636e\u6211\u7684\u7ecf\u9a8c\uff0c\u64c5\u957f\u8003\u8bd5(\u6210\u4e3a\u5b98\u50da\u3001\u7ecf\u6d4e\u5b66\u5bb6\u6216\u9ed1\u5ba2)\u7684\u4eba\u4e0d\u5584\u4e8e\u7406\u89e3\u975e\u7ebf\u6027\u548c\u52a8\u529b\u5b66\u3002\n\u4e16\u536b\u7ec4\u7ec7\u3001\u75be\u63a7\u4e2d\u5fc3\u548c\u5176\u4ed6\u5b98\u50da\u673a\u6784\u6700\u521d\u672a\u80fd\u8fc5\u901f\u610f\u8bc6\u5230\u53e3\u7f69\u7684\u597d\u5904\uff0c\u539f\u56e0\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u6709\u4e24\u4e2a\u4eba\u6234\u7740\u53e3\u7f69\uff0c\u4f60\u5fc5\u987b\u89c2\u5bdf\u4e92\u52a8\u60c5\u51b5\u3002\n\u8ba9\u6211\u4eec\u5047\u8bbe(\u4e3a\u4e86\u7b80\u5316)\uff0c\u53e3\u7f69\u5c06\u4f20\u8f93\u548c\u63a5\u6536\u90fd\u51cf\u5c11\u5230p\u3002\u5bf9R0(\u5373\uff0c\u611f\u67d3\u7684\u4f20\u64ad\u7387)\u6709\u4ec0\u4e48\u5f71\u54cd\uff1f\n\u7b80\u5355\u5730\u8bf4\uff0c(\u75be\u63a7\u4e2d\u5fc3/\u4e16\u536b\u7ec4\u7ec7\u5b98\u50da\u548c\u5176\u4ed6\u7b28\u86cb\u4f7f\u7528\u7684)\u5929\u771f\u7684\u65b9\u6cd5\u662f\u8bf4\uff0c\u5982\u679c\u53e3\u7f69\u5c06\u4f20\u64ad\u6982\u7387\u964d\u4f4e\u52301/4\uff0c\u4eba\u4eec\u4f1a\u8ba4\u4e3a\u5b83\u4f1a\u4ece\u6bd4\u5982R0=5\u4e0b\u964d\u5230R0=1/4\u3002\u7389\u9601\uff0c\u4f46\u662f\u6709\u66f4\u597d\u7684\u3002\n\u56e0\u4e3a\u4e00\u4e2a\u4eba\u5e94\u8be5\u4e24\u8fb9\u90fd\u7b97\u3002\u5728\u6211\u4eec\u7684\u7b80\u5316\u4e0b\uff0c\u5f53p=1/4\u65f6\uff0c\u6211\u4eec\u5f97\u5230R0&=p\u00b2R0\u3002R\u4e0b\u964d\u4e8693.75%\uff01\u4f60\u628aR\u9664\u4ee516\uff01\u5373\u4f7f\u9762\u7f69\u5de5\u4f5c\u572850%\uff0c\u6211\u4eec\u7684R0\u4e5f\u4f1a\u4e0b\u964d75%\u3002\n\u9519\u8bef\u662f\u8ba4\u4e3a\uff0c\u5982\u679c\u6211\u5c06\u63a5\u89e6\u75c5\u6bd2\u7684\u673a\u4f1a\u51cf\u5c11\uff0c\u6bd4\u5982\u8bf4\uff0c1/2\uff0c\u90a3\u4e48\u6211\u5c31\u4f1a\u628a\u4ee5\u611f\u67d3\u6982\u7387\u8868\u793a\u7684\u98ce\u9669\u4e5f\u51cf\u5c111/2\u3002\u4e0d\u5b8c\u5168\u662f\u3002\n\u73b0\u5728\u8003\u8651(\u56fe1)\u6982\u7387\u5fc5\u987b\u9075\u5faa\u975e\u7ebf\u6027\u5242\u91cf\u54cd\u5e94\uff0c\u5373\u201cS\u66f2\u7ebf\u201d\u3002\u5728\u66f2\u7ebf\u7684\u51f8\u8d77\u90e8\u5206\uff0c\u589e\u76ca\u662f\u4e0d\u6210\u6bd4\u4f8b\u7684\uff1a\u51cf\u5c11x%\u7684\u75c5\u6bd2\u66b4\u9732\u4f1a\u5bfc\u81f4\u611f\u67d3\u98ce\u9669\u7684\u4e0b\u964d\u8fdc\u8fdc\u8d85\u8fc7x\u3002\u5f88\u660e\u663e\uff0c\u6211\u4eec\u5904\u5728\u66f2\u7ebf\u7684\u51f8\u8d77\u90e8\u5206\u3002\u4f8b\u5982\uff0c\u4f7f\u7528\u4e0a\u9762\u7684\u60c5\u51b5\uff0c\u77ed\u671f\u63a5\u89e6\u75c5\u6bd2\u8f7d\u91cf\u51cf\u5c1175%\u53ef\u4ee5\u964d\u4f4e95%\u6216\u66f4\u591a\u7684\u611f\u67d3\u51e0\u7387\uff01\n\u201c\u6ca1\u6709\u8bc1\u636e\u8868\u660e\u53e3\u7f69\u6709\u6548\u201d\uff0c\u6211\u4e0d\u65ad\u542c\u5230\u90a3\u4e9b\u81ea\u79f0\u201c\u5faa\u8bc1\u201d\u79d1\u5b66\u5bb6\u7684\u767d\u75f4\u53cd\u590d\u5bf9\u6211\u8bf4\u3002\u95ee\u9898\u662f\uff0c\u6ca1\u6709\u8bc1\u636e\u8868\u660e\u4eca\u665a\u9501\u95e8\u80fd\u9632\u6b62\u6211\u5165\u5ba4\u884c\u7a83\u3002\u4f46\u4e00\u5207\u53ef\u80fd\u963b\u788d\u4f20\u64ad\u7684\u4e1c\u897f\u90fd\u53ef\u80fd\u6709\u6240\u5e2e\u52a9\u3002\u4e0e\u5b66\u6821\u4e0d\u540c\uff0c\u73b0\u5b9e\u751f\u6d3b\u4e0d\u662f\u5173\u4e8e\u786e\u5b9a\u6027\u7684\u3002\u5f53\u6709\u7591\u95ee\u65f6\uff0c\u5c3d\u91cf\u4f7f\u7528\u4fdd\u62a4\u63aa\u65bd\u3002\u4e00\u4e9b\u4eba\u5f15\u7528\u4e86\u6709\u7f3a\u9677\u7684\u5408\u7406\u89e3\u91ca\uff0c\u5373\u6234\u9762\u5177\u4f1a\u5bfc\u81f4\u865a\u5047\u7684\u81ea\u4fe1\uff1a\u4e8b\u5b9e\u4e0a\uff0c\u6709\u4e00\u4e2a\u5f3a\u6709\u529b\u7684\u8bba\u70b9\u662f\uff0c\u6234\u9762\u5177\u4f1a\u8ba9\u4eba\u5bf9\u98ce\u9669\u66f4\u52a0\u8b66\u60d5\uff0c\u5728\u884c\u4e3a\u4e0a\u66f4\u52a0\u4fdd\u5b88\u3002\n\u5bb6\u957f\u5f0f\u7684\u5b98\u50da\u62d2\u7edd\u9080\u8bf7\u666e\u901a\u516c\u4f17\u4f7f\u7528\u53e3\u7f69\uff0c\u7406\u7531\u662f\u4f9b\u5e94\u6709\u9650\uff0c\u800c\u4e14\u5c06\u7531\u536b\u751f\u4e13\u4e1a\u4eba\u5458\u4f7f\u7528-\u56e0\u6b64\u4ed6\u4eec\u5bf9\u6211\u4eec\u6492\u8c0e\u8bf4\u201c\u53e3\u7f69\u65e0\u6548\u201d\u3002\u4ed6\u4eec\u6ca1\u6709\u90a3\u4e9b\u4e0d\u9700\u8981\u653f\u5e9c\u4e3a\u4ed6\u4eec\u751f\u4ea7\u53e3\u7f69\u7684\u4eba\u7684\u521b\u9020\u529b\u548c\u52e4\u594b\uff1a\u4ed6\u4eec\u53ef\u4ee5\u8fc5\u901f\u5c06\u4efb\u4f55\u4e1c\u897f\u8f6c\u5316\u4e3a\u529f\u80fd\u826f\u597d\u7684\u9762\u7f69\u9644\u4ef6\uff0c\u6bd4\u5982\u53ef\u4ee5\u7f1d\u5408\u5496\u5561\u6ee4\u6e05\u5668\u2026\u7684\u7834\u5e03\u3002\u5173\u4e8e\u4efb\u4f55\u4e8b\u3002\u5b98\u50da\u4eec\u4e5f\u6ca1\u6709\u6ce8\u610f\u5230\u5e02\u573a\u7684\u6982\u5ff5\u548c\u673a\u4f1a\u4e3b\u4e49\u8005\u7684\u5b58\u5728\uff0c\u8fd9\u4e9b\u673a\u4f1a\u4e3b\u4e49\u8005\u53ef\u4ee5\u4e3a\u4eba\u4eec\u63d0\u4f9b\u4ed6\u4eec\u60f3\u8981\u7684\u4e1c\u897f\u3002\n\u8bb8\u591a\u7814\u7a76\u7edf\u8ba1\u5b66\u7684\u4eba\u4e0d\u662f\u4ece\u4ed6\u4eec\u4e0d\u592a\u7406\u89e3\u7684\u673a\u68b0\u6982\u5ff5(\u6bd4\u5982\u76f8\u5173\u6027)\uff0c\u5c31\u662f\u4ece\u5c40\u90e8\u7ed3\u679c\u6765\u601d\u8003\uff1b\u4ed6\u4eec\u5bb3\u6015\u5448\u73b0\u201c\u8f76\u4e8b\u201d\uff0c\u4e5f\u4e0d\u80fd\u7406\u89e3\u7edf\u8ba1\u4fe1\u53f7\u7684\u66f4\u5e7f\u6cdb\u7684\u6982\u5ff5\uff0c\u5373\u4f60\u53ea\u770b\u6574\u4e2a\u6545\u4e8b\uff0c\u800c\u4e0d\u662f\u770b\u8eab\u4f53\u7684\u5404\u4e2a\u90e8\u4f4d\u3002\u5728\u8fd9\u91cc\uff0c\u518d\u4e00\u6b21\uff0c\u8bc1\u636e\u5316\u5408\u7269\u3002\u6211\u4eec\u6709\u4e00\u4e2a\u6c99\u9f99\u7684\u6545\u4e8b\uff0c\u5176\u4e2d\u4e24\u4e2a\u53d7\u611f\u67d3\u7684\u9020\u578b\u5e08\u672a\u80fd\u611f\u67d3\u4ed6\u4eec\u6240\u6709\u7684140\u540d\u5ba2\u6237(\u5bf9\u4e8e\u6c99\u9f99\u5f0f\u7684\u66b4\u9732\uff0c\u53cc\u8fb9\u53e3\u7f69\u4f69\u6234\u7684\u611f\u67d3\u6982\u7387\u5b89\u5168\u5730\u4f4e\u4e8e1%)-\u6211\u4eec\u4ece\u6570\u4e07\u4e2a\u6570\u636e\u70b9\u548c\u5404\u79cdR0\u4f30\u8ba1\u77e5\u9053\u4e0d\u6234\u53e3\u7f69\u7684\u4eba\u611f\u67d3\u7684\u53ef\u80fd\u6027)\u52a0\u4e0ab)\u5f3a\u5236\u4f7f\u7528\u53e3\u7f69\u7684\u56fd\u5bb6\u7684\u611f\u67d3\u7387\uff0c\u52a0\u4e0ac)\u5927\u91cf\u65b9\u6cd5\u6216\u591a\u6216\u5c11\u6709\u7f3a\u9677\u7684\u8bba\u6587\uff0c\u7b49\u7b49\u3002\n\u201c\u81ea\u7531\u4e3b\u4e49\u8005\u201d(\u5728\u62ec\u53f7\u4e2d)\u62b5\u5236\u6234\u53e3\u7f69\uff0c\u7406\u7531\u662f\u5b83\u9650\u5236\u4e86\u4ed6\u4eec\u7684\u81ea\u7531\u3002\u7136\u800c\uff0c\u81ea\u7531\u7684\u6574\u4e2a\u6982\u5ff5\u5728\u4e8e\u4e92\u4e0d\u4fb5\u72af\u539f\u5219\uff0c\u76f8\u5f53\u4e8e\u94f6\u8272\u89c4\u5219\uff1a\u4e0d\u8981\u4f24\u5bb3\u522b\u4eba\uff1b\u53cd\u8fc7\u6765\uff0c\u4ed6\u4eec\u4e5f\u4e0d\u5e94\u8be5\u4f24\u5bb3\u4f60\u3002\u66f4\u4fae\u8fb1\u4eba\u7684\u662f\u4f2a\u81ea\u7531\u4e3b\u4e49\u8005\u7684\u8981\u6c42\uff0c\u5373Costco\u5e94\u8be5\u7981\u6b62\u5f3a\u8feb\u987e\u5ba2\u6234\u53e3\u7f69-\u4f46\u81ea\u7531\u4e3b\u4e49\u5141\u8bb8\u4f60\u4e3a\u81ea\u5df1\u7684\u8d22\u4ea7\u8bbe\u5b9a\u89c4\u5219\u3002\u5982\u679c\u6e38\u5ba2\u613f\u610f\uff0cCostco\u5e94\u8be5\u53ef\u4ee5\u5f3a\u8feb\u4ed6\u4eec\u7a7f\u7c89\u8272\u886c\u886b\u548c\u6234\u7d2b\u8272\u773c\u955c\u3002\n\u8bf7\u6ce8\u610f\uff0c\u901a\u8fc7\u611f\u67d3\u53e6\u4e00\u4e2a\u4eba\uff0c\u4f60\u4e0d\u53ea\u662f\u611f\u67d3\u4e86\u53e6\u4e00\u4e2a\u4eba\u3002\u4f60\u6b63\u5728\u611f\u67d3\u66f4\u591a\u7684\u4eba\uff0c\u5e76\u9020\u6210\u7cfb\u7edf\u6027\u98ce\u9669\u3002\n1-\u6211\u8d5e\u626c\u6781\u5c11\u6570\u50cfZeynep Tufekci\u8fd9\u6837\u5728\u5a92\u4f53\u4e0a\u4e3a\u6597\u4e89\u800c\u6218\u7684\u4f5c\u5bb6\u3002\n2-\u6211\u771f\u7684\u76f8\u4fe1\u4f2a\u81ea\u7531\u4e3b\u4e49\u8005\u662f\u53cd\u793e\u4f1a\u8005\u548c\u538c\u4e16\u8005\uff0c\u4ed6\u4eec\u5728\u5bfb\u627e\u4e00\u4e2a\u4ed6\u4eec\u8ba4\u4e3a\u9002\u5408\u4ed6\u4eec\u538c\u6076\u7684\u653f\u515a\u3002", "note_en": "S IX ERRORS: 1) missing the compounding effects of masks, 2) missing the nonlinearity of the probability of infection to viral exposures, 3) missing absence of evidence (of benefits of mask wearing) for evidence of absence (of benefits of mask wearing), 4) missing the point that people do not need governments to produce facial covering: they can make their own, 5) missing the compounding effects of statistical signals, 6) ignoring the Non-Aggression Principle by pseudolibertarians (masks are also to protect  others from you; it\u2019s a multiplicative process: every person you infect will infect others).\n In fact masks (and faceshields) supplemented with constraints of superspreader events can save us trillions of dollars in future lockdowns (and lawsuits) and be potentially sufficient (under adequate compliance) to stem the pandemic. Bureaucrats do not like simple solutions.\n   People who are good at exams (and become bureaucrats, economists, or hacks), my experience has been, are not good at understanding nonlinearities and dynamics.\n The WHO, CDC and other bureaucracies initially failed to quickly realize that the benefits of masks compound, simply because  two people are wearing them and you have to look at the interaction.\n Let us say (to simplify) that masks reduce both transmission and reception to  p. What effect on the  R0(that is, the rate of spreading of the infection)?\n Simply the naive approach (used by the CDC/WHO bureaucrats and other imbeciles) is to say if masks reduce the transmission probability to \u00bc, one would think it would then drop from, say  R0= 5, to  R0=1 \u00bc. Yuuge, but there is better.\n For one should count both sides. Under our simplification, with  p=1/4 we get  R0&#39;=  p\u00b2 R0 . The drop in  R becomes 93.75%! You divide  R by 16! Even with masks working at 50% we get a 75% drop in  R0.\n   The error is to think that if I reduce the exposure to the virus by, say, \u00bd, I would then reduce the risk, expressed as probability of infection, by \u00bd as well. Not quite.\n Now consider (Fig 1) that probability   must follow a nonlinear dose-response, an \u201cS curve\u201d. In the convex part of the curve, gains are disproportionately large: a reduction of  x% of viral exposure leads to a drop of much more than  x in risk of infection. And, patently we are in the convex part of the curve. For example, to use the case above, a reduction of viral load by 75% for a short exposure could reduce the probability of infection by 95% or more!\n  \u201cThere is no evidence that masks work\u201d, I kept hearing repeated to me by the usual idiots calling themselves \u201cevidence based\u201d scientists. The point is that there is no evidence that locking the door tonight will prevent me from being burglarized. But everything that  may block transmission   could help.   Unlike school, real life is not about certainties . When in doubt, use what protection you can. Some invoked the flawed rationalization that masks induce false confidence: in fact there is a strong argument that masks makes one more alert to the risks and more conservative in behavior.\n  Paternalistic bureaucrats resisted inviting the general public to use masks on grounds that the supply was limited and would be needed by health professionals \u2014 hence they lied to us saying \u201cmasks are not effective\u201d. They did not get the inventiveness and industriousness of people who do not need a government to produce masks for them: they can rapidly convert about anything into well-functioning protective face covering appendages, say rags into which one can stitch coffee filters\u2026 about anything. Nor did bureaucrats heed the notion of markets and the existence of opportunists who can supply people with what they want.\n  Many people who deal with statistics think in terms of either mechanistic concepts (say correlation) they don\u2019t quite understand, or local results; they fear to be presenting \u201canecdotes\u201d, and fail to grasp the broader notion of statistical signals where you look at the whole story, not the body parts. For here, again, evidence compounds. We have a) the salon story where two infected stylists failed to infect  all their 140 clients (making the probability of infection for bilateral mask wearing safely below 1% for a salon-style exposure) \u2014 we know the probability of infection for non mask wearers from tens of thousands of data points and the various  R0 estimations) plus b) the rate of infection of countries where masks were mandatory, plus c) tons of papers with more or less flawed methodologies, etc.\n  \u201cLibertarians\u201d (in brackets) are resisting mask wearing on grounds that it constrains their freedom. Yet the entire concept of liberty lies in the Non-Aggression Principle, the equivalent of the   Silver Rule: do not harm others; they in turn should not harm you. Even more insulting is the demand by pseudolibertarians that Costco should banned from forcing customers to wear mask \u2014 but libertarianism allows you to set the rules on your own property. Costco should be able to force visitors to wear pink shirts and purple glasses if they wished.\n Note that by infecting another person you are not infecting just another person. You are infecting many many more and causing   systemic risk.\n   1- I commend the very very very few writers such as Zeynep Tufekci who have been fighting the fight in the media.\n 2- I truly believe that the pseudolibertarians are sociopaths and misanthropes looking for a political party that they think fits their misanthropy.", "posttime": "2020-06-15 02:34:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9762\u5177,masks,\u53e3\u7f69", "title": "\u9762\u5177\u5316\u5986\u821e\u4f1a", "title_en": "The Masks Masquerade", "transed": 1, "url": "https://medium.com/incerto/the-masks-masquerade-7de897b517b7", "via": "", "real_tags": ["\u9762\u5177", "masks", "\u53e3\u7f69"]}, {"category": "", "categoryclass": "", "imagename": "aeca4726444958b2ed5a38d61f1b31c3.png", "infoid": 1006548, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eba\u7c7b\u559c\u6b22\u6545\u4e8b\u3002\u6211\u4eec\u559c\u6b22\u544a\u8bc9\u4ed6\u4eec\uff0c\u6211\u4eec\u559c\u6b22\u8bfb\u3001\u542c\u548c\u770b\u4ed6\u4eec\u3002\u9664\u4e86\u5a31\u4e50\uff0c\u6545\u4e8b\u8ba9\u6211\u4eec\u80fd\u591f\u5408\u4f5c\uff0c\u5efa\u8bbe\u6211\u4eec\u4eca\u5929\u751f\u6d3b\u7684\u4e16\u754c\u3002\u5c24\u74e6\u5c14\u00b7\u8bfa\u4e9a\u00b7\u54c8\u62c9\u91cc(Yuval Noah Harari)\u7684\u201c\u667a\u4eba\u201d\u5bf9\u6b64\u8fdb\u884c\u4e86\u6df1\u5165\u7684\u8ba8\u8bba\u3002\n\u9274\u4e8e\u6545\u4e8b\u5bf9\u4eba\u7c7b\u601d\u7ef4\u7684\u91cd\u8981\u6027\uff0c\u4f3c\u4e4e\u6ca1\u6709\u66f4\u597d\u7684\u65b9\u5f0f\u6765\u63a2\u7d22\u5b83\u3002\u6211\u60f3\u5206\u4eab\u6211\u7684\u9762\u8bd5\u65b9\u6cd5\uff0c\u5e76\u5f3a\u8c03\u5728\u9762\u8bd5\u6280\u672f\u804c\u4f4d\u7684\u5019\u9009\u4eba\u65f6\u8bb2\u6545\u4e8b\u7684\u91cd\u8981\u6027\u3002\u867d\u7136\u6211\u8ba4\u4e3a\u8fd9\u4e9b\u5c0f\u8d34\u58eb\u4e5f\u53ef\u4ee5\u5e94\u7528\u4e8e\u4ea7\u54c1\u7ecf\u7406\u3001\u8bbe\u8ba1\u5e08\u7b49\u7684\u9762\u8bd5\u3002\n\u4f60\u5fc5\u987b\u5047\u8bbe\u5e94\u8058\u8005\u4f1a\u544a\u8bc9\u4f60\u4f60\u60f3\u542c\u7684\u6545\u4e8b\uff1b\u5c3d\u7ba1\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u4e0d\u4f1a\u3002\u9664\u975e\u4ed6\u4eec\u505a\u4e86\u5927\u91cf\u7684\u8c03\u67e5\uff0c\u5426\u5219\u5e94\u8058\u8005\u4e0d\u77e5\u9053\u542c\u4f17\u7684\u54c1\u5473\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u3002\u4ed6\u4eec\u9700\u8981\u6307\u5bfc\uff0c\u7b2c\u4e00\u6b65\u662f\u8ba9\u4ed6\u4eec\u77e5\u9053\u8c01\u662f\u4ed6\u4eec\u7684\u89c2\u4f17\u3002\n\u5c55\u793a\u81ea\u5df1\u8bc1\u660e\u4e86\u4f60\u8db3\u591f\u5173\u5fc3\u5e94\u8058\u8005\uff0c\u8ba9\u4ed6\u4eec\u77e5\u9053\u4ed6\u4eec\u4e0b\u4e00\u4e2a\u5c0f\u65f6\u5c06\u548c\u8c01\u4e00\u8d77\u5ea6\u8fc7\u3002\u77e5\u9053\u89c2\u4f17\u5173\u5fc3\u4ec0\u4e48\u5c06\u4e3a\u6545\u4e8b\u5b9a\u4e0b\u57fa\u8c03\u3002\n\u6211\u662f\u5927\u536b\u3002\u6211\u662f\u4e00\u540d\u4ea7\u54c1\u5de5\u7a0b\u5e08\u3002\u5728\u9a6c\u5fb7\u91cc\u7ecf\u5386\u4e86\u8bb8\u591a\u521d\u521b\u4f01\u4e1a\u4e4b\u540e\uff0c\u6211\u642c\u5230\u4e86\u5df4\u4f26\u897f\u4e9a\u3002\u9633\u5149\u3001\u6d77\u6ee9\u3001\u8fd9\u5ea7\u57ce\u5e02\u3001\u8fd9\u91cc\u7684\u4eba\u4eec\u4ee5\u53ca\u6b63\u5728\u5174\u8d77\u7684\u79d1\u6280\u548c\u521b\u4e1a\u793e\u533a\u628a\u6211\u5e26\u5230\u4e86\u8fd9\u91cc\u3002\u51e0\u4e2a\u6708\u524d\uff0cCreditas\u6536\u517b\u4e86\u6211\uff0c\u76ee\u7684\u662f\u6539\u5584\u6211\u5e94\u8be5\u64c5\u957f\u7684\u4e8b\u60c5\uff1aAndroid\u3001\u540e\u7aef\u3001\u9886\u5bfc\u56e2\u961f\u548c\u8be2\u95ee\u4ea7\u54c1\u7ecf\u7406\u3002\n\u8fd9\u4e0d\u662f\u4f60\u7684\u7b80\u5386\uff0c\u6240\u4ee5\u4f60\u5fc5\u987b\u5728\u4e00\u5206\u949f\u5185\u5b8c\u6210\u3002\u8bf7\u4e8b\u5148\u505a\u597d\u51c6\u5907\u3002\u4e0d\u8981\u5373\u5174\u53d1\u6325\u3002\u575a\u6301\u505a\u91cd\u8981\u7684\u4e8b\uff0c\u505a\u4e00\u4e2a\u4eba\uff1b\u505a\u4e00\u4e2a\u771f\u5b9e\u7684\u4eba\u3002\u5f88\u5c11\u6709\u8bb2\u6545\u4e8b\u7684\u4eba\u4e0d\u8bf4\u771f\u8bdd\u5c31\u6210\u529f\u7684\u3002\u63d0\u5230\u4f60\u559c\u6b22\u4ec0\u4e48\uff0c\u4ec0\u4e48\u5bf9\u4f60\u5f88\u91cd\u8981\uff0c\u662f\u4ec0\u4e48\u9a71\u4f7f\u4f60\uff0c\u662f\u4ec0\u4e48\u9a71\u4f7f\u4f60\u8d70\u5230\u73b0\u5728\u7684\u4f4d\u7f6e\u3002\u7ed9\u51fa\u5f88\u591a\u5173\u4e8e\u4f60\u7684\u6280\u672f\u7ecf\u9a8c\u7684\u7ec6\u8282\u53ef\u80fd\u4e0e\u5e94\u8058\u8005\u7684\u7ecf\u5386\u65e0\u5173\u3002\n\u5728\u4efb\u4f55\u654f\u6377\u4ea7\u54c1\u5de5\u7a0b\u56e2\u961f\u4e2d\uff0c\u60a8\u6700\u7ec8\u90fd\u4f1a\u6709\u4e00\u4e9b\u5f85\u5b8c\u6210\u7684\u4efb\u52a1\u3002\u6709\u65f6\u5b83\u662fJIRA\u677f\u4e0a\u7684\u4e00\u5f20\u7968\uff1b\u6216\u8005\u53ea\u662f\u5899\u4e0a\u7684\u4e00\u5f20\u4fbf\u5229\u8d34\uff1b\u6216\u8005\u751a\u81f3\u662f\u60a8\u7684\u4ea7\u54c1\u7ecf\u7406\u7528SLACK\u53d1\u6765\u7684\u4e00\u6761\u6d88\u606f\uff0c\u8bf4\u6709\u7d27\u6025\u4e8b\u60c5\u3002\u5e0c\u671b\u4e0d\u662f\u2026\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u2026\u3002\u8fd9\u662f\u4e00\u6bb5\u975e\u5e38\u6f2b\u957f\u7684\u65c5\u7a0b\uff0c\u76f4\u5230\u4e00\u9879\u529f\u80fd\u5728\u4e92\u8054\u7f51\u7684\u5de8\u5927\u5947\u8ff9\u4e2d\u51fa\u73b0\u5728\u673a\u5668\u4e0a\uff0c\u5e76\u6709\u4eba\u5728\u4f7f\u7528\u5b83\u3002\u6211\u5e0c\u671b\u4f60\u80fd\u5e26\u6211\u8e0f\u4e0a\u4e00\u6bb5\u65c5\u7a0b\uff0c\u628a\u8fd9\u4e2a\u529f\u80fd\u4ece\u5f85\u529e\u4e8b\u9879\u5e26\u5230\u751f\u4ea7\u9636\u6bb5\u3002\n\u4ece\u4f60\u8ba4\u4e3a\u6709\u5fc5\u8981\u7684\u5730\u65b9\u5f00\u59cb\u8bb2\u6545\u4e8b\uff0c\u56de\u987e\u4e00\u4e0b\u5728\u6545\u4e8b\u53d1\u751f\u4e4b\u524d\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u4f60\u5728\u5019\u9009\u4eba\u9762\u524d\u5efa\u7acb\u7684\u4e16\u754c\u6709\u9700\u8981\u5c0a\u91cd\u7684\u89c4\u5219\u3002\u5982\u679c\u5b83\u4eec\u5f88\u91cd\u8981\uff0c\u5c31\u63d0\u51fa\u6765\u3002\u5b83\u6709\u4e00\u4e9b\u6709\u80fd\u529b\u548c\u8d23\u4efb\u7684\u4eba\u7269\u3002\u5982\u679c\u5b83\u4eec\u5f88\u91cd\u8981\uff0c\u5c31\u63d0\u51fa\u6765\u3002\u5b83\u6709\u4e00\u6bb5\u9700\u8981\u8003\u8651\u7684\u5386\u53f2\uff0c\u5b83\u6709\u52a8\u529b\uff1a\u4e00\u79cd\u671d\u7740\u6545\u4e8b\u524d\u8fdb\u65b9\u5411\u7684\u529b\u91cf\u3002\n\u4f60\u6709\u4e00\u9879\u4efb\u52a1\u7b49\u7740\u4f60\u53bb\u5b8c\u6210\u3002\u4e5f\u8bb8\u4f60\u548c\u540c\u4e8b\u4e00\u8d77\u53bb\u770b\u767d\u677f\u3002\u4f60\u662f\u600e\u4e48\u5f00\u59cb\u7684\uff1f\n\u6545\u4e8b\u7684\u8282\u594f\u6781\u5927\u5730\u5f71\u54cd\u7740\u5bf9\u4e8b\u4ef6\u7684\u89e3\u8bfb\u3002\u4f60\u5e94\u8be5\u5173\u5fc3\u6545\u4e8b\u7684\u8282\u594f\uff0c\u4e00\u76f4\u5230\u8282\u62cd\u3002\u6bcf\u4e00\u6b65\u90fd\u662f\u4e00\u4e2a\u673a\u4f1a\uff0c\u53ef\u4ee5\u6839\u636e\u5e94\u8058\u8005\u7684\u9700\u8981\u6df1\u5165\u5230\u4e00\u4e2a\u4e3b\u9898\u4e2d\u53bb\u3002\u8282\u594f\u63ed\u793a\u4e86\u5bf9\u4ed6\u4eec\u6765\u8bf4\u4ec0\u4e48\u662f\u91cd\u8981\u7684\u3002\n\u60a8\u5df2\u7ecf\u5728\u767d\u677f\u4e0a\u82b1\u4e86\u4e00\u4e9b\u65f6\u95f4\u6765\u63a2\u7d22\u4e0d\u540c\u7684\u89e3\u51b3\u65b9\u6848\u3002\u7136\u540e\uff0c\u4f60\u5750\u5728\u952e\u76d8\u548c\u663e\u793a\u5668\u524d\uff0c\u51c6\u5907\u597d\u7ed3\u5bf9\u7f16\u7a0b\uff0c\u628a\u5b83\u5f04\u5f97\u5929\u7ffb\u5730\u8986\u3002\u4f60\u600e\u4e48\u505a\u5230\u7684\uff1f\n\u4f5c\u4e3a\u5bfc\u6e38\uff0c\u4f60\u5e94\u8be5\u5c3d\u91cf\u4fdd\u6301\u6052\u5b9a\u7684\u8282\u594f\u3002\u52a0\u901f\u6216\u51cf\u901f\u8981\u8db3\u591f\u6162\uff0c\u8fd9\u6837\u5019\u9009\u4eba\u624d\u6709\u65f6\u95f4\u9002\u5e94\u3002\n\u4efb\u52a1\u5b8c\u6210\u4e86\u3002\u6216\u8005\u8bf4\u662f\uff1f\u55ef\uff0c\u6211\u4eec\u77e5\u9053\u81f3\u5c11\u8fd9\u4e2a\u529f\u80fd\u662f\u7f16\u7a0b\u7684\u3002\u8fd9\u662f\u52a0\u5bc6\u7684\u3002\u4f46\u4ee3\u7801\u4e0d\u53ef\u80fd\u6c38\u8fdc\u7559\u5728\u6211\u4eec\u7684\u673a\u5668\u4e0a\u3002\u5b83\u5728\u90a3\u91cc\u6beb\u65e0\u7528\u5904\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4f1a\u7ed9\u7528\u6237\u5e26\u6765\u4efb\u4f55\u4ef7\u503c\u3002\n\u628a\u4efb\u4f55\u6545\u4e8b\u60f3\u8c61\u6210\u4e00\u68f5\u6811\u3002\u60a8\u53ef\u4ee5\u4ece\u6839\u5f00\u59cb\uff0c\u7136\u540e\u5411\u4e0a\u5bfc\u822a\u5230\u9876\u90e8\u3002\u5f53\u5019\u9009\u4eba\u5b8c\u6210\u8fd9\u4e2a\u6545\u4e8b\u65f6\uff0c\u5728\u4e0a\u5343\u6761\u53ef\u80fd\u7684\u9053\u8def\u4e2d\uff0c\u53ea\u6709\u4e00\u6761\u5c06\u7ee7\u7eed\u63a2\u7d22\u3002\u6545\u4e8b\u603b\u662f\u628a\u65f6\u95f4\u7ebf\u5f80\u524d\u63a8\u3002\u5012\u53d9\u6216\u5728\u6811\u679d\u4e4b\u95f4\u8df3\u8dc3\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u56e0\u4e3a\u8fd9\u53ea\u4f1a\u589e\u52a0\u56f0\u60d1\u548c\u7cbe\u795e\u75b2\u52b3\u3002\u8fd9\u610f\u5473\u7740\u4f60\u4eec\u4e0d\u4f1a\u95ee\u5f7c\u6b64\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684\u95ee\u9898\u3002\u6240\u4ee5\u7ed9\u4ed6\u4eec\u4e00\u4e2a\u8fc7\u6e21\u671f\uff0c\u8ba9\u5e94\u8058\u8005\u63a2\u7d22\u4ed6\u4eec\u8ba4\u4e3a\u6700\u597d\u7684\u9053\u8def\u3002\n\u6709\u65f6\u5019\u4f60\u60f3\u542c\u4e00\u4e9b\u5177\u4f53\u7684\u4e1c\u897f\uff0c\u6bd4\u5982\u6d4b\u8bd5\u7b56\u7565\uff0c\u6bd4\u5982\u201c\u4ece\u5916\u5230\u5185\u6216\u4ece\u91cc\u5230\u5916\u201d\u3002\u6240\u4ee5\u4f60\u8981\u5f3a\u8feb\u5e94\u8058\u8005\u53bb\u4ed6\u4eec\u60f3\u53bb\u6216\u4e0d\u60f3\u53bb\u7684\u5730\u65b9\u3002\u90a3\u662f\u4e00\u6839\u5f3a\u8feb\u7684\u6811\u679d\u3002\u5982\u679c\u5b83\u6cbf\u7740\u6545\u4e8b\u7684\u65b9\u5411\u53d1\u5c55\uff0c\u90a3\u5c31\u5f88\u597d\u3002\u4f60\u5e94\u8be5\u4fdd\u6301\u6545\u4e8b\u5df2\u7ecf\u6709\u7684\u52bf\u5934\uff0c\u5e76\u5229\u7528\u5b83\u3002\u89c2\u5bdf\u5e94\u8058\u8005\u662f\u5982\u4f55\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u7684\uff0c\u4ed6\u4eec\u662f\u5982\u4f55\u6446\u8131\u8fd9\u79cd\u60c5\u51b5\u7684\uff0c\u4ee5\u53ca\u4ed6\u4eec\u662f\u5982\u4f55\u5373\u5174\u53d1\u6325\u7684\u3002\n\u4f60\u5c31\u5feb\u5230\u4e86\u3002\u68c0\u67e5\u4ee3\u7801\uff0c\u5e76\u5728\u8bd5\u8fd0\u884c\u73af\u5883\u4e2d\u6d4b\u8bd5\u8be5\u529f\u80fd\u3002\u73b0\u5728\u662f\u90e8\u7f72\u5230\u751f\u4ea7\u4e2d\u7684\u65f6\u5019\u4e86\u3002\u6211\u4eec\u60f3\u8981\u5e73\u7a33\u5730\u3001\u65e0\u6469\u64e6\u5730\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u6211\u4eec\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u53ef\u9760\u7684CI/CD\u7ba1\u9053\uff0c\u4f7f\u6211\u4eec\u7684\u4ee3\u7801\u901a\u8fc7\u4e0d\u540c\u7684\u6b65\u9aa4\uff0c\u8fd9\u662f\u4e00\u4ef6\u597d\u4e8b\u3002\u6211\u5f88\u597d\u5947\u8fd9\u4e9b\u4e1c\u897f\u662f\u600e\u4e48\u5de5\u4f5c\u7684\u3002\n\u8fc7\u6e21\u6709\u52a9\u4e8e\u6545\u4e8b\u671d\u7740\u4e00\u5b9a\u7684\u65b9\u5411\u524d\u8fdb\u3002\u5927\u591a\u6570\u5019\u9009\u4eba\u4e0d\u77e5\u9053\u6545\u4e8b\u5e94\u8be5\u5982\u4f55\u53d1\u5c55\uff0c\u4ee5\u53ca\u4ed6\u4eec\u9700\u8981\u63a2\u7d22\u54ea\u4e9b\u5730\u65b9\u3002\u8f6c\u53d8\u4e0d\u5e94\u8be5\u662f\u5267\u70c8\u7684\u3002\u4ed6\u4eec\u4e00\u6b65\u4e00\u4e2a\u811a\u5370\u5730\u63a8\u8fdb\u6545\u4e8b\u3002\u8fd9\u7ed9\u4e86\u5019\u9009\u4eba\u9002\u5e94\u7684\u65f6\u95f4\uff0c\u5e76\u4e3a\u8fdb\u4e00\u6b65\u6784\u5efa\u6545\u4e8b\u505a\u597d\u51c6\u5907\u3002\n\u5f53\u6211\u4eec\u90e8\u7f72\u5230\u751f\u4ea7\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u4e00\u5207\u90fd\u4f1a\u987a\u5229\u8fdb\u884c\u3002\u8fd9\u4e00\u6b21\u4f3c\u4e4e\u4e00\u5207\u90fd\u5f88\u987a\u5229\u3002\u4f46\u662f\uff0c\u7b2c\u4e8c\u5929\u4ea7\u54c1\u7ecf\u7406\u62a5\u544a\u60a8\u90e8\u7f72\u7684\u7279\u6027\u4e2d\u5b58\u5728\u4e00\u4e2abug\u3002\u8fd9\u4ee4\u4eba\u60ca\u8bb6\uff0c\u4f46\u5e76\u4e0d\u51fa\u4eba\u610f\u6599\u3002\u6211\u4eec\u600e\u4e48\u624d\u80fd\u8ffd\u6355\u5230\u90a3\u53ea\u866b\u5b50\u5462\uff1f\u6211\u4eec\u9700\u8981\u4ec0\u4e48\u5de5\u5177\uff1f\n\u53e6\u4e00\u65b9\u9762\uff0c\u60c5\u8282\u7684\u66f2\u6298\u628a\u5019\u9009\u4eba\u5e26\u5230\u4e86\u4e00\u4e2a\u5168\u65b0\u7684\u5883\u5730\u3002\u60c5\u8282\u7684\u66f2\u6298\u5e76\u4e0d\u4f1a\u5b8c\u5168\u6539\u53d8\u80cc\u666f\u3002\u4ed6\u4eec\u5efa\u7acb\u5728\u5019\u9009\u4eba\u5df2\u7ecf\u62e5\u6709\u7684\u80cc\u666f\u4e4b\u4e0a\uff0c\u4f46\u6ca1\u6709\u5145\u5206\u5229\u7528\u6545\u4e8b\u7684\u52bf\u5934\u3002\u4e00\u4e9b\u610f\u60f3\u4e0d\u5230\u4f46\u719f\u6089\u7684\u4e8b\u60c5\u53d1\u751f\u4e86\u3002\u60c5\u8282\u66f2\u6298\u7684\u5b58\u5728\u662f\u56e0\u4e3a\u4f60\u60f3\u5236\u9020\u51b2\u7a81\u3002\u6ca1\u6709\u51b2\u7a81\uff0c\u6545\u4e8b\u5c31\u4e0d\u6709\u8da3\u3002\u8ba9\u5019\u9009\u4eba\u6765\u63a2\u7d22\u8fd9\u4e00\u70b9\u5427\u3002\n\u6211\u4eec\u77e5\u9053\u4ea7\u54c1\u4e0d\u662f\u9759\u6001\u7684\uff0c\u5b83\u4eec\u53d1\u5c55\u4e86\u2026\u3002\u8f6f\u4ef6\u5e94\u8be5\u4f1a\u6539\u53d8\u3002\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u5c31\u5e94\u8be5\u662f\u786c\u4ef6\u3002\u6211\u4eec\u9700\u8981\u5c3d\u53ef\u80fd\u5730\u7cbe\u7b80\uff0c\u5728\u5c0f\u7684\u53cd\u9988\u5faa\u73af\u4e2d\u5de5\u4f5c\uff0c\u4ee5\u786e\u4fdd\u6211\u4eec\u6240\u505a\u7684\u4e8b\u60c5\u771f\u7684\u4e3a\u7528\u6237\u589e\u52a0\u4e86\u4ef7\u503c\u3002\u4ece\u5de5\u7a0b\u89d2\u5ea6\u6765\u770b\uff0c\u6570\u5b57\u4ea7\u54c1\u6700\u7b80\u5355\u7684\u8bbe\u7f6e\u662f\u62e5\u6709\u4e00\u4e2a\u524d\u7aef\u5ba2\u6237\u7aef\u548c\u4e00\u4e2a\u670d\u52a1\u4e8erest API\u7684\u540e\u7aef\u3002\u968f\u7740\u6211\u4eec\u4ea7\u54c1\u7684\u53d1\u5c55\uff0c\u6211\u4eec\u7684API\u4e5f\u5c06\u53d1\u5c55\u3002\u8ba9\u6211\u4eec\u8ba8\u8bba\u4e00\u4e0b\u5728\u4ee5\u8fd9\u79cd\u8fed\u4ee3\u65b9\u5f0f\u53d1\u5c55API\u65f6\u5fc5\u987b\u8003\u8651\u54ea\u4e9b\u56e0\u7d20\u3002\n\u6545\u4e8b\u662f\u8fde\u7eed\u4e0d\u65ad\u7684\u3002\u4e8b\u4ef6\u4e0d\u4f1a\u65e0\u7f18\u65e0\u6545\u5730\u53d1\u751f\u3002\u4efb\u4f55\u4e8b\u4ef6\u90fd\u6709\u8d77\u56e0\u3002\u6211\u4eec\u77e5\u9053\u5e76\u7406\u89e3\u80cc\u540e\u7684\u539f\u56e0\uff0c\u6211\u4eec\u80fd\u591f\u4ee5\u9002\u5f53\u548c\u76f8\u79f0\u7684\u65b9\u5f0f\u4f5c\u51fa\u56de\u5e94\u3002\u8fc7\u6e21\u9700\u8981\u63d0\u4f9b\u8db3\u591f\u7684\u4e0a\u4e0b\u6587\u6765\u7406\u89e3\u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u67d0\u4e9b\u4e8b\u60c5\u3002\u53ea\u6709\u8fd9\u6837\uff0c\u5019\u9009\u4eba\u624d\u80fd\u4ee5\u9002\u5f53\u7684\u65b9\u5f0f\u4f5c\u51fa\u56de\u5e94\u3002\u4f60\u60f3\u8ba9\u5e94\u8058\u8005\u7406\u89e3\u4f60\u7684\u8981\u6c42\u3002\u5982\u679c\u4f60\u60f3\u8981\u63a2\u7d22\u7684\u5206\u652f\u6253\u5f00\u4e86\u4e00\u4e2a\u5168\u65b0\u7684\u4e16\u754c\uff0c\u8fc7\u6e21\u9700\u8981\u66f4\u52a0\u4e30\u5bcc\u3002\n\u7ecf\u8fc7\u591a\u6b21\u8fed\u4ee3\uff0c\u6211\u4eec\u7684\u4ea7\u54c1\u6bd4\u6211\u4eec\u60f3\u8c61\u7684\u66f4\u6210\u529f\u3002\u6211\u4eec\u670d\u52a1\u7684\u8d1f\u62c5\u4e0e\u65e5\u4ff1\u589e\u3002\u6211\u4eec\u5f00\u59cb\u770b\u5230\u4ea4\u901a\u9ad8\u5cf0\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u4ec0\u4e48\uff0c\u6211\u4eec\u9700\u8981\u505a\u4ec0\u4e48\uff1f\n\u6545\u4e8b\u5f00\u59cb\u4e8e\u4e00\u4e2a\u975e\u5e38\u4f4e\u7684\u5c42\u6b21\u3002\u975e\u5e38\u5177\u4f53\u3002\u968f\u7740\u91c7\u8bbf\u7684\u8fdb\u884c\u548c\u6545\u4e8b\u7684\u5efa\u7acb\uff0c\u7cbe\u795e\u4e0a\u7684\u75b2\u52b3\u611f\u589e\u52a0\u4e86\u3002\u4ece\u5177\u4f53\u5230\u66f4\u62bd\u8c61\u7684\u4e3b\u9898\u662f\u4e2a\u597d\u4e3b\u610f\u3002\u5230\u6700\u540e\uff0c\u5b83\u5e94\u8be5\u53ea\u662f\u5173\u4e8e\u62bd\u8c61\u7684\u6982\u5ff5\u3001\u60f3\u6cd5\u6216\u7ed3\u8bba\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u4f60\u53ea\u662f\u6709\u65f6\u95f4\u53bb\u63a2\u7d22\u8fd9\u4e48\u591a\u3002\u4f46\u5f53\u6545\u4e8b\u7ed3\u675f\u65f6\uff0c\u4f60\u4e0d\u4ec5\u5e94\u8be5\u4e86\u89e3\u5e94\u8058\u8005\u6240\u77e5\u9053\u7684\u4e00\u4e9b\u5185\u5bb9\uff0c\u800c\u4e14\u8fd8\u5e94\u8be5\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u4e0e\u4ed6\u4eec\u5efa\u7acb\u8054\u7cfb\u3002\u6545\u4e8b\uff0c\u597d\u6545\u4e8b\uff0c\u8ba9\u6211\u4eec\u6e34\u671b\u66f4\u591a\u3002\u5982\u679c\u8fd9\u79cd\u6e34\u671b\u771f\u7684\u5b58\u5728\uff0c\u90a3\u4e48\u4f60\u5c31\u6709\u4e86\u6574\u6574\u4e00\u4e2a\u5c0f\u65f6\u4ee5\u6765\u4e00\u76f4\u5728\u5bfb\u627e\u7684\u7b54\u6848\u3002\n\u975e\u5e38\u611f\u8c22undra.com\u7684\u63d2\u56fe\u3002\u4f60\u53ef\u4ee5\u5bf9\u6211\u7684\u65f6\u4e8b\u901a\u8baf\u6301\u4fdd\u7559\u6001\u5ea6\uff0c\u6bcf\u6b21\u6709\u65b0\u5e16\u5b50\u90fd\u4f1a\u901a\u77e5\u4f60\u3002", "note_en": "Humans love stories. We love telling them and we love reading, listening and watching them. Beyond entertainment, stories have allowed us to collaborate and build the world we live in today.  Sapiens by Yuval Noah Harari talks in-depth about this.\n Given the  importance of stories to the human mind, it seems there is no better way to explore it. I would like to share my approach to interviews and to emphasize the importance of storytelling when interviewing candidates for technical positions. Although I assume these tips can also be applied to interviews for product managers, designers, etc.\n You must assume the candidate will tell you the story you wish to hear; although most of the time, they won\u2019t. Unless they have done a lot of research, the candidate doesn\u2019t know the taste of their audience. In this case, you. They will need guidance and the first step is to let them know who is their audience.\n   Presenting yourself proves that you care enough about the candidate to let them know with whom they are going to spend the next hour. Knowing what the audience cares about will set the tone of the story.\n I\u2019m  David. I\u2019m a Product Engineer. After surviving many startups in Madrid I moved to Valencia. The sun, the beach, the city, the people and the raising tech and startup community brought me here. A few months ago, Creditas adopted me in order to improve the things that I\u2019m supposedly good at: android, backend, leading teams and question Product Managers.\n This is not your  CV so you must do it under one minute. Prepare it beforehand. Don\u2019t improvise. Stick to what matters and be human; be real. Few storytellers succeed without speaking the truth. Mention what you like, what is important to you, what drives you and what motivated you to be where you are. Giving a lot of details about your technical experience maybe is irrelevant to the candidate\u2019s story.\n  In any agile Product Engineering team, you end up with some tasks that are pending to be done. Sometimes it is a ticket on a JIRA board; or just a post-it on the wall; or even a message in Slack from your Product Manager saying it is something urgent. Hopefully not\u2026 Anyway\u2026 It is a really long journey until a feature is in a machine in the vast wonders of the internet and somebody is using it. I would like you to take me into a journey that takes that feature from to-do to production.\n  Start the story at the point you think necessary, giving a recap on what happened until that point in which the story is taking place. The  world that you are building in front of the candidate has rules that need to be respected. Mention them if they are important. It has  characters that have some abilities and responsibilities. Mention them if they are important. It has a history that needs to be taken into account and it has momentum: a force in the direction the story is led.\n  You have a task waiting to be done. Maybe you go to a whiteboard with a colleague. How do you start?\n The tempo of a story hugely affects how events are interpreted. You should care about the rhythm of the story  down to the beat. Every step is an opportunity to go as deep into a topic as the candidate wants. The rhythm reveals what is important to them.\n You have spent some time at the whiteboard exploring different solutions. Then you sit down in front of a keyboard and a monitor ready to pair program the hell out of it. How do you do that?\n As a guide you should try to keep a constant tempo. Accelerate or decelerate slowly enough so the candidate has time to adapt.\n  The task is done. Or is it? Well, we know that at least the feature is programmed. It is coded. But that code can\u2019t stay on our machine forever. It\u2019s useless there since it doesn\u2019t bring any value to the user.\n Think of any story as a tree. You start from the root and go up navigating it to the top. By the time the candidate completes the story, from thousand possible paths, only one is going to remain explored. The story always pushes the  timeline forward. Flashbacks or jumping between branches is not a good idea because it will only add confusion and mental fatigue. That means you won\u2019t ask questions that don\u2019t have any relation between each other. So give them a transition and let the candidate explore the path they think is best.\n   Sometimes there is something specific you want to hear about like testing strategies as \u201coutside in or inside out\u201d. So you will force the candidate to go into places that they were or were not intending to go. That\u2019s a forced branch. That\u2019s fine if it builds in the direction the story is leading to. You should keep the  momentum the story already has and take advantage of it. Observe how the candidates handle the situation, how they get out of it and how they improvise.\n  You are almost there. The code is reviewed and the feature is tested in a staging environment. Now is time to deploy to production. And we want to do that smoothly and without friction. It\u2019s a good thing that we already have a solid CI/CD pipeline set in place that takes our code through different steps. I\u2019m curious about haw all that works.\n Transitions help the story advance in a certain direction. Most candidates don\u2019t know how the story is supposed to advance and what places they need to explore. Transitions shouldn\u2019t be drastic. They advance the story one tiny bit at a time. This gives the candidate time to adapt and be prepared to build the story further.\n When we deploy to production, we hope everything will go well. And this time it seems everything has gone well. However the next day the Product Manager reports that there is a bug in the feature that you deployed. That is surprising but not unexpected. How do we hunt that bug down? What tools do we need?\n Plot twists, on the other hand, take the candidate and put them in a completely new situation. Plot twists don\u2019t change context completely. They build upon the context that the candidate already has but it doesn\u2019t take full advantage of the momentum of the story. Something unexpected but familiar has happened.  Plot twists exist because you want to create conflict. A story is not interesting without conflict. Let the candidate explore that.\n We know that products are not static, they evolve\u2026 Software is supposed to change. If it wasn\u2019t, it should be hardware. We need to be as lean as possible working in small feedback loops to be sure that what we do really adds value to the user. From an engineering perspective, the simplest setup for a digital product is to have a frontend client and a backend that serves a REST API. As our product evolves, our API will also evolve. Let\u2019s talk about what things must be taken into account when we evolve our API in such iterative ways.\n  Stories are continuous. Events don\u2019t just happen without any reason. Any event has a cause. We know and understand the reasons behind them and we are able to respond in a proper and proportional way. Transitions need to give enough context to understand why something is happening. Only then, the candidate will be able to respond in an appropriate way. You want the candidate to understand what you are asking. If the branch you want to explore opens a whole new world, the transition needs to be richer.\n  After many iterations, our product is more successful than we ever imagined. The load on our services is increasing day by day. We are starting to see traffic spikes. What do we need to take into account and what do we need to do at this point?\n The story starts at a very low level. Very specific. As the interview goes on and the story gets built, the mental fatigue increases. It is a good idea to go from  specifics to more abstract topics. By the end it should only be about abstract concepts, ideas or conclusions.\n  Unfortunately you just have time to explore so much. But by the time the story is wrapping up, you should understand not only some of what the candidate knows, but you should also have  connected with them at some level. Stories, good stories, make us crave for more. If that craving is present, then you have the answer you\u2019ve been searhing for this whole hour.\n  Huge thanks to  undraw.com for the illustrations. You can subscribe to my newsletter  With a grain of salt and get notified every time there is a new post.", "posttime": "2020-06-15 01:49:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u91c7\u8bbf,tips,\u6545\u4e8b", "title": "\u6280\u672f\u91c7\u8bbf\u7684\u8bb2\u6545\u4e8b\u5c0f\u8d34\u58eb", "title_en": "Storytelling Tips for Technical Interviews", "transed": 1, "url": "https://stanete.com/storytelling-tips-technical-interviews", "via": "", "real_tags": ["\u91c7\u8bbf", "tips", "\u6545\u4e8b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006547, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Actual\u7684\u6838\u5fc3\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u540c\u6b65\u5f15\u64ce\u3002\u6700\u8fd1\uff0c\u6211\u5b9e\u73b0\u4e86\u5b8c\u5168\u7684\u7aef\u5230\u7aef\u52a0\u5bc6(\u8fd8\u6ca1\u6709\u53d1\u5e03)\uff0c\u5b83\u6fc0\u52b1\u6211\u5ba1\u8ba1\u6574\u4e2a\u8fc7\u7a0b\u7684\u6027\u80fd\u3002\u5c06\u6765\u6211\u4f1a\u5199\u66f4\u591a\u5173\u4e8e\u4f7f\u7528CRDT\u8fdb\u884c\u540c\u6b65\u7684\u535a\u5ba2\uff0c\u4f46\u73b0\u5728\u6211\u60f3\u8c08\u8c08PostgreSQL\u7684\u4e00\u4e2a\u7279\u6027\uff0c\u5b83\u4f7f\u6027\u80fd\u63d0\u9ad8\u4e869-10\u500d\u3002\nActual\u5b8c\u5168\u662f\u4e00\u4e2a\u672c\u5730\u5e94\u7528\uff0c\u540c\u6b65\u5728\u540e\u53f0\u8fdb\u884c(\u4f7f\u7528CRDT)\u3002\u8fd9\u610f\u5473\u7740\u670d\u52a1\u5668\u975e\u5e38\u7b80\u5355\uff0c\u5b83\u6240\u8981\u505a\u7684\u5c31\u662f\u4e3a\u5ba2\u6237\u7aef\u5b58\u50a8\u548c\u83b7\u53d6\u6d88\u606f\u3002\u5904\u7406\u540c\u6b65\u7684\u6574\u4e2a\u4ee3\u7801\u53ea\u6709200\u884c\u5de6\u53f3\u7684JavaScript\u4ee3\u7801\u3002\n\u6211\u4eec\u9700\u8981\u5904\u7406\u5927\u91cf\u6d88\u606f\u624d\u80fd\u4fdd\u6301\u5feb\u901f\u540c\u6b65\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5728\u8fdb\u884c\u8fd9\u9879\u5de5\u4f5c\u65f6\uff0c\u53d1\u751f\u4e86\u4e00\u4e9b\u5947\u602a\u7684\u4e8b\u60c5\uff1a\u4e00\u4e2a\u65b0\u7528\u6237\u5728\u4e00\u5929\u5185\u4ea7\u751f\u4e86169,000\u6761\u6d88\u606f\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u5927\u5e45\u5ea6\u7684\u5f02\u5e38\u503c\u3002\u4f8b\u5982\uff0c\u5c061000\u4e2a\u4e8b\u52a1\u5bfc\u5165\u7cfb\u7edf\u5c06\u751f\u6210\u7ea66000\u6761\u6d88\u606f\uff0c\u867d\u7136\u8fd9\u662f\u5408\u7406\u7684\uff0c\u4f46\u4ecd\u9ad8\u4e8e\u6bcf\u4e2a\u7528\u6237\u6bcf\u5929\u7684\u5e73\u5747\u6d88\u606f\u6570\u3002\u6211\u76f8\u4fe1\u4ed6\u4eec\u662f\u901a\u8fc7\u4f7f\u7528API\u5c1d\u8bd5\u6279\u91cf\u5bfc\u5165\u5927\u91cf\u6570\u636e\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u7684\uff0c\u6211\u4eec\u5bf9\u6b64\u6709\u4e0d\u540c\u7684API\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u60f3\uff0c\u5982\u679c\u6211\u4ee5169,000\u4e3a\u57fa\u51c6\u4f1a\u600e\u4e48\u6837\uff1f\n\u6211\u8bd5\u56fe\u901a\u8fc7\u7cfb\u7edf\u53d1\u9001169,000\u6761\u6d88\u606f\uff0c\u4f46\u670d\u52a1\u5668\u5d29\u6e83\u4e86\u3002\u8bf7\u6c42\u8d85\u65f6\uff0c\u670d\u52a1\u5668\u4ecd\u5728\u5904\u7406\u6d88\u606f\uff0c\u5bfc\u81f4\u5176\u4ed6\u4e00\u5207\u53d8\u6162\u3002\u6211\u7acb\u523b\u5c31\u77e5\u9053\u95ee\u9898\u51fa\u5728\u54ea\u91cc\u3002\n\u5b83\u5b58\u50a8\u6807\u8bb0\u6709\u65f6\u95f4\u6233\u7684\u5c0f\u4e8c\u8fdb\u5236BLOB\u548c\u5b83\u4eec\u6240\u5c5e\u7684\u540c\u6b65\u7ec4\u3002\n\u670d\u52a1\u5668\u8bd5\u56fe\u63d2\u5165\u8fd9\u4e48\u591a\u884c\u65f6\u4f1a\u5361\u4f4f\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5728\u6dfb\u52a0\u6d88\u606f\u65f6\uff0c\u6211\u4eec\u4e0d\u80fd\u7b80\u5355\u5730\u4f7f\u7528\u4e00\u7ec4INSERT\u8bed\u53e5\u6267\u884c\u4e00\u4e2a\u67e5\u8be2\u3002\u6211\u4eec\u7684CRDT\u6709\u51e0\u4e2a\u9650\u5236\uff1a\n\u6211\u4eec\u9700\u8981\u6839\u636e\u662f\u5426\u6dfb\u52a0\u4e86\u6d88\u606f\u6765\u66f4\u65b0Merkle Trie\u3002\n\u89e3\u51b3\u7b2c\u4e00\u4e2a\u95ee\u9898\u5f88\u5bb9\u6613\u3002\u56e0\u4e3a\u6211\u4eec\u5c06\u65f6\u95f4\u6233\u4f5c\u4e3a\u4e3b\u952e\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u63d2\u5165\u5230MESSAGES_BINARY(.)\u3002\u503c(.)\u3002\u5728\u51b2\u7a81\u4e2d\u4ec0\u4e48\u90fd\u4e0d\u505a\u3002ON CONFLICT\u5b50\u53e5\u544a\u8bc9\u5b83\u5728\u5b58\u5728\u51b2\u7a81\u65f6\u4e0d\u8981\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u5e76\u590d\u5236\u4e3b\u952e\u4e0a\u7684\u51b2\u7a81\u3002\n\u66f4\u5927\u7684\u95ee\u9898\u662f#2\u3002\u6211\u4eec\u9700\u8981\u63d2\u5165\u7684\u7ed3\u679c\u624d\u80fd\u77e5\u9053\u662f\u5426\u63d2\u5165\u4e86\u884c\u3002\u5982\u679c\u5b83\u5df2\u63d2\u5165\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u66f4\u65b0Merkle trie\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u975e\u5e38\u91cd\u8981\u7684\u662f\uff0c\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a\u65f6\u95f4\u6233\u53ea\u63d2\u5165Merkle Trie\u4e00\u6b21\u3002TRIE\u8d1f\u8d23\u4fdd\u8bc1\u7cfb\u7edf\u4e2d\u7684\u4e00\u81f4\u6027\uff0c\u5e76\u7ef4\u62a4\u5185\u5bb9\u7684\u6563\u5217\u3002\u5982\u679c\u60a8\u6ca1\u6709\u4e3a\u6bcf\u4e2a\u65f6\u95f4\u6233\u6dfb\u52a0\u4e00\u6b21\u4e14\u4ec5\u6dfb\u52a0\u4e00\u6b21\uff0c\u5219\u6563\u5217(\u56e0\u6b64\u9a8c\u8bc1)\u662f\u9519\u8bef\u7684\u3002\n\u66f4\u65b0\u6570\u636e\u5e93\u7684\u6574\u4e2a\u4ee3\u7801\u5982\u4e0b\u6240\u793a(\u4f7f\u7528node-postgres\u4e0a\u7684\u4e00\u4e9b\u62bd\u8c61)\uff1a\n\u8fd9\u5927\u90e8\u5206\u662f\u771f\u6b63\u7684\u4ee3\u7801\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u6211\u4eec\u8fd8\u4f1a\u5728\u5931\u8d25\u65f6\u56de\u6eda\u4e8b\u52a1\u3002\u8fd9\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u8fd9\u53d1\u751f\u5728\u4e8b\u52a1\u4e2d\uff0c\u5e76\u4e14\u6d88\u606f\u548cMerkle Trie\u90fd\u662f\u539f\u5b50\u66f4\u65b0\u7684\u3002\u540c\u6837\uff0cMerkle trie\u9a8c\u8bc1\u6d88\u606f\u5185\u5bb9\uff0c\u5e76\u4e14\u5b83\u4eec\u5fc5\u987b\u59cb\u7ec8\u540c\u6b65\u3002\u5982\u679c\u6ca1\u6709\u540c\u6b65\u9519\u8bef\uff0c\u7528\u6237\u5c06\u770b\u5230\u8fd9\u4e9b\u9519\u8bef\u3002\n\u95ee\u9898\u4e00\u76ee\u4e86\u7136\uff1a\u6211\u4eec\u5206\u522b\u4e3a\u6bcf\u6761\u6d88\u606f\u6267\u884cINSERT\u67e5\u8be2\u3002\u5728\u6211\u4eec\u7684\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u8bd5\u56fe\u6267\u884c169,000\u6761\u8bed\u53e5\u3002PostgreSQL\u4f4d\u4e8e\u4e0d\u540c\u7684\u670d\u52a1\u5668\u4e0a(\u4f46\u5f88\u63a5\u8fd1)\uff0c\u4ec5\u8fdb\u884c\u5982\u6b64\u591a\u7684\u7f51\u7edc\u8c03\u7528\u5c31\u4f1a\u964d\u4f4e\u6027\u80fd\uff0c\u66f4\u4e0d\u7528\u8bf4PG\u5f00\u9500\u4e86\u3002\n\u6211\u77e5\u9053\u8fd9\u5f88\u6162\uff0c\u4f46\u6211\u6ca1\u6709\u610f\u8bc6\u5230\u901f\u5ea6\u6709\u591a\u6162\u3002\u8ba9\u6211\u4eec\u6d4b\u8bd5\u4e00\u4e2a\u66f4\u5408\u7406\u6570\u91cf\u7684\u5b9e\u9645\u7ed3\u675f\u7684\u6d88\u606f\u30024000\u6761\u6d88\u606f\u9700\u89816.9\u79d2\u624d\u80fd\u5b8c\u6210\u3002\u8fd9\u53ea\u662f\u5206\u6790\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u6ca1\u6709\u8003\u8651\u7f51\u7edc\u4f20\u8f93\u3002\n\u8fd9\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u7528\u6237\u4f53\u9a8c\u95ee\u9898\u3002\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u7528\u6237\u5750\u5728\u90a3\u91cc\u89c2\u770b\u540c\u6b65\u56fe\u6807\u65cb\u8f6c\u548c\u65cb\u8f6c\u548c\u65cb\u8f6c\u2026\u3002\n\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u54ea\u4e9b\u6d88\u606f\u5df2\u7ecf\u5b58\u5728\u5e76\u5c06\u5176\u8fc7\u6ee4\u6389\uff0c\u4f46\u8fd9\u5c06\u9700\u8981\u4ee3\u4ef7\u9ad8\u6602\u7684SELECT\u67e5\u8be2(\u53ef\u80fd\u9700\u8981\u5206\u89e3\u67e5\u8be2\uff0c\u56e0\u4e3a\u60a8\u4e0d\u60f3\u4f20\u9012169,000\u4e2a\u53c2\u6570)\u3002\u6211\u7684\u53e6\u4e00\u4e2a\u60f3\u6cd5\u662f\u63d2\u5165\u5177\u6709\u552f\u4e00\u7f16\u53f7\u7684\u6d88\u606f\uff0c\u7136\u540e\u6211\u53ef\u4ee5\u67e5\u8be2\u54ea\u4e9b\u6d88\u606f\u5177\u6709\u8be5\u552f\u4e00\u7f16\u53f7\uff0c\u56e0\u4e3a\u53ea\u6709\u65b0\u7684\u6d88\u606f\u624d\u4f1a\u5177\u6709\u8be5\u552f\u4e00\u7f16\u53f7\u3002\n\u5173\u7cfb\u6570\u636e\u5e93(\u4e0e\u952e-\u503c\u76f8\u6bd4)\u7684\u4f18\u70b9\u5728\u4e8e\uff0c\u5b83\u4eec\u5f80\u5f80\u5bf9\u8fd9\u7c7b\u95ee\u9898\u6709\u5065\u58ee\u7684\u89e3\u51b3\u65b9\u6848\u3002\u5fc5\u987b\u6709\u529e\u6cd5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u56e0\u4e3a\u8fd9\u79cd\u6a21\u5f0f\u5e76\u4e0d\u6df1\u5965\u3002\u6211\u5b66\u5230\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u5982\u4f55\u7528\u4e00\u6761INSERT\u8bed\u53e5\u63d2\u5165\u591a\u884c\uff1a\n\u8fd9\u6bd4\u5c06\u591a\u4e2aINSERT\u8bed\u53e5\u8fde\u63a5\u5230\u4e00\u4e2a\u67e5\u8be2\u4e2d\u8981\u597d\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u66f4\u5feb\uff0c\u800c\u4e14\u6700\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u6709\u5e0c\u671b\u5f97\u5230\u5173\u4e8e\u53d1\u751f\u4e86\u4ec0\u4e48\u7684\u4fe1\u606f\u3002\n\u5728\u641c\u7d22\u6587\u6863\u65f6\uff0c\u6211\u53d1\u73b0\u4e86INSERT\u8bed\u53e5\u7684RETURNING\u5b50\u53e5\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cPostgreSQL\u5728\u6267\u884cINSERT\u65f6\u4e0d\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\uff0c\u9664\u4e86\u66f4\u6539\u7684\u884c\u6570\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u786e\u5b9e\u63d2\u5165\u5230\u8868(\u503c)\u503c(1)\u4e2d\uff0c\u8fd4\u56deid\uff0c\u5b83\u5c06\u8fd4\u56de\u65b0\u884c\u7684id\u3002\n\u6700\u5927\u7684\u95ee\u9898\u662f\u8fd9\u662f\u5426\u5982\u6211\u6240\u613f\uff1a\u5f53\u4f7f\u7528\u5177\u6709\u591a\u4e2a\u9879\u7684INSERT\u8bed\u53e5\u5e76\u4e14\u51b2\u7a81\u65f6\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u65f6\uff0c\u5b83\u662f\u5426\u53ea\u8fd4\u56de\u5b9e\u9645\u63d2\u5165\u7684\u9879\u7684ID\u6570\u7ec4\uff1f\u6211\u6000\u7591\u5b83\u53ef\u80fd\u4f1a\u8fd4\u56de\u6240\u6709\u9879\u76ee\u7684ID\uff0c\u5373\u4f7f\u5b83\u4eec\u51b2\u7a81(\u5e76\u4e14\u6ca1\u6709\u63d2\u5165)\u3002\n\u6211\u7f16\u5199\u4e86\u4e00\u4e2a\u5feb\u901f\u811a\u672c\u6765\u6d4b\u8bd5\u8be5\u884c\u4e3a\uff0c\u5e76\u4e14\uff1a\u7b54\u5bf9\u4e86\u3002\u5f52\u6765\u5c31\u662f\u6211\u60f3\u8981\u7684\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u6d4b\u8bd5\uff1a\n\u6267\u884c\u6b64\u67e5\u8be2\u65f6\uff0c\u5982\u679c\u65f6\u95f4\u6233\u4e3a1\u7684\u6d88\u606f\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u53ea\u4f1a\u63d2\u51652\u548c3\uff0c\u5e76\u8fd4\u56de\u6570\u7ec4[{id\uff1a&#39\uff1b2&#39\uff1b}\uff0c{id\uff1a&#39\uff1b3&#39\uff1b}]\u3002\u5bbe\u679c\uff0c\u90a6\u6208\uff0c\u90a6\u6208\u3002\n\u8fd4\u56de\u5141\u8bb8\u6211\u5c06\u6240\u6709\u8fd9\u4e9b\u5de5\u4f5c\u51cf\u5c11\u5230\u5355\u4e2a\u67e5\u8be2\u4e2d\u3002\u6211\u53ef\u4ee5\u4f7f\u7528\u7ed3\u679c\u786e\u5207\u5730\u77e5\u9053\u6dfb\u52a0\u4e86\u54ea\u4e9b\u6d88\u606f\uff0c\u5e76\u9002\u5f53\u5730\u66f4\u65b0Merkle trie\u3002\n\u65b0\u4ee3\u7801\u5982\u4e0b\u6240\u793a\u3002\u6211\u4ecd\u5728\u5ba1\u6838PG-Promise\u52a9\u624b\u7684\u5b89\u5168\u6027\uff1a\n\u60a8\u6ca1\u770b\u9519\uff1a\u4ee5\u524d\u5904\u740640000\u6761\u6d88\u606f\u9700\u898159\u79d2\uff0c\u73b0\u5728\u53ea\u9700\u89817.2\u79d2\u3002\u6211\u4eec\u80fd\u591f\u5904\u740610\u500d\u6570\u91cf\u7684\u6d88\u606f\uff01\nUPDATE\uff1aSQL\u751f\u6210\u8fc7\u7a0b\u4e2d\u6709\u4e00\u4e2a\u9519\u8bef\uff0c\u5bfc\u81f4\u6bcf\u6761\u6570\u636e\u90fd\u6bd4\u9700\u8981\u7684\u5927(\u4e8c\u8fdb\u5236BLOB\u7f16\u7801\u9519\u8bef)\uff0c\u56e0\u6b64\u751f\u6210\u7684INSERT\u8bed\u53e5\u5927\u7ea6\u5c0f\u4e8625%\uff0c\u73b0\u5728\u5904\u740640000\u6761\u6d88\u606f\u53ea\u9700\u8981\u5927\u7ea65\u79d2\u3002\n\u4f60\u53ef\u80fd\u60f3\u77e5\u9053\u6211\u4eec\u7684\u57fa\u51c6169,000\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\u55ef\uff0c\u7ed3\u679c\u8fd8\u662f\u6709\u4e0a\u9650\u7684\u3002\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u8fbe\u5230\u4e86PostgreSQL\u7684\u9650\u5236\uff0c\u6ca1\u6709\u5feb\u901f\u89e3\u51b3\u7684\u529e\u6cd5\u3002\n\u5728\u5904\u7406169,000\u4e2a\u6570\u636e\u65f6\uff0c\u7b2c\u4e00\u4e2a\u95ee\u9898\u662f\u8282\u70b9\u5d29\u6e83\u3002pg-Promise\u4e2d\u7684pgp.helpers.insert\u5e2e\u52a9\u5668\u5728\u4f20\u9012\u8be5\u6570\u91cf\u7684\u9879\u76ee\u65f6\u4f1a\u5bfc\u81f4\u5d29\u6e83\u3002\u4e0d\u77e5\u9053\u786e\u5207\u7684\u539f\u56e0\uff0c\u4f46\u8fd9\u4e0d\u503c\u5f97\u8c03\u67e5\uff0c\u56e0\u4e3a\u8fd8\u6709\u5176\u4ed6\u95ee\u9898\u3002\n\u9996\u5148\uff0c169,000\u4e2a\u9879\u76ee\u9700\u898121Mb\u7684\u4e0a\u4f20\u6709\u6548\u8d1f\u8f7d\u3002\u8fd9\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\uff0c\u56e0\u4e3a\u5931\u8d25\u7684\u53ef\u80fd\u6027\u592a\u5927\u4e86\u3002\n\u5982\u679c\u6211\u4eec\u5c06\u57fa\u51c6\u964d\u4f4e\u5230100,000\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u66f4\u8fdc\u7684\u7ed3\u679c\u3002\u751f\u6210\u7684\u591a\u503cINSERT\u8bed\u53e5\u662f\u4e00\u4e2a72MB\u7684\u5b57\u7b26\u4e32\u3002\u5c1d\u8bd5\u6267\u884c\u8fd9\u4e2a\u5e9e\u5927\u7684\u67e5\u8be2\u5b57\u7b26\u4e32\uff0c\u7b80\u5355\u5730\u4f7f\u7528\u2026\u3002\u6302\u8d77\u6574\u4e2a\u670d\u52a1\u5668\u3002\u6211\u4e0d\u786e\u5b9a\u95ee\u9898\u51fa\u5728\u54ea\u91cc\uff0c\u6216\u8005PostgreSQL\u8bbe\u7f6e\u662f\u5426\u53ef\u4ee5\u8c03\u6574\u6765\u5904\u7406\u5b83\uff0c\u4f46\u540c\u6837\uff0c\u6211\u4eec\u6839\u672c\u65e0\u6cd5\u5904\u7406\u8fd9\u79cd\u5927\u5c0f\u7684\u4e1c\u897f\u3002\n\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5bfb\u547c\u6d88\u606f\u540c\u6b65\uff0c\u5e76\u5bf9\u6bcf\u4e2a\u8bf7\u6c42\u8bbe\u7f6e\u4e0a\u9650\u3002\u5408\u7406\u7684\u9650\u5236\u4f3c\u4e4e\u662f40,000\u6761\u6d88\u606f\u3002\u5728\u8fd9\u4e2a\u5927\u5c0f\u4e0b\uff0c\u4e0a\u4f20\u7684\u6709\u6548\u8d1f\u8f7d\u662f5MB\uff0c\u5904\u7406\u9700\u89817\u79d2(\u5b83\u4ecd\u7136\u4f1a\u751f\u6210\u4e00\u4e2a30MB\u7684\u67e5\u8be2\u5b57\u7b26\u4e32\uff0cPostgreSQL\u4f1a\u5f88\u9ad8\u5174\u5730\u5904\u7406\u5b83\uff01)\u3002\u8981\u5904\u7406169,000\u6761\u6d88\u606f\uff0c\u6211\u4eec\u5c06\u53d1\u90015\u4e2a\u8bf7\u6c42\uff0c\u6bcf\u4e2a\u8bf7\u6c4240,000\u6761\u6d88\u606f(\u6216\u4efb\u4f55\u5269\u4f59\u7684\u6d88\u606f)\u3002\u5904\u7406\u6240\u6709\u8fd9\u4e9b\u8bf7\u6c42\u7684\u603b\u65f6\u95f4\u5c06\u662f169000/40000*7\u621629.6\u79d2\u3002\u53ea\u8981\u6211\u4eec\u5411\u7528\u6237\u663e\u793a\u8fdb\u5ea6\uff0c\u5bf9\u4e8e\u5982\u6b64\u5de8\u5927\u7684\u53d8\u66f4\u96c6\u6765\u8bf4\u8fd8\u4e0d\u9519\u3002\n\u8fd9\u662f\u6700\u574f\u7684\u60c5\u51b5\u3002\u6211\u4eec\u901a\u5e38\u4e0d\u5904\u7406\u4ee5\u79d2\u4e3a\u5355\u4f4d\u7684\u65f6\u95f4\u8303\u56f4\u3002\u6700\u5e38\u89c1\u7684\u540c\u6b65\u64cd\u4f5c\u5904\u740610-200\u6761\u6d88\u606f\uff0c\u8fd9\u4e9b\u6d88\u606f\u572820ms\u5185\u540c\u6b65\u3002\u8fd9\u7edd\u5bf9\u662f\u6700\u7cdf\u7cd5\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\u6709\u4eba\u6bcf\u79d2\u8fdb\u884c\u6570\u5343\u6b21\u66f4\u6539\uff0c\u7136\u540e\u8bd5\u56fe\u7a0d\u540e\u540c\u6b65\uff0c\u8fd9\u79cd\u60c5\u51b5\u51e0\u4e4e\u4ece\u6765\u6ca1\u6709\u53d1\u751f\u8fc7\u3002\u4f46\u662f\u5982\u679c\u7528\u6237\u6ee5\u7528API\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u5904\u7406\u5b83\u3002\n\u4e0e\u4e0a\u8ff0\u95ee\u9898\u65e0\u5173\u7684\u662f\uff0c\u6211\u60f3\u505a\u6700\u540e\u4e00\u4e2a\u6539\u8fdb\u3002\u7531\u4e8eMerkle trie\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u56e0\u6b64\u670d\u52a1\u5668\u9700\u8981\u83b7\u53d6\u5b83\u3001\u66f4\u6539\u5b83\uff0c\u7136\u540e\u5c06\u5176\u5b58\u50a8\u56de\u53bb\u3002\u8fd9\u610f\u5473\u7740\u5f53\u6211\u4eec\u6b63\u5728\u5904\u7406Trie\u65f6\uff0c\u6ca1\u6709\u5176\u4ed6\u8fde\u63a5\u53ef\u4ee5\u540c\u65f6\u66f4\u6539Trie\u3002\n\u5f53\u524d\u7684\u89e3\u51b3\u65b9\u6848\u4f7f\u7528\u949d\u9524\u6765\u89e3\u51b3\u5b83\uff1a\u4e92\u65a5\u3002\u4e92\u65a5\u9501\u56f4\u7ed5\u540c\u6b65\u903b\u8f91\u9501\u5b9a\u6bcf\u4e2a\u7528\u6237\uff0c\u56e0\u6b64\u7528\u6237\u53ef\u4ee5\u5e76\u53d1\u540c\u6b65\uff0c\u4f46\u5982\u679c\u540c\u4e00\u7528\u6237\u5728\u591a\u4e2a\u8bbe\u5907\u4e0a\u540c\u6b65\uff0c\u5219\u5b83\u4eec\u5c06\u88ab\u5e8f\u5217\u5316\u3002\u8fd9\u662f\u5fc5\u8981\u7684\uff0c\u4ee5\u907f\u514d\u7ade\u8d5b\u6761\u4ef6\uff0c\u540c\u65f6\u66f4\u65b0Merkle Trie(\u8bf7\u8bb0\u4f4f\uff0c\u8fd9\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u5b83\u4fdd\u6301\u673a\u667a)\u3002\n\u770b\u8d77\u6765\u4e8b\u52a1\u7684\u53ef\u5e8f\u5217\u5316\u9694\u79bb\u7ea7\u522b\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u60a8\u4f7f\u7528BEGIN TRANSACTION ISOLATION\u7ea7\u522bSERIALIZABLE\u542f\u52a8\u4e8b\u52a1\uff0c\u5982\u679cPostgreSQL\u68c0\u6d4b\u5230\u5b83\u4eec\u4e4b\u95f4\u53ef\u80fd\u51fa\u73b0\u4e89\u7528\u6761\u4ef6\uff0c\u5b83\u5c06\u4e2d\u6b62\u4e8b\u52a1\u3002\u6211\u4e0d\u80fd100%\u786e\u5b9a\u5b83\u662f\u5426\u9002\u7528\u4e8e\u6211\u5728\u540c\u4e00\u4e8b\u52a1\u4e2d\u8bfb\u53d6\u67d0\u4e9b\u5185\u5bb9\u5e76\u7a0d\u540e\u5c06\u5176\u5199\u56de\u7684\u7528\u4f8b\uff0c\u4f46\u5982\u679c\u53ef\u4ee5\uff0c\u5982\u679c\u4e8b\u52a1\u5931\u8d25\uff0c\u6211\u4f1a\u91cd\u65b0\u542f\u52a8\u5b83\u3002\u56e0\u6b64\uff0c\u6bcf\u4e2a\u540c\u6b65\u8fc7\u7a0b\u90fd\u4f1a\u88ab\u5e8f\u5217\u5316\u3002\u5982\u679c\u4f60\u77e5\u9053\u8fd9\u4ef6\u4e8b\uff0c\u6211\u5f88\u4e50\u610f\u542c\u5230\u4f60\u7684\u6d88\u606f\u3002\n\u6211\u8fd8\u6ca1\u6709\u628a169,000\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u653e\u5728\u540c\u6b65\u7684\u5ba2\u6237\u7aef\u90e8\u5206\u3002\u5ba2\u6237\u7aef\u5728\u540c\u6b65\u65f6\u4f1a\u505a\u66f4\u591a\u7684\u5de5\u4f5c\uff0c\u56e0\u4e3a\u6709\u5f88\u591a\u5176\u4ed6\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\u64a4\u9500\u6302\u94a9\u5230\u7cfb\u7edf\u4e2d\uff0c\u6240\u4ee5\u4ecd\u7136\u6709\u5f88\u591a\u9700\u8981\u4f18\u5316\u7684\u5730\u65b9\u3002\u6211\u6000\u7591\u5b83\u73b0\u5728\u662f\u5426\u80fd\u5904\u7406169,000\u6761\u6d88\u606f\uff0c\u4f46\u6211\u786e\u4fe1\u5b83\u80fd\u5904\u740640,000\u6761\u6d88\u606f\u3002\u6211\u8ba4\u4e3a\u5c06\u540c\u6b65\u5206\u621040,000\u4e2a\u5757\u7684\u60f3\u6cd5\u4f1a\u5f88\u6709\u6548\uff0c\u800c\u4e14\u5f88\u5bb9\u6613\u5411\u7528\u6237\u663e\u793a\u5230\u76ee\u524d\u4e3a\u6b62\u5df2\u7ecf\u5904\u7406\u4e86\u591a\u5c11\u6761\u6d88\u606f\u7684\u53cd\u9988\u3002\n\u65e0\u8bba\u5982\u4f55\uff0c\u9488\u5bf9\u6781\u7aef\u60c5\u51b5\u8fdb\u884c\u4f18\u5316\u662f\u5f88\u68d2\u7684\u3002\u8fd9\u91cc9-10\u500d\u7684\u6539\u8fdb\u53ef\u4ee5\u6e17\u900f\u5230\u5360\u8bf7\u6c4295%\u7684\u5c0f\u5f97\u591a\u7684\u6848\u4f8b\u4e2d\u3002\u73b0\u5728\uff0c\u4ee5\u524d\u9700\u8981100\u6beb\u79d2\u7684\u8bf7\u6c42\u5c06\u9700\u8981\u5927\u7ea610\u6beb\u79d2\u3002\u592a\u68d2\u4e86\uff01\n\u81f4\u529b\u4e8e\u5b9e\u9645\u5de5\u4f5c\u5e76\u5f15\u5bfc\u5b83\u3002\u6211\u5199\u7684\u662f\u6211\u4e00\u8def\u8d70\u6765\u6240\u5b66\u5230\u7684\u4e1c\u897f\u3002", "note_en": "At the very heart of  Actual is a custom syncing engine. Recently I implemented full end-to-end encryption (not released yet) and it inspired me to audit the performance of the whole process. In the future I&#39;ll blog more about using CRDTs for syncing, but for now I&#39;d like to talk about a PostgreSQL feature that enabled a 9-10x performance improvement.\n Actual is completely a local app and syncing happens in the background (using  CRDTs). This means the server is very simple and all it has to do is store and fetch &#34;messages&#34; for clients. The entire code for handling syncing is only ~200 lines of JavaScript.\n We need to handle  a lot of messages to keep syncing fast. In fact, while working on this something strange happened: a new user generated 169,000 messages on one day. This is an outlier by a  huge margin. For example, importing 1000 transactions into the system would generate about 6000 messages and, while reasonable, is still more than the average number of message per day per user. I believe they did this by using the API trying to bulk import a lot of data and we have  different APIs for that. Still, I thought, what if I made  169,000 my benchmark?\n I tried pumping 169,000 messages through the system and broke the server. The request timed out and the server was still crunching through messages making everything else slow. I knew what the problem was instantly.\n   It stores small binary blobs marked with a timestamp and a &#34;sync group&#34; they belong to.\n The server was choking trying to insert so many rows. Unfortunately, we can&#39;t simply execute one query with a bunch of  INSERT statements when adding messages. Our CRDTs have a few constraints:\n We need to update a  merkle trie depending on whether or not the message was added\n Solving  #1 is easy. Because we made  timestamp the primary key, we can do  INSERT INTO messages_binary (...) VALUES (...) ON CONFLICT DO NOTHING. The  ON CONFLICT clause tells it to do nothing when there&#39;s a conflict, and duplicates conflict on primary key.\n A much bigger problem is  #2. We need the  result of the insert to know if a row was inserted or not. If it was inserted, we need to also update our merkle trie like this:\n  It&#39;s extremely important that each timestamp in the system only ever get inserted to the merkle trie once. The trie is responsible for guaranteeing consistency in the system and maintains hashes for the content. If you haven&#39;t added each timestamp once and only once, the hashes (and thus verification) are wrong.\n The whole code for updating the database looks like this (using some abstractions over  node-postgres):\n  This is mostly the real code, the only difference is we also rollback the transaction on failure. It&#39;s  extremely important that this happens in a transaction and both the messages and merkle trie are updated  atomically. Again, the merkle trie verifies the messages content and they must always be in sync. The user will see sync errors if they are not.\n The problem is immediately clear: we are executing an  INSERT query for each message individually. In our extreme case we are trying to execute 169,000 statements. PostgreSQL lives on a different server (but close) and making that many network calls alone is going to kill performance, not to mention PG overhead.\n I knew this was slow, but I didn&#39;t realize how slow. Let&#39;s test a more reasonable number of messages that actually finishes.  4000 messages takes 6.9s to complete. This is just profiling the above code, and not taking into account network transfer.\n This is a  huge UX issue. While this is processing the user is sitting there watching the &#34;sync&#34; icon spin and spin and spin\u2026\n   We could check which messages already exist and filter them out, but that would require an expensive  SELECT query (that would probably need to be broken up because you wouldn&#39;t want to pass 169,000 parameters). Another idea I had was to insert messages with a unique number, and then afterwards I can query which messages have that unique number since only the new ones would have it.\n The beauty of relational databases (compared to key-value) is they tend to have robust solutions for these kinds of problems. There  had to be a way to do this because this pattern is not esoteric. The first thing I learned was how to insert multiple rows with a single  INSERT statement:\n  This is better than concatenating multiple  INSERT statements into one query because it&#39;s probably faster, and most importantly we have hope of getting back information about what happened.\n Scouring the docs I discovered the   RETURNING clause of an  INSERT statement. By default PostgreSQL doesn&#39;t return anything when doing  INSERT except the number of rows that changed. But if you do  INSERT INTO table (value) VALUES (1) RETURNING id it will return the id of the new row.\n The big question was if this did what I wanted: when using an  INSERT statement with multiple items and  ON CONFLICT DO NOTHING, will it return an array of ids of  only the items that were actually inserted? I was suspicious it might return the ids of all the items even if they conflicted (and weren&#39;t inserted).\n I wrote a quick script to test the behavior and:  bingo.  RETURNING does exactly what I want. Here&#39;s a test:\n  When executing this query, if a message with timestamp of  1 already exists, this will only insert  2 and  3 and return an array  [{ id: &#39;2&#39; }, { id: &#39;3&#39; }]. Bingo bango bongo.\n RETURNING allows me to reduce all of this work down into a single query. I can use the results to know exactly which messages were added and update the merkle trie appropriately.\n The new code looks something like this. I&#39;m still  auditing the safety of the  pg-promise helper:\n    You read that right: previously it took  59 seconds to process 40000 messages and now it only takes 7.2 seconds. We&#39;re able to process 10 times the amount of messages!\n Update: There was an error in the SQL generation causing each piece of data to be larger than needed (the binary blob encoding was wrong) so the generated INSERT statement is about 25% smaller, and 40000 messages is now processed in ~5 seconds.\n  You might be wondering what happened to 169,000, our benchmark? Well, turns out there&#39;s still an upper limit. This time we&#39;re hitting a PostgreSQL limit and there isn&#39;t a quick fix.\n When processing 169,000, the first problem is that, well, node crashes. The  pgp.helpers.insert helper from  pg-promise causes the crash when passed that number of items. Not exactly sure why, but it&#39;s not worth investigating because there are other problems.\n First, 169,000 items requires an upload payload of 21MB. That&#39;s unacceptable because the chances of that failing is too large.\n If we scale the benchmark down to 100,000, we get something that gets further. The multi-value  INSERT statement that is generated is a  72MB string. Trying to execute this massive query string simply\u2026 hangs the whole server. I&#39;m not sure where the problem is, or if PostgreSQL settings could be tuned to handle it, but again we simply can&#39;t handle something of this size.\n The better solution is to page message syncing and have an upper limit per request. A good limit seems to be 40,000 messages. At the size, the upload payload is 5MB and it takes 7 seconds to process (it still generates a 30MB query string which PostgreSQL happily processes!). To process 169,000 messages, we&#39;d send 5 requests each which 40,000 messages (or whatever is leftover). The total time to process all of them would be  169000 / 40000 * 7 or 29.6 seconds. As long as we display the progress to the user, not bad for such a gigantic changeset.\n This is the worst case scenario. We&#39;re not normally dealing with timeframes in seconds. The most common syncing operations deal with 10-200 messages which syncs within 20ms. This is absolutely the worst case, like somebody is hitting the API with thousands of changes per second and trying to sync later, which almost never happens. But we should be able to handle it if a user abuses the API.\n  Unrelated to the above problem, there is one last improvement I&#39;d like to make. Since the merkle trie is stored in the database, the server needs to fetch it, change it, then store it back. That means no other connections can concurrently change the trie while we&#39;re working on it.\n The current solution uses a blunt hammer to solve it: a mutex. The mutex locks per user around the syncing logic, so users can concurrently sync, but if the same user syncs on multiple devices, they will be serialized. This is necessary to avoid race conditions while updating the merkle trie (remember, it&#39;s extremely important that it stays in tact).\n It looks like the  Serializable Isolation Level for transactions might solve this. You start the transaction with  BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE, and PostgreSQL will abort a transaction if it detects that race conditions might occur between them. I&#39;m not 100% sure if it will work with my use case where I read something and write it back later in the same transaction, but if it does, if a transaction fails I&#39;d just restart it. So each syncing process would get serialized. I&#39;d love to hear from you if you know anything about this.\n  I haven&#39;t thrown the 169,000 benchmark at the client part of syncing yet. The client does more work when syncing because a lot of other things like undo hooks into the system, so there is still a lot to optimize there. I doubt it would handle a case of 169,000 messages right now anyway, but I&#39;m sure it could handle 40,000 messages. I think the idea of paging the syncing into 40,000 blocks would work well though, and would be easy to show feedback to the user of how many messages have been processed so far.\n No matter what, it&#39;s great to optimize for the extreme cases. The 9-10x improvement here trickles down to the far smaller cases that make up 95% of the requests. Now a request that took 100ms before will take ~10ms. Snappy!\n    Working on  Actual and bootstrapping it. I write about what I&#39;m learning along the way.", "posttime": "2020-06-15 00:58:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "postgresql,\u6027\u80fd,\u5f00\u542f,\u6d88\u606f", "title": "PostgreSQL\u4e2d\u7684\u4e00\u4e2a\u5b57\u5f00\u542f\u4e869\u500d\u7684\u6027\u80fd\u63d0\u5347", "title_en": "One word in PostgreSQL unlocked a 9x performance improvement", "transed": 1, "url": "https://jlongster.com/how-one-word-postgresql-performance", "via": "", "real_tags": ["\u6027\u80fd", "\u5f00\u542f", "\u6d88\u606f"]}, {"category": "", "categoryclass": "", "imagename": "59f86cf74ccf11b3ad386227d5bad277.png", "infoid": 1006546, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u9762\u5411PHP\u5f00\u53d1\u4eba\u5458\u7684\u7cfb\u5217\u5e16\u5b50\u4e2d\u7684\u7b2c\u4e00\u7bc7\u3002\u672c\u7cfb\u5217\u5c06\u89e3\u91ca\u5982\u4f55\u5728PHP\u4e2d\u4f7f\u7528\u65e0\u670d\u52a1\u5668\u6280\u672f\u3002\u5b83\u6db5\u76d6\u4e86\u6784\u5efa\u65e0\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u7684\u53ef\u7528\u5de5\u5177\u3001\u6846\u67b6\u548c\u7b56\u7565\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u73b0\u5728\u662f\u5f00\u59cb\u7684\u5408\u9002\u65f6\u673a\u3002\n\u5728\u4ee5\u540e\u7684\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u6f14\u793a\u5982\u4f55\u5c06AWS Lambda\u7528\u4e8e\u4f7f\u7528Laravel\u548cSymfony\u7b49PHP\u6846\u67b6\u6784\u5efa\u7684Web\u5e94\u7528\u7a0b\u5e8f\u3002\u6211\u5c55\u793a\u4e86\u5982\u4f55\u4ece\u4f7f\u7528Lambda\u4f5c\u4e3aweb\u6258\u7ba1\u529f\u80fd\u7684\u66ff\u4ee3\u54c1\u8f6c\u5411\u89e3\u8026\u7684\u3001\u4e8b\u4ef6\u9a71\u52a8\u7684\u65b9\u6cd5\u3002\u6211\u5c06\u4ecb\u7ecd\u5982\u4f55\u5c06\u8303\u56f4\u6700\u5c0f\u7684\u591a\u4e2aLambda\u51fd\u6570\u4e0e\u5176\u4ed6\u65e0\u670d\u52a1\u5668\u670d\u52a1\u76f8\u7ed3\u5408\uff0c\u4ee5\u521b\u5efa\u9ad8\u6027\u80fd\u3001\u53ef\u4f38\u7f29\u7684\u5fae\u670d\u52a1\u3002\n\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u60a8\u5c06\u5b66\u4e60\u5982\u4f55\u901a\u8fc7\u81ea\u5b9a\u4e49\u8fd0\u884c\u65f6API\u5728Lambda\u4e2d\u4f7f\u7528PHP\u3002\u8bf7\u8bbf\u95ee\u6b64GitHub\u5b58\u50a8\u5e93\u83b7\u53d6\u793a\u4f8b\u4ee3\u7801\u3002\n\u53ef\u4f38\u7f29\u6027\u662f\u4f20\u7edfLAMP\u5806\u6808\u56fa\u6709\u7684\u6311\u6218\u3002\u53ef\u4f38\u7f29\u7684\u5e94\u7528\u7a0b\u5e8f\u662f\u53ef\u4ee5\u5904\u7406\u9ad8\u5ea6\u53ef\u53d8\u7684\u6d41\u91cf\u7ea7\u522b\u7684\u5e94\u7528\u7a0b\u5e8f\u3002PHP\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u901a\u8fc7\u6839\u636e\u9700\u8981\u6dfb\u52a0\u66f4\u591aWeb\u670d\u52a1\u5668\u6765\u6c34\u5e73\u6269\u5c55\u3002\u8fd9\u662f\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u5668\u8fdb\u884c\u7ba1\u7406\u7684\uff0c\u8d1f\u8f7d\u5747\u8861\u5668\u5c06\u8bf7\u6c42\u5b9a\u5411\u5230\u5404\u79cdWeb\u670d\u52a1\u5668\u3002\u6bcf\u589e\u52a0\u4e00\u53f0\u670d\u52a1\u5668\u90fd\u4f1a\u5e26\u6765\u989d\u5916\u7684\u7f51\u7edc\u3001\u7ba1\u7406\u3001\u5b58\u50a8\u5bb9\u91cf\u3001\u5907\u4efd\u548c\u6062\u590d\u7cfb\u7edf\u4ee5\u53ca\u8d44\u4ea7\u7ba1\u7406\u5e93\u5b58\u66f4\u65b0\u65b9\u9762\u7684\u5f00\u9500\u3002\u6b64\u5916\uff0c\u6bcf\u4e2a\u6c34\u5e73\u6269\u5c55\u7684\u670d\u52a1\u5668\u90fd\u72ec\u7acb\u8fd0\u884c\u3002\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u914d\u7f6e\u540c\u6b65\u6311\u6218\u3002\n\u65b0\u7684\u5b58\u50a8\u6311\u6218\u51fa\u73b0\u4e86\uff0c\u56e0\u4e3a\u6bcf\u53f0\u670d\u52a1\u5668\u90fd\u6709\u81ea\u5df1\u7684\u78c1\u76d8\u548c\u6587\u4ef6\u7cfb\u7edf\uff0c\u901a\u5e38\u9700\u8981\u5f00\u53d1\u4eba\u5458\u6dfb\u52a0\u4e00\u79cd\u673a\u5236\u6765\u5904\u7406\u7528\u6237\u4f1a\u8bdd\u3002\u4f7f\u7528\u65e0\u670d\u52a1\u5668\u6280\u672f\uff0c\u53ef\u4ee5\u4e3a\u5f00\u53d1\u4eba\u5458\u7ba1\u7406\u53ef\u4f38\u7f29\u6027\u3002\n\u5982\u679c\u6d41\u91cf\u6fc0\u589e\uff0c\u670d\u52a1\u53ef\u4ee5\u6269\u5c55\u4ee5\u6ee1\u8db3\u9700\u6c42\uff0c\u800c\u65e0\u9700\u90e8\u7f72\u989d\u5916\u7684\u670d\u52a1\u5668\u3002\u8fd9\u4f7f\u5f97\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5feb\u901f\u4ece\u539f\u578b\u8fc7\u6e21\u5230\u751f\u4ea7\u3002\n\u5bf9\u52a8\u6001\u5185\u5bb9\u7684\u6240\u6709\u8bf7\u6c42(\u9664/Assets/*\u4ee5\u5916\u7684\u4efb\u4f55\u5185\u5bb9)\u90fd\u4f1a\u8f6c\u53d1\u5230Amazon API Gateway\u3002\u8fd9\u662f\u4e00\u4e2a\u5b8c\u5168\u6258\u7ba1\u7684\u670d\u52a1\uff0c\u7528\u4e8e\u521b\u5efa\u3001\u53d1\u5e03\u548c\u4fdd\u62a4\u4efb\u4f55\u89c4\u6a21\u7684API\u3002\u5b83\u5145\u5f53PHP\u5e94\u7528\u7a0b\u5e8f\u7684\u201c\u524d\u95e8\u201d\uff0c\u5c06\u8bf7\u6c42\u5411\u4e0b\u8def\u7531\u5230Lambda\u51fd\u6570\u3002Lambda\u51fd\u6570\u5305\u542b\u4e1a\u52a1\u903b\u8f91\u4ee5\u53ca\u4e0eMySQL\u6570\u636e\u5e93\u7684\u4ea4\u4e92\u3002\u60a8\u53ef\u4ee5\u5c06\u8f93\u5165\u4f5c\u4e3a\u8bf7\u6c42\u5934\u3001\u8def\u5f84\u53d8\u91cf\u3001\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570\u548c\u6b63\u6587\u7684\u4efb\u610f\u7ec4\u5408\u4f20\u9012\u7ed9Lambda\u51fd\u6570\u3002\n\u5728Re\uff1aInvent2017\u671f\u95f4\uff0cAWS\u53d1\u5e03\u4e86Aurora Serverless\uff0c\u8fd9\u662f\u4e00\u79cd\u6309\u9700\u65e0\u670d\u52a1\u5668\u5173\u7cfb\u6570\u636e\u5e93\uff0c\u91c7\u7528\u6309\u4f7f\u7528\u4ed8\u8d39\u6a21\u5f0f\u3002\u8fd9\u4e3a\u5f00\u53d1\u4eba\u5458\u7ba1\u7406\u63d0\u4f9b\u548c\u6269\u5c55\u5173\u7cfb\u6570\u636e\u5e93\u7684\u8d23\u4efb\u3002\n\u5728Re\uff1aInvent2018\u4e0a\uff0cAWS\u5ba3\u5e03\u4e86\u4e24\u9879\u65b0\u7684Lambda\u529f\u80fd\u3002\u8fd9\u4e9b\u4f7f\u5f00\u53d1\u4eba\u5458\u80fd\u591f\u6784\u5efa\u81ea\u5b9a\u4e49\u8fd0\u884c\u65f6\uff0c\u5e76\u5728\u51fd\u6570\u4e4b\u95f4\u5171\u4eab\u548c\u7ba1\u7406\u516c\u5171\u4ee3\u7801\u3002\n2019\u5e749\u6708\uff0cAWS\u5ba3\u5e03\u5bf9\u79c1\u6709\u7f51\u7edc\u5185Lambda\u529f\u80fd\u7684\u51b7\u542f\u52a8\u8fdb\u884c\u4e86\u91cd\u5927\u6539\u8fdb\uff0c\u4ece\u800c\u63d0\u9ad8\u4e86\u529f\u80fd\u542f\u52a8\u6027\u80fd\uff0c\u63d0\u9ad8\u4e86\u5f39\u6027\u7f51\u7edc\u63a5\u53e3\u7684\u4f7f\u7528\u6548\u7387\uff0c\u51cf\u5c11\u4e86VPC\u51b7\u542f\u52a8\u3002\n\u5728Re\uff1aInvent2019\u5e74\uff0cAWS\u5ba3\u5e03\u63a8\u51fa\u4e00\u9879\u540d\u4e3aAmazon RDS Proxy\u7684\u65b0\u670d\u52a1\u3002\u4f4d\u4e8e\u5e94\u7528\u7a0b\u5e8f\u548c\u5173\u7cfb\u6570\u636e\u5e93\u4e4b\u95f4\u7684\u5b8c\u5168\u6258\u7ba1\u6570\u636e\u5e93\u4ee3\u7406\u3002\u5b83\u9ad8\u6548\u5730\u6c47\u96c6\u548c\u5171\u4eab\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4ee5\u63d0\u9ad8\u5e94\u7528\u7a0b\u5e8f\u7684\u53ef\u4f38\u7f29\u6027\u3002\n\u5c06\u8fd9\u4e9b\u670d\u52a1\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u53ef\u4ee5\u4f7f\u7528PHP\u548c\u5173\u7cfb\u6570\u636e\u5e93\u6784\u5efa\u5b89\u5168\u3001\u9ad8\u6548\u3001\u53ef\u4f38\u7f29\u7684\u65e0\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u3002\n\u81ea\u5b9a\u4e49\u8fd0\u884c\u65f6API\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u63a5\u53e3\uff0c\u7528\u4e8e\u652f\u6301\u4ee5\u4efb\u4f55\u7f16\u7a0b\u8bed\u8a00\u6216\u7279\u5b9a\u8bed\u8a00\u7248\u672c\u6267\u884cLambda\u51fd\u6570\u3002\u81ea\u5b9a\u4e49\u8fd0\u884c\u65f6API\u9700\u8981\u4e00\u4e2a\u79f0\u4e3a\u5f15\u5bfc\u7684\u53ef\u6267\u884c\u6587\u672c\u6587\u4ef6\u3002\u5f15\u5bfc\u6587\u4ef6\u8d1f\u8d23\u4ee3\u7801\u548cLambda\u73af\u5883\u4e4b\u95f4\u7684\u901a\u4fe1\u3002\n\u8981\u521b\u5efa\u81ea\u5b9a\u4e49\u8fd0\u884c\u65f6\uff0c\u60a8\u5fc5\u987b\u9996\u5148\u5728\u4e0eLambda\u6267\u884c\u73af\u5883\u517c\u5bb9\u7684Amazon Linux\u73af\u5883\u4e2d\u7f16\u8bd1\u6240\u9700\u7248\u672c\u7684PHP\u3002\u8981\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u8bf7\u6309\u7167\u4ee5\u4e0b\u5206\u6b65\u8bf4\u660e\u8fdb\u884c\u64cd\u4f5c\u3002\n\u4e0b\u9762\u7684\u6587\u4ef6\u662f\u4e00\u4e2a\u57fa\u672cPHP\u5f15\u5bfc\u6587\u4ef6\u7684\u793a\u4f8b\u3002\u6b64\u793a\u4f8b\u7528\u4e8e\u8bf4\u660e\u76ee\u7684\uff0c\u56e0\u4e3a\u6ca1\u6709\u53d1\u751f\u9519\u8bef\u5904\u7406\u6216\u62bd\u8c61\u3002\u8981\u786e\u4fdd\u6b63\u786e\u5904\u7406\u5f02\u5e38\uff0c\u8bf7\u5728\u6784\u5efa\u751f\u4ea7\u81ea\u5b9a\u4e49\u8fd0\u884c\u65f6\u53c2\u8003\u8fd0\u884c\u65f6API\u6587\u6863\u3002\n#\uff01/opt/bin/php&lt\uff1b\uff1fPHP//\u8fd9\u5c06\u8c03\u7528Composer\u7684\u81ea\u52a8\u52a0\u8f7d\u5668\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528GUZZE\u548c\u4efb\u4f55\u5176\u4ed6\u6211\u4eec\u9700\u8981\u7684\u7b2c\u4e09\u65b9\u5e93\u3002\u9700\u8981__DIR__\u3002&#39\uff1b/vendor/autoload.php\uff1b//\u8fd9\u662f\u8bf7\u6c42\u5904\u7406\u5faa\u73af\u3002\u9664\u975e\u51fa\u73b0\u4e0d\u53ef\u6062\u590d\u7684\u6545\u969c\uff0c\u5426\u5219\u6b64\u5faa\u73af\u5c06\u4e00\u76f4\u8fd0\u884c\uff0c\u76f4\u5230\u73af\u5883\u5173\u95ed\u3002do{//\u5411\u8fd0\u884c\u65f6API\u8bf7\u6c42\u8981\u5904\u7406\u7684\u8bf7\u6c42\u3002$request=getNextRequest()\uff1b//\u4ece_HANDLER\u73af\u5883\u53d8\u91cf\u83b7\u53d6\u51fd\u6570\u540d\u79f0\uff0c\u5e76\u786e\u4fdd\u51fd\u6570\u7684\u4ee3\u7801\u53ef\u7528\u3002$handlerFunction=ARRAY_SLICE(EXPLODE(&#39\uff1b.&#39\uff1b\uff0c$_ENV[&#39\uff1b_HANDLER&#39\uff1b])\uff0c-1)[0]\uff1bREQUIRED_ONCE$_ENV[&#39\uff1bLAMBDA_TASK_ROOT&#39\uff1b]\u3002&#39\uff1b/src/&#39\uff1b\u3002$handlerFunction\u3002&#39\uff1b.php\uff1b//\u6267\u884c\u6240\u9700\u51fd\u6570\u5e76\u83b7\u53d6\u54cd\u5e94\u3002$Response=$handlerFunction($request[&#39\uff1bpayload&#39\uff1b])\uff1b//\u5c06\u54cd\u5e94\u63d0\u4ea4\u56de\u8fd0\u884c\u65f6\u63a5\u53e3\u3002sendResponse($request[&#39\uff1binvocationId&#39\uff1b]\uff0c$Response)\uff1b}While(TRUE)\uff1b\u51fd\u6570getNextRequest(){$Client=NEW\\GuzzleHttp\\Client()\uff1b$Response=$Client-&gt\uff1bGET(&#39\uff1bhttp://&#39\uff1b\u3002$_ENV[&#39\uff1bAWS_Lambda_Runtime_API&#39\uff1b]\u3002&#39\uff1b/2018-06-01/runtime/invocation/next&#39\uff1b)\uff1b\u8fd4\u56de[&#39\uff1binvocationId&#39\uff1b=&gt\uff1b$response-&gt\uff1bgetHeader(&#39\uff1bLambda-Runtime-Aws-Request-Id&#39\uff1b)[0]\uff0c&#39\uff1b\u6709\u6548\u8d1f\u8f7d&#39\uff1b=&gt\uff1bjson_decode((String)$Response-&gt\uff1bgetBody()\uff0ctrue)]\uff1b}\u51fd\u6570sendResponse($invocationId\uff0c$Response){$Client=NEW\\GuzzleHttp\\Client()\uff1b$Client-&gt\uff1b\u53d1\u5e03(&#39\uff1bhttp://&#39\uff1b\u3002$_ENV[&#39\uff1bAWS_Lambda_Runtime_API&#39\uff1b]\u3002&#39\uff1b/2018-06-01/\u8fd0\u884c\u65f6/\u8c03\u7528/&#39\uff1b\u3002$invocationId\u3002&#39\uff1b/Response&#39\uff1b\uff0c[&#39\uff1bBody&#39\uff1b=&gt\uff1b$Response])\uff1b}\n#\uff01/opt/bin/php\u58f0\u660e\u6307\u793a\u7a0b\u5e8f\u52a0\u8f7d\u5668\u4f7f\u7528\u4e3aAmazon Linux\u7f16\u8bd1\u7684PHP\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\n\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u5c06\u5f15\u5bfc\u5305\u548c\u7f16\u8bd1\u540e\u7684PHP\u4e8c\u8fdb\u5236\u6587\u4ef6\u6253\u5305\u6210`runtime.zip`\u3002\n\u8fd0\u884c\u65f6\u5f15\u5bfc\u4f7f\u7528\u57fa\u4e8eHTTP\u7684\u672c\u5730\u63a5\u53e3\u3002\u8fd9\u5c06\u68c0\u7d22\u6bcf\u4e2aLambda\u51fd\u6570\u8c03\u7528\u7684\u4e8b\u4ef6\u6709\u6548\u8d1f\u8f7d\uff0c\u5e76\u8fd4\u56de\u51fd\u6570\u7684\u54cd\u5e94\u3002\u6b64\u5f15\u5bfc\u6587\u4ef6\u4f7f\u7528\u975e\u5e38\u6d41\u884c\u7684PHP HTTP\u5ba2\u6237\u7aefGUZLE\u5411\u81ea\u5b9a\u4e49\u8fd0\u884c\u65f6API\u53d1\u51fa\u8bf7\u6c42\u3002GUZLE\u8f6f\u4ef6\u5305\u662f\u4f7f\u7528Composer\u8f6f\u4ef6\u5305\u7ba1\u7406\u5668\u5b89\u88c5\u7684\u3002\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5b89\u88c5\u5305\u521b\u5efa\u4e86\u4e00\u79cd\u673a\u5236\uff0c\u7528\u4e8e\u968f\u7740\u5e94\u7528\u7a0b\u5e8f\u7684\u53d1\u5c55\u5408\u5e76\u5176\u4ed6\u5e93\u548c\u4f9d\u8d56\u9879\u3002\nLambda\u5c42\u63d0\u4f9b\u4e86\u4e00\u79cd\u96c6\u4e2d\u7ba1\u7406\u8de8\u591a\u4e2a\u529f\u80fd\u5171\u4eab\u7684\u4ee3\u7801\u548c\u6570\u636e\u7684\u673a\u5236\u3002\u5f53Lambda\u51fd\u6570\u914d\u7f6e\u4e86\u5c42\u65f6\uff0c\u5c42\u7684\u5185\u5bb9\u4f1a\u653e\u5165\u6267\u884c\u73af\u5883\u7684/opt\u76ee\u5f55\u4e2d\u3002\u60a8\u53ef\u4ee5\u5728\u51fd\u6570\u7684\u90e8\u7f72\u5305\u4e2d\u5305\u542b\u81ea\u5b9a\u4e49\u8fd0\u884c\u65f6\uff0c\u4e5f\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u5c42\u5305\u542b\u3002Lambda\u6267\u884c\u90e8\u7f72\u5305\u4e2d\u7684\u5f15\u5bfc\u6587\u4ef6(\u5982\u679c\u53ef\u7528)\u3002\u5982\u679c\u6ca1\u6709\uff0cLambda\u5c06\u5728\u51fd\u6570\u5c42\u4e2d\u67e5\u627e\u8fd0\u884c\u65f6\u3002\u76ee\u524d\u6709\u51e0\u4e2a\u5f00\u653e\u6e90\u7801PHP\u8fd0\u884c\u65f6\u5c42\u53ef\u7528\uff0c\u6700\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff1a\n\u4ee5\u4e0b\u6b65\u9aa4\u5c55\u793a\u4e86\u5982\u4f55\u5c06\u4e4b\u524d\u521b\u5efa\u7684`runtime.zip`\u548c`vendor.zip`\u4e8c\u8fdb\u5236\u6587\u4ef6\u53d1\u5e03\u5230Lambda\u5c42\uff0c\u5e76\u4f7f\u7528\u5b83\u4eec\u901a\u8fc7PHP\u8fd0\u884c\u65f6\u6784\u5efaLambda\u51fd\u6570\uff1a\n\u4f7f\u7528AWS\u547d\u4ee4\u884c\u754c\u9762(CLI)\u53d1\u5e03\u5148\u524d\u521b\u5efa\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u7684\u56fe\u5c42\u3002\n\u8bb0\u4e0b\u6bcf\u4e2a\u547d\u4ee4\u7684LayerVersionArn\u8f93\u51fa\u503c(\u4f8b\u5982\uff0c\u4e0b\u4e00\u6b65\u9700\u8981\u4f7f\u7528\u7684arn:aws:lambda:eu-west-1:XXXXXXXXXXXX:layer:PHP-example-runtime:1)\uff0c)\u3002\n\u60a8\u53ef\u4ee5\u901a\u8fc7AWS CLI\u3001AWS\u65e0\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u6a21\u578b(SAM)\u6216\u76f4\u63a5\u5728AWS\u7ba1\u7406\u63a7\u5236\u53f0\u4e2d\u521b\u5efaLambda\u51fd\u6570\u3002\u8981\u4f7f\u7528\u63a7\u5236\u53f0\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u8bf7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\u5728Function Name\u5b57\u6bb5\u4e2d\u8f93\u5165\u201cPHPHello\u201d\uff0c\u7136\u540e\u5728Runtime\u5b57\u6bb5\u4e2d\u9009\u62e9Provide Your Our Bootstrap\u3002\u7136\u540e\u9009\u62e9\u521b\u5efa\u51fd\u6570\u3002\n\u9009\u62e9\u63d0\u4f9b\u5c42\u7248\u672cARN\uff0c\u7136\u540e\u5c06\u6b65\u9aa41\u4e2d\u7684\u81ea\u5b9a\u4e49\u8fd0\u884c\u65f6\u5c42\u7684ARN\u590d\u5236\u5e76\u7c98\u8d34\u5230\u5c42\u7248\u672cARN\u5b57\u6bb5\u4e2d\u3002\n\u5728function Code\u90e8\u5206\uff0c\u521b\u5efa\u4e00\u4e2a\u540d\u4e3asrc\u7684\u65b0\u6587\u4ef6\u5939\uff0c\u5e76\u5728\u5176\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3aindex.php\u7684\u65b0\u6587\u4ef6\u3002\n\u5728\u5904\u7406\u7a0b\u5e8f\u8f93\u5165\u5b57\u6bb5\u4e2d\u63d2\u5165\u201cindex\u201d\u3002\u8fd9\u5c06\u6307\u793aLambda\u5728\u8c03\u7528\u65f6\u8fd0\u884c\u7d22\u5f15\u51fd\u6570\u3002\n\u9009\u62e9\u9875\u9762\u53f3\u4e0a\u89d2\u7684Test\uff0c\u5728Event Name\u5b57\u6bb5\u4e2d\u8f93\u5165\u201cPHPTest\u201d\u3002\u5728\u4e8b\u4ef6\u6709\u6548\u8d1f\u8f7d\u5b57\u6bb5\u4e2d\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9\uff0c\u7136\u540e\u9009\u62e9\u521b\u5efa\uff1a{&#34\uff1bname&#34\uff1b\uff1a&#34\uff1bworld&#34\uff1b}\u3002\n\u60a8\u53ef\u4ee5\u770b\u5230\uff0c\u4e8b\u4ef6\u8d1f\u8f7d\u201cname\u201d\u503c\u7528\u4e8e\u8fd4\u56de\u201chello world\u201d\u3002\u5b83\u53d6\u81ea\u63d0\u4f9b\u7ed9lambda\u51fd\u6570\u7684$data[&#39\uff1bname&#39\uff1b]\u53c2\u6570\u3002\u65e5\u5fd7\u8f93\u51fa\u63d0\u4f9b\u6709\u5173\u7528\u4e8e\u6267\u884c\u4ee3\u7801\u7684\u5b9e\u9645\u6301\u7eed\u65f6\u95f4\u3001\u8ba1\u8d39\u6301\u7eed\u65f6\u95f4\u548c\u5185\u5b58\u91cf\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u89e3\u91ca\u4e86\u5982\u4f55\u4f7f\u7528Lambda\u5c42\u548c\u81ea\u5b9a\u4e49\u8fd0\u884c\u65f6API\u5728PHP\u8fd0\u884c\u65f6\u521b\u5efaLambda\u51fd\u6570\u3002\u5b83\u4ecb\u7ecd\u4e86\u53ef\u968f\u5e94\u7528\u6d41\u91cf\u6269\u5c55\u7684\u65e0\u670d\u52a1\u5668LAMP\u5806\u6808\u7684\u67b6\u6784\u3002\nLambda\u5141\u8bb8\u5177\u6709\u6df7\u5408\u8fd0\u884c\u65f6\u7684\u51fd\u6570\u76f8\u4e92\u4ea4\u4e92\u3002\u73b0\u5728\uff0cPHP\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u52a0\u5165\u5176\u4ed6\u4e13\u6ce8\u4e8e\u4ea4\u4ed8\u4ee3\u7801\u7684\u65e0\u670d\u52a1\u5668\u5f00\u53d1\u56e2\u961f\u3002\u6709\u4e86\u65e0\u670d\u52a1\u5668\u6280\u672f\uff0c\u60a8\u4e0d\u518d\u9700\u8981\u8003\u8651\u91cd\u542f\u7f51\u7edc\u4e3b\u673a\u3001\u6269\u5c55\u6216\u6258\u7ba1\u3002", "note_en": "This is the first in a series of posts for PHP developers. The series will explain how to use serverless technologies with PHP. It covers the available tools, frameworks and strategies to build serverless applications, and why now is the right time to start.\n  In future posts, I demonstrate how to use  AWS Lambda for web applications built with PHP frameworks such as  Laravel and  Symfony. I show how to move from using Lambda as a replacement for web hosting functionality to a decoupled, event-driven approach. I cover how to combine multiple Lambda functions of minimal scope with other serverless services to create performant scalable microservices.\n  In this post, you learn how to use PHP with Lambda via the custom runtime API. Visit this  GitHub repository for the sample code.\n      Scalability is an inherent challenge with the traditional LAMP stack. A scalable application is one that can handle highly variable levels of traffic. PHP applications are often scaled horizontally, by adding more web servers as needed. This is managed via a load balancer, which directs requests to various web servers. Each additional server brings additional overhead with networking, administration, storage capacity, backup and restore systems, and an update to asset management inventories. Additionally, each horizontally scaled server runs independently. This can result in configuration synchronization challenges.\n    New storage challenges arise as each server has its own disks and filesystem, often requiring developers to add a mechanism to handle user sessions. Using serverless technologies, scalability is managed for the developer.\n  If traffic surges, the services scale to meet the demand without having to deploy additional servers. This allows applications to quickly transition from prototype to production.\n            All requests for dynamic content (anything excluding /assets/*) are forwarded to Amazon API Gateway. This is a fully managed service for creating, publishing, and securing APIs at any scale. It acts as the \u201cfront door\u201d to the PHP application, routing requests downstream to Lambda functions. The Lambda functions contain the business logic and interaction with the MySQL database. You can pass the input to the Lambda function as any combination of request headers, path variables, query string parameters, and body.\n      During re:Invent 2017, AWS announced Aurora Serverless, an on-demand serverless relational database with a pay-per-use cost model. This manages the responsibility of relational database provisioning and scaling for the developer.\n    At re:Invent 2018, AWS announced two new Lambda features. These enable developers to build custom runtimes, and share and manage common code between functions.\n    In September 2019, AWS announced significant\u00a0 improvements in cold starts for Lambda functions inside a VPC.\u00a0This results in faster function startup performance and more efficient usage of elastic network interfaces, reducing VPC cold starts.\n    At re:Invent 2019, AWS announced the launch of a new service called Amazon RDS Proxy. A fully managed database proxy that sits between your application and your relational database. It efficiently pools and shares database connections to improve the scalability of your application.\n      Combining these services, it is possible to build secure and performant scalable serverless applications with PHP and relational databases.\n    The custom runtime API is a simple interface to enable Lambda function execution in any programming language or a specific language version. The custom runtime API requires an executable text file called a bootstrap. The bootstrap file is responsible for the communication between your code and the Lambda environment.\n  To create a custom runtime, you must first compile the required version of PHP in an Amazon Linux environment compatible with the  Lambda execution environment. To do this, follow  these step-by-step instructions.\n    The file below is an example of a basic PHP bootstrap file. This example is for explanation purposes as there is no error handling or abstractions taking place. To ensure that you handle exceptions appropriately, consult the\u00a0 runtime API documentation\u00a0as you build production custom runtimes.\n  #!/opt/bin/php\r&lt;?PHP\r\r// This invokes Composer&#39;s autoloader so that we&#39;ll be able to use Guzzle and any other 3rd party libraries we need.\rrequire __DIR__ . &#39;/vendor/autoload.php;\r\r// This is the request processing loop. Barring unrecoverable failure, this loop runs until the environment shuts down.\rdo {\r // Ask the runtime API for a request to handle.\r $request = getNextRequest();\r\r // Obtain the function name from the _HANDLER environment variable and ensure the function&#39;s code is available.\r $handlerFunction = array_slice(explode(&#39;.&#39;, $_ENV[&#39;_HANDLER&#39;]), -1)[0];\r require_once $_ENV[&#39;LAMBDA_TASK_ROOT&#39;] . &#39;/src/&#39; . $handlerFunction . &#39;.php;\r\r // Execute the desired function and obtain the response.\r $response = $handlerFunction($request[&#39;payload&#39;]);\r\r // Submit the response back to the runtime API.\r sendResponse($request[&#39;invocationId&#39;], $response);\r} while (true);\r\rfunction getNextRequest()\r{\r $client = new \\GuzzleHttp\\Client();\r $response = $client-&gt;get(&#39;http://&#39; . $_ENV[&#39;AWS_LAMBDA_RUNTIME_API&#39;] . &#39;/2018-06-01/runtime/invocation/next&#39;);\r\r return [\r &#39;invocationId&#39; =&gt; $response-&gt;getHeader(&#39;Lambda-Runtime-Aws-Request-Id&#39;)[0],\r &#39;payload&#39; =&gt; json_decode((string) $response-&gt;getBody(), true)\r ];\r}\r\rfunction sendResponse($invocationId, $response)\r{\r $client = new \\GuzzleHttp\\Client();\r $client-&gt;post(\r &#39;http://&#39; . $_ENV[&#39;AWS_LAMBDA_RUNTIME_API&#39;] . &#39;/2018-06-01/runtime/invocation/&#39; . $invocationId . &#39;/response&#39;,\r [&#39;body&#39; =&gt; $response]\r );\r}\n  The  #!/opt/bin/php declaration instructs the program loader to use the PHP binary compiled for Amazon Linux.\n      Follow these steps to package the bootstrap and compiled PHP binary together into a `runtime.zip`.\n    The runtime bootstrap uses an HTTP-based local interface. This retrieves the event payload for each Lambda function invocation and returns back the response from the function. This bootstrap file uses  Guzzle, a\u00a0popular PHP HTTP client, to make requests to the custom runtime API. The Guzzle package is installed using  Composer\u00a0package manager. Installing packages in this way creates a mechanism for incorporating additional libraries and dependencies as the application evolves.\n    Lambda Layers provides a mechanism to centrally manage code and data that is shared across multiple functions. When a Lambda function is configured with a layer, the layer\u2019s contents are put into the /opt directory of the execution environment. You can include a custom runtime in your function\u2019s deployment package, or as a layer. Lambda executes the bootstrap file in your deployment package, if available. If not, Lambda looks for a runtime in the function\u2019s layers. There are several open source PHP runtime layers available today, most notably:\n    The following steps show how to publish the `runtime.zip` and `vendor.zip` binaries created earlier into Lambda layers and use them to build a Lambda function with a PHP runtime:\n  Use the  AWS Command Line Interface (CLI) to publish layers from the binaries created earlier\n  Make note of each command\u2019s LayerVersionArn output value (for example  arn:aws:lambda:eu-west-1:XXXXXXXXXXXX:layer:PHP-example-runtime:1), which you\u2019ll need for the next steps.\n    You can create a Lambda function via the AWS CLI, the  AWS Serverless Application Model (SAM), or directly in the  AWS Management Console. To do this using the console:\n  Enter \u201c PHPHello\u201d into the  Function name field, and choose  Provide your own bootstrap in the  Runtime field. Then choose  Create function.\n      Choose  Provide a layer version ARN, then copy and paste the ARN of the custom runtime layer from in step 1 into the  Layer version ARN field.\n    In the  Function Code section, create a new folder called  src and inside it create a new file called  index.php.\n    Insert \u201c index\u201d into the  Handler input field. This instructs Lambda to run the index function when invoked.\n    Choose  Test at the top right of the page, and \u00a0enter \u201c PHPTest\u201d into the  Event name field. Enter the following into the event payload field and then choose  Create: {\u00a0&#34;name&#34;: &#34;world&#34;}\n    You can see that the event payload \u201c name\u201d value is used to return \u201c hello world\u201d. This is taken from the  $data[&#39;name&#39;] parameter provided to the Lambda function. The log output provides details about the actual duration, billed duration, and amount of memory used to execute the code.\n    This post explains how to create a Lambda function with a PHP runtime using Lambda Layers and the custom runtime API. It introduces the architecture for a serverless LAMP stack that scales with application traffic.\n  Lambda allows for functions with mixed runtimes to interact with each other. Now, PHP developers can join other serverless development teams focusing on shipping code. With serverless technologies, you no longer have to think about restarting webhosts, scaling or hosting.", "posttime": "2020-06-15 00:58:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u670d\u52a1\u5668,lamp,php", "title": "\u65e0\u670d\u52a1\u5668\u706f\u5806", "title_en": "Serverless LAMP stack", "transed": 1, "url": "https://aws.amazon.com/blogs/compute/introducing-the-new-serverless-lamp-stack/", "via": "", "real_tags": ["\u670d\u52a1\u5668", "lamp", "php"]}, {"category": "", "categoryclass": "", "imagename": "33016fdcc4d7c4ae9e610775bb2daae2.jpg", "infoid": 1006545, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u4efb\u5929\u5802\u5386\u53f2\u7684\u5934\u51e0\u5341\u5e74\u91cc\uff0c\u8be5\u516c\u53f8\u901a\u8fc7\u81ea\u52a8\u5316\u82b1\u53d1\u548c\u897f\u5f0f\u6251\u514b\u724c\u7684\u5236\u9020\uff0c\u4ee5\u53ca\u6269\u5927\u5176\u5728\u65e5\u672c\u5404\u5730\u7684\u9500\u552e\u548c\u5206\u9500\u7f51\u7edc\uff0c\u5b9e\u73b0\u4e86\u589e\u957f\u3002\u867d\u7136\u751f\u4ea7\u8fc7\u7a0b\u5728\u8fd9\u6bb5\u65f6\u95f4\u91cc\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u4f46\u4ea7\u54c1\u672c\u8eab\u5927\u4f53\u4e0a\u4fdd\u6301\u4e0d\u53d8\uff1a\u6253\u5370\u7684\u7eb8\u5361\u3002\u5728\u8be5\u516c\u53f81889\u5e74\u6210\u7acb60\u591a\u5e74\u540e\uff0c\u7b2c\u4e00\u6b21\u91cd\u5927\u7684\u4ea7\u54c1\u521b\u65b0\u53d1\u751f\u572820\u4e16\u7eaa50\u5e74\u4ee3\u521d\u3002\u6839\u636e\u4efb\u5929\u5802\u516c\u53f8\u7f51\u7ad9\u4e0a\u7684\u65f6\u95f4\u8868\uff0c1953\u5e74\uff0c\u4efb\u5929\u5802\u6210\u529f\u5236\u9020\u4e86\u65e5\u672c\u7b2c\u4e00\u5f20\u5851\u6599\u6251\u514b\u724c\uff0c\u5e76\u5f00\u59cb\u6279\u91cf\u751f\u4ea7\u3002\u8fd9\u4e00\u91cc\u7a0b\u7891\u662f\u5728\u4efb\u5929\u5802\u521b\u59cb\u4eba\u5c71\u5185\u9686\u5f18(Fusajiro Yamuchi)\u7684\u66fe\u5b59\u300121\u5c81\u7684\u5c71\u5185\u5f18(Hiroshi Yamuchi)\u6267\u638c\u4efb\u5929\u5802\u793e\u957f\u56db\u5e74\u540e\u5b9e\u73b0\u7684\u3002\u8fd9\u4e00\u91cc\u7a0b\u7891\u662f\u5728\u4efb\u5929\u5802\u521b\u59cb\u4eba\u5c71\u5185\u89c4\u4e45(Fusajiro Yamuchi)\u7684\u66fe\u5b59\u300121\u5c81\u7684\u5c71\u5185\u5f18(Hiroshi Yamuchi)\u6267\u638c\u4efb\u5929\u5802\u793e\u957f\u56db\u5e74\u540e\u5b9e\u73b0\u7684\u3002\u57281953\u5e74\u81ea\u8c6a\u5730\u63a8\u51fa\u4e4b\u524d\uff0c\u4efb\u5929\u5802\u82b1\u4e86\u76f8\u5f53\u591a\u7684\u7cbe\u529b\u548c\u65f6\u95f4\u6765\u638c\u63e1\u751f\u4ea7\u8fd9\u4e9b\u5851\u6599\u5361\u7247\u6240\u9700\u7684\u5de5\u827a\uff0c\u56e0\u4e3a\u5728\u5851\u6599\u4e0a\u6253\u5370\u4e0e\u5728\u7eb8\u4e0a\u6253\u5370\u6709\u5f88\u5927\u7684\u4e0d\u540c\uff0c\u800c\u4e14\u5f88\u96be\u6253\u5370\u51fa\u4e00\u81f4\u7684\u989c\u8272\u3002\u8fd9\u91cc\u5c55\u793a\u7684\u4f20\u5355\u662f\u6700\u65e9\u9500\u552e\u8fd9\u4e00\u65b0\u4ea7\u54c1\u7684\u5546\u4e1a\u51fa\u7248\u7269\u4e4b\u4e00\u3002\u4efb\u5929\u5802\u5c06\u8fd9\u4e9b\u5851\u6599\u6251\u514b\u724c\u6253\u4e0a\u4e86NAP&34\uff1b\u724c\u7684\u70d9\u5370\uff0c\u8fd9\u662f\u4efb\u5929\u5802\u5168\u5851\u6599\u7684\u610f\u601d\u3002\u5728\u4f20\u5355\u4e2d\uff0c\u5348\u7761\u5361\u7247\u88ab\u5439\u6367\u4e3a\u6251\u514b\u724c\u884c\u4e1a\u7684\u4e00\u573a\u9769\u547d\uff0c\u6bd4\u7eb8\u724c\u66f4\u8010\u7528\u3001\u66f4\u536b\u751f\u3002\u5ba3\u4f20\u5355\u5c55\u793a\u4e86\u8fd9\u4e00\u65b0\u4ea7\u54c1\u7cfb\u5217\u7684\u524d\u56db\u4e2a\u5361\u7247\u8bbe\u8ba1\uff0c\u4ea7\u54c1\u4ee3\u7801\u4e3aNAP1&#34\uff1b\u5230NAP4&#34\uff1b\u7684\u4ea7\u54c1\u4ee3\u53f7\u4e3a&#34\uff1bNAP1&#34\uff1b\u81f3&#34\uff1bNAP4&#34\uff1b\u3002\u6700\u7ec8\uff0c\u4e0d\u540c\u7684\u5348\u7761\u8bbe\u8ba1\u5c06\u8fbe\u5230\u6570\u767e\u79cd\u751a\u81f3\u6570\u5343\u79cd\u3002\u5e7f\u544a\u4e2d\u5ba3\u4f20\u7684\u4e3b\u8981\u4ea7\u54c1\u7279\u70b9\u662f\u5361\u7247\u662f\u53ef\u4ee5\u6d17\u7684\u3002\u524d\u9762\u7684\u56fe\u50cf\u8fd8\u663e\u793a\u4e86\u4e00\u5f20\u6df9\u6ca1\u5728\u6c34\u4e2d\u7684\u5361\u7247\uff0c\u5c3d\u7ba1\u6211\u6000\u7591\u662f\u5426\u6709\u5f88\u591a\u4eba\u771f\u7684\u4f1a\u5b9a\u671f\u51b2\u6d17\u4ed6\u4eec\u7684\u7eb8\u724c\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5361\u7247\u662f\u5851\u6599\u7684\uff0c\u6240\u4ee5\u5b83\u4eec\u786e\u5b9e\u5438\u5f15\u7684\u6ce5\u571f\u8f83\u5c11\uff0c\u6495\u88c2\u548c\u6298\u53e0\u7684\u96be\u5ea6\u4e5f\u8f83\u5c0f\u3002\u56e0\u6b64\uff0c\u603b\u4f53\u800c\u8a00\uff0c\u786e\u5b9e\u662f\u4e00\u4e2a\u597d\u5f97\u591a\u7684\u4ea7\u54c1\u3002\u8fd9\u4e9b\u5361\u7684\u5236\u4f5c\u6210\u672c\u66f4\u9ad8\uff0c\u800c\u4e14\u53ef\u80fd\u4f1a\u8981\u6c42\u66f4\u9ad8\u7684\u96f6\u552e\u4ef7\uff0c\u8fd9\u662f\u516c\u4f17\u613f\u610f\u4e3a\u8fd9\u4e9b\u8d28\u91cf\u66f4\u597d\u7684\u5361\u652f\u4ed8\u7684\u4ef7\u683c\u3002\u5c3d\u7ba1\u4efb\u5929\u5802\u4e5f\u7ee7\u7eed\u751f\u4ea7\u7eb8\u8d28\u6251\u514b\u724c\uff0c\u4f46\u4f5c\u4e3a\u4e00\u79cd\u4e3b\u8981\u9488\u5bf9\u513f\u7ae5\u7684\u5ec9\u4ef7\u7eb8\u724c\u53d8\u79cd\uff0c\u5851\u6599\u7eb8\u724c\u9010\u6e10\u6210\u4e3a\u6807\u51c6\u3002\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5341\u5e74\u91cc\uff0c\u4efb\u5929\u5802\u7ee7\u7eed\u4f7f\u7528\u5168\u5851\u6599\u548cNap\u54c1\u724c\uff0c\u4ece\u4e0b\u9762\u5206\u522b\u4ece20\u4e16\u7eaa70\u5e74\u4ee3\u548c80\u5e74\u4ee3\u7684\u4f20\u5355\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e00\u70b9\u3002\u56de\u523020\u4e16\u7eaa50\u5e74\u4ee3\u7684\u4ecb\u7ecd\u4f20\u5355\u4e0a\uff0c\u6211\u4eec\u770b\u5230\u80cc\u9762\u662f\u5f53\u65f6\u4f7f\u7528\u7684\u516c\u53f8\u5168\u79f0\uff1a\u4efb\u5929\u5802\u9aa8\u724c\u682a\u5f0f\u4f1a\u793e(Nvenant\u014d\u548cKoppai Kopushikigaisha)\uff0c\u7ffb\u8bd1\u8fc7\u6765\u5c31\u662f\u4efb\u5929\u5802\u6251\u514b\u724c\u516c\u53f8\uff0c\u80cc\u9762\u8fd8\u6709\u4e00\u5957\u8fd9\u4e9b\u65b0\u7684\u4efb\u5929\u5802\u5168\u5851\u6599\u5361\u7247\uff0c\u6070\u5982\u5176\u5206\u5730\u7528\u900f\u660e\u5851\u6599\u5305\u88c5\u3002\u8fd9\u4e9b\u5851\u6599\u7eb8\u724c\u7684\u63a8\u51fa\u8fdb\u4e00\u6b65\u5de9\u56fa\u4e86\u4efb\u5929\u5802\u4f5c\u4e3a\u65e5\u672c\u5934\u53f7\u6251\u514b\u724c\u5236\u9020\u5546\u7684\u5730\u4f4d\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u8fd9\u662f\u5c71\u5185\u5e7f\u53f2(Hiroshi Yamuchi)\u5e26\u5934\u8fdb\u884c\u7684\u7b2c\u4e00\u6b21\u4ea7\u54c1\u521b\u65b0\uff0c\u56e0\u4e3a\u4ed6\u5f00\u59cb\u5e26\u9886\u516c\u53f8\u8d70\u5411\u8fdb\u4e00\u6b65\u7684\u589e\u957f\u3002\u5728\u62c5\u4efb\u4efb\u5929\u5802\u603b\u88c1\u768450\u5e74\u91cc\uff0c\u4ed6\u8d70\u7684\u662f\u4e00\u6761\u8fd8\u6709\u66f4\u591a\u65b0\u4ea7\u54c1\u548c\u521b\u65b0\u7684\u9053\u8def\uff0c\u6700\u7ec8\u57282002\u5e74\u5c06\u8fd9\u4e00\u804c\u4f4d\u79fb\u4ea4\u7ed9\u4e86\u5ca9\u7530\u806a(Satoru Iwata)\u3002\u8fd8\u53ef\u4ee5\u67e5\u770b\u4e4b\u524d\u7684\u535a\u5ba2\u5e16\u5b50\uff0c\u5176\u4e2d\u5305\u62ec20\u4e16\u7eaa60\u5e74\u4ee3\u672b\u7684\u4efb\u5929\u5802\u5361\u7247\u6837\u4e66\u300120\u4e16\u7eaa70\u5e74\u4ee3\u7684\u514d\u8d39\u4f20\u5355\u548c1983\u5e74\u7684\u5c0f\u518c\u5b50\u3002\u975e\u5e38\u611f\u8c22Fabrice Heilig\u548cIsao Yamazaki\u5e2e\u52a9\u5b9a\u4f4d\u548c\u626b\u63cfNAP\u6587\u4ef6\u3002", "note_en": "In the first decades of Nintendo&#39;s history, the company grew by automating the manufacturing of  hanafuda and Western style playing cards, and by expanding its sales and distribution network throughout Japan.  Although the production process changed during this time, the product itself remained more or less the same: printed paper cards.  It was over sixty years after the company&#39;s start in 1889, that the first major product innovation happened, in the early 1950s. According to the\u00a0 timeline on Nintendo&#39;s corporate website, in 1953 they\u00a0 &#34;Succeeded in manufacturing Japan&#39;s first plastic playing cards and started mass production.&#34;    This milestone was reached four years after a 21 year old  Hiroshi Yamauchi, the great-grandson of founder  Fusajiro Yamauchi, took the helm as Nintendo&#39;s president.  Before the proud introduction in 1953, it had taken Nintendo quite some effort and time to get to grips with the process necessary to produce these plastic cards, as the printing on plastic was very different from printing on paper, and it was difficult to print colours consistently.  The leaflet shown here is one of the earliest commercial publications that marketed this new product.     Nintendo branded these plastic playing cards as &#34;NAP&#34; cards, which stood for  Nintendo All Plastic.    In the leaflet, the NAP card is touted as a revolution in the playing card industry, being more durable and hygienic than paper cards.  The leaflet shows the first four card designs in this new product range, with product codes &#34;NAP 1&#34; to &#34;NAP 4&#34;. Eventually, the number of different &#34;NAP&#34; designs would count into the hundreds or even thousands.    The main product characteristic that is advertised is the fact that the cards are washable. The image on the front also show a card submerged in water, although I doubt whether many people actually would regularly rinse their decks of cards.  Still, because these cards were plastic they did attract less dirt and where less pone to tearing and folding. So indeed, overall a much better product.  The cards were more expensive to make, and could command a related higher retail price, which the public was willing to pay for these better quality cards.    Although Nintendo also continued to produce paper playing cards, as a cheaper variant used for cards aimed mainly at childeren, the plastic cards gradually became the standard.  In the decades that followed, Nintendo continued to use the &#34;all plastic&#34; and NAP branding, as can be seen from the leaflets below from the 1970s and 1980-s, respectively.      Returning to the 1950s introductory leaflet, on the back we see the full company name as used at that time: \u00a0\u4efb\u5929\u5802\u9aa8\u724c\u682a\u5f0f\u4f1a\u793e (Nintend\u014d\u00a0Koppai Kabushikigaisha) which translated to Nintendo Playing Card Co.    Also pictured on the back is a set of these new  Nintendo All Plastic cards, that came appropriately in transparent plastic packaging.    The introduction of these plastic cards further cemented Nintendo&#39;s position as the premiere manufacturer of playing cards in Japan. More importantly, it was first product innovation spearheaded by  Hiroshi Yamauchi, as he started directing the company towards further growth. A path with many more new products and innovations still to come in the fifty years he was Nintendo&#39;s president, before eventually handing over that role to\u00a0 Satoru Iwata\u00a0in 2002.  Also check out the previous blog posts featuring the  Nintendo card sample book from the late 1960s, a\u00a0 leaflet from the 1970s and the  brochure from 1983.  Many thanks to  Fabrice Heilig and  Isao Yamazaki for helping to locate and scan the NAP document.", "posttime": "2020-06-15 00:57:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4efb\u5929\u5802,\u53ef\u6d17,washable", "title": "\u4efb\u5929\u58021953\u5e74\u63a8\u51fa\u7684\u53ef\u6d17\u6251\u514b\u724c", "title_en": "Nintendo's washable playing cards from 1953", "transed": 1, "url": "http://blog.beforemario.com/2020/06/nintendos-washable-playing-cards-from.html", "via": "", "real_tags": ["\u4efb\u5929\u5802", "\u53ef\u6d17", "washable"]}, {"category": "", "categoryclass": "", "imagename": "7fd497f8122ffd92bf22c3a4fd7aff79.png", "infoid": 1006544, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u7535\u89c6\u548c\u6587\u5b66\u4e2d\u7684\u8bb8\u591a\u6bd4\u55bb\u4e2d\uff0c\u95f4\u8c0d\u6d3b\u52a8\u5bf9\u89c2\u4f17\u548c\u8bfb\u8005\u6765\u8bf4\u90fd\u662f\u4e00\u79cd\u523a\u6fc0\u620f\u5267\u6027\u548c\u9634\u8c0b\u7684\u6bd4\u55bb\u3002\u521d\u9732\u5934\u89d2\u7684\u4e3b\u4eba\u516c\u60f3\u8981\u5728\u4fe1\u6216\u77ed\u4fe1\u4e2d\u4f20\u8fbe\u4e00\u4e2a\u79d8\u5bc6\u4fe1\u606f\uff0c\u4f46\u5fc5\u987b\u5982\u6b64\u8c28\u614e\u5730\u6270\u4e71\u4fe1\u606f\uff0c\u4ee5\u907f\u514d\u70ed\u5207\u7684\u654c\u624b\u7684\u6ce8\u89c6\u3002\u6d88\u606f\u4f1a\u5b89\u5168\u5730\u53d1\u9001\u5417\uff1f\u60ac\u5ff5\u603b\u662f\u81f4\u547d\u7684\u3002\n\u4f20\u9012\u8fd9\u7c7b\u4fe1\u606f\u7684\u4e00\u79cd\u610f\u60f3\u4e0d\u5230\u7684\u5f62\u5f0f\u662f\u901a\u8fc7\u97f3\u4e50\u3002\u5b83\u66f4\u4e3a\u4eba\u6240\u77e5\u7684\u662f\u97f3\u4e50\u5bc6\u7801\u672f\uff0c\u8fd9\u662f\u4e00\u79cd\u4f7f\u7528\u97f3\u7b26A\u5230G\u62fc\u5199\u5355\u8bcd\u3001\u7f29\u5199\u6216\u4ee3\u7801\u7684\u65b9\u6cd5\u3002\n\u8fd9\u79cd\u79d8\u5bc6\u5199\u4f5c\u51fa\u73b0\u5728\u7535\u89c6\u5267\u4e2d\uff0c\u6bd4\u5982\u4ee5\u82cf\u683c\u5170\u4e3a\u80cc\u666f\u768418\u4e16\u7eaa\u65f6\u7a7a\u7a7f\u68ad\u5267\u201c\u5916\u661f\u4eba\u201d\uff0c\u4ee5\u53ca\u201c\u767d\u73ab\u7470\u7684\u79d8\u5bc6\u201d\u7b49\u60ac\u7591\u5c0f\u8bf4\u3002\u201c\u767d\u73ab\u7470\u7684\u79d8\u5bc6\u201d\u4e2d\u7684\u4eba\u7269\u4f7f\u7528\u97f3\u4e50\u5bc6\u7801\u4f5c\u4e3a\u65e0\u6cd5\u5bdf\u89c9\u7684\u95f4\u8c0d\u6216\u4ea4\u6d41\u65b9\u5f0f\u3002\n\u4f8b\u5982\uff0c\u5728\u7b2c\u4e8c\u5b63\u7684\u201c\u6709\u7528\u7684\u804c\u4e1a\u548c\u6b3a\u9a97\u201d\u4e2d\uff0c\u4e3b\u4eba\u516c\u6770\u7c73(Jamie)\u548c\u514b\u83b1\u5c14(Claire)\u622a\u83b7\u4e86\u67e5\u5c14\u65af\u00b7\u7231\u5fb7\u534e\u00b7\u65af\u56fe\u5c14\u7279\u738b\u5b50(Prince Charles Edward Stuart)\u7684\u4e00\u5c01\u4fe1\uff0c\u4fe1\u4e2d\u8fd8\u5305\u62ec\u4e00\u9875\u4ece\u82f1\u56fd\u5bc4\u6765\u7684\u5fb7\u56fd\u4e50\u8c31\u3002\u7b28\u62d9\u7684\u97f3\u4e50\u5305\u542b\u51e0\u4e4e\u4e0e\u5df4\u8d6b\u7684\u201c\u6208\u5fb7\u5821\u53d8\u594f\u66f2\u201d\u76f8\u540c\u7684\u65cb\u5f8b\uff0c\u4f46\u6709\u4e94\u6b21\u968f\u673a\u7684\u97f3\u8c03\u53d8\u5316\uff0c\u6839\u636e\u6f14\u594f\u97f3\u4e50\u7684\u5927\u5e08\u4fee\u5973\u7684\u8bf4\u6cd5\uff0c\u8fd9\u6bd4\u5f80\u5e38\u66f4\u591a\u3002\u5f53\u6770\u7c73\u7834\u8bd1\u65f6\uff0c\u97f3\u4e50\u952e\u7684\u9510\u5ea6\u548c\u964d\u8c03\u63ed\u793a\u4e86\u4e00\u4e2a\u4fe1\u606f\uff0c\u5373\u65af\u56fe\u5c14\u7279\u738b\u5b50\u6253\u7b97\u4ece\u6770\u7c73\u548c\u514b\u83b1\u5c14\u7684\u6b7b\u5bf9\u5934\u6851\u5fb7\u6797\u5384\u59c6\u516c\u7235\u4ee5\u53ca\u5176\u4ed6\u51e0\u4e2a\u82f1\u56fd\u9634\u8c0b\u5bb6\u624b\u4e2d\u62ff\u51fa4\u4e07\u82f1\u9551\uff0c\u4e3a\u593a\u56de\u738b\u4f4d\u800c\u53d1\u52a8\u4e00\u573a\u6218\u4e89\u3002\u8fd9\u79cd\u6709\u8bf4\u670d\u529b\u7684\u573a\u666f\u8ba9\u4eba\u6000\u7591\u97f3\u4e50\u5bc6\u7801\u5b66\u662f\u5426\u662f\u4e00\u79cd\u771f\u6b63\u7684\u95f4\u8c0d\u6280\u672f\u3002\n17\u4e16\u7eaa\u548c18\u4e16\u7eaa\u65e9\u671f\u7684\u6570\u5b66\u5bb6\u548c\u5bc6\u7801\u5b66\u5bb6\u7ea6\u7ff0\u00b7\u5a01\u5c14\u91d1\u65af(John Wilkins)\u548c\u83f2\u5229\u666e\u00b7\u8482\u514b\u5c3c\u65af(Philip Thicknesse)\u8ba4\u4e3a\uff0c\u97f3\u4e50\u5bc6\u7801\u5b66\u662f\u4f20\u8f93\u79d8\u5bc6\u4fe1\u606f\u7684\u6700\u795e\u79d8\u7684\u65b9\u5f0f\u4e4b\u4e00\u3002\u4ed6\u4eec\u58f0\u79f0\u97f3\u4e50\u662f\u5b8c\u7f8e\u7684\u4f2a\u88c5\uff0c\u56e0\u4e3a\u95f4\u8c0d\u6c38\u8fdc\u4e0d\u4f1a\u6000\u7591\u97f3\u4e50\u3002\u5f53\u64ad\u653e\u65f6\uff0c\u97f3\u4e50\u542c\u8d77\u6765\u975e\u5e38\u50cf\u4efb\u4f55\u5176\u4ed6\u7684\u4f5c\u54c1\uff0c\u4ee5\u81f3\u4e8e\u53d7\u8fc7\u97f3\u4e50\u8bad\u7ec3\u7684\u542c\u4f17\u4e5f\u5f88\u5bb9\u6613\u88ab\u611a\u5f04\u3002\u63d0\u514b\u6069\u65af\u5728\u4ed61772\u5e74\u51fa\u7248\u7684\u8457\u4f5c\u201c\u7834\u8bd1\u7684\u827a\u672f\u201d\u548c\u201c\u7528Cypher\u5199\u4f5c\uff1a\u7528\u548c\u58f0\u5b57\u6bcd\u8868\u201d\u4e2d\u5199\u9053\uff0c\u201c\u8c01\u5728\u68c0\u67e5\u8fc7\u4e00\u4e2a\u7591\u4f3c\u4fe1\u4f7f\u7684\u65f6\u5019\uff0c\u4f1a\u60f3\u5230\u4e00\u9996\u53e4\u8001\u7684\u6b4c\uff0c\u91cc\u9762\u53ef\u80fd\u653e\u7740\u4fe1\u4f7f\u7684\u70df\u8349\u6216\u9f3b\u70df\uff0c\u5374\u5305\u542b\u7740\u4ed6\u8981\u4f20\u8fbe\u7684\u79d8\u5bc6\u5462\uff1f\u201d\u4e66\u4fe1\u6ca1\u6709\u8fd9\u4e2a\u4f18\u52bf\u3002\n\u4ed6\u8865\u5145\u8bf4\uff0c\u201c\u6211\u76f8\u4fe1\u97f3\u7b26\u7684\u5b57\u6bcd\u8868\u53ef\u80fd\u662f\u7cbe\u5fc3\u8bbe\u8ba1\u7684\uff0c\u8fd9\u4e9b\u97f3\u7b26\u4e0d\u4ec5\u8981\u4f20\u8fbe\u548c\u58f0\uff0c\u800c\u4e14\u8981\u4f20\u8fbe\u6b4c\u66f2\u7684\u6bcf\u4e00\u4e2a\u5b57\uff0c\u8fd9\u6837\u97f3\u4e50\u5927\u5e08\u2026\u5c31\u80fd\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u201d\u53ef\u80fd\u4f1a\u6559\u4ed6\u7684\u5973\u5b66\u751f\uff0c\u4e0d\u4ec5\u8981\u5982\u4f55\u5f39\u594f\u4e50\u5668\uff0c\u8fd8\u8981\u540c\u65f6\u6559\u4f1a\u50bb\u5b50\u3002\u201c\u3002\n\u8482\u514b\u5185\u65af\u521b\u9020\u4e86\u4e00\u79cd\u52a0\u5bc6\u7cfb\u7edf\uff0c\u4f7f\u7528\u5e26\u6709\u9ad8\u97f3\u63d0\u793a\u7b26\u548c\u94a5\u5319\u7b7e\u540d\u768425\u5206\u534a\u97f3\u7b26\u3002\u4ed6\u58f0\u79f0\uff0c\u4ed6\u7684\u8c10\u97f3\u5b57\u6bcd\u8868\u786e\u4fdd\u4e86\u5f3a\u5927\u7684\u52a0\u5bc6\uff0c\u5e76\u5c06\u8fd9\u4e9b\u8bcd\u8868\u8fbe\u5f97\u201c\u5b8c\u7f8e\u5730\u8ba9\u773c\u775b\u611f\u89c9\u5230\u4e86\uff0c\u5c31\u50cf\u5b83\u4eec\u8ba9\u8033\u6735\u611f\u89c9\u5230\u4e86\u548c\u8c10\u4e00\u6837\u3002\u201d\u4ed6\u8fd8\u63d0\u5230\u4e86\u82f1\u56fd\u54f2\u5b66\u5bb6\u5f17\u6717\u897f\u65af\u00b7\u57f9\u6839(Francis Bacon)\u7684\u97f3\u4e50\u5bc6\u7801\u6280\u672f\uff0c\u5373\u7279\u5b9a\u6570\u91cf\u7684\u97f3\u7b26A\u6216B\u76f8\u5f53\u4e8e\u6bcf\u4e2a\u5b57\u6bcd(Aaaaa\u7ffb\u8bd1\u4e3aA)\uff0c\u201c\u4ee5\u4e0a\u79d8\u5bc6\u4e66\u5199\u7684\u65b9\u6cd5\u80af\u5b9a\u662f\u6709\u53f2\u4ee5\u6765\u53d1\u660e\u7684\u6700\u5de7\u5999\u7684\u65b9\u6cd5\u3002\u201d\n\u4f7f\u7528\u8fd9\u6837\u7684\u4ee3\u7801\u7684\u4fe1\u606f\u5f88\u6709\u53ef\u80fd\u4e0d\u4f1a\u88ab\u53d1\u73b0\uff0c\u81f3\u5c11\u4e0d\u4f1a\u88ab\u672a\u7ecf\u8bad\u7ec3\u7684\u4eba\u770b\u5230\u548c\u542c\u5230\u3002\u7136\u800c\uff0c\u897f\u5bc6\u6b47\u6839\u5927\u5b66\u97f3\u4e50\u6559\u6388David Loberg Code\u8bf4\uff0c\u5bf9\u4e8e\u8bad\u7ec3\u6709\u7d20\u7684\u4eba\u6765\u8bf4\uff0c\u4e00\u7cfb\u5217\u9690\u85cf\u7740\u4fe1\u606f\u7684\u97f3\u7b26\u53ef\u80fd\u4f1a\u5f15\u53d1\u95ee\u9898\u3002\u201c\u56e0\u4e3a\u4ed6\u4eec\u7684\u52a0\u5bc6\u7cfb\u7edf\u4e0d\u662f\u97f3\u4e50\u7684\uff0c\u6240\u4ee5\u624b\u7a3f\u770b\u8d77\u6765\u5f88\u53ef\u7591\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u97f3\u4e50\u7684\u5e9f\u8bdd\uff0c\u201d\u4ed6\u8bf4\u3002\u5982\u679c\u6709\u4eba\u5bc4\u51fa\u4f5c\u66f2\u5bb6\u8fc8\u514b\u5c14\u00b7\u6d77\u987f\u768426\u4e2a\u97f3\u7b26\u7684\u4e3b\u9898\uff0c\u5176\u4e2d\u4f4e\u97f3\u8c31\u53f7G\u7ffb\u8bd1\u6210A\uff0c\u90a3\u4e48G\u5c16\u9510\u7b49\u4e8eB\uff0c\u4f9d\u6b64\u7c7b\u63a8\uff0c\u5b64\u7acb\u5728\u81ea\u5df1\u7684\u4e50\u8c31\u4e0a\uff0c\u4e3b\u9898\u770b\u8d77\u6765\u4f1a\u8131\u8282\u3002Code\u8bf4\uff0c\u5f53\u64ad\u653e\u65f6\uff0c\u5b83\u53ef\u80fd\u5728\u98ce\u683c\u4e0a\u542c\u8d77\u6765\u975e\u5e38\u65e0\u804a\uff0c\u6216\u8005\u5c31\u50cf\u4e00\u4e32\u968f\u673a\u7684\u3001\u65e0\u8c03\u6027\u7684\u97f3\u8c03\u5b57\u7b26\u4e32\u3002\n\u97f3\u4e50\u52a0\u5bc6\u7684\u4e3b\u8981\u7528\u6237\u662f\u53e4\u5178\u4f5c\u66f2\u5bb6\uff0c\u4f46\u76ee\u524d\u8fd8\u6ca1\u6709\u5df2\u77e5\u7684\u5c06\u8be5\u6280\u672f\u7528\u4e8e\u95f4\u8c0d\u6216\u60c5\u62a5\u76ee\u7684\u7684\u4f8b\u5b50\u3002\u76f8\u53cd\uff0c\u5927\u591a\u6570\u4f5c\u66f2\u5bb6\u5c06\u81ea\u5df1\u6216\u670b\u53cb\u7684\u540d\u5b57\u7684\u5b57\u6bcd\u653e\u5165\u4f5c\u66f2\u4e2d\uff0c\u53ea\u662f\u56e0\u4e3a\u8fd9\u5f88\u6709\u8da3\u3002\n\u201c\u6709\u65f6\u5019\uff0c\u4e00\u4e2a\u540d\u5b57\u7684\u97f3\u4e50\u7248\u672c\u662f\u97f3\u4e50\u4f5c\u54c1\u4e2d\u7684\u4e00\u4e2a\u5fae\u5999\u7684\u5f15\u7528\uff0c\u201dCode\u8bf4\u3002\u201c\u8fd9\u901a\u5e38\u662f\u975e\u5e38\u7a81\u51fa\u7684\uff1b\u8fd9\u662f\u8fd9\u9996\u66f2\u5b50\u7684\u4e3b\u65cb\u5f8b\uff0c\u88ab\u53cd\u590d\u542c\u5230\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e0d\u7ba1\u4f60\u662f\u5426\u786e\u5207\u77e5\u9053\u4f5c\u66f2\u5bb6\u662f\u5982\u4f55\u5c06\u8fd9\u4e2a\u540d\u5b57\u7ffb\u8bd1\u6210\u97f3\u9ad8\u7684\uff0c\u5f88\u660e\u663e\uff0c\u8fd9\u662f\u4e3a\u4e86\u8ba9\u4eba\u542c\u5230\u3002\u201c\u3002\u8fd9\u4e9b\u4f5c\u66f2\u5bb6\u60f3\u8981\u7559\u4e0b\u81ea\u5df1\u7684\u75d5\u8ff9\uff0c\u4ed6\u4eec\u201c\u5bf9\u6b64\u5e76\u4e0d\u906e\u906e\u63a9\u63a9\uff1b\u4ed6\u4eec\u5199\u4e0b\u4e86\u8fd9\u4ef6\u4e8b\uff0c\u6216\u8005\u544a\u8bc9\u4eba\u4eec\u4ed6\u4eec\u5728\u505a\u4ec0\u4e48\u3002\u201d\u5982\u679c\u611f\u5174\u8da3\u7684\u65c1\u89c2\u8005\u53d1\u73b0\u4e86\u4ed6\u4eec\u7684\u5bc6\u7801\uff0c\u4ed6\u4eec\u5e76\u4e0d\u4ecb\u610f\u3002\n\u4e00\u4e2a\u5e7f\u4e3a\u4eba\u77e5\u7684\u97f3\u4e50\u5bc6\u7801\u6765\u81ea19\u4e16\u7eaa\u7684\u5fb7\u56fd\u4f5c\u66f2\u5bb6\u7ea6\u7ff0\u5c3c\u65af\u00b7\u52c3\u62c9\u59c6\u65af(Johannes Brahms)\u3002\u4ed6\u57281868\u5e74\u521b\u4f5c\u7684\u201cG\u5927\u8c03\u7b2c\u4e8c\u5f26\u4e50\u516d\u91cd\u594f\u201d\u4e2d\u5305\u542b\u4e86\u5bc6\u7801\u30021858\u5e74\u590f\u5929\uff0c25\u5c81\u7684\u52c3\u62c9\u59c6\u65af\u75af\u72c2\u5730\u7231\u4e0a\u4e8623\u5c81\u7684\u97f3\u4e50\u603b\u76d1\u3001\u52c3\u62c9\u59c6\u65af\u670b\u53cb\u6731\u5229\u53f6\u65af\u00b7\u5965\u6258\u00b7\u683c\u6797(Julius Otto Grimm)\u7684\u58f0\u4e50\u5b66\u751f\u963f\u52a0\u7279\u00b7\u51af\u00b7\u897f\u535a\u5c14\u5fb7(Agathe Von Siebold)\u3002\u4ed6\u4eec\u5f88\u5feb\u5236\u5b9a\u4e86\u7ed3\u5a5a\u8ba1\u5212\uff0c\u4f46\u57281859\u5e741\u6708\uff0c\u4ed6\u89e3\u9664\u4e86\u8ba2\u5a5a\uff0c\u8f6c\u800c\u4e13\u6ce8\u4e8e\u4ed6\u7684\u97f3\u4e50\u3002\n\u51af\u00b7\u897f\u535a\u5c14\u5fb7\u540e\u6765\u7ed3\u5a5a\u4e86\uff0c\u52c3\u62c9\u59c6\u65af\u76f4\u5230\u6b7b\u90fd\u662f\u5355\u8eab\u6c49\uff0c\u4f46\u4ed6\u4ecd\u7136\u6e34\u671b\u5979\u3002\u4ed6\u5728\u4ed6\u7684\u516d\u91cd\u594f\u7684\u7b2c\u4e00\u4e50\u7ae0\u4e2d\u5c06\u97f3\u7b26A-G-A-H-E\u5e76\u5165\u7b2c162\u81f3168\u5c0f\u8282\u3002(B-\u5728\u5fb7\u8bed\u547d\u540d\u4e2d\uff0c\u81ea\u7136\u662f\u97f3\u7b26H\uff1b\u4e0d\u5305\u62ec\u5b57\u6bcdT\uff0c\u56e0\u4e3a\u5b83\u4e0d\u662f\u97f3\u7b26\u3002)\u3002\n\u6839\u636eBBC\u7535\u53f0\u4e3b\u6301\u4ebaTom Service\u7684\u8bf4\u6cd5\uff0c\u8fd9\u4e2a\u4e3b\u9898\u662f\u5728\u8fd9\u9996\u66f2\u5b50\u7684\u201c\u6700\u4f1f\u5927\u548c\u6700\u75db\u82e6\u7684\u53d1\u884c\u201d\u4e2d\u6f14\u594f\u7684\uff0c\u5f88\u53ef\u80fd\u662f\u5e03\u62c9\u59c6\u65af\u5fc3\u75db\u7684\u4fe1\u53f7\u3002\u5728\u5199\u7ed9\u4ed6\u7684\u670b\u53cb\u7ea6\u745f\u592b\u00b7\u5188\u65af\u5df4\u8d6b(Josef G\u00e4nsbacher)\u7684\u4e00\u5c01\u5173\u4e8e\u8fd9\u516d\u91cd\u594f\u7684\u4fe1\u4e2d\uff0c\u52c3\u62c9\u59c6\u65af\u5199\u9053\uff0c\u201c\u901a\u8fc7\u8fd9\u90e8\u4f5c\u54c1\uff0c\u6211\u628a\u81ea\u5df1\u4ece\u6700\u540e\u7684\u7231\u4e2d\u89e3\u8131\u51fa\u6765\u3002\u201d\n\u65e9\u5728\u52c3\u62c9\u59c6\u65af\u7684\u65f6\u4ee3\u4e4b\u524d\uff0c\u4f1f\u5927\u7684\u7ea6\u7ff0\u00b7\u585e\u5df4\u65af\u8482\u5b89\u00b7\u5df4\u8d6b\u5c31\u7528\u4e00\u7cfb\u5217\u97f3\u7b26B-A-C-H(B-\u81ea\u7136)\u5728\u4f5c\u66f2\u4e2d\u62fc\u51fa\u4e86\u81ea\u5df1\u7684\u540d\u5b57\u3002\u8fd9\u4e2a\u7b80\u77ed\u7684\u97f3\u4e50\u5b57\u6bcd\u73b0\u5728\u88ab\u79f0\u4e3a\u5df4\u8d6b\u7684\u4e3b\u9898\uff0c\u5df4\u8d6b\u5c06\u81ea\u5df1\u7684\u540d\u5b57\u7f16\u7ec7\u5728\u5404\u79cd\u4e0d\u540c\u7684\u4f5c\u54c1\u4e2d\uff0c\u6bd4\u5982\u4ed6\u7684\u6700\u540e\u4e00\u90e8\u4f5c\u54c1\u201c\u8d4b\u683c\u7684\u827a\u672f\u201d(The Art Of Fugue)\u3002\n\u52c3\u62c9\u59c6\u65af\u7684\u5bc6\u53cb\u3001\u6d6a\u6f2b\u4e3b\u4e49\u65f6\u4ee3\u7684\u4f5c\u66f2\u5bb6\u7f57\u4f2f\u7279\u00b7\u8212\u66fc(Robert Schumann)\u4e5f\u5c06\u97f3\u4e50\u5bc6\u7801\u878d\u5165\u5230\u4ed6\u7684\u4f5c\u54c1\u4e2d\u3002\u8212\u66fc\u5c06\u5bc6\u7801A-S-C-H\u3001A-S-C-H\u548cS-C-H-A\u653e\u5728\u4ed6\u7684\u4f5c\u54c1\u201c\u5609\u5e74\u534e\u201d\u4e2d\u3002(\u5728\u5fb7\u8bed\u547d\u540d\u6cd5\u4e2d\uff0cE\u5927\u8c03\u76f8\u5f53\u4e8eS\uff0cA\u5927\u8c03\u76f8\u5f53\u4e8eAS\u3002)\u3002\u8fd9\u4e09\u4e2a\u4ee3\u7801\u4ee3\u8868\u4e86\u4ed6\u5f53\u65f6\u672a\u5a5a\u592b\u7684\u51fa\u751f\u5730\u5fb7\u56fd\u963f\u65bd(\u73b0\u5728\u5728\u6377\u514b)\u7684\u540d\u5b57\u3002\u7b2c\u4e8c\u79cd\u662f\u5fb7\u8bed\u62fc\u5199ash\uff0c\u4ee5\u7eaa\u5ff5\u57fa\u7763\u6559\u5723\u65e5\u201c\u706b\u5c71\u7070\u661f\u671f\u4e09\u201d\u3002\u6700\u540e\u7684\u5bc6\u7801\u662f\u4ece\u4ed6\u7684\u540d\u5b57\u4e2d\u9009\u51fa\u7684\u5b57\u6bcd\u3002\n\u5373\u4f7f\u572820\u4e16\u7eaa\u97f3\u4e50\u98ce\u683c\u4e0d\u65ad\u6f14\u53d8\u7684\u540c\u65f6\uff0c\u7ea6\u745f\u592b\u00b7\u83ab\u91cc\u65af\u00b7\u62c9\u5a01\u5c14(Joseph Maurice Ravel)\u3001\u963f\u5947\u52d2-\u514b\u52b3\u5fb7\u00b7\u5fb7\u5f6a\u897f(AChille-Claude Debussy)\u3001\u5f17\u6717\u897f\u65af\u00b7\u666e\u4f26\u8328(Francis Poulenc)\u3001\u5965\u5229\u7ef4\u5c14\u00b7\u6885\u897f\u5b89(Olivier Messiaen)\u548c\u5fb7\u7c73\u7279\u91cc\u00b7\u8096\u65af\u5854\u79d1\u7ef4\u5947(Dmitri Shostakovich)\u7b49\u4f5c\u66f2\u5bb6\u4ecd\u5728\u7ee7\u7eed\u8bd5\u9a8c\u97f3\u4e50\u4e3b\u9898\uff0c\u6709\u4e9b\u751a\u81f3\u9ad8\u8fbe26\u4e2a\u97f3\u7b26\uff0c\u4ee5\u5728\u4f5c\u54c1\u4e2d\u62fc\u5199\n\u6cd5\u56fd\u4f5c\u66f2\u5bb6\u5965\u5229\u7ef4\u5c14\u00b7\u6885\u897f\u5b89(Olivier Messiaen)\u7684\u5bc6\u7801\u4e0e\u5b57\u6bcd\u8868\u4e2d\u6240\u670926\u4e2a\u5b57\u6bcd\u7684\u4e0d\u540c\u97f3\u7b26\u76f8\u5339\u914d\uff0c\u521b\u9020\u51fa\u7684\u5355\u8bcd\u542c\u8d77\u6765\u4e0e\u4ed6\u7684\u7ba1\u98ce\u7434\u4f5c\u54c1\u201cM\u00e9ditations sur le Myst\u00e8re de la Sainte Trinit\u00e9\u201d\u76f8\u4f3c\u3002\u5bc6\u7801\u8bf4\uff0c\u7834\u8bd1\u7684\u7b14\u8bb0\u7531\u54f2\u5b66\u5bb6\u6258\u9a6c\u65af\u00b7\u963f\u594e\u90a3\u7ffb\u8bd1\u6210\u6cd5\u8bed\u5355\u8bcd\uff0c\u7531\u54f2\u5b66\u5bb6\u6258\u9a6c\u65af\u00b7\u963f\u594e\u90a3(Thomas Aquinas)\u7ffb\u8bd1\u6210\u6cd5\u8bed\u5355\u8bcd\uff0c\u610f\u4e3a\u672c\u8d28\u3001\u4eba\u7c7b\u3001\u7236\u6743\u548c\u542f\u8fea\u3002\u6885\u897f\u5b89\u4ee5\u5176\u4e30\u5bcc\u7684\u97f3\u8c03\u548c\u590d\u6742\u7684\u8282\u594f\u800c\u95fb\u540d\uff0c\u4ed6\u662f\u4e3a\u6570\u4e0d\u591a\u7684\u5f00\u53d1\u51fa\u7d27\u5bc6\u53cd\u6620\u81ea\u5df1\u98ce\u683c\u7684\u5bc6\u7801\u4e4b\u4e00\u3002\n\u5982\u679c\u60a8\u60f3\u8981\u521b\u5efa\u81ea\u5df1\u7684\u5305\u542b\u9690\u85cf\u6d88\u606f\u6216\u5bf9\u670b\u53cb\u7684\u558a\u53eb\u7684\u5408\u6210\uff0c\u8be5\u600e\u4e48\u529e\uff1f\u8fd9\u662f\u6709\u53ef\u80fd\u7684\u3002Code\u5df2\u7ecf\u5f00\u53d1\u4e86\u4e00\u4e2a\u540d\u4e3aSolfa Cipher\u7684\u7f51\u7ad9\uff0c\u5b83\u53ef\u4ee5\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u53ef\u5531\u6b4c\u7684\u65cb\u5f8b\u3002\u800c\u4e0d\u662f\u4e3a\u5b57\u6bcd\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u4f7f\u752826\u4e2a\u4e0d\u540c\u7684\u97f3\u9ad8\uff0c\u201cSolfa Cipher\u53ea\u5c06\u5b57\u6bcd\u6620\u5c04\u5230\u4e00\u4e2a\u97f3\u9636\u7684\u4e03\u4e2a\u97f3\u7b26\u4e0a(Do\uff0cRe\uff0cMi\uff0cFa\uff0cSol\uff0cLa\uff0cTi)\uff0c\u5e76\u7ed3\u5408\u72ec\u7279\u7684\u6301\u7eed\u65f6\u95f4\uff0c\u201dCode\u8bf4\u3002\u8be5\u7f51\u7ad9\u8fd8\u5305\u62ec\u4e00\u4e2a\u89e3\u7801\u7f51\u683c\u548c\u5de5\u5177\u3002\n\u5982\u679c\u60a8\u5bf9\u7834\u89e3\u4ee3\u7801\u66f4\u611f\u5174\u8da3\uff0c\u4e5f\u6709\u4e00\u4e9b\u5bc6\u7801\u7ec4\u5b58\u5728\u3002\u53bb\u5e74\uff0c\u4e00\u4e9b\u4e13\u4e1a\u548c\u5b66\u751f\u5bc6\u7801\u5206\u6790\u5e08\u5728\u52a0\u62ff\u5927\u8499\u7279\u5229\u5c14\u4e3e\u884c\u7684\u4e00\u573a\u540d\u4e3aNorthSec\u4f1a\u8bae\u7684\u5e94\u7528\u7f51\u7edc\u5b89\u5168\u7ade\u8d5b\u548c\u6d3b\u52a8\u4e0a\u4f1a\u9762\u3002\u5728NorthSec\u521b\u9020\u7684\u6311\u6218\u4e2d\uff0c\u6709\u4e00\u79cd\u7f16\u7801\u7684Solfa\u5bc6\u7801\uff0c\u4e0e\u4f1a\u8005\u4f7f\u7528\u7531\u56db\u4e2a\u5143\u7d20\u5b9a\u4e49\u7684\u52a0\u5bc6\u5bc6\u94a5\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff1a\u8c31\u53f7\u3001\u4e3b\u97f3\u3001\u6a21\u5f0f\u548c\u8282\u594f\u5355\u5143\u3002\u4e0e\u4f1a\u8005\u4e54\u7eb3\u68ee\u00b7\u62c9\u897f\u79d1\u7279(Jonathan Racicot)\u5728\u4ed6\u7684\u535a\u5ba2\u611f\u67d3\u5305\u4e2d\u5199\u9053\uff0c\u53c2\u4e0e\u8005\u968f\u540e\u4f7f\u7528\u82f1\u8bed\u7ffb\u8bd1\u77e9\u9635\u8fdb\u884c\u7ffb\u8bd1\u3002\u8fd9\u6761\u4fe1\u606f\u662f\u8fd9\u6837\u5199\u7684\uff1a\u201c\u56fd\u65d7\u7684\u524d\u534a\u90e8\u5206\u662f\u201d\u76ae\u4e0b\u201c\u8fd9\u4e2a\u8bcd\u3002\u4e0e\u540e\u534a\u90e8\u5206\u8fde\u63a5\u4ee5\u83b7\u5f97\u5b8c\u6574\u7684\u65d7\u5e1c\u3002\u5149\u8363\u5c5e\u4e8e\u62c9\u5965\u3002\u201c\u3002\n\u65e0\u8bba\u662f\u97f3\u4e50\u5bc6\u7801\u7f16\u7801\u4f5c\u66f2\u5bb6\u7684\u540d\u5b57\uff0c\u8fd8\u662f\u50cf\u4e0a\u9762\u8fd9\u6837\u66f4\u590d\u6742\u7684\u4fe1\u606f\uff0c\u5bf9\u4e8e\u5927\u591a\u6570\u97f3\u4e50\u7406\u8bba\u5bb6\u548c\u5bc6\u7801\u5b66\u5bb6\u6765\u8bf4\uff0c\u89e3\u5bc6\u5e76\u4e0d\u603b\u662f\u60f3\u8981\u7684\u5956\u676f\u3002\u6709\u65f6\u4ee4\u4eba\u5174\u594b\u7684\u662f\u77e5\u9053\u97f3\u4e50\u5305\u542b\u7740\u96be\u4ee5\u7834\u8bd1\u7684\u9519\u7efc\u590d\u6742\u7684\u6a21\u5f0f\u548c\u610f\u4e49\u3002", "note_en": "Out of the many tropes in TV and literature, espionage is one that spurs drama and intrigue for viewers and readers alike. A budding protagonist wants to convey a secret message in a letter or text, but must scramble the message so discreetly to avert the eager antagonist\u2019s gaze. Will the message send through securely? The suspense always deadly.\n One unexpected form of transmitting such messages is through music. It\u2019s better known as music cryptography, which is a method in which the musical notes A through G are used to spell out words, abbreviations, or codes.\n This secret writing appears as a plot point in TV shows such as   Outlander, the  18th-century time travel drama based in Scotland, and mystery novels like the   Secret of the White Rose, which features characters who employ music ciphers as undetectable modes of espionage or communication.\n In the season two  Outlander episode \u201cUseful Occupations and Deceptions,\u201d for example, the protagonists, Jamie and Claire, intercept a letter from Prince Charles Edward Stuart that also includes a page of German sheet music sent from England. The clumsy music contains almost the same melodies as Bach\u2019s \u201cGoldberg Variation,\u201d but with five random key changes, which according to the virtuoso nun who played the music, is more than usual. When deciphered by Jamie, the sharps and flats in the musical keys reveal a message that Prince Stuart intends to start a war to reclaim his throne using 40,000 pounds from Jamie and Claire\u2019s nemesis the Duke of Sandringham, and few other English conspirators. This persuasive scenario makes one wonder if music cryptography is a real spy technique.\n Early 17th- and 18th-century mathematicians and cryptologists such as  John Wilkins and  Philip Thicknesse argued that music cryptography was one of the most inscrutable ways of transporting secret messages. They claimed that music was perfect camouflage, because spies would never suspect music. When played, the music would sound so much like any other composition that musically trained listeners would be easily fooled, too. Thicknesse wrote in his 1772 book   A Treatise on the Art of Deciphering, and of Writing in Cypher: With an Harmonic Alphabet, \u201cfor who that examined a suspected messenger would think an old song, without words, in which perhaps the messenger\u2019s tobacco or snuff might be put, contained a secret he was to convey?\u201d Written letters don\u2019t have this advantage.\n  He added, \u201cI am persuaded an alphabet of musical notes may be so contrived, that the notes shall not only convey the harmony, but the very words of the song, so that a music-master \u2026 may instruct his female pupil, not only how to play upon an instrument, but how to play the fool at the same time.\u201d\n Thicknesse created an enciphering system that employs quarter and  half notes with treble clef and key signature. He claimed his harmonic alphabet ensured strong encryption and expressed the words \u201cperfectly to the eye as they do the harmony to the ear.\u201d He also wrote of English philosopher Francis Bacon\u2019s music cipher technique, in which a particular number of the notes A or B equate to each alphabet letter (aaaaa translates to A), \u201cthe above method of secret writing is certainly the most ingenious of any ever invented.\u201d\n It is highly  likely that messages using codes like these would go undetected, at least to an untrained eye and ear. To a trained eye, however, says Western Michigan University Music Professor  David Loberg Code, a sequence of notes with a message hidden inside might provoke questions. \u201cSince their encryption system is not musical, the manuscript would look suspicious because it contains musical nonsense,\u201d he says. If someone were to send composer Michael Haydn\u2019s 26-note motif, in which the lower bass clef G translates to A, then G sharp equals B, and so forth, isolated on its own music sheet, the motif would look disjointed. When played, it might sound dreadfully boring in style or like a random, atonal string of pitches, says Code.\n  The prime users of musical encryption were classical composers, but there are no known examples of the technique being used for espionage or intelligence purposes. Rather, most composers put the letters of their name or a friend\u2019s into compositions simply because it was fun.\n \u201cSometimes a musical version of a name is a subtle reference in the piece of music,\u201d Code says. \u201cOften it is very prominent; it is the main theme of the piece and is heard over and over. In that case, whether or not you know exactly how the composer translated the name into musical pitches, it is obvious that it is meant to be heard.\u201d These composers wanted to leave a traces of themselves, and they \u201cwere not secretive about it; they wrote about [it] or told people what they were doing.\u201d They didn\u2019t mind if interested onlookers found their cryptograms.\n One well-recognized music cipher comes from the 19th-century German composer Johannes Brahms. He included a cryptogram in his 1868 \u201c String Sextet No. 2 in G major.\u201d In the summer of 1858, a 25-year-old  Brahms fell madly in love with Agathe von Siebold, a 23-year-old music director and vocal student of Brahms\u2019s friend Julius Otto Grimm. They quickly set plans for marriage, but in January 1859, he broke off the engagement to focus on his music.\n  Von Siebold later married, and Brahms remained a bachelor until death, but he still longed for her. He incorporated the notes A-G-A-H-E in bars 162 to 168 in the first movement of his sextet. (B-natural in German nomenclature is the note H; the letter T is not included because it is not a musical note.)\n According to  BBC radio host Tom Service, the motif is played at the piece\u2019s \u201cgreatest and most aching release,\u201d likely signaling Brahms\u2019s heartache. In a letter to his friend Josef G\u00e4nsbacher about the sextet, Brahms  wrote, \u201cby this work, I have freed myself of my last love.\u201d\n Well before Brahms\u2019s time, the prodigious Johann Sebastian Bach spelled out his own name in compositions using a succession of the notes B-A-C-H (B-natural). This short music monogram is now called a Bach motif, and Bach  wove his name in various pieces such as his final work,  \u201cThe Art of Fugue.\u201d\n Brahms\u2019 close friend and Romantic-era composer Robert Schumann also integrated music cryptograms into his compositions. Schumann placed the cryptograms, A-S-C-H, A-s-C-H, and S-C-H-A in his piece, \u201c Carnaval.\u201d (In German nomenclature, E flat equates to S and A flat equates to As.) The  three codes represent the name of his then fianc\u00e9\u2019s birthplace of Asch, Germany, (now in Czechia). The second is the German spelling of ash to honor the Christian holy day of Ash Wednesday. The final cryptogram is selected letters from his name.\n  Even as musical styles evolved in the 20th century, music composers such as Joseph Maurice Ravel, Achille-Claude Debussy, Francis Poulenc, Olivier Messiaen, and Dmitri Shostakovich continued experimenting with musical motifs, some up to 26 notes, to spell out their names in compositions.\n French composer Olivier Messiaen\u2019s cipher, which matches a different note for all 26 letters in the alphabet, created words that sounded similar to his organ work \u201c M\u00e9ditations sur le myst\u00e8re de la Sainte Trinit\u00e9.\u201d Code says the notes deciphered translated to the French words  from  Summa Theologica by philosopher Thomas Aquinas for essence, humankind, paternity, and illumination. Known for his rich tones and complex rhythms, Messiaen was one of the few to develop a cipher that closely mirrored his own style.\n  What if you want to create your own composition with a hidden message or a shout-out to a friend? It\u2019s possible. Code has developed a site called Solfa Cipher that turns text into singable melodies. Rather than use 26 different pitches for each letter of the alphabet, \u201c Solfa Cipher maps letters onto only seven notes of a musical scale (Do, Re, Mi, Fa, Sol, La, Ti) combined with unique durations,\u201d says Code. The site also includes a decoding grid and tool.\n  If you\u2019re more interested in cracking codes, there are cryptography groups that exist, too. Last year, some professional and student cryptanalysts met at an applied cyber-security contest and event called  NorthSec conference in Montreal, Canada. Among the challenges created by NorthSec, an  encoded Solfa Cipher, which the attendants  solved using an encryption key that is defined by four elements: a clef, a tonic, a mode, and a rhythmic unit. In his blog  Infected Packages, attendee Jonathan Racicot wrote that participants then translated using a English language translation matrix. The message read: \u201cThe first half of the flag is the word subdermal. Concatenate with the second half to obtain a complete flag. Glory to Rao.\u201d\n Whether a musical cipher encodes a composer\u2019s name or a more complex message like the above, for most music theorists and cryptographers, decrypting is not always the desired trophy. Sometimes the thrill is knowing that the music holds intricate patterns and meaning that are beyond deciphering.", "posttime": "2020-06-15 00:57:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5bc6\u7801,cryptography,\u97f3\u4e50", "title": "\u6709\u4e86\u97f3\u4e50\u5bc6\u7801\u6280\u672f\uff0c\u4f5c\u66f2\u5bb6\u53ef\u4ee5\u5728\u4ed6\u4eec\u7684\u65cb\u5f8b\u4e2d\u9690\u85cf\u4fe1\u606f", "title_en": "With Musical Cryptography, Composers Can Hide Messages in Their Melodies", "transed": 1, "url": "https://www.atlasobscura.com/articles/musical-cryptography-codes.html", "via": "", "real_tags": ["\u5bc6\u7801", "\u97f3\u4e50"]}, {"category": "", "categoryclass": "", "imagename": "b7306aa266da34d6da1a3cd332af6450.jpg", "infoid": 1006543, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u300a\u54f2\u5b66\u968f\u7b14--TLS|\u54f2\u5b66\u5982\u4f55\u5728\u5b64\u7acb\u4e2d\u53d1\u751f\u300b\uff0c\u963f\u5c3c\u5c14\u00b7\u6208\u9ea6\u65af\u7684\u968f\u7b14", "note_en": "Philosophy essay - The TLS | How philosophy can happen in isolation, an essay by Anil Gomes", "posttime": "2020-06-15 00:56:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "app,\u54f2\u5b66,boredom", "title": "\u65e0\u804a\u7684\u7279\u6743\uff1a\u54f2\u5b66\u662f\u5982\u4f55\u5b64\u7acb\u53d1\u751f\u7684", "title_en": "The privilege of boredom: How philosophy can happen in isolation", "transed": 1, "url": "https://www.the-tls.co.uk/articles/privilege-boredom-philosophy-isolation-anil-gomes/", "via": "", "real_tags": ["app", "\u54f2\u5b66", "boredom"]}, {"category": "", "categoryclass": "", "imagename": "72f64f0102fc9a7c52bb07a152b317d3.jpg", "infoid": 1006542, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5730\u9707\u6ce2\u6570\u636e\u63ed\u793a\u4e86\u5730\u7403\u8868\u9762\u4e0b2900\u516c\u91cc\u5904\u7684\u5de8\u5927\u7ed3\u6784\uff0c\u4f4d\u4e8e\u5730\u7403\u7194\u878d\u7684\u6838\u5fc3\u548c\u56fa\u4f53\u5730\u5e54\u4e4b\u95f4\u7684\u8fb9\u754c\u4e0a\u3002\n\u9a6c\u91cc\u5170\u5927\u5b66\u7684Doyeon Kim\u548c\u4ed6\u7684\u540c\u4e8b\u5206\u6790\u4e86\u6570\u767e\u6b21\u5927\u5730\u9707\u7684\u6570\u636e\uff0c\u4ed6\u4eec\u5728\u5357\u592a\u5e73\u6d0b\u7684\u706b\u5c71\u9a6c\u514b\u8428\u65af\u7fa4\u5c9b\u4e0b\u9762\u53d1\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784\uff0c\u8be5\u7ed3\u6784\u88ab\u79f0\u4e3a\u8d85\u4f4e\u901f(ULV)\u5e26\uff0c\u76f4\u5f84\u7ea61,000\u516c\u91cc\uff0c\u539a\u5ea6\u7ea625\u516c\u91cc\uff0cKim\u8bf4\u3002\n\u8fd9\u4e9b\u7ed3\u6784\u88ab\u79f0\u4e3aULV\u5e26\uff0c\u56e0\u4e3a\u5730\u9707\u6ce2\u4ee5\u8f83\u6162\u7684\u901f\u5ea6\u7a7f\u8fc7\u5b83\u4eec\uff0c\u4f46\u5b83\u4eec\u662f\u7531\u4ec0\u4e48\u7ec4\u6210\u7684\u4ecd\u7136\u662f\u4e00\u4e2a\u8c1c\u3002\u5b83\u4eec\u53ef\u80fd\u5728\u5316\u5b66\u4e0a\u4e0e\u5730\u7403\u7684\u94c1\u954d\u5408\u91d1\u6838\u548c\u7845\u9178\u76d0\u5ca9\u77f3\u5730\u5e54\u4e0d\u540c\uff0c\u6216\u8005\u5177\u6709\u4e0d\u540c\u7684\u70ed\u6027\u8d28\u3002\n\u7814\u7a76\u4eba\u5458\u5728\u5206\u67901990\u5e74\u81f32018\u5e74\u592a\u5e73\u6d0b\u76c6\u5730\u5468\u56f4\u53d1\u751f\u76847,000\u6b21\u5730\u9707\u7684\u5730\u9707\u6d3b\u52a8\u8bb0\u5f55\u65f6\u53d1\u73b0\u4e86\u8fd9\u4e00\u7ed3\u6784\u3002\u8fd9\u4e9b\u5730\u9707\u7684\u9707\u7ea7\u90fd\u57286.5\u7ea7\u6216\u66f4\u9ad8\uff0c\u800c\u4e14\u90fd\u5728\u5730\u7403\u8868\u9762\u4ee5\u4e0b200\u516c\u91cc\u4ee5\u4e0b\u3002\n\u7814\u7a76\u5c0f\u7ec4\u89c2\u5bdf\u4e86\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u5730\u9707\u6ce2(\u79f0\u4e3a\u6a2a\u6ce2)\u6cbf\u6838-\u5730\u5e54\u8fb9\u754c\u4f20\u64ad\u65f6\u4ea7\u751f\u7684\u56de\u6ce2\u3002\u5355\u4e2a\u5730\u9707\u8bb0\u5f55\u7684\u6a2a\u6ce2\u56de\u6ce2\u5f88\u96be\u4e0e\u968f\u673a\u566a\u58f0\u533a\u5206\u5f00\u6765\uff0c\u56e0\u6b64\u7814\u7a76\u4eba\u5458\u4f7f\u7528\u4e86\u4e00\u79cd\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u6700\u521d\u662f\u4e3a\u8bc6\u522b\u5927\u578b\u5929\u6587\u6570\u636e\u96c6\u4e2d\u7684\u8d8b\u52bf\u800c\u8bbe\u8ba1\u7684\u3002\n\u5bf9\u6570\u5343\u4e2a\u6a2a\u6ce2\u7684\u540c\u65f6\u5206\u6790\u63ed\u793a\u4e86\u9a6c\u514b\u8428\u65af\u7fa4\u5c9b\u4e0b\u9762\u7684\u5de8\u5927\u7ed3\u6784\u3002\u7814\u7a76\u5c0f\u7ec4\u8fd8\u53d1\u73b0\uff0c\u4e4b\u524d\u5728\u590f\u5a01\u5937\u5730\u4e0b\u53d1\u73b0\u7684\u4e00\u4e2a\u8d85\u4f4e\u901f\u533a\u57df\u6bd4\u4e4b\u524d\u8ba4\u4e3a\u7684\u8981\u5927\u5f97\u591a\u3002\n\u91d1\u8bf4\uff0c\u7814\u7a76\u5730\u5e54\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u63ed\u793a\u5730\u7403\u7684\u7ed3\u6784\u662f\u5982\u4f55\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u53d1\u5c55\u548c\u53d8\u5316\u7684\u3002\u201c\u5730\u7403\u7684\u5730\u5e54\u662f\u5bf9\u6d41\u53d1\u751f\u7684\u5730\u65b9\uff0c\u5b83\u5b9e\u9645\u4e0a\u662f\u70ed\u70b9\u706b\u5c71\u6d3b\u52a8\u548c\u677f\u5757\u6784\u9020\u7684\u9a71\u52a8\u673a\u5236\uff0c\u201d\u4ed6\u8bf4\u3002\n\u8bc6\u522b\u8d85\u4f4e\u771f\u7a7a\u5e26\u53ef\u80fd\u6709\u52a9\u4e8e\u6211\u4eec\u66f4\u597d\u5730\u4e86\u89e3\u4e00\u4e9b\u706b\u5c71\u662f\u5426\u8d77\u6e90\u4e8e\u5730\u7403\u8868\u9762\u6df1\u5904\uff0c\u4ee5\u53ca\u5730\u7403\u4e0b\u5730\u5e54\u7684\u7ec4\u6210\u3002", "note_en": "Seismic wave data has revealed giant structures 2900 kilometres beneath the surface of Earth, at the boundary between Earth\u2019s molten core and solid  mantle.\n Analysing data from hundreds of major earthquakes, Doyeon Kim at the University of Maryland and his colleagues have found a new structure beneath the volcanic Marquesas Islands in the South Pacific Ocean.\u00a0The structure, known as an ultra-low velocity (ULV) zone, is about 1000 kilometres in diameter and 25 kilometres thick, says Kim.\n These structures are called ULV zones because  seismic waves pass through them at slower velocities, but what they are made of is still a mystery. They might be chemically distinct from Earth\u2019s iron\u2013nickel alloy core and silicate rock mantle, or have different thermal properties.\n   The researchers discovered the structure while analysing 7000 records of seismic activity from  earthquakes that occurred around the Pacific Ocean basin between 1990 and 2018. The earthquakes all had a magnitude of 6.5 or greater, and were all deeper than 200 kilometres below Earth\u2019s surface.\n  The team looked at echoes generated by a specific type of seismic wave, known as shear waves, as they travelled along the core-mantle boundary. The shear wave echoes from a single seismogram are difficult to distinguish from random noise, so the researchers used a machine-learning algorithm originally designed for identifying trends in large astronomy data sets.\n The simultaneous analysis of thousands of shear waves revealed an enormous structure beneath the Marquesas Islands. The team also found that a previously discovered ULV zone beneath Hawaii is far larger than previously thought.\n Studying the mantle is important, says Kim, because it may shed light on how Earth\u2019s structures have developed and changed over time.\u00a0\u201cEarth\u2019s mantle is where the convection is occurring, and it is actually the driving mechanism for hotspot volcanism as well as plate tectonics,\u201d he says.\n Identifying ULV zones may help us to better understand whether some  volcanoes have origins deep below Earth\u2019s surface, and the composition of Earth\u2019s lower mantle.", "posttime": "2020-06-15 00:56:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u63ed\u793a,waves,\u5730\u5e54", "title": "\u5730\u9707\u6ce2\u63ed\u793a\u4e86\u5730\u7403\u8868\u9762\u6df1\u5904\u7684\u5de8\u5927\u7ed3\u6784", "title_en": "Seismic waves reveal giant structures deep beneath Earth's surface", "transed": 1, "url": "https://www.newscientist.com/article/2245939-seismic-waves-reveal-giant-structures-deep-beneath-earths-surface/", "via": "", "real_tags": ["\u63ed\u793a", "waves", "\u5730\u5e54"]}, {"category": "", "categoryclass": "", "imagename": "4eb1565e503a1b1b2393a63c8a8039cf.jpg", "infoid": 1006541, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fc8\u514b\u00b7\u65af\u56fe\u5c14\u7279\u5728\u98de\u884c\u65f6\u627e\u56de\u4e86\u4e4b\u524d\u4e22\u5931\u7684\u963f\u6ce2\u7f5710\u53f7\u767b\u9646\u8231\u8f6f\u4ef6(\u4e5f\u79f0\u4e3a\u201c\u6d41\u661f69\u4fee\u8ba2\u72482\u201d)\u3002\u4ed6\u5411\u6211\u4eec\u5c55\u793a\u4e86\u4ed6\u662f\u5982\u4f55\u505a\u5230\u7684\uff0c\u8fd9\uff0c\u5931\u8d25\u4e86.", "note_en": "Mike Stewart was able to recover the previously lost Apollo 10 LM software, as flown (also known as Luminary 69 Rev 2). He shows us how he did it, which, fai...", "posttime": "2020-06-15 00:40:28", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u8f6f\u4ef6,\u5de5\u7a0b\u5e08,engineer,\u505a\u5230", "title": "\u822a\u5929\u5de5\u7a0b\u5e08\u4e3a\u963f\u6ce2\u7f5710\u53f7\u767b\u6708\u8231\u627e\u56de\u4e22\u5931\u7684\u8f6f\u4ef6", "title_en": "A Spaceflight Engineer Recovers the Lost Software For Apollo 10's Lunar Module", "transed": 1, "url": "https://www.youtube.com/watch?v=-JTa1RQxU04&feature=youtu.be", "via": "", "real_tags": ["\u8f6f\u4ef6", "\u5de5\u7a0b\u5e08", "engineer", "\u505a\u5230"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006539, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8bb8\u591aFirefox\u5f00\u53d1\u4eba\u5458\u5c06SQLite\u89c6\u4e3a\u5b58\u50a8\u4efb\u4f55\u91cd\u8981\u6570\u636e\u91cf\u7684\u9ed8\u8ba4\u9009\u62e9\uff0c\u8fd9\u4e2awiki\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u8be5\u89c6\u56fe\u662f\u4e0d\u6b63\u786e\u7684\u3002\n\u5728\u7b2c\u4e00\u6b21\u8bbe\u8ba1\u7279\u6027\u65f6\uff0cSQLite\u4f3c\u4e4e\u662f\u4e00\u4e2a\u975e\u5e38\u5438\u5f15\u4eba\u7684\u9009\u62e9\u3002\u5b83\u63d0\u4f9b\u4e86\u719f\u6089\u800c\u5f3a\u5927\u7684SQL\u8bed\u8a00\uff0c\u6211\u4eec\u7684\u4ee3\u7801\u5e93\u6709\u5f88\u597d\u7684C++\u548cJavaScriptAPI\uff0c\u5e76\u4e14\u5b83\u5df2\u7ecf\u5728\u4ee3\u7801\u5e93\u4e2d\u7684\u5f88\u591a\u5730\u65b9\u4f7f\u7528\u8fc7\u4e86\u3002\u4f46\u662f\uff0c\u5728\u9009\u62e9\u5b58\u50a8\u683c\u5f0f\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u8bb0\u4f4fSQLite\u662f\u4e00\u4e2a\u529f\u80fd\u5f3a\u5927\u4e14\u53ef\u9760\u7684\u6570\u636e\u5e93\uff0c\u800c\u4e14\u5b83\u5177\u6709\u5f88\u591a\u9690\u85cf\u7684\u590d\u6742\u6027\u3002\u4eba\u4eec\u5f88\u5bb9\u6613\u4ece\u8868\u9762\u4e0a\u63a5\u53d7\u5b83\u63d0\u4f9b\u7684\u62bd\u8c61\u6982\u5ff5\uff0c\u800c\u5ffd\u7565\u4e86\u5e55\u540e\u53d1\u751f\u7684\u590d\u6742\u6027\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u591a\u6b21\u770b\u5230SQLite\u6210\u4e3a\u6027\u80fd\u95ee\u9898\u7684\u6839\u6e90\u3002\u8fd9\u5e76\u4e0d\u662f\u5bf9SQLite\u672c\u8eab\u7684\u63a7\u8bc9--\u4efb\u4f55\u5176\u4ed6\u5173\u7cfb\u578b\u5d4c\u5165\u5f0fDB\u90fd\u4f1a\u5e26\u6765\u540c\u6837\u7684\u6311\u6218\u3002\nSQLite\u6570\u636e\u5e93\u592a\u590d\u6742\u4e86\uff0c\u65e0\u6cd5\u6ee1\u8db3\u76f8\u5bf9\u7b80\u5355\u7684\u6570\u636e\u5b58\u50a8\u9700\u6c42\u3002\u4e0b\u9762\u7684\u5217\u8868\u6982\u8ff0\u4e86SQLite\u53ef\u80fd\u7ed9\u5f00\u53d1\u4eba\u5458\u5e26\u6765\u4e8b\u4e0e\u613f\u8fdd\u7684\u4e00\u4e9b\u65b9\u5f0f\u3002\n\u5b9a\u671f\u5411\u6570\u636e\u5e93\u6dfb\u52a0\u6570\u636e\u7684\u529f\u80fd(\u4f8b\u5982\uff0c\u8bbf\u95ee\u7684URI)\uff0c\u4f46\u6ca1\u6709\u6570\u636e\u7684\u5230\u671f\u7b56\u7565\uff0c\u5f88\u5bb9\u6613\u5bfc\u81f4\u6570\u636e\u5e93\u81a8\u80c0\u5230\u6570\u5341\u6216\u6570\u767eMB\u3002\u8fd9\u5728\u79fb\u52a8\u8bbe\u5907\u4e0a\u5c24\u5176\u4e0d\u53d7\u6b22\u8fce\u3002\n\u4f17\u6240\u5468\u77e5\uff0cWAL\u65e5\u5fd7\u4f1a\u53d8\u5f97\u975e\u5e38\u5927\uff0c\u4f8b\u5982\u9519\u8bef609122\u3001\u9519\u8bef608422\uff0c\u5b83\u4eec\u7684\u5927\u5c0f\u5fc5\u987b\u4ee5\u6027\u80fd\u4e3a\u4ee3\u4ef7\u52a0\u4ee5\u9650\u5236\u3002\n\u6bcf\u4e2a\u7d22\u5f15\u90fd\u5305\u542b\u7d22\u5f15\u6570\u636e\u7684\u5b8c\u6574\u526f\u672c\u3002\u5728\u5197\u957f\u7684\u6587\u672c\u5b57\u6bb5(\u5982URI)\u4e0a\u521b\u5efa\u7d22\u5f15\u5c06\u5bfc\u81f4\u5728\u78c1\u76d8\u4e0a\u5b58\u50a8\u975e\u5e38\u5927\u7684\u7d22\u5f15\u3002\n\u7531\u4e8e\u5e38\u89c1\u7684SQL\u6a21\u5f0f\uff0c\u60a8\u7684\u6570\u636e\u5e93\u6587\u4ef6\u53ef\u80fd\u4f1a\u53d7\u5230\u903b\u8f91/\u5185\u90e8\u788e\u7247\u7684\u5f71\u54cd\uff0c\u4f8b\u5982\uff0c\u5c06\u6570\u636e\u9644\u52a0\u5230\u5e26\u6709\u7d22\u5f15\u7684\u5217\u4f1a\u5bfc\u81f4\u7d22\u5f15\u548c\u8868\u6570\u636e\u4ea4\u9519\u3002\u8fd9\u610f\u5473\u7740\u5728\u6267\u884c\u771f\u7a7a\u4e4b\u524d\uff0c\u8868\u548c\u7d22\u5f15\u626b\u63cf\u90fd\u662f\u975e\u987a\u5e8f\u7684\u3002\n\u7531\u4e8eSQLite\u4f7f\u7528\u4e86\u4e0d\u9002\u5f53\u7684\u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u4e5f\u53ef\u80fd\u4f1a\u53d1\u751f\u7269\u7406/\u5916\u90e8\u788e\u7247\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSQLite\u4e0d\u9884\u5206\u914d\u6587\u4ef6\u3002\u5728\u591a\u4e2a\u4f1a\u8bdd\u4e2d\u5c06\u6570\u636e\u9644\u52a0\u5230SQLite\u901a\u5e38\u610f\u5473\u7740\u64cd\u4f5c\u7cfb\u7edf\u5fc5\u987b\u5f00\u59cb\u4e00\u4e2a\u4e0e\u524d\u4e00\u4e2a\u6570\u636e\u5757\u4e0d\u76f8\u90bb\u7684\u65b0\u6570\u636e\u5757\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0csqlite\u5c06\u6309|page_size|\u589e\u5927/\u7f29\u5c0f\u6570\u636e\u5e93\u6587\u4ef6\u3002\u6b64\u884c\u4e3a\u8fd8\u4f1a\u5bfc\u81f4\u5206\u914d\u65b0\u7684\u6570\u636e\u5757\u3002\u8fd9\u5728OSX\u3001Linux XFS\u4e0a\u5c24\u5176\u6709\u95ee\u9898\u3002\n\u51fa\u5382\u9ed8\u8ba4SQLite\u9875\u9762\u5927\u5c0f\u4e3a1024\u5b57\u8282\u3002\u6839\u636e\u9065\u6d4b\uff0c\u5f53Mozilla\u9ed8\u8ba4\u9875\u9762\u5927\u5c0f\u5728\u9519\u8bef416330\u4e2d\u66f4\u6539\u4e3a32KB\u65f6\uff0cSQLite IO\u7b49\u5f85\u65f6\u95f4\u51cf\u5c11\u4e864\u500d\u3002\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u51cf\u5c11\u4e86\u7cfb\u7edf\u8c03\u7528\u548c\u64cd\u4f5c\u7cfb\u7edf\u9884\u8bfb\u3002\n\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u6027\u80fd\u53ef\u80fd\u4f1a\u663e\u8457\u4e0b\u964d\uff1b\u8ba1\u5212\u5b9a\u671f\u91cd\u5efa\u6570\u636e\u5e93\u662f\u5fc5\u8981\u7684\u3002Vacuum\u4f1a\u6e05\u7a7a\u6570\u636e\u5e93\u6587\u4ef6\u7684\u7a7a\u95f2\u9875\u9762\u7a7a\u95f4\uff0c\u8fd9\u610f\u5473\u7740\u5728\u771f\u7a7a\u4e4b\u540e\uff0c\u5728\u6709\u65b0\u7684\u7a7a\u95f2\u7a7a\u95f4\u4e4b\u524d\uff0c\u63d2\u5165\u5c06\u4f1a\u7a0d\u5fae\u6602\u8d35\u4e00\u4e9b\uff0c\u56e0\u4e3a\u5b83\u4eec\u5c06\u4e0d\u5f97\u4e0d\u589e\u5927\u6587\u4ef6\u3002\nSQLite\u4f7f\u7528fsync\u6765\u4fdd\u8bc1\u4e8b\u52a1\u6301\u4e45\u6027\u5e76\u652f\u6301\u4ece\u5d29\u6e83\u4e2d\u6062\u590d\u3002fsync\u53ef\u80fd\u975e\u5e38\u6602\u8d35\uff0c\u5e76\u4e14\u5728\u9ed8\u8ba4\u7684\u56de\u6eda\u65e5\u5fd7\u6a21\u5f0f\u4e0b\u76f8\u5bf9\u9891\u7e41\u5730\u53d1\u751f\u3002\u5bf9\u4e8e\u7b80\u5355\u7684\u5b58\u50a8\u9700\u6c42\uff0c\u8fd9\u79cd\u6027\u80fd/\u53ef\u9760\u6027\u6743\u8861\u53ef\u80fd\u6ca1\u6709\u5fc5\u8981\uff0c\u7279\u522b\u662f\u5728\u91cd\u8981\u6570\u636e\u53ef\u4ee5\u968f\u65f6\u91cd\u5efa\u7684\u60c5\u51b5\u4e0b\u3002\nJSON\u6587\u4ef6\u6216\u65e5\u5fd7\u6587\u4ef6\u51e0\u4e4e\u6bcf\u6b21\u90fd\u4f1a\u663e\u793a\u66f4\u597d\u7684I/O\u6a21\u5f0f\uff0c\u7279\u522b\u662f\u5728\u6bcf\u6b21\u90fd\u5bf9\u5b83\u4eec\u8fdb\u884c\u5b8c\u6574\u538b\u7f29\u548c\u8bfb/\u5199\u7684\u60c5\u51b5\u4e0b\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u7684SQLite\u5305\u88c5\u5668\u5728\u6bcf\u4e2a\u8fde\u63a5\u4e0a\u6700\u591a\u4f7f\u75282MB\u5185\u5b58\u7f13\u5b58\u3002\u6b64\u9ad8\u901f\u7f13\u5b58\u5927\u5c0f\u5bf9\u4e8eFennec\u548cB2G\u53ef\u80fd\u592a\u5927\uff0c\u7279\u522b\u662f\u5728\u6709\u591a\u4e2a\u8fde\u63a5\u7684\u60c5\u51b5\u4e0b\u3002\u9ad8\u901f\u7f13\u5b58\u5927\u5c0f\u5e94\u4f7f\u7528PRAGMA\u8fdb\u884c\u8c03\u6574\u3002\n\u65e0\u6cd5\u4f7f\u7528\u7d22\u5f15\u7684\u67e5\u8be2\u5c06\u4f7f\u7528\u626b\u63cf\u8868\u904d\u5386\u6240\u6709\u884c\uff0c\u8fd9\u5c06\u4f7f\u9875\u9762\u5185\u5b58\u9ad8\u901f\u7f13\u5b58\u5feb\u901f\u589e\u957f\u5230\u6700\u5927\u503c\uff0c\u5728\u4f7f\u7528PRADMA SHEEP_MEMORY\u6216\u5173\u95ed\u8fde\u63a5\u4e4b\u524d\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u56de\u8c03\u6b64\u7a7a\u95f4\u3002\n\u7528\u6237\u53d1\u73b0\u67d0\u4e9bFirefox\u529f\u80fd\u5360\u7528\u4e8615%\u7684CPU\u65f6\u95f4\uff0c\u56e0\u4e3aSQL\u8bed\u53e5\u7ecf\u5e38\u5728\u540e\u53f0\u6267\u884c\n\u4e3b\u7ebf\u7a0bSQL\u662f\u4e00\u79cd\u5df2\u77e5\u7684\u90aa\u6076\uff0c\u5e78\u8fd0\u7684\u662f\uff0c\u4ee3\u7801\u5e93\u4e2d\u53ea\u5269\u4e0b\u51e0\u4e2a\u4e3b\u8981\u7684\u6765\u6e90\uff0c\u4f46\u7f13\u6162\u7684SQL\u4eea\u8868\u677f\u663e\u793a\uff0c\u5f00\u53d1\u4eba\u5458\u4ecd\u7136\u53d7\u5230\u6765\u81ea\u610f\u5916\u6765\u6e90\u7684\u4e3b\u7ebf\u7a0bI/O\u7684\u5f71\u54cd\uff1a\n\u8bbe\u7f6e\u9ad8\u901f\u7f13\u5b58\u5927\u5c0f\u7684PRADGMA\u8bed\u53e5\u5728\u4e3b\u7ebf\u7a0b\u4e0a\u5b8c\u6210\uff0c\u4f46\u662f\u5982\u679c\u8fd9\u662f\u4f1a\u8bdd\u7684\u7b2c\u4e00\u4e2a\u4e8b\u52a1\uff0c\u5b83\u53ef\u4ee5\u89e6\u53d1SQLite\u5d29\u6e83\u6062\u590d\u64cd\u4f5c\u3002\u5982\u679c\u4f7f\u7528\u9ed8\u8ba4\u7684WAL\u65e5\u5fd7\u5927\u5c0f\uff0c\u8fd9\u4e00\u70b9\u5c24\u5176\u7cdf\u7cd5\u3002\u8fd8\u8981\u6ce8\u610f\u7684\u662f\uff0c\u649e\u8f66\u4e8b\u6545\u5728\u79fb\u52a8\u8bbe\u5907\u4e0a\u5c24\u5176\u5e38\u89c1\uff0c\u56e0\u4e3a\u6211\u4eec\u4ece\u6765\u6ca1\u6709\u5e72\u51c0\u7684\u51fa\u53e3\u3002\n\u4e3b\u7ebf\u7a0b\u7cdf\u7cd5\u7684SQLite\u6027\u80fd\u4e5f\u4f1a\u964d\u4f4eFirefox\u7684\u54cd\u5e94\u6027\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u4e0e\u4e3b\u7ebf\u7a0b\u4e89\u593a\u5bf9\u5b58\u50a8\u7684\u8bbf\u95ee\u3002\u9057\u61be\u7684\u662f\uff0c\u6211\u4eec\u7684\u4ee3\u7801\u4ecd\u7136\u6267\u884c\u4e3b\u7ebf\u7a0bI/O\uff0c\u6b64\u5916\uff0c\u8fd8\u4f1a\u6709\u6765\u81ea\u9644\u52a0\u7ec4\u4ef6\u548c\u4ea4\u6362\u7684\u4e3b\u7ebf\u7a0bIO\u3002\n\u5373\u4f7f\u662f\u770b\u4f3c\u7b80\u5355\u7684SQL\u67e5\u8be2\u4e5f\u53ef\u80fd\u9700\u8981\u6570\u79d2\u624d\u80fd\u6267\u884c\uff0c\u4f8b\u5982\u5728\u9519\u8bef966469\u4e2d\uff0c\u7528\u6237\u62a5\u544a\u4ee5\u4e0b\u8bed\u53e5\u9700\u898122\u79d2\u624d\u80fd\u6267\u884c\uff1aDELETE FROM MOZ_PAGES WHERE id NOT IN(SELECT DISTINCT(PID)FROM MOZ_SUBRESOURCES)\uff1b\n\u7f13\u6162\u7684\u6570\u636e\u5e93\u64cd\u4f5c\u635f\u5bb3\u4e86\u7528\u6237\u4f53\u9a8c\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230Awesomebar\u6709\u65f6\u9700\u8981\u5f88\u957f\u65f6\u95f4\u624d\u80fd\u83b7\u53d6\u4efb\u4f55\u81ea\u52a8\u5b8c\u6210\u5efa\u8bae\u3002\n\u5fc5\u987b\u4ed4\u7ec6\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5e76\u4e14\u5fc5\u987b\u5b9a\u671f\u7ef4\u62a4\u6570\u636e\u5e93\u3002\n\u788e\u7247\u4f1a\u5bfc\u81f4\u989d\u5916\u7684\u5bfb\u9053\uff0c\u800c\u78c1\u6027\u786c\u76d8\u548c\u5ec9\u4ef7\u6216\u65e7\u7684SSD\u4f1a\u4f7f\u95ee\u9898\u53d8\u5f97\u66f4\u7cdf\u3002\u6e05\u7406\u6570\u636e\u5e93\u5f88\u6709\u5e2e\u52a9\uff0c\u4f46\u662f\u6e05\u7406\u662f\u8d44\u6e90\u5bc6\u96c6\u578b\u7684\uff0c\u5b89\u6392\u5b83\u4eec\u53ef\u80fd\u4f1a\u5f88\u68d8\u624b\u3002\u8bf7\u53c2\u9605\u63d0\u793a\u90e8\u5206\u3002\n\u5982\u679c\u9700\u8981\u5b58\u50a8\u5c11\u91cf\u6570\u636e(\u5c0f\u4e8e1MB)\uff0c\u5219\u5e94\u8be5\u4f7f\u7528JSON\u6587\u4ef6\uff0c\u5e76\u5728\u4e3b\u7ebf\u7a0b\u4e0a\u6267\u884c\u6240\u6709I/O\u64cd\u4f5c\u3002\u5177\u6709\u7ebf\u6027\u6700\u574f\u60c5\u51b5\u6027\u80fd\u7684\u7b80\u5355\u89e3\u662f\u7406\u60f3\u7684\u3002\u5982\u679c\u60a8\u6b63\u5728\u5904\u7406\u5927\u91cf\u6570\u636e(\u5927\u7ea61MB)\uff0c\u90a3\u4e48\u5728\u5c06\u5176\u5199\u5165\u78c1\u76d8\u4e4b\u524d\uff0c\u60a8\u5e94\u8be5\u4f7f\u7528snappy\u6216lz4\u538b\u7f29JSON\u6570\u636e\n\u5982\u679c\u60a8\u7684\u5de5\u4f5c\u8d1f\u8f7d\u6d89\u53ca\u5f88\u591a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4e0d\u8981\u4f7f\u7528SQLite\u3002\u5c06\u6570\u636e\u5b58\u50a8\u5728\u5916\u90e8\u6587\u4ef6\u4e2d\u3002\n\u5982\u679c\u60a8\u7684\u5de5\u4f5c\u8d1f\u8f7d\u6d89\u53ca\u5f88\u591aBLOB\uff0c\u8bf7\u4e0d\u8981\u4f7f\u7528SQLite\u3002\u5c06\u6570\u636e\u5b58\u50a8\u5728\u5916\u90e8\u6587\u4ef6\u4e2d\u3002\n\u5982\u679c\u60a8\u6709\u4e00\u4e2a\u5927\u578b\u6570\u636e\u96c6\uff0c\u4f46\u4e0d\u9700\u8981\u5bf9\u5176\u8fd0\u884c\u590d\u6742\u7684\u67e5\u8be2\uff0c\u8bf7\u8bc4\u4f30\u78c1\u76d8\u4e0a\u7684JSON\u6587\u4ef6\u7ed3\u6784\u3002\n\u5982\u679c\u6bcf\u6b21\u90fd\u5fc5\u987b\u8bfb\u53d6\u548c\u5199\u5165\u5927\u90e8\u5206\u6570\u636e\uff0c\u8bf7\u4f7f\u7528JSON\u6587\u4ef6\u8fdb\u884c\u8bc4\u4f30\u3002\n\u5bf9\u4e8e\u8f83\u5927\u7684\u6570\u636e\u96c6\u6216\u5f53SQL\u7edd\u5bf9\u5fc5\u8981\u65f6\uff0c\u8bf7\u4f7f\u7528SQLite\u3002\u786e\u4fdd\u60a8\u4e86\u89e3SQLite\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u4ed4\u7ec6\u8bbe\u8ba1\u60a8\u7684\u6a21\u5f0f\uff0c\u7136\u540e\u5206\u6790\u60a8\u7684\u5b9e\u73b0\u3002\n\u6ce8\u610f\uff1a\u6211\u4eec\u76ee\u524d\u6b63\u5728\u5f00\u53d1\u4e00\u4e2a\u57fa\u4e8e\u65e5\u5fd7\u5b58\u50a8\u7684\u4e2d\u95f4\u89e3\u51b3\u65b9\u6848\uff0c\u5b83\u5c06\u51cf\u5c11\u5bf9\u78c1\u76d8\u4e0a\u5df2\u6709\u6570\u636e\u8fdb\u884c\u5c11\u91cf\u4fee\u6539\u800c\u5199\u5165\u7684\u6570\u636e\u91cf\u3002\n\u67e5\u770bSQLite\u7f16\u8bd1\u6307\u793a\u5217\u8868\uff0c\u9ed8\u8ba4\u8bbe\u7f6e\u53ef\u80fd\u4e0d\u6b63\u5e38\u3002\u6211\u4eec\u5df2\u7ecf\u8986\u76d6\u4e86moz.build\u6587\u4ef6\u548cmozStorageConnection.cpp\u4e2d\u7684\u4e00\u4e9b\u9ed8\u8ba4\u503c\u3002\n\u5bf9\u8f83\u5c11\u7684fsync\u4f7f\u7528\u9884\u5199\u65e5\u5fd7\uff0c\u4f46\u901a\u8fc7\u4f7f\u7528\u8f83\u5c0f\u7684\u81ea\u52a8\u68c0\u67e5\u70b9\u548c\u5927\u5c0f\u7ea6\u4e3a\u8be5\u5927\u5c0f\u4e09\u500d\u7684Journal_size_limit\u6765\u9650\u5236\u65e5\u5fd7\u7684\u5927\u5c0f\n\u6839\u636e\u8bbe\u5907\u89c4\u683c\u8bbe\u7f6eDB\u7f13\u5b58\u5927\u5c0f\uff0c\u5e76\u8003\u8651\u6839\u636e\u79fb\u52a8\u8bbe\u5907\u7684\u5185\u5b58\u538b\u529b\u52a8\u6001\u8c03\u6574\u3002\n\u5bf9\u4e8e\u5bb9\u6613\u51fa\u73b0\u788e\u7247\u7684\u5927\u578b\u6570\u636e\u5e93\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528Connection\uff1a\uff1aSetGrowthIncrement()\u6765\u66f4\u6539SQLite\u7684SQLITE_FCNTL_CHUNK_SIZE\u7684\u503c\uff0c\u4ece\u800c\u5728\u5f00\u59cb\u65f6\u901a\u8fc7\u589e\u52a0\u6570\u636e\u5e93\u7684\u589e\u957f\u589e\u91cf\u6765\u9884\u5206\u914d\u4e00\u4e2a\u5927\u578b\u7684\u7a7a\u6570\u636e\u5e93\u3002\u6709\u5173\u53c2\u8003\uff0c\u8bf7\u53c2\u9605\u9519\u8bef581606\u3002\n\u5982\u679c\u5185\u5b58\u5b9e\u4f53\u4e2d\u7684\u6570\u636e\u91cf\u53ef\u63a5\u53d7\uff0c\u8bf7\u4f7f\u7528\u5185\u5b58\u4e34\u65f6\u5b58\u50a8\uff0c\u5426\u5219\u4e34\u65f6\u6570\u636e\u5c06\u5199\u5165\u78c1\u76d8\uff0c\u4ece\u800c\u5bfc\u81f4\u610f\u5916I/O\u3002\n\u4e0d\u7528\u8bf4\uff0c\u60a8\u6c38\u8fdc\u4e0d\u5e94\u8be5\u5728\u4e3b\u7ebf\u7a0b\u4e0a\u6267\u884cSQL\u3002\n\u4e3a\u60a8\u7684\u6570\u636e\u5e93\u5728\u53f0\u5f0f\u673a/\u79fb\u52a8\u8bbe\u5907\u4e0a\u7684\u589e\u957f\u89c4\u6a21\u5efa\u6a21\u3002\u5411\u9065\u6d4b\u62a5\u544a\u6570\u636e\u5e93\u5927\u5c0f\u548c\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\uff0c\u4ee5\u786e\u8ba4\u60a8\u7684\u4f30\u8ba1\u662f\u51c6\u786e\u7684\u3002\u5b9e\u65bd\u8fc7\u671f\u653f\u7b56\uff01\n\u8bc4\u6d4b\u60a8\u7684\u5b9e\u73b0\uff0c\u5e76\u6d4b\u91cf\u5728\u5178\u578b\u4f1a\u8bdd\u8fc7\u7a0b\u4e2d\u6267\u884c\u7684SQL\u64cd\u4f5c\u7684\u6570\u91cf(\u5982\u679c\u5b83\u662f\u4e00\u4e2a\u201c\u59cb\u7ec8\u5728\u7ebf\u201d\u7684\u529f\u80fd\uff0c\u5e76\u4e14\u60a8\u6000\u7591\u5b83\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6027\u80fd\u95ee\u9898\u3002\n\u4e0d\u5bf9\u6587\u672c\u5b57\u6bb5\u8fdb\u884c\u7d22\u5f15\uff0c\u800c\u662f\u5bf9\u6587\u672c\u5b57\u6bb5\u7684\u6563\u5217\u8fdb\u884c\u7d22\u5f15\u3002\u7d22\u5f15\u53ef\u80fd\u4f1a\u53d8\u5f97\u975e\u5e38\u5927\u3002\n\u4e0d\u8981\u4f7f\u7528\u65f6\u95f4\u6233\u7684\u9ed8\u8ba4\u7cbe\u5ea6(\u5fae\u79d2)\u3002\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\u4e0d\u592a\u53ef\u80fd\u9700\u8981\u8fd9\u79cd\u7ea7\u522b\u7684\u7cbe\u5ea6\n\u5728Firefox\u7248\u672c\u5347\u7ea7\u671f\u95f4\u6216\u7a7a\u95f2\u65f6\u95f4\u4f7f\u7528\u5438\u5c18\u5668\u7ef4\u62a4\u6570\u636e\u5e93\u3002\u5982\u679c\u9700\u8981\uff0c\u5b9a\u671f\u8fd0\u884c\u5206\u6790\uff0c\u60a8\u5e94\u8be5\u4ece\u4e00\u5f00\u59cb\u5c31\u6709\u4e00\u4e2a\u771f\u7a7a\u8ba1\u5212\u3002\u8fd9\u662f\u6240\u6709\u65b0\u4ee3\u7801\u7684\u8981\u6c42\u3002\n\u5982\u679c\u5904\u7406\u6765\u81ea\u591a\u4e2a\u8fde\u63a5\u7684\u76f8\u540c\u6570\u636e\uff0c\u8bf7\u8003\u8651\u4f7f\u7528\u975e\u5171\u4eab\u5185\u5b58\u7f13\u5b58\uff0c\u4ee5\u907f\u514d\u5185\u5b58\u4e89\u7528\u3002\u8fd9\u5c06\u63d0\u9ad8\u5e76\u53d1\u6027\u3002\u4e0d\u8fc7\uff0c\u5b83\u4e5f\u4f1a\u4f7f\u6bcf\u4e2a\u8fde\u63a5\u6570\u91cf\u7684\u5185\u5b58\u7f13\u5b58\u6210\u500d\u589e\u52a0\uff0c\u56e0\u6b64\u8fd9\u662f\u4e00\u4e2a\u5185\u5b58/\u6027\u80fd\u9009\u62e9\uff0c\u60a8\u5e94\u8be5\u5c0f\u5fc3\u64cd\u4f5c", "note_en": "Many Firefox developers see SQLite as a default choice for storing any non-trivial amount of data, and this wiki explains why that view is incorrect.\n SQLite may seem like a very appealing option when first designing a feature. It offers the familiar and powerful SQL language, our codebase has nice C++ and JavaScript APIs for it, and it&#39;s already used in many places in the codebase. However, when choosing storage formats, we have to keep in mind that SQLite is a powerful and reliable database and that it comes with a lot of  hidden complexity. It&#39;s very tempting to take the abstractions it offers at face value and to ignore the complexity happening under the hood. As a result, we have repeatedly seen SQLite become a source of performance problems. This isn&#39;t an indictment of SQLite itself -- any other relational embedded DB would pose the same challenges.\n SQLite DBs are simply too complex to be used for relatively simple data storage needs. The list below outlines some of the ways SQLite can backfire on developers.\n   Features that regularly add data to the DB (e.g. visited URIs), but have no expiration policy for the data, can easily cause the DB to balloon into tens or hundreds of MBs. This is particularly undesirable on mobile devices\n WAL journals have been known to grow very large, e.g.  bug 609122,  bug 608422, their size must be limited at a performance cost\n  Every index contains a complete copy of the indexed data. Creating indexes on lengthy text fields (like URIs) will cause very large indexes to be stored on disk\n  Your database file can suffer from logical/internal fragmentation due to common SQL patterns  Eg appending data to columns with indexes causes interleaved index and table data. This means both table and index scans are non-sequential until a VACUUM is performed.\n Physical/external fragmentation can also happen due to SQLite using inappropriate defaults SQLite does not preallocate files by default. Appending data to an SQLite in multiple sessions often means the OS has to start a new data block that&#39;s not adjacent to the previous one.\n By default sqlite will grow/shrink the database file by |page_size|. This behavior causes new data blocks to be allocated too. This is especially problematic on OSX, Linux XFS.\n Factory-default SQLite  page size is 1024 bytes. When the Mozilla default page size was changed to 32KB in  bug 416330, there was a  4x reduction in SQLite IO waits according to Telemetry. This is likely due to a reduction in syscalls and OS readahead.\n Performance can  significantly degenerate over time; scheduling periodic  rebuilds of the DB is necessary.  VACUUM empties the free pages space of the database file, that means after a vacuum, until there&#39;s new free space, inserts will be a little bit more expensive cause they will have to grow the file\n SQLite uses fsync&#39;s to guarantee transaction durability and enable recovery from crashes. fsyncs can be very expensive, and happen relatively frequently in the default rollback-journal mode. This performance/reliability trade-off might not be necessary for simple storage needs, especially if the important data can be rebuilt at any time.\n JSON files or log files will show better I/O patterns almost every time, especially if they&#39;re compressed and read/written in entirety each time\n  By default, our SQLite wrapper uses a  max of 2MB memory cache per connection. This cache size may be too large for Fennec and B2G, especially if there are multiple connections. The cache size should be adjusted with  PRAGMAs\n Queries unable to use an index will use SCAN TABLE to go through all of the rows, this will quickly grow the page memory cache to the maximum value, this space is never called back until PRAGMA shrink_memory is used, or the connection is closed.\n  Users have found certain Firefox features using 15% of their CPU time because SQL statements were constantly being executed in the background\n    Main-thread SQL is a known evil, and luckily there are only a few major sources of it left in the codebase, but the  Slow SQL dashboard shows that developers are still getting bitten by main thread I/O from unexpected sources:\n PRAGMA statements to set the cache size are done on the main thread, but if this is the first transaction of the session, it can trigger SQLite crash recovery operations. This is particularly bad if using the default WAL journal size. Also note that &#34;crashes&#34; are particularly common on mobile where we never have clean exits.\n  Bad SQLite performance off the main thread also degrades Firefox responsiveness because it can contend with the main thread for access to storage. Sadly our code still does main-thread I/O, and additionally, there will always be main-thread IO from add-ons and swapping.\n Even seemingly simple SQL queries can take multiple seconds to execute e.g. in  bug 966469 a user reports the following statement taking 22 seconds to execute:  DELETE FROM moz_pages WHERE id NOT IN (SELECT DISTINCT(pid) FROM moz_subresources);\n  Slow DB operations hurt UX. For example, you might have noticed that the AwesomeBar sometimes takes a very long time to fetch any auto-complete suggestions.\n The schemas have to be designed carefully and the DB has to be maintained periodically\n Fragmentation causes extra seeks, and the problem is made worse by magnetic hard disks and cheap or old SSDs. Vacuuming DBs helps, but vacuums are resource-intensive and scheduling them can be tricky. See the  Tips section\n  If you need to store a small amount of data (less than 1MB), you should use JSON files, and do all your I/O off the main thread. Simple solutions with linear worst-case performance are ideal. If you&#39;re working with larger amounts of data (roughly on the order of 1MB), you should compress the JSON data with Snappy or lz4 before writing it to disk\n  If your workload involves a lot of strings, don&#39;t use SQLite. Store your data in external files.\n If your workload involves a lot of blobs, don&#39;t use SQLite. Store your data in external files.\n If you have a large dataset, but you don&#39;t need to run complex queries over it, evaluate a JSON files structure on disk\n If you must read and write most of your data every time, evaluate using a JSON file\n For larger datasets or when SQL is absolutely necessary, use SQLite. Make sure you understand  how SQLite works, carefully design your schemas and then profile your implementation.\n NOTE:  We&#39;re currently working on an intermediate solution based on log-storage which will reduce the amount of data written for small modifications to data already on disk.\n   See  the list of SQLite pragmas, the defaults are probably not OK. We already over-ride some defaults in the  moz.build file and  mozStorageConnection.cpp.\n Use a  write-ahead log for fewer fsyncs Though limit the size of the journal, by using a small autocheckpoint and a journal_size_limit about thrice that size\n Set the DB cache size based on the device specs, and consider adjusting it dynamically based on memory pressure on mobile devices\n For large DBs prone to fragmentation, pre-allocate a large empty DB initially by increasing the DB&#39;s growth increment This can be done by calling Connection::SetGrowthIncrement() which changes the value of SQLite&#39;s  SQLITE_FCNTL_CHUNK_SIZE. See  bug 581606 for reference.\n Use a memory temp store if the amount of data in memory entities is acceptable, otherwise temp data will be written to disk, causing unexpected I/O\n  It should go without saying that you should  never execute SQL on the main thread\n Model how large your DB will grow on desktop/mobile. Report the DB size &amp; memory use to  Telemetry to confirm your estimates were accurate.  Implement an expiration policy!\n Profile your implementation and measure the number of SQL operations performed over the course of a typical session if it\u2019s an \u201calways-on\u201d feature and you suspect it might cause performance issues\n Don\u2019t index on text fields, index on hashes of text fields. Indexes can become very large.\n Don&#39;t use the default precision for timestamps (microseconds). Desktop apps are unlikely to ever require this level of precision\n Maintain your DB with  VACUUMs during Firefox version upgrades or during idle times. Run  ANALYZE periodically if necessary You should have a vacuum plan from the get-go.  This is a requirement for all new code.\n If working on the same data from multiple connections, consider using an unshared  memory cache, to avoid memory contention. This will improve concurrency. Though, it will also multiply the memory cache per the number of connection, so it&#39;s a memory/performance choice you should do carefully", "posttime": "2020-06-15 00:38:37", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "sqlite,firefox,\u6027\u80fd,\u907f\u514d,avoid", "title": "\u6027\u80fd/\u907f\u514d\u5728\u60a8\u7684\u4e0b\u4e00\u4e2aFirefox\u529f\u80fd\u4e2d\u4f7f\u7528SQLite", "title_en": "Performance/Avoid SQLite in Your Next Firefox Feature", "transed": 1, "url": "https://wiki.mozilla.org/Performance/Avoid_SQLite_In_Your_Next_Firefox_Feature", "via": "", "real_tags": ["sqlite", "firefox", "\u6027\u80fd", "\u907f\u514d", "avoid"]}, {"category": "", "categoryclass": "", "imagename": "06bdb001aa74fab83f40e3455610e20f.jpg", "infoid": 1006538, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f5c\u4e3a\u534e\u76db\u987f\u5dde\u7279\u5c3c\u8bfa(\u4eba\u53e3\uff1a1884)\u7684\u5e02\u957f\uff0c\u4ed6\u76ee\u7779\u4e86\u5927\u6d41\u884c\u5bf9\u5f53\u5730\u4f01\u4e1a\u7684\u63a0\u593a\u3002\u5c45\u6c11\u4eec\u4e70\u4e0d\u8d77\u98df\u54c1\u6742\u8d27\u3002\u5f53\u5730\u98df\u54c1\u94f6\u884c\u5916\u6392\u8d77\u4e86\u957f\u961f\u3002\u5728\u4e00\u4e2a\u591a\u6708\u7684\u65f6\u95f4\u91cc\uff0c\u5e02\u4e2d\u5fc3\u770b\u8d77\u6765\u51e0\u4e4e\u88ab\u9057\u5f03\u4e86\u3002\n\u4e3a\u4e86\u8ba9\u7ecf\u6d4e\u590d\u82cf\uff0c\u798f\u5c3c\u5c14\u9700\u8981\u91c7\u53d6\u884c\u52a8\u3002\u4ed6\u544a\u8bc9The Hustle\uff1a\u201c\u6211\u4eec\u8ba8\u8bba\u7684\u662f\u5546\u4e1a\u8d60\u6b3e\uff0c\u5c0f\u989d\u8d37\u6b3e\uff0c\u8bd5\u56fe\u4e0e\u4e00\u7fa4\u4e0d\u540c\u7684\u94f6\u884c\u5408\u4f5c\u3002\u201d\u201c\u6700\u5927\u7684\u95ee\u9898\u662f\uff0c\u2018\u6211\u4eec\u5982\u4f55\u76f4\u63a5\u5e2e\u52a9\u5bb6\u5ead\u548c\u4e2a\u4eba\uff1f\u2019\u201d\n\u8fd9\u4e2a\u8ba1\u5212\u5f88\u5feb\u5c31\u60f3\u597d\u4e86\u3002Fournier\u51b3\u5b9a\uff0cTenino\u5c06\u62e8\u51fa10K\u7f8e\u5143\uff0c\u53d1\u653e\u7ed9\u53d7\u5230\u5927\u6d41\u884c\u4f24\u5bb3\u7684\u4f4e\u6536\u5165\u5c45\u6c11\u3002\u4f46\u4ed6\u6ca1\u6709\u4f7f\u7528\u8054\u90a6\u7f8e\u5143\uff0c\u800c\u662f\u5c06\u94b1\u5370\u5728\u4e13\u4e3a\u7279\u5c3c\u8bfa\u4f7f\u7528\u7684\u8584\u6728\u4e0a\u3002\u4ed6\u7684\u8584\u8377\u7cd6\uff1f\u5f53\u5730\u535a\u7269\u9986\u7684\u4e00\u53f0130\u5e74\u5386\u53f2\u7684\u62a5\u7eb8\u5370\u5237\u673a\u3002\nFournier\u7684\u4e2d\u5fc3\u601d\u60f3\u662f\u76f4\u63a5\u4eceTenino\u81ea\u5df1\u7684\u5386\u53f2\u4e2d\u63d0\u53d6\u51fa\u6765\u7684\u3002\u5728\u5927\u8427\u6761\u671f\u95f4\uff0c\u8be5\u5e02\u4f7f\u7528\u4e0e1890\u5e74\u5b8c\u5168\u76f8\u540c\u7684\u62a5\u7eb8\u5370\u5237\u673a\u5370\u5236\u4e86\u51e0\u5957\u6728\u5e01\u3002\u5728\u4e0d\u5230\u4e00\u5e74\u7684\u65f6\u95f4\u91cc\uff0c\u6728\u5236\u8d27\u5e01\u5e2e\u52a9\u7ecf\u6d4e\u8d77\u6b7b\u56de\u751f\u3002\n\u901a\u8fc7\u73b0\u5728\u6062\u590d\u65e7\u8d27\u5e01\uff0cFournier\u610f\u5916\u5730\u6210\u4e3a\u4e86\u4e00\u573a\u66f4\u5927\u7684\u8fd0\u52a8\u7684\u4e00\u90e8\u5206\u3002\u7531\u4e8e\u4f01\u4e1a\u62c5\u5fc3\u4fdd\u6301\u706f\u706b\u901a\u660e\uff0c\u4eba\u4eec\u4e89\u5148\u6050\u540e\u5730\u5bfb\u627e\u6d88\u8d39\u8d44\u91d1\uff0c\u793e\u533a\u4e00\u76f4\u5728\u52aa\u529b\u7ef4\u6301\u5f53\u5730\u7ecf\u6d4e\u7684\u8fd0\u8f6c\u3002\n\u56e0\u6b64\uff0c\u4ed6\u4eec\u53c8\u6062\u590d\u4e86\u4e00\u79cd\u53e4\u8001\u7684\u7b56\u7565\uff1a\u5f53\u6709\u7591\u95ee\u65f6\uff0c\u81ea\u5df1\u5370\u5236\u949e\u7968\u3002\n\u4eca\u5929\uff0c\u8fd9\u4e9b\u6240\u8c13\u7684\u201c\u5f53\u5730\u8d27\u5e01\u201d\u53ef\u80fd\u4f1a\u5e2e\u52a9\u5c0f\u793e\u533a\u4ece\u65b0\u51a0\u80ba\u708e\u7684\u7ecf\u6d4e\u4f59\u6ce2\u4e2d\u6062\u590d\u8fc7\u6765\u3002\n\u798f\u5c3c\u5c14\u4e0d\u662f\u4f60\u7684\u5343\u7bc7\u4e00\u5f8b\u7684\u653f\u5ba2\u3002\u4ed6\u4ece18\u5c81\u5f00\u59cb\u6210\u4e3a\u4e00\u540d\u6d88\u9632\u5458\uff0c\u7b2c\u4e00\u6b21\u56e0\u4e00\u7cfb\u5217\u73ed\u514b\u897f\u98ce\u683c\u7684\u6e38\u51fb\u961f\u827a\u672f\u9879\u76ee\u62a8\u51fb\u5f53\u5730\u9886\u5bfc\u4eba\u800c\u5728\u5f53\u5730\u58f0\u540d\u72fc\u85c9\u3002\n\u5728\u4ed6\u9732\u9762\u540e\u4e0d\u4e45\uff0c\u4ed6\u8d62\u5f97\u4e86\u5e02\u8bae\u4f1a\u7684\u4e00\u4e2a\u5e2d\u4f4d\uff1b\u56db\u5e74\u540e\uff0c\u4e5f\u5c31\u662f2016\u5e74\uff0c\u4ed6\u6210\u4e3a\u7279\u5c3c\u8bfa\u7684\u5e02\u957f\u3002\nFournier\u6b63\u5728\u5236\u5b9a\u8ba1\u5212\uff0c\u521b\u9020150\u591a\u4e2a\u65b0\u7684\u519c\u4e1a\u5c31\u4e1a\u673a\u4f1a\u3002\u4f46\u662f\uff0cTenino\u7684\u4f01\u4e1a--\u8fd9\u4e9b\u4f01\u4e1a\u662f\u5f53\u5730\u4eba\u6240\u6709\u7684\uff0c\u5229\u6da6\u5fae\u8584--\u5e76\u4e0d\u662f\u4e3a\u4e86\u7ecf\u53d7\u4f4f\u505c\u6446\u7684\u8003\u9a8c\u800c\u5efa\u7acb\u7684\u3002\n\u201c\u5f88\u591a\u5df2\u7ecf\u8868\u793a\u4e0d\u4f1a\u91cd\u65b0\u5f00\u5f20\u4e86\uff0c\u201d\u798f\u5c3c\u5c14\u8bf4\uff0c\u201c\u800c\u90a3\u4e9b\u4e00\u76f4\u5728\u575a\u6301\u7684\u5c06\u9700\u8981\u63d0\u632f\u3002\u201d\n\u8fd9\u5ea7\u57ce\u5e02\u4e5f\u6bd4\u534e\u76db\u987f\u5dde\u7684\u5176\u4ed6\u5730\u533a\u66f4\u8d2b\u7a77\u3002Fournier\u8bf4\uff1a\u201c\u5728\u6211\u4eec\u7684\u5b66\u533a\uff0c\u83b7\u5f97\u514d\u8d39\u548c\u51cf\u4ef7\u5348\u9910\u7684\u5b69\u5b50\u6bd4\u4f8b\u66f4\u9ad8\u3002\u201d\u201c\u8d2b\u56f0\u7387\u66f4\u9ad8\u3002\u201d\nFournier\u7684\u672c\u5e01\u8ba1\u5212\u662f\u8fd9\u6837\u8fd0\u4f5c\u7684\uff1a\u8d2b\u56f0\u7ebf\u4ee5\u4e0b\u7684\u5c45\u6c11\u53ef\u4ee5\u7533\u8bf7\u4eceTenino\u9884\u7559\u768410000\u7f8e\u5143\u57fa\u91d1\u4e2d\u83b7\u5f97\u8d44\u91d1\u3002Fournier\u8bf4\uff0c\u4ed6\u4eec\u8fd8\u5fc5\u987b\u8bc1\u660e\u5927\u6d41\u884c\u5bf9\u4ed6\u4eec\u4ea7\u751f\u4e86\u5f71\u54cd\uff0c\u4f46\u201c\u6211\u4eec\u5bf9\u8fd9\u610f\u5473\u7740\u4ec0\u4e48\u6301\u76f8\u5f53\u5f00\u653e\u7684\u6001\u5ea6\u3002\u201d\n\u4e00\u65e6\u83b7\u5f97\u6279\u51c6\uff0c\u4ed6\u4eec\u5c31\u53ef\u4ee5\u9886\u53d6\u7528\u6728\u5236\u949e\u7968\u5370\u5236\u7684\u6d25\u8d34\uff0c\u6bcf\u5f20\u4ef7\u503c25\u7f8e\u5143\u3002\u8be5\u5e02\u5c06\u6bcf\u4e2a\u5c45\u6c11\u6bcf\u6708\u53ef\u4ee5\u79ef\u7d2f\u7684\u6728\u5e01\u91d1\u989d\u9650\u5236\u572812\u5f20(\u7ea6\u5408300\u7f8e\u5143)\u3002\u636eFournier\u8bf4\uff0c\u6bcf\u5f20\u7eb8\u5e01\u4e0a\u90fd\u6709\u4e00\u4e2a\u62c9\u4e01\u6587\u94ed\u6587\uff0c\u610f\u601d\u57fa\u672c\u4e0a\u662f\u201c\u6211\u4eec\u5df2\u7ecf\u5904\u7406\u597d\u4e86\u3002\u201d\n\u8fd9\u9879\u652f\u51fa\u6709\u51e0\u4e2a\u9650\u5236\uff1a\u5c45\u6c11\u4e0d\u80fd\u7528\u8fd9\u7b14\u94b1\u8d2d\u4e70\u9999\u70df\u3001\u5f69\u7968\u6216\u9152\u7c7b\u3002\u8d27\u5e01\u662f\u4e3a\u751f\u6d3b\u5fc5\u9700\u54c1\u800c\u8bbe\u8ba1\u7684\uff0c\u5305\u62ec\u98df\u7269\u3001\u6c7d\u6cb9\u548c\u65e5\u6258\u3002\u9547\u4e0a\u51e0\u4e4e\u6bcf\u4e00\u5bb6\u4f01\u4e1a\u90fd\u63a5\u53d7\u6728\u5236\u7eb8\u5e01\uff0c\u4ed6\u4eec\u6bcf\u4e2a\u6708\u53ef\u4ee5\u4e24\u6b21\u5411\u5e02\u653f\u5e9c\u63d0\u4ea4\u8d4e\u56de\u8bf7\u6c42\uff0c\u5c06\u7eb8\u5e01\u5151\u6362\u6210\u73b0\u91d1\u3002\n\u4f46\u662f\u4e3a\u4ec0\u4e48\u8981\u628a\u94b1\u5370\u5728\u6728\u5934\u4e0a\u5462\uff1f\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u7ed9\u5c45\u6c11\u4ef7\u503c300\u7f8e\u5143\u7684\u8054\u90a6\u8d44\u91d1\u5462\uff1f\n\u7b54\u6848\u5f88\u7b80\u5355\uff1a\u901a\u8fc7\u521b\u9020\u81ea\u5df1\u7684\u5f53\u5730\u8d27\u5e01\uff0cTenino\u5c06\u94b1\u7559\u5728\u4e86\u793e\u533a\u3002\u6b63\u5982Fournier\u6240\u8bf4\uff0c\u201c\u4e9a\u9a6c\u900a\u4e0d\u4f1a\u63a5\u53d7\u6728\u5934\u7f8e\u5143\u3002\u201d\n\u201c\u94b1\u7559\u5728\u57ce\u91cc\u3002\u8fc7\u53bb\u5341\u5e74\u6765\u4e00\u76f4\u7ecf\u8425\u53e4\u8463\u5e97Iron Works\u7cbe\u54c1\u5e97\u7684\u4e54\u4f0a\u65af\u00b7\u6c83\u96f7\u5c14(Joyce Worrell)\u8bf4\u3002Worrell\u51fa\u552e\u8863\u670d\u3001\u73e0\u5b9d\u548c-\u5728\u5979\u7684\u5546\u5e97\u65c1\u8fb9\u7684\u4e00\u4e2a\u6237\u5916\u82b1\u56ed-\u5404\u79cd\u5404\u6837\u7684\u5bb6\u5177\u3002\u8fd9\u4e9b\u5929\uff0c\u5979\u589e\u52a0\u4e86\u53e3\u7f69\u548c\u6d88\u6bd2\u5242\u3002\n\u6c83\u96f7\u5c14\u8bf4\uff0c\u5728\u8fc7\u53bb\u7684\u51e0\u4e2a\u6708\u91cc\uff0c\u5173\u95ed\u4e1a\u52a1\u201c\u5bf9\u6211\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u6765\u8bf4\u90fd\u662f\u4e00\u573a\u707e\u96be\u201d\u3002\u4f46\u5979\u5df2\u7ecf\u56e2\u7ed3\u5728\u6728\u5236\u8d27\u5e01\u5468\u56f4\uff0c\u5c06\u5176\u4f5c\u4e3a\u632f\u5174\u5f53\u5730\u7ecf\u6d4e\u7684\u4e00\u79cd\u65b9\u5f0f-\u6bd5\u7adf\uff0c\u8fd9\u66fe\u7ecf\u5bf9\u8fd9\u5ea7\u57ce\u5e02\u594f\u6548\u8fc7\u4e00\u6b21\u3002\u8d27\u5e01\u8fd8\u6ca1\u6709\u8fdb\u5165\u5979\u7684\u5546\u5e97\uff0c\u4f46\u5979\u671f\u5f85\u7740\u5b83\u5f88\u5feb\u5c31\u4f1a\u5230\u6765\u3002\n\u6c83\u96f7\u5c14\u8bf4\uff1a\u201c\u6211\u4eec\u57ce\u5e02\u7684\u5f88\u591a\u4eba\u90fd\u5728\u96c7\u4f63\u4f4e\u85aa\u5e2e\u624b\u3001\u517c\u804c\u5e2e\u624b\u7684\u5730\u65b9\u5de5\u4f5c\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e00\u76f4\u5904\u4e8e\u5931\u4e1a\u72b6\u6001\u3002\u201d\u201c\u8fd9\u8868\u660e\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u793e\u533a\uff0c\u6211\u4eec\u6b63\u5728\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u771f\u6b63\u4ecb\u5165\u5e76\u63d0\u4f9b\u5e2e\u52a9\u3002\u201d\n\u6700\u521d\u662f\u5c3c\u65af\u5938\u5229\u90e8\u843d\u7684\u5bb6\u56ed\uff0c1851\u5e74\uff0c\u5916\u90e8\u5b9a\u5c45\u8005\u7b2c\u4e00\u6b21\u6765\u5230\u7279\u5c3c\u8bfa\uff0c\u5f53\u65f6\u4e00\u540d\u6765\u81ea\u7f05\u56e0\u5dde\u7684\u6dd8\u91d1\u8005\u5728\u9644\u8fd1\u7684\u6563\u5e03\u6eaa\u8fb9\u5efa\u7acb\u4e86\u4e00\u4e2a\u519c\u573a\u30021872\u5e74\uff0c\u5317\u592a\u5e73\u6d0b\u94c1\u8def\u5728\u7279\u5c3c\u8bfa\u589e\u52a0\u4e86\u4e00\u4e2a\u65b0\u8f66\u7ad9\uff0c\u6709\u4e00\u6bb5\u65f6\u95f4\uff0c\u8be5\u5e02\u662f\u897f\u6d77\u5cb8\u6700\u5317\u7684\u4e00\u7ad9\u3002\n\u5230\u4e8620\u4e16\u7eaa\u4e2d\u671f\uff0c\u4e16\u754c\u5bf9\u8482\u5c3c\u8bfa\u6709\u4e09\u4e2a\u4e86\u89e3\uff1a\u5b83\u7684\u6728\u6750\u751f\u610f\u3001\u91c7\u77f3\u573a\u548c\u5b83\u7684\u6728\u5236\u8d27\u5e01\u3002\n\u4e0a\u56fe\uff1a\u534e\u76db\u987f\u5dde\u7279\u5c3c\u8bfa\u5468\u56f4\u6811\u6797\u4e2d\u7684\u4f10\u6728\u65bd\u5de5\u4eba\u5458(\u56fe\u7247\u6765\u81ea\u534e\u76db\u987f\u5927\u5b66\u56fe\u4e66\u9986\uff0c\u7279\u522b\u6536\u85cf)\uff1a\u4e0b\u56fe\uff1a\u4eca\u5929\u7279\u5c3c\u8bfa\u5468\u56f4\u7684\u5f00\u9614\u571f\u5730(\u97e6\u6069\u00b7\u798f\u5c3c\u5c14\u63d0\u4f9b)\u3002\n\u6728\u5236\u8d27\u5e01\u7684\u4f20\u8bf4\u59cb\u4e8e1931\u5e7412\u6708\uff0c\u5f53\u65f6\u7279\u5c3c\u8bfa\u552f\u4e00\u7684\u94f6\u884c\u5173\u95e8\u4e86\u3002\u5927\u8427\u6761\u6b63\u5e2d\u5377\u5168\u56fd\uff0c\u65e0\u6570\u7684\u9547\u6c11\u5931\u53bb\u4e86\u4ed6\u4eec\u7684\u79ef\u84c4\u3002\u5927\u591a\u6570\u4eba\u4e0d\u5f97\u4e0d\u52c9\u5f3a\u652f\u4ed8\u4ed6\u4eec\u4e0d\u5f97\u4e0d\u652f\u4ed8\u7684\u5c11\u91cf\u6742\u8d27\u3001\u623f\u79df\u548c\u5176\u4ed6\u5fc5\u9700\u54c1\u3002\n\u5f53\u5730\u4e00\u4f4d\u540d\u53eb\u5510\u00b7\u6885\u6770(Don Major)\u7684\u62a5\u7eb8\u51fa\u7248\u5546\u63d0\u51fa\u4e86\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\uff1a\u94f6\u884c\u5012\u95ed\u540e\uff0c\u7279\u5c3c\u8bfa\u53ef\u4ee5\u53d1\u660e\u81ea\u5df1\u7684\u8d27\u5e01\u3002\u5b98\u5458\u4eec\u540c\u610f\u4e86\uff0c\u6885\u6770\u5728\u5377\u8d77\u6765\u7684\u9521\u7279\u5361\u4e91\u6749\u4e0a\u5370\u4e86\u4e00\u7cfb\u5217\u949e\u7968-25\u7f8e\u5206\uff0c1\u7f8e\u5143\uff0c5\u7f8e\u5143\uff0c10\u7f8e\u5143\u3002\u4ed6\u548c\u4e24\u540d\u5f53\u5730\u533b\u751f\u540c\u610f\u81ea\u5df1\u652f\u6301\u6240\u6709\u8d27\u5e01\u3002\u52301933\u5e741\u6708\uff0c\u8be5\u9547\u5df2\u7ecf\u5370\u5236\u4e86\u4ef7\u503c650\u4e07\u7f8e\u5143\u7684\u6728\u5e01\u3002\n\u5728\u8fd9\u4e2a\u5b9e\u9a8c\u4e2d\uff0cTenino\u5e76\u4e0d\u5b64\u5355\u3002\u5728\u5927\u8427\u6761\u671f\u95f4\uff0c\u5f53\u5730\u8d27\u5e01\u8fce\u6765\u4e86\u9ec4\u91d1\u65f6\u4ee3\u3002\u6570\u4ee5\u767e\u8ba1\u7684\u5e02\u653f\u5f53\u5c40\u3001\u5546\u4e1a\u534f\u4f1a\u548c\u5de5\u4eba\u5408\u4f5c\u793e\u5f00\u59cb\u53d1\u884c\u901a\u884c\u8bc1\u3002\u4e00\u9879\u4f30\u8ba1\u8868\u660e\uff0c20\u4e16\u7eaa30\u5e74\u4ee3\u5728\u7f8e\u56fd\u6d41\u901a\u7684\u7eb8\u5e01\u4ef7\u503c\u9ad8\u8fbe10\u4ebf\u7f8e\u5143\u3002\n\u8d44\u91d1\u7d27\u5f20\u7684\u4f01\u4e1a\u5f88\u5feb\u5c31\u4f9d\u8d56\u5f53\u5730\u8d27\u5e01\u652f\u4ed8\u5458\u5de5\u5de5\u8d44\u3002\u4e00\u4e2a\u5178\u8303\u6545\u4e8b\u6765\u81ea\u9a6c\u8428\u8bf8\u585e\u5dde\u65af\u666e\u6797\u83f2\u5c14\u5fb7\u8054\u76df(Springfield Union)\u7684\u51fa\u7248\u5546\uff0c\u4ed6\u572820\u4e16\u7eaa30\u5e74\u4ee3\u5f00\u59cb\u7528\u81ea\u5df1\u7684\u7eb8\u6761\u652f\u4ed8\u5458\u5de5\u5de5\u8d44\u3002\n\u8fd9\u4e2a\u60f3\u6cd5\u662f\uff1a\u5458\u5de5\u53ef\u4ee5\u628a\u8fd9\u5f20\u7eb8\u6761\u82b1\u5728\u5728\u62a5\u7eb8\u4e0a\u505a\u5e7f\u544a\u7684\u4f01\u4e1a\uff0c\u7136\u540e\u518d\u628a\u5b83\u5bc4\u56de\u5de5\u4f1a\uff0c\u4ee5\u6362\u53d6\u5e7f\u544a\u7a7a\u95f4\uff0c\u4ece\u800c\u7ed3\u675f\u7ecf\u6d4e\u5faa\u73af\u3002\n\u7279\u5c3c\u8bfa\u5c45\u6c11\u51ef\u745f\u7433\u00b7\u6469\u897f\u57281932\u5e74\u7528\u6728\u5e01\u6446\u59ff\u52bf(\u201c\u73af\u7403\u7167\u7247\u201d/\u201c\u6d1b\u6749\u77f6\u65f6\u62a5\u201d\uff1b1932\u5e74)\u3002\n\u7279\u5c3c\u8bfa\u7684\u8d27\u5e01\u5c24\u5176\u6293\u4f4f\u4e86\u65f6\u4ee3\u7cbe\u795e\u3002\u6728\u5236\u8d27\u5e01\u7684\u6d88\u606f\u9996\u5148\u4f20\u904d\u4e86\u5168\u56fd\uff0c\u7136\u540e\u4f20\u904d\u4e86\u4e16\u754c\u3002\n\u829d\u52a0\u54e5\u7684\u94f6\u884c\u5f00\u59cb\u63a5\u53d7\u63d0\u5c3c\u8bfa\u7684\u6728\u94b1\u3002\u534e\u76db\u987f\u53c2\u8bae\u5458C.C.Dill\u5411\u56fd\u4f1a\u5439\u5618\u8fd9\u4ef6\u4e8b\u3002\u201c\u6d1b\u6749\u77f6\u65f6\u62a5\u201d\u5ba3\u79f0\uff0c\u201c\u94b1\u73b0\u5728\u957f\u5728\u6811\u4e0a\u3002\u201d\u4ece\u5370\u5ea6\u8fdc\u9053\u800c\u6765\u7684\u6e38\u5ba2\u6765\u5230\u7279\u5c3c\u8bfa\uff0c\u62a2\u4e00\u5757\u4ed6\u4eec\u81ea\u5df1\u7684\u6728\u5e01\u3002\u9700\u6c42\u589e\u957f\u5982\u6b64\u4e4b\u9ad8\uff0c\u4ee5\u81f3\u4e8e\u6536\u85cf\u5bb6\u5f00\u59cb\u4e3a\u4e00\u4e2a\u6728\u5236\u786c\u5e01\u652f\u4ed82.50\u7f8e\u5143-\u52a0\u4ef710\u500d\u3002\n1933\u5e741\u67081\u65e5\uff0c\u5f53\u7279\u5c3c\u8bfa\u7684\u4f01\u4e1a\u505c\u6b62\u63a5\u53d7\u6728\u5236\u8d27\u5e01\u65f6\uff0c\u7f8e\u56fd\u62a5\u7eb8\u5ba3\u5e03\u8be5\u9547\u5df2\u201c\u8131\u79bb\u6728\u5934\uff0c\u56de\u5f52\u91d1\u672c\u4f4d\u5236\u201d\u3002\n\u73af\u987e\u5168\u7403\uff0c\u4f60\u4f1a\u53d1\u73b0\u5f53\u5730\u8d27\u5e01\u968f\u5904\u53ef\u89c1\u3002\u5728\u65b0\u51a0\u80ba\u708e\u7684\u7ecf\u6d4e\u4f59\u6ce2\u4e2d\uff0c\u5c0f\u9547\u9886\u5bfc\u4eba\u4ea7\u751f\u4e86\u4e0e\u798f\u5c3c\u5c14\u76f8\u540c\u7684\u60f3\u6cd5\uff1a\n\u610f\u5927\u5229\u7684\u5361\u65af\u7279\u5229\u8bfa\u00b7\u5fb7\u5c14\u00b7\u6bd4\u8d39\u5c14\u8bfa(Castellino Del Biferno)\u9547\u62e5\u6709550\u4eba\u53e3\uff0c\u4e3a\u4e86\u523a\u6fc0\u5546\u4e1a\uff0c\u8be5\u9547\u4e8e4\u6708\u4e0b\u65ec\u5f00\u59cb\u5370\u5236\u7ef0\u53f7\u4e3a\u201c\u675c\u5361\u8fea\u201d(Ducati)\u7684\u5f53\u5730\u7eb8\u5e01\u3002\n\u58a8\u897f\u54e5\u7684Santa Mar\u00eda Jajalpa\u53d1\u51fa\u4e86\u4ef7\u503c\u7ea62\u5343\u7f8e\u5143\u7684\u5f53\u5730\u8d27\u5e01\uff0c\u540d\u4e3a\u8d3e\u8d3e\u6bd4\u7d22\uff0c\u5e2e\u52a9\u8d2b\u56f0\u5c45\u6c11\u5728\u5f53\u5730\u8d2d\u4e70\u852c\u83dc\u3001\u9e21\u8089\u548c\u7389\u7c73\u997c\u3002\n\u5df4\u897f\u57ce\u5e02\u9a6c\u91cc\u5361\u6b63\u5728\u5229\u7528\u4e00\u79cd\u540d\u4e3a\u8499\u5e03\u5361\u7684\u6570\u5b57\u5f53\u5730\u8d27\u5e01\u8d5a\u53d6\u989d\u5916\u7684\u94b1\u3002\u8499\u5e03\u5361\u65e0\u5904\u4e0d\u5728\uff0c\u751a\u81f3\u8fde\u5e02\u653f\u5e9c\u5b98\u5458\u90fd\u662f\u7528\u8499\u5e03\u5361\u9886\u5de5\u8d44\u7684\uff0c\u4ee5\u81f3\u4e8e\u5546\u5bb6\u8981\u5411\u5f53\u5730\u653f\u5e9c\u652f\u4ed82%\u7684\u8d39\u7528\u624d\u80fd\u63a5\u53d7\u4ed6\u4eec\u3002\u8fd9\u4e9b\u94b1\u88ab\u8f93\u9001\u5230\u65e0\u606f\u8d37\u6b3e\u4e2d\uff0c\u63d0\u4f9b\u7ed9\u793e\u533a\u6210\u5458\u3002\n\u5728\u7f8e\u56fd\uff0c\u672c\u5e01\u8d70\u52bf\u66f4\u662f\u56db\u5206\u4e94\u88c2\u3002\u8bb8\u591a\u8d27\u5e01-\u6bd4\u5982\u4f0a\u8428\u5361\u5c0f\u65f6\u6570(Ithaca\uff0cNew York)\u6216\u6d77\u6e7e\u96c4\u9e7f(Bay Bucks\uff0c\u5bc6\u6b47\u6839\u5dde\u7279\u62c9\u5f17\u65af\u57ce)-\u5728\u9010\u6e10\u6d88\u5931\u4e4b\u524d\uff0c\u66fe\u5728\u5341\u5e74\u5de6\u53f3\u7684\u65f6\u95f4\u91cc\u8f70\u52a8\u4e00\u65f6\u3002\n\u6b63\u5728\u8fdb\u884c\u7684\u6700\u6210\u529f\u7684\u5b9e\u9a8c\u4e4b\u4e00\u662fBerkShares\uff0c\u8fd9\u662f\u4e00\u79cd\u7eb8\u5e01\uff0c\u6210\u7acb\u4e8e2006\u5e74\uff0c\u901a\u8fc7\u975e\u8425\u5229\u6027\u7684\u8212\u9a6c\u8d6b\u65b0\u7ecf\u6d4e\u4e2d\u5fc3(Schumacher Center For New Economics)\u6210\u7acb\u3002\u9a6c\u8428\u8bf8\u585e\u5dde\u5927\u5df4\u7075\u987f\u7684400\u591a\u5bb6\u4f01\u4e1a\u63a5\u53d7BerkShares\uff0c\u8d44\u91d1\u901a\u8fc7\u793e\u533a\u94f6\u884c\u7f51\u7edc\u8fdb\u884c\u652f\u6301\u3002\n\u8212\u9a6c\u8d6b\u4e2d\u5fc3\u8d1f\u8d23\u4eba\u82cf\u73ca\u00b7\u7ef4\u7279(Susan Witt)\u8868\u793a\uff0c\u76ee\u524d\u7684\u7ecf\u6d4e\u5d29\u6e83\u53ea\u662f\u7a81\u663e\u4e86\u50cfBerkShares\u8fd9\u6837\u7684\u8d27\u5e01\u7684\u4ef7\u503c\u3002\n\u5979\u7684\u7ec4\u7ec7\u5df2\u7ecf\u6536\u5230\u6765\u81ea\u5168\u56fd\u5404\u5730\u5e02\u653f\u5f53\u5c40\u7684\u8bb8\u591a\u8bf7\u6c42\uff0c\u5e0c\u671b\u6309\u7167BerkShares\u6a21\u5f0f\u5efa\u7acb\u81ea\u5df1\u7684\u8d27\u5e01\u7cfb\u7edf\uff1b\u5176\u4e2d\u4e24\u4e2a\u6b63\u5728\u8003\u8651\u53ef\u80fd\u7684\u4e0b\u4e00\u6b65\u884c\u52a8\u3002\n\u201c\u5bf9\u5c0f\u4f01\u4e1a\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u4e25\u5cfb\u7684\u65f6\u671f\u3002\u5f88\u591a\u4eba\u90fd\u6d3b\u4e0d\u4e0b\u53bb\u4e86\uff0c\u201c\u7ef4\u7279\u8bf4\u3002\u201c\u5f53\u5730\u7ba1\u7406\u7684\u8d27\u5e01\u662f\u6ee1\u8db3\u5f53\u5730\u9700\u6c42\u7684\u4f18\u96c5\u5de5\u5177\u3002\u201d\n\u4f46\u5f53\u5730\u8d27\u5e01\u771f\u7684\u80fd\u63d0\u632f\u5f53\u5730\u7ecf\u6d4e\u5417\uff1f\u8fc7\u53bb\u6709\u4e00\u4e9b\u7ebf\u7d22\u3002\n\u4ee5\u5965\u5730\u5229\u5c0f\u9547\u6c83\u5c14\u683c\u5c14\u4e3a\u4f8b\uff0c\u8be5\u9547\u4e8e1932\u5e74\u63a8\u51fa\u4e86\u81ea\u5df1\u7684\u5148\u4ee4\u3002\u4e3a\u4e86\u4fdd\u6301\u5c45\u6c11\u6d88\u8d39\uff0c\u6c83\u5c14\u683c\u5c14\u5728\u5c45\u6c11\u6301\u6709\u7eb8\u5e01\u65f6\u6bcf\u6708\u9644\u52a01%\u7684\u7f5a\u6b3e\u3002\u52301933\u5e74\uff0c\u6bcf\u4e2a\u6c83\u5c14\u683c\u5148\u4ee4\u5df2\u7ecf\u6d41\u901a\u4e86463\u6b21--\u662f\u5965\u5730\u5229\u56fd\u5bb6\u8d27\u5e01\u6d41\u901a\u901f\u5ea6\u7684\u4e24\u500d\u591a\u3002\u6c83\u5c14\u683c\u5c14\u7684\u5931\u4e1a\u7387\u4e0b\u964d\u4e8625%\uff0c\u5c3d\u7ba1\u5168\u56fd\u5176\u4ed6\u5730\u533a\u7684\u5931\u4e1a\u7387\u4ecd\u5728\u7ee7\u7eed\u98d9\u5347\u3002\n\u5e03\u9c81\u585e\u5c14\u81ea\u7531\u5927\u5b66(\u6bd4\u5229\u65f6)\u7ecf\u6d4e\u5b66\u6559\u6388\u9a6c\u96f7\u514b\u00b7\u80e1\u767b(Marek Hudon)\u8868\u793a\uff0c\u50cf\u8fd9\u6837\u7684\u8f76\u4e8b\u8868\u660e\u4e86\u5171\u540c\u4f53\u8d27\u5e01\u7684\u6f5c\u529b-\u4f46\u68b3\u7406\u51fa\u5171\u540c\u4f53\u8d27\u5e01\u4e0e\u7ecf\u6d4e\u97e7\u6027\u4e4b\u95f4\u7684\u660e\u786e\u5173\u7cfb\u662f\u590d\u6742\u7684\u3002\n\u201c\u6709\u5f88\u591a\u5546\u5e97\u8bf4\uff0c\u591a\u4e8f\u4e86\u793e\u533a\u8d27\u5e01\uff0c\u4ed6\u4eec\u6709\u4e86\u65b0\u7684\u5ba2\u6237\uff0c\u201dHudon\u8bf4\uff0c\u4f46\u201c\u5f88\u96be\u5c06\u8fd9\u79cd\u5f53\u5730\u8d27\u5e01\u4e0e\u771f\u6b63\u7684\u5b8f\u89c2\u7ecf\u6d4e\u5f71\u54cd\u4e4b\u95f4\u5efa\u7acb\u56e0\u679c\u5173\u7cfb\u3002\u201d\nHudon\u57282015\u5e74\u4e0e\u4eba\u5408\u8457\u4e86\u4e00\u7bc7\u5173\u4e8e\u793e\u533a\u8d27\u5e01\u7814\u7a76\u7684\u7efc\u8ff0\uff0c\u53d1\u73b0\u5927\u7ea6\u6709\u4e00\u534a\u7684\u201c\u793e\u533a\u8d27\u5e01\u201d(\u4e00\u4e2a\u603b\u62ec\u672f\u8bed\uff0c\u5305\u62ec\u50cfBerkShares\u6216Tenino\u7684\u6728\u5e01\u8fd9\u6837\u7684\u5f53\u5730\u8d27\u5e01)\u6ca1\u6709\u53ef\u8861\u91cf\u7684\u5b8f\u89c2\u7ecf\u6d4e\u5f71\u54cd\u3002\n\u4f46\u7814\u7a76\u8fd8\u53d1\u73b0\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5f53\u5730\u8d27\u5e01\u53ef\u4ee5\u201c\u4f5c\u4e3a\u62b5\u5fa1\u5916\u90e8\u7ecf\u6d4e\u51b2\u51fb\u7684\u7f13\u51b2\u201d\u3002\u867d\u7136\u5b83\u4eec\u7684\u5f71\u54cd\u53ef\u80fd\u4e0d\u4f1a\u88ab\u5e7f\u6cdb\u611f\u53d7\u5230\uff0c\u4f46\u5f53\u5730\u8d27\u5e01\u201c\u5bf9\u4e00\u5c0f\u90e8\u5206\u4f46\u76f8\u5f53\u5927\u7684\u4eba\u53e3\u6765\u8bf4\u610f\u4e49\u91cd\u5927\u201d\uff1a\u7ecf\u6d4e\u4e0a\u5904\u4e8e\u8fb9\u7f18\u5730\u4f4d\u7684\u4eba\u3002\n\u4e54\u4f0a\u65af\u00b7\u6c83\u96f7\u5c14(Joyce Worrell)\u5728\u7279\u5c3c\u8bfa\u7ecf\u8425\u7740\u4e00\u5bb6\u5c0f\u53e4\u8463\u5e97\uff0c\u4ed6\u662f\u9547\u4e0a\u8bb8\u591a\u5c0f\u4f01\u4e1a\u4e3b\u4e2d\u7684\u4e00\u5458\uff0c\u4ed6\u4eec\u8868\u793a\u5c06\u63a5\u53d7\u5f53\u5730\u8d27\u5e01(\u4e54\u4f0a\u65af\u00b7\u6c83\u96f7\u5c14\u63d0\u4f9b)\u3002\n\u534e\u76db\u987f\u5dde\u751f\u547d\u7f8e\u5143\u7684\u521b\u5efa\u8005\u5f17\u6717\u897f\u65af\u00b7\u827e\u5229\u544a\u8bc9\u201c\u9a97\u5c40\u62a5\u201d\uff0c\u4ed6\u8ba4\u8bc6\u7684\u4e00\u4f4d\u82e6\u82e6\u6323\u624e\u7684\u8d1d\u7075\u6c49\u5973\u5b50\u501f\u4e86\u4ef7\u503c\u7ea69000\u7f8e\u5143\u7684\u751f\u547d\u7f8e\u5143\u3002\u4e24\u5e74\u540e\uff0c\u5728\u793e\u533a\u4fe1\u8d37\u7684\u652f\u6301\u4e0b\uff0c\u8fd9\u540d\u5987\u5973\u81ea\u98df\u5176\u529b\uff0c\u5f00\u59cb\u507f\u8fd8\u5979\u7684\u627f\u8bfa\u3002\n\u201c\u5982\u679c\u5979\u53bb\u94f6\u884c\u8bf4\uff0c\u2018\u4f60\u80fd\u5728\u63a5\u4e0b\u6765\u7684\u4e24\u5e74\u91cc\u501f\u7ed9\u62111\u4e07\u7f8e\u5143\u5417\uff1f\u2019\u4ed6\u4eec\u4f1a\u7b11\u7740\u8bf4\uff0c\u2018\u5f53\u7136\u4e0d\u662f\uff0c\u2019\u201c\u827e\u5229\u8bf4\u3002\n\u63d0\u5c3c\u8bfa\u7684\u6728\u5e01\u4e0e\u8bb8\u591a\u5f53\u5730\u8d27\u5e01\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u662f\u6682\u65f6\u7684\uff1a\u5728\u8be5\u9547\u5ba3\u5e03\u7ed3\u675f\u65b0\u51a0\u80ba\u708e\u7d27\u6025\u72b6\u6001\u540e\u4e0d\u4e45\uff0c\u8fd9\u4e9b\u94b1\u5c31\u4f1a\u8d2c\u503c\u3002\n\u867d\u7136Tenino\u9879\u76ee\u53ef\u80fd\u6ca1\u6709\u4e00\u4e9b\u540c\u884c\u90a3\u4e48\u96c4\u5fc3\u52c3\u52c3\uff0c\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u5b83\u7684\u597d\u5904\u4e0d\u4f1a\u88ab\u611f\u53d7\u5230\u3002Fournier\u8bf4\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4ed6\u5df2\u7ecf\u6279\u51c6\u4e86\u81f3\u5c11\u516d\u4efd\u6728\u8d28\u8d27\u5e01\u7684\u7533\u8bf7\uff0c\u8fd8\u6709\u5341\u51e0\u4efd\u9700\u8981\u5ba1\u67e5\u3002\n\u73b0\u5728\u5c31\u786e\u5207\u5730\u77e5\u9053\u8fd9\u4e2a\u9879\u76ee\u4f1a\u5e26\u6765\u4ec0\u4e48\u8fd8\u4e3a\u65f6\u8fc7\u65e9\u3002\u4f46\u5728\u6700\u8fd1\u7684\u4e00\u4e2a\u5468\u56db\uff0c\u798f\u5c3c\u5c14\u542c\u8d77\u6765\u5f88\u4e50\u89c2\u3002\u8fd9\u7b14\u94b1\u5df2\u7ecf\u5f00\u59cb\u6d41\u5165\u5f53\u5730\u7684\u5546\u5e97\uff0c\u8bb8\u591a\u4f01\u4e1a\u90fd\u5728Facebook\u4e0a\u53d1\u5e03\u8d27\u5e01\u7684\u7167\u7247\u3002\n\u8fd9\u4e2a\u9879\u76ee\u5df2\u7ecf\u5f15\u8d77\u4e86\u5f53\u5730\u8db3\u591f\u7684\u5174\u594b\uff0c\u4ee5\u81f3\u4e8e\u7279\u5c3c\u8bfa\u5546\u4f1a\u6709\u5174\u8da3\u8ba9\u6728\u5934\u7f8e\u5143\u6210\u4e3a\u7279\u5c3c\u8bfa\u7684\u6c38\u4e45\u56fa\u5b9a\u7269\u54c1-\u5373\u4f7f\u5728\u5927\u6d41\u884c\u8fc7\u53bb\u4e4b\u540e\u3002\n\u201c\u6211\u4eec\u4f1a\u8fd0\u884c\u8fd9\u4e2a\u8ba1\u5212\uff0c\u201d\u798f\u5c3c\u5c14\u8bf4\uff0c\u201c\u7136\u540e\u6211\u4eec\u4f1a\u8003\u8651\u62e5\u6709\u81ea\u5df1\u7684\u57ce\u5e02\u8d27\u5e01\u3002\u201d", "note_en": "As the mayor of Tenino, Washington (population: 1,884), he\u2019d watched the pandemic rake local businesses. Residents couldn\u2019t afford groceries. Long lines snaked outside the local food bank. For more than a month, the downtown area looked almost abandoned.\n To bring back the economy, Fournier needed to act. \u201cWe were talking about grants for business, microloans, trying to team up with a bunch of different banks,\u201d he tells  The Hustle. \u201cThe big concern was, \u2018How do we directly help families and individuals?\u2019\u201d\n  The plan came together fast. Fournier decided that Tenino would set aside $10k to give out to low-income residents hurt by the pandemic. But instead of using federal dollars, he\u2019d print the money on thin sheets of wood designed exclusively for use in Tenino. His mint? A 130-year-old newspaper printer from a local museum.\n Fournier\u2019s central idea is pulled straight from Tenino\u2019s own history. During the Great Depression, the city printed sets of wooden dollars using that exact same 1890 newspaper printer. Within a year, the wooden currency had helped bring the economy back from the dead.\n By reinstating the old currency now, Fournier has accidentally become part of a much bigger movement. With businesses worried about keeping the lights on and people scrambling to find spending money, communities have struggled to keep their local economies afloat.\n So they\u2019ve revived an old strategy: When in doubt, print your own money.\n Today, these so-called \u201clocal currencies\u201d might help small communities recover from the economic fallout of COVID-19.\n  Fournier isn\u2019t your cookie-cutter politician. A firefighter since the age of 18, he first gained local notoriety for a series of Banksy-style guerilla art projects that took a jab at local leaders.\n Soon after he revealed himself, he won a spot on the city council; four years later, in 2016, he became Tenino\u2019s mayor.\n    Fournier was working on  plans to create 150+ new agricultural jobs. But Tenino\u2019s businesses \u2014 which are locally owned and run on small margins \u2014 weren\u2019t built to weather a lockdown.\n \u201cThere\u2019s a lot of them that have already said they\u2019re not going to reopen,\u201d says Fournier, \u201c[and] the ones that have been hanging on are going to need a boost.\u201d\n The city is also poorer than the rest of Washington state. \u201cWe have a higher rate of kids in our school district that receive free and reduced lunch,\u201d says Fournier. \u201cThere\u2019s a higher rate of folks who are in poverty.\u201d\n Fournier\u2019s local currency program works like this: Residents below the poverty line can apply to receive money from the $10k fund that Tenino has set aside. Fournier says they also have to prove that the pandemic has impacted them, but \u201cwe\u2019re pretty open to what that means.\u201d\n Once they\u2019re approved, they can pick up their stipends, printed in wooden notes worth $25 each. The city is capping the amount each resident can accrue at 12 wooden notes \u2014 or $300 \u2014 per month. According to Fournier, each note features a Latin inscription that means, basically, \u2018We\u2019ve got this handled.\u2019\n The spending comes with a few restrictions: Residents can\u2019t use the money to buy cigarettes, lottery tickets, or alcohol. The currency is designed for the essentials, including food, gas, and daycare. Almost every business in town accepts the wooden notes, and twice a month, they can submit  redemption requests to the city to turn the notes into cash.\n   But why print the money on wood? Why not just give residents $300 worth of federal dollars?\n The answer is simple: By creating its own local currency, Tenino keeps the money in the community. As Fournier puts it, \u201cAmazon will not be accepting wooden dollars.\u201d\n \u201cThe money stays in the city. It doesn\u2019t go out to Walmart and Costco and all those places,\u201d says Joyce Worrell, who has run the antique shop Iron Works Boutiques for the past decade. Worrell sells clothes, jewelry, and \u2014 in an outdoor garden that adjoins her shop \u2014 an assortment of furniture. These days, she\u2019s added masks and disinfectants.\n Closing down business these last few months, Worrell says, was \u201ca catastrophe for a lot of us.\u201d But she has rallied around the wooden currency as a way to revitalize the local economy \u2014 after all, it worked for the city once before. The currency hasn\u2019t woven its way into her store yet, but she\u2019s expecting it soon.\n \u201cA lot of the people in our city work for places that hire low-wage help, part-time help, so they\u2019ve been out of work this whole time,\u201d Worrell says. \u201cThis shows that we\u2019re doing something as a community to really step in and help.\u201d\n   Originally home to the  Nisqually tribe, outside settlers first arrived in Tenino in  1851, when a gold rusher from Maine established a farm alongside the nearby Scatter Creek. In 1872, the Northern Pacific Railroad added a new station in Tenino, and for a time, the city was the northernmost stop on the West Coast.\n By the mid-1900s, the world knew Tenino for three things: its lumber business, its quarries, and its wooden currency.\n  Top: A logging construction crew in the woods around Tenino, Washington (Photo via University of Washington Libraries, Special Collections): Bottom: Open land around Tenino today (courtesy of Wayne Fournier)\n The legend of the wooden currency started in December 1931, when Tenino\u2019s only bank closed shop. The Great Depression was ripping through the country and countless townspeople lost their savings. Most had to stretch the little money they had to pay for groceries, rent, and other essentials.\n A local newspaper publisher named Don Major pitched a solution: With the bank gone, Tenino could invent its own currency. The officials agreed, and Major printed a series of notes \u2014  25 cents, $1, $5, $10 \u2014 on rolled  Sitka spruce. He and two local doctors  agreed to back all of the currency themselves. By January 1933, the town had printed  $6.5k worth of wooden money.\n Tenino wasn\u2019t alone in this experiment. During the Great Depression, local currencies saw a golden age.  Hundreds of municipalities, business associations, and worker co-ops started issuing  scrips. One estimate suggests as much as $1B worth of scrip circulated in the US in the 1930s.\n Cash-strapped businesses soon relied on local currencies to pay their employee salaries. One exemplary story  came from the publisher of the  Springfield Union in Massachusetts, who started paying employees in his own scrip in the 1930s.\n The idea: Employees could spend that scrip at businesses that advertised in the newspaper who sent it back to the  Union in exchange for ad space, closing the economic loop.\n  Tenino resident Kathryn Moses poses with wooden currency in 1932 (World Wide Photo / Los Angeles Times; 1932)\n Tenino\u2019s currency, in particular, captured the zeitgeist. News of the wooden currency spread first across the country, then the world.\n Banks in Chicago started accepting Tenino\u2019s wooden money. Washington Senator C.C. Dill bragged about it to Congress. The  Los Angeles Times  declared, \u201cMoney Now Grows on Trees.\u201d Tourists from as far as India came to Tenino to grab a piece of their own wooden currency. Demand grew so high that collectors started paying  $2.50 for a single wooden quarter \u2014 a 10x markup.\n  On January 1, 1933, when businesses in Tenino stopped accepting the wooden currency, US newspapers  proclaimed that the town had gone \u201coff the wood and back to the gold standard.\u201d\n  Take a look around the globe, and you\u2019ll find local currencies everywhere. Amid the economic fallout from COVID-19, small-town leaders have struck on the same idea as Fournier:\n The town of Castellino del Biferno, Italy \u2014 population 550 \u2014  started printing a local paper currency nicknamed the \u201c Ducati\u201d in late April to stimulate commerce.\n Mexico\u2019s Santa Mar\u00eda Jajalpa  sent out about $2k worth of a local currency, called  jajalpesos, to help poor residents buy vegetables, chicken, and tortillas locally.\n The Brazilian city of Maric\u00e1 is making extra money off of a digital local currency  known as the  mumbuca. Mumbucas are so omnipresent \u2014 even city officials receive their salaries in mumbucas \u2014 that businesses pay the local government a 2% fee to accept them. That money is funneled into no-interest loans that are offered out to members of the community.\n In the US, the local currency movement is more fractured. Plenty of currencies \u2014 like  Ithaca HOURS (Ithaca, New York) or  Bay Bucks (Traverse City, Michigan) \u2014 made a splash for a decade or so before petering out.\n   One of the most successful ongoing experiments is called BerkShares, a paper currency founded in 2006 through the nonprofit Schumacher Center for New Economics. Over 400 businesses in Great Barrington, Massachusetts accept BerkShares, and the money is backed through a network of community banks.\n Susan Witt, who heads the Schumacher Center, says that this current economic collapse has only highlighted the value of a currency like BerkShares.\n Her organization has received a number of requests from municipalities across the country hoping to set up their own currency systems on the BerkShares model; two of them are considering possible next steps.\n \u201cIt is a very grim time for small businesses. Many won\u2019t survive,\u201d says Witt. \u201cA currency, managed locally, is an elegant tool to address local needs.\u201d\n But can local currencies really boost a local economy? The past holds a few clues.\n Take the Austrian town of W\u00f6rgl, which  launched its own schilling in 1932. To keep residents spending, W\u00f6rgl appended a 1% monthly fine when residents held onto the notes. By 1933, each W\u00f6rgl schilling had circulated 463 times \u2014 more than double the circulation rate of Austria\u2019s national currency. W\u00f6rgl\u2019s unemployment dropped by 25%, even while unemployment continued to balloon throughout the rest of the country.\n Anecdotes like this point to the potential of community currencies \u2014 but teasing out a definitive relationship between community currencies and economic resilience is complicated, according to Marek Hudon, a professor of economics at the Free University of Brussels (Belgium).\n \u201cThere are many shops saying that they have new clients thanks to community currency,\u201d Hudon says, but \u201cit\u2019s extremely difficult to make a causal relationship to this local currency and a real macro-economic impact.\u201d\n Hudon co-authored a  2015 review of community currency research and found that about half of \u201ccommunity currencies\u201d (an umbrella term that includes local currencies like BerkShares or Tenino\u2019s wooden dollars) had no measurable macro-economic impact.\n But the study also found that in a subset of cases, local currencies could \u201cact as cushions against external economic shocks.\u201d And while their impact may not be widely felt, local currencies are \u201csignificant for a small but substantial part of the population\u201d: the economically marginalized.\n  Joyce Worrell, who runs a small antique shop in Tenino, is one of many small business owners in the town who say they will accept local currency (courtesy of Joyce Worrell)\n Francis Ayley, the creator of Life Dollars in Washington state, told  The Hustle about a struggling Bellingham woman he knew who borrowed roughly $9k worth of Life Dollars. After 2 years, backed by credit from the community, the woman landed on her feet and started paying back her commitment.\n \u201cIf she\u2019d gone to the bank and said, \u2018Can you lend me $10k for the next 2 years?\u2019 they would have laughed and said, \u2018Of course not,\u2019\u201d says Ayley.\n Tenino\u2019s wooden dollars are different from many local currencies in that it is temporary: The money will lose its value soon after the town declares an end to its COVID-19 state of emergency.\n While the Tenino project might be less ambitious than some of its counterparts, that doesn\u2019t mean its benefits won\u2019t be felt. Fournier says he\u2019s approved at least half a dozen applications for the wooden currency so far and has another dozen to review.\n It\u2019s too soon to know exactly what the project will bring. But on a recent Thursday, Fournier sounded optimistic. The money has started trickling into local stores, and many businesses are posting photos of the currency to Facebook.\n The project has driven enough local excitement that the Tenino Chamber of Commerce is interested in making the wooden dollars a permanent fixture of Tenino \u2014 even after the pandemic passes.\n \u201cWe\u2019ll run out this program,\u201d Fournier says, \u201cand then we\u2019ll look into having our own city currency.\u201d", "posttime": "2020-06-15 00:37:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5370\u5236,town,\u8d27\u5e01", "title": "\u4e3a\u4ec0\u4e48\u534e\u76db\u987f\u7684\u4e00\u4e2a\u5c0f\u9547\u5728\u5927\u6d41\u884c\u671f\u95f4\u5370\u5236\u81ea\u5df1\u7684\u8d27\u5e01", "title_en": "Why a small town in Washington is printing its own currency during the pandemic", "transed": 1, "url": "https://thehustle.co/covid19-local-currency-tenino-washington/", "via": "", "real_tags": ["\u5370\u5236", "town", "\u8d27\u5e01"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1006536, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u611f\u8c22\u673a\u5668\u5b66\u4e60\u793e\u533a\u7684\u53cd\u9988\uff0c\u6211\u4eec\u91cd\u65b0\u53d1\u5e03\u5173\u4e8e\u6211\u4eec\u7684\u65b9\u6cd5\u7684\u66f4\u591a\u7ec6\u8282\u3002\n6\u670810\u65e5\uff0cRoboflow\u56e2\u961f\u53d1\u8868\u4e86\u4e00\u7bc7\u540d\u4e3a\u201cYOLOv5\u5728\u8fd9\u91cc\uff0c\u5206\u4eabYOLOv5\u4e0eYOLOv4\u7684\u57fa\u51c6\u548c\u6bd4\u8f83\u201d\u7684\u535a\u6587\u3002\u6211\u4eec\u7684\u4f7f\u547d\u662f\u8ba9\u4efb\u4f55\u5f00\u53d1\u4eba\u5458\u90fd\u80fd\u89e3\u51b3\u4ed6\u4eec\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u65b9\u9762\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u5f53Glenn Jocher(Ultralytics)\u57286\u67089\u65e5\u53d1\u5e03YOLOv5\u5b58\u50a8\u5e93\u65f6\uff0c\u6211\u4eec\u8fc5\u901f\u884c\u52a8\u8d77\u6765\uff0c\u66f4\u5e7f\u6cdb\u5730\u5206\u4eab\u4e86\u5b83\u7684\u521b\u9020\u3002\n\u8fd9\u7bc7\u5e16\u5b50\u5728Hacker News\u3001Reddit\u751a\u81f3GitHub\u4e0a\u5f15\u8d77\u4e86\u70ed\u70c8\u7684\u8ba8\u8bba-\u4f46\u5766\u7387\u5730\u8bf4\uff0c\u4e0d\u662f\u56e0\u4e3a\u6211\u4eec\u9884\u671f\u7684\u539f\u56e0(\u6bd4\u5982\u5b83\u7684\u5c0f\u4f53\u79ef\u548c\u5feb\u901f\u7684\u63a8\u7406\u901f\u5ea6)\u3002\n\u8fd9\u7bc7\u5e16\u5b50\u5206\u4eab\u4e86\u6211\u4eec\u5bf9\u8fd9\u4e24\u4e2a\u95ee\u9898\u7684\u770b\u6cd5\uff0c\u5e76\u6f84\u6e05\u4e86\u4e0e\u6211\u4eec\u6700\u521d\u7684\u5e16\u5b50\u5728\u63a8\u7406\u901f\u5ea6\u65b9\u9762\u7684\u4e0d\u516c\u5e73\u6bd4\u8f83\u3002\n\u6211\u4eec\u535a\u5ba2\u4e0a\u7684\u8bb8\u591a\u8bc4\u8bba\u8005\u8ba4\u4e3aGlenn Jocher\u4e0d\u5e94\u8be5\u7ed9\u5b9e\u73b0\u547d\u540d\uff0c\u56e0\u4e3a(1)\u4ed6\u4e0d\u662fYOLO\u7684\u539f\u59cb\u4f5c\u8005\uff0c(2)\u4ed6\u6ca1\u6709\u53d1\u8868\u8bba\u6587\uff0c\u548c/\u6216(3)\u5b9e\u73b0\u4e0d\u591f\u65b0\u9896\u3002\n\u4e0b\u9762\uff0c\u6211\u4eec\u5411\u673a\u5668\u5b66\u4e60\u793e\u533a\u63d0\u4f9b\u4e0a\u4e0b\u6587\u548c\u8bf7\u6c42\uff0c\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u547d\u540d\u7ea6\u5b9a\u3002\nYOLO&34\uff1b\u6307\u7684\u662f\u7ea6\u745f\u592b\u00b7\u96f7\u5fb7\u8499(Joseph Redmon)\u57282016\u5e745\u6708\u7684\u8bba\u6587\u201c\u4f60\u53ea\u770b\u4e00\u6b21\uff1a\u7edf\u4e00\u7684\u5b9e\u65f6\u7269\u4f53\u68c0\u6d4b\u201d(You Only Look Only\uff1aUnified\uff0cReal-Time Object Detection)\u4e2d\u4ecb\u7ecd\u7684\u4e00\u7cfb\u5217\u6a21\u578b\uff0c\u4f60\u53ea\u770b\u4e00\u6b21\u3002\n\u96f7\u5fb7\u8499\u968f\u540e\u57282017\u5e7412\u6708\u7684\u4e00\u7bc7\u9898\u4e3a\u201cYOLO9000\uff1a\u66f4\u597d\u3001\u66f4\u5feb\u3001\u66f4\u5f3a\u201d\u7684\u8bba\u6587\u4e2d\u4ecb\u7ecd\u4e86YOLOv2\u3002\u4ed6\u548c\u4ed6\u7684\u5bfc\u5e08\u8fd8\u57282018\u5e744\u6708\u53d1\u8868\u4e86\u201cYOLOv3\uff1a\u589e\u91cf\u6539\u8fdb\u201d\u4e00\u4e66\u3002\n\u4ece\u90a3\u65f6\u8d77\uff0c\u8c01(\u5982\u679c\u6709\u4eba)\u5e94\u8be5\u7ee7\u7eed\u4f7f\u7528\u8fd9\u4e2a\u540d\u79f0\u6765\u6307\u4ee3\u65b0\u7684\u6a21\u578b\u4f53\u7cfb\u7ed3\u6784\u5c31\u53d8\u5f97\u4e0d\u6e05\u695a\u4e86\u3002\u6709\u4e9b\u4eba\u8ba4\u4e3aYOLOv3\u662f\u6700\u540e\u4e00\u4e2aYOLO\u3002\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cGlenn Jocher(\u4e0eJoseph Redmon\u65e0\u5173)\u5728PyTorch\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u6d41\u884c\u7684YOLOv3\u5b9e\u73b0\u3002\n\u7136\u540e\uff0c\u57282020\u5e744\u670823\u65e5\uff0c\u963f\u5217\u514b\u8c22\u00b7\u535a\u5947\u79d1\u592b\u65af\u57fa(Alexey Bochkovski)\u51fa\u7248\u4e86YOLOv4\u3002\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u7ea6\u745f\u592b\u00b7\u96f7\u5fb7\u8499\u5728\u63a8\u7279\u4e0a\u8d5e\u626c\u4e86\u535a\u5947\u79d1\u592b\u65af\u57fa\u4e3a\u201c\u6697\u7f51\u201d\u6240\u505a\u7684\u5927\u91cf\u5de5\u4f5c\uff0c\u5e76\u8868\u793a\u8fd9\u5e76\u4e0d\u91cd\u8981\u6211\u5bf9\u5176\u5b9e\u65bd\u548c\u54c1\u724c\u7684\u770b\u6cd5\u3002\n\u6211\u600e\u4e48\u60f3\u5e76\u4e0d\u91cd\u8981\uff01\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c@alexeyab84\u6709\u4e86\u7ecf\u5178\u7684\u6697\u7f51\u548cyolo\u7248\u672c\uff0c\u4ed6\u5728\u91cc\u9762\u6295\u5165\u4e86\u5927\u91cf\u7684\u5de5\u4f5c\uff0c\u6bcf\u4e2a\u4eba\u90fd\u5728\u4f7f\u7528\u5b83\uff0c\u800c\u4e0d\u662f\u6211\u7684\u54c8\u54c8\u3002https://t.co/FcnQPiySr7\u3002\n-\u4e54\u00b7\u96f7\u5fb7\u8499(@pjreddie)2020\u5e744\u670825\u65e5\u3002\n2020\u5e745\u670829\u65e5\uff0c\u683c\u4f26\u00b7\u7ea6\u5f7b(Glenn Jocher)\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3aYOLOv5\u7684\u5b58\u50a8\u5e93\uff0c\u5176\u4e2d\u4e0d\u5305\u542b\u4efb\u4f55\u6a21\u578b\u4ee3\u7801\u30022020\u5e746\u67089\u65e5\uff0c\u4ed6\u5728YOLOv3\u5b9e\u73b0\u4e2d\u6dfb\u52a0\u4e86\u4e00\u6761\u540d\u4e3a\u201cYOLOv5\u95ee\u5019\u201d\u7684\u63d0\u4ea4\u6d88\u606f\u3002\nJocher\u7684YOLOv5\u5b9e\u73b0\u5728\u51e0\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u65b9\u9762\u4e0e\u4ee5\u524d\u7684\u7248\u672c\u4e0d\u540c\u3002\u9996\u5148\uff0c\u4e54\u5f7b(\u8fd8\u6ca1\u6709)\u5728\u83b7\u91ca\u7684\u540c\u65f6\u53d1\u8868\u8bba\u6587\u3002\u5176\u6b21\uff0cJocher\u5728PyTorch\u4e2d\u539f\u751f\u5b9e\u73b0\u4e86YOLOv5\uff0c\u800cYOLO\u5bb6\u65cf\u4ee5\u524d\u7684\u6240\u6709\u578b\u53f7\u90fd\u5229\u7528\u4e86Darknet\u3002\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cJocher\u8fd8\u521b\u5efa\u4e86\u9a6c\u8d5b\u514b\u6570\u636e\u589e\u5f3a\uff0c\u5e76\u5c06\u5176\u5305\u542b\u5728\u4ed6\u7684YOLOv3\u5b58\u50a8\u5e93\u4e2d\uff0c\u8fd9\u662fYOLOv4\u4e2d\u5229\u7528\u7684\u8bb8\u591a\u65b0\u9896\u6570\u636e\u589e\u5f3a\u4e4b\u4e00\u3002\u4ed6\u5728YOLOv4\u7684\u8bba\u6587\u4e2d\u5f97\u5230\u4e86\u627f\u8ba4\u3002\n\u7ea6\u5f7b\u7684YOLOv5\u5b58\u50a8\u5e93\u8fdc\u4e0d\u662f\u4ed6\u7b2c\u4e00\u6b21\u53c2\u4e0eYOLO\u9879\u76ee\uff1a\u4ed6\u5df2\u7ecf\u4e3a\u4ed6\u7684YOLOv3\u5b9e\u73b0\u505a\u51fa\u4e862379\u6b21\u627f\u8bfa\uff0cBochkovski\u5f15\u7528\u4e86\u8fd9\u4e00\u70b9\u3002\n\u5766\u7387\u5730\u8bf4\uff0cRoboflow\u56e2\u961f\u5e76\u4e0d\u77e5\u9053\u3002\u6211\u4eec\u4e5f\u4e0d\u5e94\u8be5\u6210\u4e3a\u547d\u540d\u540d\u79f0\u7684\u4ef2\u88c1\u8005\uff01\n\u6211\u4eec\u4e0d\u96b6\u5c5e\u4e8eUltralytics\u6216\u5176\u4ed6\u7814\u7a76\u4eba\u5458\u3002\u6211\u4eec\u662f\u4e00\u5bb6\u521d\u521b\u516c\u53f8\uff0c\u4f7f\u5f00\u53d1\u4eba\u5458\u65e0\u9700\u6210\u4e3a\u673a\u5668\u5b66\u4e60\u4e13\u5bb6\u5373\u53ef\u4f7f\u7528\u8ba1\u7b97\u673a\u89c6\u89c9\uff0c\u5e76\u4e14\u6211\u4eec\u652f\u6301\u5e7f\u6cdb\u7684\u5f00\u6e90\u6a21\u578b\u4f53\u7cfb\u7ed3\u6784\uff0c\u4f9b\u56e2\u961f\u5c1d\u8bd5\u4ed6\u4eec\u7684\u6570\u636e\uff1ahttps://models.roboflow.ai\u3002\n\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u53ea\u662f\u7c89\u4e1d\u3002\u6211\u4eec\u5bf9\u8fd9\u4e00\u9886\u57df\u7684\u53d1\u5c55\u901f\u5ea6\u611f\u5230\u60ca\u8bb6\uff0c\u6211\u4eec\u505a\u4e86\u4e00\u4e9b\u57fa\u51c6\uff0c\u6211\u4eec\u8ba4\u4e3a\u5176\u4ed6\u4eba\u53ef\u80fd\u4f1a\u53d1\u73b0\u8fd9\u4e9b\u57fa\u51c6\u548c\u6211\u4eec\u4e00\u6837\u4ee4\u4eba\u5174\u594b\u3002\u6211\u4e0d\u60f3\u5728\u547d\u540d\u4e89\u8bae\u4e2d\u504f\u8892\u4efb\u4f55\u4e00\u65b9\u3002\u6211\u4eec\u7684\u6838\u5fc3\u91cd\u70b9\u662f\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u5c06\u6570\u636e\u653e\u5165\u4efb\u4f55\u6a21\u578b\u4e2d\uff0c\u65e0\u8bba\u5176\u540d\u79f0\u5982\u4f55\uff01\n\u7136\u800c\uff0c\u6211\u4eec\u8ba4\u8bc6\u5230\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u6269\u5927\u6a21\u578b\u4f53\u7cfb\u7ed3\u6784\u8bc6\u522b\u7684\u7ec4\u7ec7\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528\u4e0e\u673a\u5668\u5b66\u4e60\u793e\u533a\u4f7f\u7528\u7684\u540d\u79f0\u4e00\u81f4\u7684\u540d\u79f0\u3002\n\u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u7ee7\u7eed\u503e\u542c\u5e76\u6df1\u601d\u719f\u8651\u5730\u53c2\u4e0e\u3002\u6211\u4eec\u8981\u6c42\u673a\u5668\u5b66\u4e60\u793e\u533a\u4e5f\u8fd9\u6837\u505a\u3002\u8ba9\u6211\u4eec\u611f\u8c22\u5728PyTorch\u4e2d\u672c\u673a\u5b9e\u73b0YOLO\u6240\u505a\u7684\u8270\u82e6\u5de5\u4f5c\uff0c\u4e0d\u7ba1\u5b83\u7684\u540d\u5b57\u662f\u4ec0\u4e48\u3002\u8ba9\u6211\u4eec\u627e\u4e00\u4e2a\u611f\u89c9\u5408\u9002\u7684\u540d\u5b57--\u65e0\u8bba\u662fYOLOv5\u3001FastYOLO\u3001YOLOv4-Accelerated\uff0c\u8fd8\u662f\u5176\u4ed6\u540d\u5b57\u3002\u53ef\u4ee5\u80af\u5b9a\u5730\u8bf4\uff1a\u6211\u4eec\u671f\u5f85\u7740\u4e0b\u4e00\u4e2aYOLO\u3002\u5f53(\u5982\u679c)\u540d\u79f0\u66f4\u6539\u65f6\uff0c\u6211\u4eec\u5c06\u66f4\u65b0\u5bf9\u5b83\u7684\u5f15\u7528\u3002\n\u6bcf\u5f53\u53d1\u5e03\u65b0\u7684\u6a21\u578b\u4f53\u7cfb\u7ed3\u6784\u65f6\uff0c\u8bc4\u4f30\u5176\u6027\u80fd\u4ee5\u786e\u5b9a\u6a21\u578b\u7684\u8d28\u91cf\u662f\u5f88\u91cd\u8981\u7684\u3002\u5728\u7814\u7a76\u754c\uff0c\u6a21\u578b\u4ee5\u76f8\u540c\u7684\u56fe\u50cf\u4e3a\u57fa\u51c6\uff0c\u5c31\u50cf\u4e0a\u4e0b\u6587\u4e2d\u7684\u901a\u7528\u5bf9\u8c61(Common Object in Context\uff0cCOCO)\u6570\u636e\u96c6\u3002\u5728\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u56e2\u961f\u5c06\u9488\u5bf9\u4ed6\u4eec\u81ea\u5df1\u7684\u9886\u57df\u95ee\u9898\u6d4b\u8bd5\u6a21\u578b\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u8003\u8651\u4e0d\u540c\u7684\u9996\u8981\u56e0\u7d20\u3002(\u4f8b\u5982\uff0c\u5373\u4f7f\u6a21\u578b\u66f4\u7cbe\u786e\uff0c\u5982\u679c\u5b83\u4e0d\u80fd\u6267\u884c\u5b9e\u65f6\u6027\u80fd\uff0c\u5b83\u4e5f\u53ef\u80fd\u4e0d\u9002\u5408\u7cfb\u7edf\u3002)\u3002\n\u6b63\u5982\u6240\u63d0\u5230\u7684\uff0c\u5728Roboflow\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u4f7f\u56e2\u961f\u80fd\u591f\u5feb\u901f\u3001\u8f7b\u677e\u5730\u5728\u4ed6\u4eec\u81ea\u5df1\u7684\u7279\u5b9a\u4e8e\u5176\u9886\u57df\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u4e0a\u5229\u7528\u8ba1\u7b97\u673a\u89c6\u89c9\u6a21\u578b\u3002\n\u540c\u6837\uff0c\u6211\u4eec\u6bd4\u8f83\u6a21\u578b\u7684\u76ee\u7684\u662f\u7ed9\u51fa\u4e00\u4e2a\u5728\u7528\u6237\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u4e0a\u4f7f\u7528\u8fd9\u4e24\u4e2a\u6a21\u578b\u7684\u793a\u4f8b\u6f14\u793a\u3002\u4ed6\u4eec\u5e94\u8be5\u671f\u671b\u6bcf\u4e2a\u5b9e\u65bd\u57f9\u8bad\u591a\u957f\u65f6\u95f4\uff1f\u5b83\u4eec\u6709\u591a\u51c6\u786e\uff1f\u63a8\u8bba\u6709\u591a\u5feb\uff1f\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u5efa\u7acb\u7ed9\u5b9a\u6a21\u578b\u7684\u6311\u6218\u6709\u591a\u5927\uff1f\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u6bd4\u8f83\u5e94\u8be5\u5f88\u5bb9\u6613\u9002\u5e94\u7528\u6237\u81ea\u5df1\u7684\u6570\u636e\u96c6\uff0c\u8fd9\u6837\u4ed6\u4eec\u4e5f\u53ef\u4ee5\u505a\u51fa\u81ea\u5df1\u7684\u5224\u65ad\u3002\n\u8fd9\u4e0d\u80fd\u66ff\u4ee3\u5bf9COCO\u7684\u6b63\u5f0f\u57fa\u51c6\u6d4b\u8bd5\u3002Bochkovski\u5728\u4ed6\u5bf9GitHub\u4e0a\u7684YOLOv4\u548cYOLOv5\u7684\u5206\u6790\u4e2d\u975e\u5e38\u6e05\u695a\u5730\u8bf4\u660e\u4e86\u8fd9\u4e00\u70b9\uff0c\u5e76\u53d1\u73b0\u6211\u4eecRoboflow\u5728\u6bd4\u8f83\u5e27\u7387\u548c\u9ed8\u8ba4\u6a21\u578b\u5927\u5c0f\u7684\u65b9\u5f0f\u4e0a\u5b58\u5728\u4e0d\u4e00\u81f4\u4e4b\u5904\uff0c\u4e0b\u9762\u6211\u4eec\u5df2\u7ecf\u66f4\u5f7b\u5e95\u5730\u89e3\u51b3\u4e86\u8fd9\u4e00\u95ee\u9898\u3002\n\u6211\u4eec\u5bf9\u50cf\u963f\u5217\u514b\u8c22\u00b7\u535a\u5947\u79d1\u592b\u65af\u57fa\u8fd9\u6837\u7684\u7814\u7a76\u4eba\u5458\u6240\u505a\u7684\u5de5\u4f5c\u6df1\u8868\u656c\u610f\uff0c\u6211\u4eec\u611f\u8c22\u4ed6\u4eec\u7ee7\u7eed\u63a8\u52a8\u8fd9\u4e00\u9886\u57df\u5411\u524d\u53d1\u5c55\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u6784\u5efaRoboflow\u7684\u539f\u56e0\u4e0e\u4ed6\u53d1\u8868YOLOv4\u8bba\u6587\u7684\u539f\u56e0\u975e\u5e38\u76f8\u4f3c\uff1a\n\u8fd9\u9879\u5de5\u4f5c\u7684\u4e3b\u8981\u76ee\u6807\u662f\u8bbe\u8ba1\u5feb\u901f\u7684\u76ee\u6807\u63a2\u6d4b\u5668\u5728\u751f\u4ea7\u7cfb\u7edf\u4e2d\u7684\u8fd0\u884c\u901f\u5ea6\u548c\u5e76\u884c\u8ba1\u7b97\u7684\u4f18\u5316\uff0c\u800c\u4e0d\u662f\u4f4e\u8ba1\u7b97\u91cf\u7684\u7406\u8bba\u6307\u6807(BFLOP)\u3002\u6211\u4eec\u5e0c\u671b\u8bbe\u8ba1\u7684\u5bf9\u8c61\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8bad\u7ec3\u548c\u4f7f\u7528\u3002\u4f8b\u5982\uff0c\u4efb\u4f55\u4f7f\u7528\u4f20\u7edfGPU\u8fdb\u884c\u8bad\u7ec3\u548c\u6d4b\u8bd5\u7684\u4eba\u90fd\u53ef\u4ee5\u83b7\u5f97\u5b9e\u65f6\u3001\u9ad8\u8d28\u91cf\u548c\u4ee4\u4eba\u4fe1\u670d\u7684\u76ee\u6807\u68c0\u6d4b\u7ed3\u679c\u3002\n\u6211\u4eec\u5b9e\u73b0\u4e86\u4f7f\u7528Darknet\u5b58\u50a8\u5e93\u548cUltralytics\u7684YOLOv5\u5b58\u50a8\u5e93\u65f6\u7f16\u8bd1\u7684\u9ed8\u8ba4\u6a21\u578b\u3002\u6b63\u5982Bochkovski\u6240\u6307\u51fa\u7684\uff0c\u8fd9\u5c06\u7f16\u8bd1YOLOv4(\u5927YOLOv4&34\uff1b\u548c\u5c0fYOLOv5&34\uff1bYOLOv4&34\uff1b)\u3002\n\u5728\u5e16\u5b50\u53d1\u8868\u540e\uff0c\u6211\u4eec\u770b\u5230\u4e86\u4e00\u4e9b(\u6709\u6548\u7684)\u6279\u8bc4\uff0c\u6211\u4eec\u5f81\u6c42\u4e86\u793e\u533a\u4e2d\u90a3\u4e9b\u4eba\u7684\u5efa\u8bae\uff0c\u4ee5\u6700\u597d\u7684\u65b9\u5f0f\u6765\u652f\u6301\u548c\u6f84\u6e05\u6211\u4eec\u53d1\u5e03\u7684\u7ed3\u679c\u3002\n\u5728\u6df1\u5165\u7814\u7a76\u4e4b\u524d\uff0c\u91cd\u8981\u7684\u662f\u8981\u627f\u8ba4\u8fd9\u4e24\u4e2a\u6846\u67b6\u90fd\u5b8c\u6210\u4e86\u4f7f\u8ba1\u7b97\u673a\u80fd\u591f\u8bc6\u522b\u5bf9\u8c61\u7684\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u58ee\u4e3e\uff0c\u8fd9\u91cc\u63d0\u51fa\u7684\u8bb8\u591a\u8003\u8651\u56e0\u7d20\u90fd\u5904\u4e8e\u8fb9\u7f18\u4f4d\u7f6e\u3002\n\u8fd9\u4e24\u4e2a\u6a21\u578b\u4f3c\u4e4e\u90fd\u5728\u6211\u4eec\u7684\u6837\u672c\u6570\u636e\u96c6\u4e0a\u53d1\u6325\u4e86\u6700\u5927\u7684\u6027\u80fd\uff0c\u56e0\u6b64\u62a5\u544a\u4e86\u7c7b\u4f3c\u7684\u51c6\u786e\u6027\u80fd\u3002YOLOv5\u5728\u6837\u4f8b\u4efb\u52a1\u4e0a\u8bad\u7ec3\u5f97\u66f4\u5feb\uff0c\u5e76\u4e14\u6279\u5904\u7406\u63a8\u7406(\u5b9e\u73b0\u9ed8\u8ba4\u4f7f\u7528)\u4f1a\u4ea7\u751f\u5b9e\u65f6\u7ed3\u679c\u3002\u867d\u7136YOLOv4\u7684\u8bad\u7ec3\u901f\u5ea6\u8f83\u6162\uff0c\u4f46\u5f53\u4e24\u4e2a\u6279\u5904\u7406\u63a8\u7406\u5927\u5c0f\u90fd\u8bbe\u7f6e\u4e3a1\u65f6\uff0c\u901f\u5ea6\u4f1a\u66f4\u5feb\u3002\u56e0\u4e3aYOLOv5\u662f\u5728PyTorch\u4e2d\u5b9e\u73b0\u7684\uff0c\u800cYOLOv4\u662f\u5728Darknet\u4e2d\u5b9e\u73b0\u7684\uff0c\u6240\u4ee5YOLOv5\u53ef\u80fd\u66f4\u5bb9\u6613\u6295\u5165\u751f\u4ea7\uff0c\u800cYOLOv4\u53ef\u80fd\u662f\u7ee7\u7eed\u8fdb\u884c\u9ad8\u7cbe\u5ea6\u7814\u7a76\u7684\u5730\u65b9\u3002\n\u5982\u679c\u60a8\u662f\u4e00\u540d\u5e0c\u671b\u5c06\u63a5\u8fd1\u5b9e\u65f6\u7684\u5bf9\u8c61\u68c0\u6d4b\u5feb\u901f\u6574\u5408\u5230\u60a8\u7684\u9879\u76ee\u4e2d\u7684\u5f00\u53d1\u4eba\u5458\uff0cYOLOv5\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\u3002\u5982\u679c\u60a8\u662f\u4e00\u540d\u8ffd\u6c42\u6700\u5148\u8fdb\u6280\u672f\u7684\u8ba1\u7b97\u673a\u89c6\u89c9\u5de5\u7a0b\u5e08\uff0c\u5e76\u4e14\u4e0d\u6015\u66f4\u591a\u7684\u81ea\u5b9a\u4e49\u914d\u7f6e\uff0c\u90a3\u4e48Darknet\u4e2d\u7684YOLOv4\u4ecd\u7136\u662f\u6700\u51c6\u786e\u7684\u3002\n\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u5df2\u7ecf\u4f7f\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u60a8\u81ea\u5df1\u7684\u6570\u636e\u96c6\u4e0a\u5c1d\u8bd5\u6b64\u5b9e\u9a8c\uff1a\n\u7f16\u5199\u672c\u7f16\u5199\u7684\u5176\u4f59\u90e8\u5206\u662f\u4e3a\u4e86\u6307\u5bfc\u60a8\u5728\u81ea\u5df1\u7684\u6570\u636e\u96c6\u4e0a\u5b8c\u6210\u6b64\u6bd4\u8f83\u3002\n\u6240\u6709\u7684\u6bd4\u8f83\u90fd\u662f\u5728Google Colab\u4e2d\u8fdb\u884c\u7684\uff0c\u5728Pro\u5c42\uff0c\u5b83\u914d\u5907\u4e86\u4e00\u81f4\u7684\u786c\u4ef6\uff1aNVIDIA Tesla P100\u3002\u8fd9\u4e5f\u4f7f\u60a8\u80fd\u591f\u8f7b\u677e\u5730\u590d\u5236\u6211\u4eec\u7684\u7ed3\u679c\u3002(\u5b83\u7684\u4ee3\u4ef7\u662f\u65e0\u6cd5\u901a\u8fc7\u7279\u5b9a\u7684CUDA\u5de5\u5177\u5305\u7248\u672c\u63a7\u5236\u5b9e\u73b0\u8f83\u4f4e\u7ea7\u522b\u7684\u4f18\u5316\u3002)\u3002\n\u5982\u679c\u60a8\u60f3\u4f7f\u7528\u6211\u4eec\u5728\u6d4b\u8bd5\u4e2d\u4f7f\u7528\u7684\u5b8c\u5168\u76f8\u540c\u7684\u7b14\u8bb0\u672c\u6765\u6d4b\u8bd5\u8fd9\u4e9b\u7ed3\u679c\uff0c\u60a8\u53ef\u4ee5\u5728\u4ee5\u4e0b\u4f4d\u7f6e\u627e\u5230\u5b83\u4eec\uff1a\n\u5728\u6211\u4eec\u7684\u8bc4\u4f30\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u8840\u7ec6\u80de\u8ba1\u6570\u548c\u68c0\u6d4b\u6570\u636e\u96c6\u3002\u8be5\u6570\u636e\u96c6\u7531\u4e09\u7c7b(\u7ea2\u7ec6\u80de\u3001\u767d\u7ec6\u80de\u548c\u8840\u5c0f\u677f)\u7684364\u5e45\u56fe\u50cf\u7ec4\u6210\u3002\n\u5982\u524d\u6240\u8ff0\uff0c\u6211\u4eec\u7684\u6570\u636e\u96c6\u65e8\u5728\u8868\u793a\u5728\u91ce\u5916\u53ef\u80fd\u9047\u5230\u7684\u793a\u4f8b\u81ea\u5b9a\u4e49\u4efb\u52a1\uff0c\u800c\u4e0d\u662f\u5b98\u65b9\u7684COCO\u57fa\u51c6\u3002\u4e0a\u9762\u94fe\u63a5\u7684\u7b14\u8bb0\u672c\u4f7f\u60a8\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u4efb\u52a1\u4e2d\u91cd\u590d\u6b64\u5b9e\u9a8c\u3002\n\u5728\u5f00\u59cb\u57f9\u8bad\u4e4b\u524d\uff0c\u6211\u4eec\u9996\u5148\u5b89\u88c5YOLOv4 Darknet\u548cYOLOv5\u73af\u5883\u3002\u5373\u4f7f\u662f\u4e25\u683c\u7684COCO\u6bd4\u8f83\uff0c\u901a\u5e38\u4e5f\u4f1a\u5ffd\u7565\u8bbe\u7f6e\u73af\u5883(\u9664\u4e86\u63d0\u4f9bRequirements.txt\u548c\u5076\u5c14\u7684AMI\u4e4b\u5916)\uff0c\u5982\u679c\u4e3b\u8981\u76ee\u6807\u662f\u53ef\u8bbf\u95ee\u6027\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u6bd4\u8f83\u70b9\u3002\nNVCC\uff1aNVIDIA(R)CUDA\u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f\u7248\u6743\u6240\u6709(C)2005-2019 NVIDIA Corporation\u57fa\u4e8eSun_JUL_28_19\uff1a07\uff1a16_PDT_2019CUDA\u7f16\u8bd1\u5de5\u5177\uff0c\u7248\u672c10.1\uff0cV10.1.243\u3002\n\u7136\u540e\u6211\u4eec\u9700\u8981\u5b89\u88c5cuDNN\u6765\u652f\u6301Darknet\u4f7f\u7528\u7684\u6df1\u5ea6\u5b66\u4e60\u529f\u80fd\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u5bfc\u822a\u5230NVIDIA\u7684\u7f51\u7ad9\u5e76\u63d0\u53d6\u6b63\u786e\u7684cuDNN\u6587\u4ef6\uff0c\u4ee5\u4f7f\u7528\u6211\u4eec\u7684CUDA\u9a71\u52a8\u7a0b\u5e8f\u8fdb\u884c\u914d\u7f6e\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u5373\u4e3acuDNN 10.1\u3002\u6211\u4eec\u8bfb\u5165\u5e76\u5b89\u88c5\u3002\u9057\u61be\u7684\u662f\uff0cNVIDIA\u4e0d\u5141\u8bb8\u53d1\u5e03cuDNN\u94fe\u63a5\uff0c\u56e0\u6b64\u5982\u679c\u60a8\u8981\u8ddf\u968f\uff0c\u60a8\u9700\u8981\u8f6c\u5230NVIDIA\u7684\u7f51\u7ad9\u8fdb\u884c\u4e0b\u8f7d\u3002\n/usr/localcuda/include/cudnn.hcuda/NVIDIA_SLA_cuDNN_Support.txtcuda/lib64/libcudnn.socuda/lib64/libcudnn.so.7cuda/lib64/libcudnn.so.7.6.5cuda/lib64/libcudnn_static.a#define CUDNN_MAJOR 7#DEFINE CUDNN_MINOR 6#DEFINE CUDNN_PATCHLEVEL 5--#DEFINE CUDNN_VERSION(CUDNN_MAJOR*1000+CUDNN_MINOR*100+CUDNN_PATCHLEVEL)#INCLUDE&#34\uff1bDriver_tyes.h&#34\uff1b\n\u914d\u7f6e\u751f\u6210\u6587\u4ef6\u3002\u5728\u8bbf\u95eeGoogle Colab\u4e4b\u524d\uff0c\u6211\u4eec\u5c06Makefile\u914d\u7f6e\u4e3a\u5177\u6709\u4ee5\u4e0b\u914d\u7f6e\uff1a\n\u6211\u4eec\u9996\u5148\u514b\u9686\u5b58\u50a8\u5e93\uff01pip install-U-r yolov5/requirements.txt\uff0c\u7136\u540e\u68c0\u67e5\u624b\u7535\u7b52\u8bbe\u7f6e\uff1a\nYOLOv4\u4f7f\u7528\u4e86YOLO Darknet\u6846\u67b6\u4e2d\u7684\u4f20\u7edf\u6570\u636e\u6807\u6ce8\u3002Train.txt\u548cvalid.txt\u6307\u5b9a\u5e26\u6709.txt\u6ce8\u91ca\u7684.jpg\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002\u6700\u540e\uff0c\u5728\u8bad\u7ec3\u4e2d\u8c03\u7528.Data\u6587\u4ef6\u6765\u6307\u5b9a\u6240\u6709\u8fd9\u4e9b\u5185\u5bb9\u7684\u4f4d\u7f6e\uff0c\u4ee5\u53ca\u7c7b\u6807\u7b7e\u548c\u4fdd\u5b58\u8bad\u7ec3\u6743\u91cd\u7684\u4f4d\u7f6e\uff1a\n\u4ee5OPEN(&#39\uff1bdata/obj.data&#39\uff1b\uff0c&#39\uff1bw&#39\uff1b)\u4f5c\u4e3aout\uff1aout.write(&#39\uff1bclass=3\\n&#39\uff1b)out.write(&#39\uff1bTrain=data/Train.txt\\n&39\uff1b)out.write(&#39\uff1bValid=data/valid.txt\\n&#39\uff1b)out.write(&#39\uff1bname=data/obj.ames\\n&39\uff1b)\u3002\nYOLOv5\u4f7f\u7528\u7c7b\u4f3c\u7684\u683c\u5f0f\uff0c\u4f46\u6709\u4e00\u4e9b\u8b66\u544a\u3002\u8bad\u7ec3\u548c\u6709\u6548\u6587\u4ef6\u5939\u5c06\u653e\u7f6e\u5728yolov5\u5b58\u50a8\u5e93\u65c1\u8fb9\u3002\u5728\u6bcf\u4e2a\u4e2d\uff0c\u90fd\u5e94\u8be5\u662f\u4e00\u4e2a\u56fe\u50cf\u76ee\u5f55\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u9644\u5e26\u7684\u6807\u7b7e\u76ee\u5f55\u3002data.yml\u6587\u4ef6\u5c06\u8fd9\u4e9b\u76ee\u5f55\u94fe\u63a5\u5728\u4e00\u8d77\uff1a\nRoboflow\u652f\u6301\u4e0b\u8f7d\u8fd9\u4e24\u79cd\u683c\u5f0f\uff0c\u60a8\u53ef\u4ee5\u62d6\u653e\u4e0a\u4f20\u4efb\u4f55\u683c\u5f0f\u7684\u6570\u636e\u96c6(COCO\u3001PASCAL VOC\u3001TensorFlow CSV\u7b49)\u3002\u5e76\u5c06\u5b83\u4eec\u6b63\u786e\u683c\u5f0f\u5316\u6210YOLOv4\u6216YOLOv5\u3002\nYOLOv4\u548cYOLOv5\u90fd\u5206\u522b\u6307\u5b9a\u4e86\u57f9\u8bad\u914d\u7f6e\u6587\u4ef6.cfg\u548c.yaml\u3002\u5728\u91cd\u5199\u7f51\u7edc\u4f53\u7cfb\u7ed3\u6784\u65f6\uff0c\u8fd9\u4e24\u4e2a\u57f9\u8bad\u6587\u4ef6\u90fd\u8981\u6c42\u6211\u4eec\u4e3a\u60a8\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u6307\u5b9anum_class\u3002\n\u5728Darknet\u914d\u7f6e\u4e2d\uff0c\u6211\u4eec\u6307\u5b9a\u4e86\u6709\u5173\u57f9\u8bad\u4f5c\u4e1a\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u5305\u62ecBatch_Size\u3001Subditions\u3001max_Batches\u548cSteps\u3002\u5728\u201c\u6697\u7f51\u201d\u4e2d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u53c2\u6570\uff0c\u901a\u8fc7\u6700\u5927\u9650\u5ea6\u5730\u8017\u5c3dGPU\u4e0a\u7684\u5185\u5b58\u6765\u52a0\u5feb\u4f60\u7684\u8bad\u7ec3\u65f6\u95f4\u3002\n\u63a9\u7801=6\uff0c7\uff0c8\u951a\u70b9=12\uff0c16\uff0c19\uff0c36\uff0c40\uff0c28\uff0c36\uff0c75\uff0c76\uff0c55\uff0c72,146,142,110,192,243,459,401class=3num=9jitter=0.3\u5ffd\u7565\u9608\u503c=.7true_Thresh=1Random=1scale_x_y=1.05iou_thresh=0.213cls_normalizer=1.0iou_normalizer=0.07iou_loss=ciounms_kind=greedynmsbeta_nms=0.6max_delta=5\u3002\n#yolov5 Head\uff1a[[-1\uff0c3\uff0cBottle eckCSP\uff0c[1024\uff0cfalse]]\uff0c#11[-1\uff0c1\uff0cnn.Conv2d\uff0c[na*(NC+5)\uff0c1\uff0c1\uff0c0]]\uff0c#12(P5/32-Large)[-2\uff0c1\uff0cnn.Upsample\uff0c[NONE\uff0c2\uff0c&#39\uff1bNEAREST&#39\uff1bNEAREST&#39\uff1b]\uff0c[[-1\uff0c6]\uff0c1\uff0cConat\uff0c[1]]\uff0c#CAT Backbone P4[-1\uff0c1\uff0cConv\uff0c[512\uff0c1\uff0c1]]\uff0c[-1\uff0c3\uff0cBotchieckCSP\uff0c[512\uff0cFalse]]\uff0c[-1\uff0c1\uff0cn.Conv2d\uff0c[NA*(NC+5)\uff0c1\uff0c1\uff0c0]]\uff0c#17(P4/16-Medium)[-2\uff0c1\uff0cn.Upsample\uff0c[\u3002]\uff0c[[-1\uff0c4]\uff0c1\uff0cConat\uff0c[1]]\uff0c#CAT Backbone P3[-1\uff0c1\uff0cConv\uff0c[256\uff0c1\uff0c1]]\uff0c[-1\uff0c3\uff0cBotchieckCSP\uff0c[256\uff0cFalse]]\uff0c[-1\uff0c1\uff0cnn.Conv2d\uff0c[NA*(NC+5)\uff0c1\uff0c1\uff0c0]]\uff0c#22(P3/8-Small)[]\uff0c1\uff0c\u68c0\u6d4b\uff0c[NC\uff0c\u951a]]\u3002\n\u8fd9\u4e24\u4e2a\u914d\u7f6e\u6587\u4ef6\u90fd\u5141\u8bb8\u5728\u4f53\u7cfb\u7ed3\u6784\u7ea7\u522b\u7075\u6d3b\u5730\u8f6c\u79fb\u6a21\u578b\u5b9e\u9a8c\u3002YOLOv4 Darknet\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u7075\u6d3b\u6027\uff0c\u56e0\u6b64\u53ef\u80fd\u662f\u4e00\u4e2a\u66f4\u597d\u7684\u7814\u7a76\u5730\u70b9\u3002\n\u5728YOLOv4 Darknet\u4e2d\uff0c\u60a8\u53ef\u4ee5\u6839\u636e\u8fed\u4ee3\u6b21\u6570max_batches(\u800c\u4e0d\u662f\u7eaa\u5143)\u8bbe\u7f6e\u8bad\u7ec3\u957f\u5ea6\u3002\u5bf9\u4e8e\u81ea\u5b9a\u4e49\u5bf9\u8c61\uff0c\u5b58\u50a8\u5e93\u4e2d\u7684\u5efa\u8bae\u662f2000 x num_class\u3002\u6709\u4e86\u8fd9\u4e2a\u8bbe\u7f6e\uff0cYOLOv4 Darknet\u5728\u6211\u4eec\u7684\u793a\u4f8b\u6570\u636e\u96c6\u4e0a\u82b1\u8d39\u4e86\u60ca\u4eba\u768414\u5c0f\u65f6\u3002\u7136\u800c\uff0c\u5b83\u5728\u6b64\u4e4b\u524d\u5f88\u4e45\u5c31\u8fbe\u5230\u4e86\u6700\u5927\u9a8c\u8bc1\u8bc4\u4f30\uff1b\u6211\u4eec\u770b\u52301300\u6b21\u8fed\u4ee3\u7684\u6700\u5927\u9a8c\u8bc1\u8bc4\u4f30\uff0c\u8fd9\u82b1\u8d39\u4e86\u5927\u7ea63.5\u5c0f\u65f6\u624d\u80fd\u8fbe\u5230\u3002\n\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u7f51\u7edc\uff0c\u6211\u4eec\u67e5\u770b\u6700\u5927\u9a8c\u8bc1\u56fe@0.5\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6211\u4eec\u7684\u4efb\u52a1\uff0c\u5b83\u4eec\u5728\u8fd9\u4e2a\u6307\u6807(0.91MAP)\u4e2d\u7684\u8868\u73b0\u76f8\u4f3c\u3002\n\u8fd9\u5e76\u4e0d\u53cd\u6620COCO\u6570\u636e\u96c6\u7684\u7f51\u7edc\u6027\u80fd\u3002\u5b9e\u9645\u60c5\u51b5\u662f\uff0c\u57fa\u4e8e\u6b64\u7279\u5b9a\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\uff0c\u8fd9\u4e24\u4e2a\u7f51\u7edc\u53ef\u80fd\u90fd\u63a5\u8fd1\u6b64\u7279\u5b9a\u81ea\u5b9a\u4e49\u4efb\u52a1\u7684\u6700\u9ad8\u6027\u80fd\u3002\n\u5728\u672c\u5730\u8fd0\u884cDarknet\u65f6\uff0c\u4f60\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u5f88\u597d\u7684\u8bad\u7ec3\u56fe\uff0c\u4f46\u5728Colab\u4e0a\u5c31\u4e0d\u90a3\u4e48\u5bb9\u6613\u5b9e\u73b0\u4e86\u3002\u60a8\u53ef\u4ee5\u8f93\u51fa\u65e5\u5fd7\uff0c\u7136\u540e\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\uff0c\u4f46\u6211\u4eec\u5728\u8fd9\u91cc\u6ca1\u6709\u8bf4\u5230\u8fd9\u91cc\u3002\n\u8ba1\u7b97\u56fe(\u5e73\u5747\u7cbe\u5ea6).76\u68c0\u6d4b_\u8ba1\u6570=4265\uff0c\u552f\u4e00\u771f\u503c\u8ba1\u6570=967\u7c7b_id=0\uff0c\u540d\u79f0=\u8840\u5c0f\u677f\uff0cAP=88.87%(TP=73\uff0cFP=30)class_id=1\uff0c\u540d\u79f0=RBC\uff0cAP=85.28%(TP=763\uff0cFP=635)class_id=2\uff0c\u540d\u79f0=WBC\uff0cAP=98.03%(TP=72\uff0cFP=2)\u5bf9\u4e8econf_Thresh=0.25\uff0c\u7cbe\u5ea6=0.58\uff0cF1-SCORE=0.71CONF_THRESHOLD=0.25\uff0cTP=908\uff0cFP=667\uff0cFN=59\uff0c\u5e73\u5747IOU=47.79%IOU\u9608\u503c=50\uff0c\u6bcf\u6b21\u552f\u4e00\u53ec\u56de\u4f7f\u7528\u7684\u66f2\u7ebf\u4e0b\u9762\u79ef\u5e73\u5747\u7cbe\u5ea6(MAP@0.5)=0.907268\uff0c\u621690.73%\u603b\u68c0\u6d4b\u65f6\u95f4\uff1a3\u79d2Set-Points\u6807\u5fd7\uff1a`-Points 101\u2018\u5bf9\u4e8eMS COCO`-Points 11`\u5bf9\u4e8ePascalVOC2007(\u53d6\u6d88\u6ce8\u91ca\u3002\u60a8\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u96c6Mean_Average_Precision(MAP@0.5)=0.907268\u3002\n\u535a\u5947\u79d1\u592b\u65af\u57fa\u6697\u793a\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u671f\u5f85\u8fd9\u4e24\u6b3e\u8f66\u578b\u5728Micrsofot Coco\u4e0a\u7684\u8868\u73b0\u4e5f\u662f\u5982\u6b64\uff1a\n\u4ed6\u4eec\u6bd4\u8f83\u4e86Microsoft Coco\u4e0a\u7cbe\u5ea6\u6781\u4f4e\u7684\u5c0f\u578b\u8d85\u5206\u6790\u5668-YOLOv5\u7248\u672cYOLOv5s(27MB)\u548cMicrosoft Coco\u4e0a\u7cbe\u5ea6\u6781\u9ad8\u7684\u5927\u578bYOLOv4(245MB)\u6a21\u578bYOLOv5s(27MB)\u548c\u975e\u5e38\u9ad8\u7cbe\u5ea641%-43%AP\u7684\u6a21\u578b\u5927\u5c0f\u3002\n\u56e0\u6b64\uff0c\u5728\u6570\u636e\u96c6\u66f4\u5927\u6216\u4efb\u52a1\u66f4\u5177\u6311\u6218\u6027\u7684\u60c5\u51b5\u4e0b\uff0cYOLOv4\u7684\u8868\u73b0\u53ef\u80fd\u4f1a\u66f4\u597d\u3002\u540c\u6837\uff0c\u5728\u60a8\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u4e0a\u6d4b\u8bd5\u8fd9\u4e9b\u7ed3\u679c\u4e5f\u662f\u503c\u5f97\u7684\u3002\n\u5f53\u6211\u4eec\u67e5\u770b\u91cd\u91cf\u6587\u4ef6\u65f6\uff0c\u8fd9\u91cc\u7684\u6587\u4ef6\u5927\u5c0f\u662f\u6211\u4eec\u89c2\u5bdf\u5230\u7684\u3002.weight\u662f\u6765\u81eaDarknet\u8d44\u6599\u5e93\u7684\u81ea\u5b9a\u4e49YOLOv4\u68c0\u6d4b\u5668\uff0c.pt\u662f\u6765\u81eaUltralytics\u8d44\u6599\u5e93\u7684\u81ea\u5b9a\u4e49YOLOv5s\u68c0\u6d4b\u5668\u3002YOLOv4\u5177\u6709250MB\u7684\u91cd\u91cf\u6587\u4ef6\uff0c\u800cYOLOv5S\u5177\u670927MB\u7684\u91cd\u91cf\u6587\u4ef6\u3002\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff1aBochkovski\u5f3a\u8c03\u4ed6\u7684Darknet\u5b58\u50a8\u5e93\u7684\u9ed8\u8ba4YOLOv4\u67b6\u6784\u6784\u5efa\u4e86\u5927YOLOv4(245MB)\uff0c\u800cYOLOv5\u5b9e\u73b0\u6784\u5efa\u4e86\u4e00\u4e2a\u5c0fYOLOv5(YOLOv5s)\u3002\u6700\u5927\u7684YOLOv5\u662fYOLOv5l\uff0c\u5b83\u7684\u91cd\u91cf\u662f192MB\u3002\n\u6700\u540e\uff0c\u6211\u4eec\u5c06\u4e24\u79cd\u7f51\u7edc\u4e0b\u7684\u63a8\u7406\u65f6\u95f4\u4e0e\u6307\u5b9a\u7684\u73af\u5883\u914d\u7f6e(Tesla P100)\u8fdb\u884c\u4e86\u6bd4\u8f83\u3002\u8fd9\u5c31\u662fAlexeyAB\u6b63\u786e\u5730\u6307\u51fa\u6211\u4eec\u6700\u521d\u7684\u5e16\u5b50\u8fdb\u884c\u4e86\u4e0d\u516c\u5e73\u7684\u6bd4\u8f83\uff0c\u6ca1\u6709\u5c06\u82f9\u679c\u4e0e\u82f9\u679c\u8fdb\u884c\u6bd4\u8f83\u7684\u5730\u65b9\u3002\u6211\u4eec\u5bf9\u6b64\u6df1\u8868\u6b49\u610f\uff1b\u6211\u4eec\u7684\u610f\u56fe\u4e0d\u662f\u4e3a\u4e86\u8bef\u5bfc\uff0c\u76f4\u5230AlexeyAB\u6307\u51fa\u8fd9\u4e00\u70b9\u540e\uff0c\u6211\u4eec\u624d\u610f\u8bc6\u5230\u9ed8\u8ba4\u7684\u63a8\u7406\u8bbe\u7f6e\u662f\u4e0d\u540c\u7684\u3002\n\u5728\u5355\u4e2a\u56fe\u50cf(\u6279\u6b21\u5927\u5c0f\u4e3a1)\u4e0a\uff0cYOLOv4\u63a8\u8bba\u9700\u898133\u6beb\u79d2(30 FPS)\uff0cYOLOv5S\u63a8\u8bba\u9700\u898120\u6beb\u79d2(10 FPS)\u3002\n\u5f53\u60a8\u6279\u91cf\u63a8\u7406\u65f6\uff0cYOLOv5s\u63a8\u7406\u901f\u5ea6\u4e3a7\u6beb\u79d2(140 FPS)\u3002\u8f93\u51fa\u5c06\u603b\u63a8\u7406\u65f6\u95f4\u9664\u4ee5\u6b63\u5728\u5904\u7406\u7684\u56fe\u50cf\u6570\u91cf\u3002Ultralytics YOLOv5\u5b9e\u73b0\u9ed8\u8ba4\u4f7f\u7528\u6b64\u8bbe\u7f6e\uff0c\u56e0\u6b64\u5982\u679c\u60a8\u4ece\u5b58\u50a8\u5e93\u4e2d\u5b9e\u73b0\uff0c\u5219\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u60a8\u5c06\u62e5\u6709140 FPS\u7684\u6279\u5904\u7406\u63a8\u7406\u3002\n\u6211\u4eec\u60f3\u4e0d\u51fa\u5982\u4f55\u8ba9YOLOv4\u5728\u6211\u4eec\u7684\u7b14\u8bb0\u672c\u4e0a\u8fdb\u884c\u6279\u91cf\u63a8\u7406\u3002\u5982\u679c\u4f60\u77e5\u9053\u600e\u4e48\u505a\uff0c\u8bf7\u8ba9\u6211\u4eec\u77e5\u9053\uff0c\u6211\u4eec\u4f1a\u66f4\u65b0\u8fd9\u7bc7\u5e16\u5b50\u3002\n\u56fe1/36../test/images/BloodImage_00038_jpg.rf.63da20f3f5538d0d2be8c4633c7034a1.jpg\uff1a416x416 1\u4e2a\u5e73\u53f0\u300122\u4e2aRBC\u30011\u4e2aWBC\uff0c\u5b8c\u6210\u3002(0.007s)\u56fe\u50cf2/36../test/images/BloodImage_00044_jpg.rf.b0e2369642c5a7fa434ed8defa79e2ba.jpg\uff1a416x416 2\u5e73\u677f\uff0c13\u4e2a\u7ea2\u7ec6\u80de\uff0c2\u4e2a\u767d\u7ec6\u80de\uff0c\u5b8c\u6210\u3002(0.007s)\u56fe\u50cf3/36../test/images/BloodImage_00062_jpg.rf.e965ee152eea462d82706a2709abfe00.jpg\uff1a416x416 1\u5e73\u677f\uff0c14\u4e2a\u7ea2\u7ec6\u80de\uff0c1\u4e2a\u767d\u7ec6\u80de\uff0c\u5b8c\u6210\u3002(0.007s)\u56fe\u50cf4/36../test/images/BloodImage_00090_jpg.rf.4fd1da847d2857b6092003c41255ea4c.jpg\uff1a416x416 3\u5e73\u677f\uff0c12\u4e2a\u7ea2\u7ec6\u80de\uff0c1\u4e2a\u767d\u7ec6\u80de\uff0c\u5b8c\u6210\u3002(0.007s)\u56fe\u50cf5/36../test/images/BloodImage_00099_jpg.rf.5b178d758af2a97d3df8e5f87b1f344a.jpg\uff1a416x416 1\u5e73\u677f\uff0c16\u4e2a\u7ea2\u7ec6\u80de\uff0c1\u4e2a\u767d\u7ec6\u80de\uff0c\u5b8c\u6210\u3002(0.007s)\u56fe\u50cf6/36../test/images/BloodImage_00112_jpg.rf.f8d86689750221da637a054843c72822.jpg\uff1a416x416 1\u5e73\u677f\uff0c15\u4e2a\u7ea2\u7ec6\u80de\uff0c1\u4e2a\u767d\u7ec6\u80de\uff0c\u5b8c\u6210\u3002(0.007s)\u56fe\u50cf7/36../test/images/BloodImage_00113_jpg.rf.a6d6a75c0ebfc703ecff95e2938be34d.jpg\uff1a416x416 1\u5e73\u677f\uff0c15\u4e2a\u7ea2\u7ec6\u80de\uff0c1\u4e2a\u767d\u7ec6\u80de\uff0c\u5b8c\u6210\u3002(0.007s)\u56fe\u50cf8/36../test/images/BloodImage_00120_jpg.rf.6742a4da047e1226a181d2de2978ce6d.jpg\uff1a416x416 9 RBC\uff0c1 WBC\uff0c\u5b8c\u6210\u3002(0.007s)\u56fe\u50cf9/36../test/images/BloodImage_00133_jpg.rf.06c3705fcfe2fcaee19e1a076e511508.jpg\uff1a416x416 8 RBC\uff0c1 WBC\uff0c\u5b8c\u6210\u3002(0.007s)\u3002\nRoboflow\u81f4\u529b\u4e8e\u4f7f\u6bcf\u4e2a\u5f00\u53d1\u4eba\u5458\u90fd\u80fd\u4f7f\u7528\u8ba1\u7b97\u673a\u89c6\u89c9\u6765\u89e3\u51b3\u4ed6\u4eec\u7684\u95ee\u9898\uff0c\u800c\u4e0d\u7ba1\u4ed6\u4eec\u7684\u9886\u57df\u662f\u4ec0\u4e48\u3002\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u6570\u4ee5\u5343\u8ba1\u7684\u4eba\u5efa\u9020\u4e86\u50cf\u65b0\u51a0\u80ba\u708e\u80f8\u90e8\u626b\u63cf\u7ffb\u8bd1\u5668\u3001\u5bff\u53f8\u63a2\u6d4b\u5668\u3001\u98de\u673a\u90e8\u4ef6\u7ef4\u4fee\u8bc6\u522b\u5668\u7b49\u5de5\u5177\u3002\n\u6211\u4eec\u5c06\u7ee7\u7eed\u76d1\u63a7\u54ea\u4e2a\u578b\u53f7\u540d\u79f0\u6700\u9002\u5408Glenn Jocher\u7684YOLOv5\u5b9e\u65bd\uff0c\u6211\u4eec\u5e0c\u671b\u6211\u4eec\u8be6\u7ec6\u7684YOLOv4 vs YOLOv5\u65b9\u6cd5\u80fd\u591f\u9a8c\u8bc1\u6211\u4eec\u662f\u5982\u4f55\u5b9e\u73b0\u6211\u4eec\u7684\u7ed3\u679c\u7684\u3002\u6211\u4eec\u8fd8\u5e0c\u671b\u5b83\u5728\u521b\u5efa\u6bd4\u8f83\u65f6\u5c06\u6613\u7528\u6027\u4f5c\u4e3a\u4e00\u4e2a\u8003\u8651\u56e0\u7d20\u6765\u7a81\u51fa\u663e\u793a\u3002\n\u7531\u8877\u5730\uff0c\u6211\u4eec\u5bf9\u4e00\u8def\u4e0a\u7684\u53cd\u9988\u6df1\u8868\u611f\u8c22\u3002\u6b63\u5982\u4e00\u4f4d\u673a\u5668\u5b66\u4e60\u7814\u7a76\u4eba\u5458\u5199\u7ed9\u6211\u4eec\u7684\uff1a\n\u6700\u540e\uff0c\u6211\u4eec\u9080\u8bf7\u60a8\u5c1d\u8bd5YOLOv4\u548cYOLOv5(\u6216\u8005\u6211\u4eec\u7684\u793e\u533a\u51b3\u5b9a\u600e\u4e48\u79f0\u547c\u5b83\uff01)\u3002\u5e76\u5f97\u51fa\u60a8\u81ea\u5df1\u7684\u7ed3\u8bba\uff1a\n\u60f3\u6210\u4e3a\u7b2c\u4e00\u4e2a\u4e86\u89e3\u65b0\u7684\u8ba1\u7b97\u673a\u89c6\u89c9\u6559\u7a0b\u548c\u5185\u5bb9(\u5982\u6211\u4eec\u7684\u5408\u6210\u6570\u636e\u96c6\u521b\u5efa\u6307\u5357)\u7684\u4eba\u5417\uff1f\u8ba2\u9605\u6211\u4eec\u7684\u66f4\u65b0\ud83d\udcec\u3002\nRoboFlow\u901a\u8fc7\u81ea\u52a8\u6279\u6ce8\u8d28\u91cf\u4fdd\u8bc1\u3001\u901a\u7528\u6279\u6ce8\u683c\u5f0f\u8f6c\u6362(\u5982Pascal VOC XML\u5230COCO JSON\u548c\u521b\u5efaTFRecords)\u3001\u56e2\u961f\u5171\u4eab\u548c\u7248\u672c\u63a7\u5236\uff0c\u4ee5\u53ca\u4e0e\u6d41\u884c\u7684\u5f00\u6e90\u8ba1\u7b97\u673a\u89c6\u89c9\u6a21\u578b\u7684\u8f7b\u677e\u96c6\u6210\uff0c\u52a0\u901f\u4e86\u60a8\u7684\u8ba1\u7b97\u673a\u89c6\u89c9\u5de5\u4f5c\u6d41\u7a0b\u3002\u83b7\u5f97\u5723\u5f7c\u5f97\u5821\u3002\n..", "note_en": "We appreciate the machine learning community&#39;s feedback, and we&#39;re publishing additional details on our methodology.\n  On June 10th, the Roboflow Team published a blog post titled &#34; YOLOv5 is Here,&#34; sharing benchmarks and comparisons on YOLOv5 versus YOLOv4. Our mission is to enable any developer to solve their problems with computer vision, so when Glenn Jocher (Ultralytics) released a  YOLOv5 repository on June 9, we moved swiftly to share its creation more broadly.\n  The post generated significant discussion across Hacker News, Reddit, and even GitHub \u2013 but, frankly, not for the reasons we anticipated (like its small size and fast inference speeds).\n   This post shares our thoughts on these two questions and clarifies an unfair comparison in inference speed from our original post.\n  A number of commenters on our blog post took the position that Glenn Jocher should not have named the implementation &#34;YOLOv5&#34; because (1) he is not an original YOLO author, (2) he did not publish a paper, and/or (3) the implementation is not sufficiently novel.\n Below, we provide context and a request to the machine learning community for better naming conventions.\n  &#34;YOLO&#34; refers to &#34;You Only Look Once,&#34; a family of models that Joseph Redmon introduced in his May 2016 paper, &#34; You Only Look Once: Unified, Real-Time Object Detection.&#34;\n Redmon subsequently introduced YOLOv2 in a December 2017 paper titled &#34; YOLO9000: Better, Faster, Stronger.&#34; He and his advisor also published &#34; YOLOv3: An Incremental Improvement&#34; in April 2018.\n  From that point forward, it became unclear who, if anyone, should continue to use the name &#34;YOLO&#34; to refer to new model architectures. Some have considered YOLOv3 to be &#34;the last YOLO.&#34;\n Of chronological note, Glenn Jocher, unaffiliated with Joseph Redmon, created a popular  YOLOv3 implementation in PyTorch.\n Then, on April 23, 2020, Alexey Bochkovskiy  published YOLOv4. Notably, Joseph Redmon engaged on Twitter to commend the amount of work Bochkovskiy has put into Darknet, and said it &#34;doesn&#39;t matter what I think&#34; about the implementation and its branding.\n Doesn\u2019t matter what I think! At this point  @alexeyab84 has the canonical version of darknet and yolo, he\u2019s put a ton of work into it and everyone uses it, not mine haha.  https://t.co/FcnQPiySr7\n\u2014 Joe Redmon (@pjreddie)  April 25, 2020\n  On May 29, 2020, Glenn Jocher  created a repository called YOLOv5 that didn&#39;t contain any model code, and on June 9, 2020, he added  a commit message to his YOLOv3 implementation titled &#34;YOLOv5 greetings.&#34;\n Jocher&#39;s YOLOv5 implementation differs from prior releases in a few notable ways. First, Jocher did not (yet) publish a paper to accompany his release. Second, Jocher implemented YOLOv5 natively in PyTorch whereas all prior models in the YOLO family leverage Darknet.\n Notably, Jocher is also credited with creating mosaic  data augmentation and including it in his  YOLOv3 repository, which is one of the many novel  data augmentations leveraged in YOLOv4. He is given an acknowledgement in the YOLOv4 paper.\n  Jocher&#39;s YOLOv5 repository is far from his first involvement in the YOLO project: he&#39;s made  2,379 commits to his YOLOv3 implementation that Bochkovskiy cites.\n  Candidly, the Roboflow team does not know. And nor should we be the arbiters of naming designations!\n  We&#39;re not affiliated with Ultralytics or the other researchers. We&#39;re a startup that enables developers to use computer vision without being machine learning experts, and we support a wide array of open source model architectures for teams to try on their data:  https://models.roboflow.ai\n Beyond that, we&#39;re just fans. We&#39;re amazed by how quickly the field is moving and we did some benchmarks that we thought other people might find as exciting as we did. I don&#39;t want to take a side in the naming controversy. Our core focus is helping developers get data into  any model, regardless of its name!\n However, we recognize that, as an organization amplifying recognition of model architectures,  we should use the name that is consistent with what the machine learning community uses.\n Thus, we will continue to listen and thoughtfully engage. We ask for the machine learning community to do the same. Let&#39;s appreciate the hard work that went into implementing YOLO in PyTorch natively, regardless of its name. And let&#39;s find the name that feels right \u2013 whether YOLOv5, FastYOLO, YOLOv4-accelerated, or something else altogether. It&#39;s safe to say: we look forward to the next YOLO. When (and if) the name changes, we will update our references to it.\n  Whenever a new model architecture is released, it is important to assess its performance to determine the model&#39;s quality. In the research community, models are benchmarked on the same images like the Common Object in Context (COCO) dataset. In production environments, teams will test models against their own domain problem, and they may consider different factors of primary importance. (For example, even if a model is more accurate, if it cannot perform realtime performance, it may be unsuitable for systems.)\n As noted, at Roboflow, our goal is to enable teams to leverage computer vision models quickly and easily on their own custom datasets specific to their domains.\n Similarly,  our aim in comparing models is to give an example demonstration of using the two models on a user&#39;s own custom dataset. How long should they expect each implementation to train? How accurate are they? How fast is inference? How challenging is it to set up a given model in a production environment? Ideally, this comparison should be easily adapted to a user&#39;s own dataset so that they can make their own judgement call, too.\n This is not a substitute for a formal benchmarking exercise on COCO. Bochkovskiy made this abundantly clear in his  breakdown of YOLOv4 versus YOLOv5 on GitHub, and identified an inconsistency in how we at Roboflow compared the frame rates and default model sizes, which we&#39;ve addressed more thoroughly below.\n We deeply respect the work researchers like Alexey Bochkovskiy are producing, and we&#39;re thankful they are continuing to push the field forward. In fact, we are building Roboflow for very similar reasons to why he published the  YOLOv4 paper:\n The main goal of this work is designing a fast operating speed of an object detector in production systems and optimization for parallel computations, rather than the low computation volume theoretical indicator (BFLOP).  We hope that the designed object can be easily trained and used. For example, anyone who uses a conventional GPU to train and test can achieve real-time, high quality, and convincing object detection results\n   We implemented the default models that compile when using the  Darknet repository and Ultralytics&#39;s  YOLOv5 repository. As Bochkovskiy noted, this compiles the YOLOv4s (&#34;big YOLOv4&#34; and YOLOv5s &#34;small YOLOv4&#34;).\n After the post came out and we saw some of the (valid) criticisims, we solicited advice from those in the community on the best way to back up and clarify the results we published.\n    Before diving in, it&#39;s important to acknowledge that both of these frameworks accomplish the impressive feat of enabling computers to recognize objects, and many considerations raised here are on the margins.\n  Both models appear to max out their performance on our sample dataset, hence reported similarly accurate performance. YOLOv5 trains faster on the sample task, and the batch inference (which the implementation uses by default) produces realtime results. While YOLOv4 trains more slowly, when both batch inference sizes are set to 1, it is faster. Because the YOLOv5 implementation is in PyTorch and YOLOv4 is in Darknet, YOLOv5 may be easier to bring to production while YOLOv4 is where top-accuracy research may continue to progress.\n  If you&#39;re a developer looking to incorporate near realtime object detection into your project quickly, YOLOv5 is a great choice. If you&#39;re a computer vision engineer in pursuit of state-of-the-art and not afraid of a little more custom configuration, YOLOv4 in Darknet continues to be  most accurate.\n Importantly, we&#39;ve made it easy for you to try this experiment on your own dataset:\n  The remainder of this writeup is written to guide you through completing this comparison on your own dataset.\n  All comparisons are conducted in Google Colab which, on the Pro tier, comes with consistent hardware: a NVIDIA Tesla P100. This also enables you to easily reproduce our results. (It does come at the cost of not enabling lower level optimizations with, e.g. specific CUDA Toolkit versioning.)\n If you&#39;d like to use the exact same notebooks we used in our tests to teproduce these results, they&#39;re available here:\n   In our evaluation, we used the  blood cell count and detection dataset. The dataset consists of 364 images across three classes (red blood cells, white blood cells, and platelets).\n  As noted, our dataset is meant to be representative of a sample custom task that may be encountered &#34;in the wild,&#34; and not an official COCO benchmark. The notebooks linked above enable you to duplicate this experiment on your own task.\n  Before we get started training, we first install the YOLOv4 Darknet and YOLOv5 environments. Setting up environments (beyond supplying  requirements.txt and occasional AMIs) is often omitted from even rigorous COCO comparisons, and we find it to be an important point comparison if a primary goal is accessibility.\n   nvcc: NVIDIA (R) Cuda compiler driverCopyright (c) 2005-2019 NVIDIA CorporationBuilt on Sun_Jul_28_19:07:16_PDT_2019Cuda compilation tools, release 10.1, V10.1.243\n Then we need to install  cuDNN to support deep learning functions utilized by Darknet. To do so, we navigate to NVIDIA&#39;s website and pull the correct cuDNN file to configure with our  cuda drivers. In this case, that is  cuDNN 10.1. We read in and install. Unfortunately, NVIDIA does not allow publishing of the  cuDNN link, so if you&#39;re following along, you&#39;ll need to to go to NVIDIA&#39;s website to download.\n /usr/localcuda/include/cudnn.hcuda/NVIDIA_SLA_cuDNN_Support.txtcuda/lib64/libcudnn.socuda/lib64/libcudnn.so.7cuda/lib64/libcudnn.so.7.6.5cuda/lib64/libcudnn_static.a#define CUDNN_MAJOR 7#define CUDNN_MINOR 6#define CUDNN_PATCHLEVEL 5--#define CUDNN_VERSION (CUDNN_MAJOR * 1000 + CUDNN_MINOR * 100 + CUDNN_PATCHLEVEL)#include &#34;driver_types.h&#34;\n   Configuring the  Makefile. Before reaching google Colab, we configured the  Makefile to have the following configurations:\n       We first clone the repository,  !pip install -U -r yolov5/requirements.txt and then check our  torch set up:\n    YOLOv4 uses the traditional data annotations in YOLO Darknet framework. A  train.txt and  valid.txt specify a location of  .jpg files with  .txt annotations. Finally, a  .data file is invoked in training to specify the location of all of these things along with class labels and a place to save training weights:\n with open(&#39;data/obj.data&#39;, &#39;w&#39;) as out: out.write(&#39;classes = 3\\n&#39;) out.write(&#39;train = data/train.txt\\n&#39;) out.write(&#39;valid = data/valid.txt\\n&#39;) out.write(&#39;names = data/obj.names\\n&#39;) out.write(&#39;backup = backup/&#39;)\n YOLOv5 uses a similar format with a few caveats.  train and  valid folders are to be placed next to the  yolov5 repository. In each, should be an  images directory of images with an accompanying  labels directory. A  data.yml file links these directories together:\n  Both formats are supported by  Roboflow for  Download and you can drag and drop  Upload your dataset in any format (COCO, Pascal VOC, TensorFlow CSV, etc.) and get them back formatted properly for YOLOv4 or YOLOv5.\n  YOLOv4 and YOLOv5 both specify training configuration files,  .cfg and  .yaml, respectively. Both of these training files require us to specify  num_classes for your custom dataset, as the networks architectures are rewritten.\n In the Darknet config, we specify more about the training job including  batch_size,  subdivisions,  max_batches, and  steps. In Darknet, you can play around with these parameters to speed up your training time by maxing out memory on your GPU.\n  [yolo]mask = 6,7,8anchors = 12, 16, 19, 36, 40, 28, 36, 75, 76, 55, 72, 146, 142, 110, 192, 243, 459, 401classes=3num=9jitter=.3ignore_thresh = .7truth_thresh = 1random=1scale_x_y = 1.05iou_thresh=0.213cls_normalizer=1.0iou_normalizer=0.07iou_loss=ciounms_kind=greedynmsbeta_nms=0.6max_delta=5\n # yolov5 headhead: [[-1, 3, BottleneckCSP, [1024, False]], # 11 [-1, 1, nn.Conv2d, [na * (nc + 5), 1, 1, 0]], # 12 (P5/32-large) [-2, 1, nn.Upsample, [None, 2, &#39;nearest&#39;]], [[-1, 6], 1, Concat, [1]], # cat backbone P4 [-1, 1, Conv, [512, 1, 1]], [-1, 3, BottleneckCSP, [512, False]], [-1, 1, nn.Conv2d, [na * (nc + 5), 1, 1, 0]], # 17 (P4/16-medium) [-2, 1, nn.Upsample, [None, 2, &#39;nearest&#39;]], [[-1, 4], 1, Concat, [1]], # cat backbone P3 [-1, 1, Conv, [256, 1, 1]], [-1, 3, BottleneckCSP, [256, False]], [-1, 1, nn.Conv2d, [na * (nc + 5), 1, 1, 0]], # 22 (P3/8-small) [[], 1, Detect, [nc, anchors]], # Detect(P3, P4, P5) ]\n Both of these configuration files allow for flexible shifting of model experiments at the architecture level. YOLOv4 Darknet provides more flexibility and therefore is probably a better spot to go to for research purposes.\n  In YOLOv4 Darknet, you set training length based on number of iterations  max_batches (not epochs). The recommendation in the repository for custom objects is 2000 x  num_classes. With this setting YOLOv4 Darknet takes a whopping 14hrs on our example dataset. However, it reaches max validation eval well before that; we saw max validation evaluation at 1300 iterations, which took about 3.5 hrs to reach.\n    For both networks, we look at the max validation mAP @0.5. We find that they perform similarly in this metric (0.91 mAP) for our task.\n This does not reflect the networks&#39; performance on the COCO dataset. The reality is that both networks are probably approaching maximum performance for this particular custom task, based on this particular custom dataset.\n  When running Darknet on local you can produce a nice training graph, but on Colab that is not as easy to achieve. You can output the logs and then parse them, but we did not go so far here.\n calculation mAP (mean average precision)...76 detections_count = 4265, unique_truth_count = 967 class_id = 0, name = Platelets, ap = 88.87% \t (TP = 73, FP = 30) class_id = 1, name = RBC, ap = 85.28% \t (TP = 763, FP = 635) class_id = 2, name = WBC, ap = 98.03% \t (TP = 72, FP = 2) for conf_thresh = 0.25, precision = 0.58, recall = 0.94, F1-score = 0.71 for conf_thresh = 0.25, TP = 908, FP = 667, FN = 59, average IoU = 47.79 % IoU threshold = 50 %, used Area-Under-Curve for each unique Recall mean average precision (mAP@0.50) = 0.907268, or 90.73 % Total Detection Time: 3 SecondsSet -points flag: `-points 101` for MS COCO `-points 11` for PascalVOC 2007 (uncomment `difficult` in voc.data) `-points 0` (AUC) for ImageNet, PascalVOC 2010-2012, your custom dataset mean_average_precision (mAP@0.5) = 0.907268\n  Bochkovskiy alluded to how we might expect these two models to perform on Micrsofot COCO as well:\n They compared size of models of small ultralytics-YOLOv5-version YOLOv5s (27 MB) with very low accuracy 26-36% AP on Microsoft COCO with big YOLOv4 (245 MB) with very high accuracy 41-43% AP on Microsoft COCO.\n Thus, in cases of larger datasets or more challenging tasks, YOLOv4 will likely outperform. Again, it would be worthwhile to test these results on your own custom dataset.\n  When we look at the weight files file sizes here is what we observed.  .weights is the custom YOLOv4 detector from the Darknet repository and  .pt is the custom YOLOv5s detector from the Ultralytics repository. YOLOv4 has a 250 mb weight file and YOLOv5s has a 27 mb weight file.\n    Of note: Bochkovskiy highlighted that the default YOLOv4 architecture from his Darknet repository builds big YOLOv4 (245 MB) while the YOLOv5 implementation builds a small YOLOv5 (YOLOv5s). The largest YOLOv5 is YOLOv5l, and its weights are 192 MB.\n  Lastly, we compare inference time run under both networks with the environment configurations specified (Tesla P100). This is where AlexeyAB rightly pointed out that our original post made an unfair comparison and did not compare apples to apples. We apologize for this; our intention was not to mislead and we did not realize the default inference settings were different until AlexeyAB pointed it out.\n On  single images (batch size of 1), YOLOv4 inferences in 33 ms (30 FPS) and YOLOv5s inferences in 20ms (10 FPS).\n YOLOv5s inferences in 7 ms (140 FPS) when you infer  in batch. The output divides total inference time by the number of images being processed.     The Ultralytics YOLOv5 implementation defaults to this setting, so if you implement from the repository, you will have batch inference at 140 FPS by default.\n We were not able to figure out how to get YOLOv4 to do batch inference in our notebook. If you figure out how to do it, please let us know and we will update this post.\n   image 1/36 ../test/images/BloodImage_00038_jpg.rf.63da20f3f5538d0d2be8c4633c7034a1.jpg: 416x416 1 Plateletss, 22 RBCs, 1 WBCs, Done. (0.007s)image 2/36 ../test/images/BloodImage_00044_jpg.rf.b0e2369642c5a7fa434ed8defa79e2ba.jpg: 416x416 2 Plateletss, 13 RBCs, 2 WBCs, Done. (0.007s)image 3/36 ../test/images/BloodImage_00062_jpg.rf.e965ee152eea462d82706a2709abfe00.jpg: 416x416 1 Plateletss, 14 RBCs, 1 WBCs, Done. (0.007s)image 4/36 ../test/images/BloodImage_00090_jpg.rf.4fd1da847d2857b6092003c41255ea4c.jpg: 416x416 3 Plateletss, 12 RBCs, 1 WBCs, Done. (0.007s)image 5/36 ../test/images/BloodImage_00099_jpg.rf.5b178d758af2a97d3df8e5f87b1f344a.jpg: 416x416 1 Plateletss, 16 RBCs, 1 WBCs, Done. (0.007s)image 6/36 ../test/images/BloodImage_00112_jpg.rf.f8d86689750221da637a054843c72822.jpg: 416x416 1 Plateletss, 15 RBCs, 1 WBCs, Done. (0.007s)image 7/36 ../test/images/BloodImage_00113_jpg.rf.a6d6a75c0ebfc703ecff95e2938be34d.jpg: 416x416 1 Plateletss, 15 RBCs, 1 WBCs, Done. (0.007s)image 8/36 ../test/images/BloodImage_00120_jpg.rf.6742a4da047e1226a181d2de2978ce6d.jpg: 416x416 9 RBCs, 1 WBCs, Done. (0.007s)image 9/36 ../test/images/BloodImage_00133_jpg.rf.06c3705fcfe2fcaee19e1a076e511508.jpg: 416x416 8 RBCs, 1 WBCs, Done. (0.007s)\n    Roboflow is committed to enabling every developer to use computer vision to solve their problems, regardless of their domain. We&#39;ve seen thousands build tools like COVID-19 chest scan interpreters, sushi detectors, airplane part maintenance identifiers, and so much more.\n We will continue to monitor what model name appears most appropriate for Glenn Jocher&#39;s YOLOv5 implementation, and we hope our detailed YOLOv4 vs YOLOv5 methodology enables validation of how we achieved our results. We also hope it highlights &#34;ease of use&#34; as a consideration when creating comparisons.\n Sincerely, we&#39;re deeply appreciative of the feedback along the way. As a machine learning researcher wrote us:\n  Lastly, we invite you to try YOLOv4 and YOLOv5 (or whatever our community decides to call it!) on your own datasets and draw your own conclusions:\n         Want to be the first to know about new  computer vision tutorials\t\t\t\t\tand content like our\t\t\t\t\t synthetic dataset creation guide?\t\t\t\t\t Subscribe to our updates \ud83d\udcec.\n  Roboflow accelerates your computer vision workflow through automated annotation\t\t\t\t\tquality assurance, universal annotation format conversion (like\t\t\t\t\t\t PASCAL VOC XML to COCO JSON and\t\t\t\t\t\t creating TFRecords\t\t\t\t\t), team sharing and versioning, and easy integration with popular\t\t\t\t\t open source computer vision models.\t\t\t\t\tGetting st\n......", "posttime": "2020-06-15 00:03:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e89\u8bae,controversy,yolov5", "title": "\u5173\u4e8eYOLOv5\u4e89\u8bae\u7684\u56de\u5e94", "title_en": "Responding to the Controversy about YOLOv5", "transed": 1, "url": "https://blog.roboflow.ai/yolov4-versus-yolov5/", "via": "", "real_tags": ["\u4e89\u8bae", "yolov5"]}, {"category": "", "categoryclass": "", "imagename": "58bb67a4b0d67be40b6e8ed20e57968a.png", "infoid": 1006535, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "GitHub\u9996\u5e2d\u6267\u884c\u5b98\u5468\u4e94\u8868\u793a\uff0cGitHub\u6b63\u5728\u52aa\u529b\u5c06\u5176\u670d\u52a1\u4e2d\u7684\u4e3b\u4eba\u4e00\u8bcd\u66ff\u6362\u4e3a\u4e00\u4e2a\u4e2d\u7acb\u7684\u8bcd\uff0c\u5982Main\uff1bMain\uff0c\u4ee5\u907f\u514d\u4efb\u4f55\u4e0d\u5fc5\u8981\u7684\u5974\u96b6\u5236\u63d0\u53ca\u3002\n\u8fd9\u4e2a\u4ee3\u7801\u6258\u7ba1\u95e8\u6237\u7f51\u7ad9\u53ea\u662f\u4e00\u957f\u4e32\u79d1\u6280\u516c\u53f8\u548c\u5f00\u6e90\u9879\u76ee\u4e2d\u6700\u65b0\u7684\u4e00\u4e2a\uff0c\u8fd9\u4e9b\u516c\u53f8\u548c\u5f00\u6e90\u9879\u76ee\u8868\u793a\u652f\u6301\u5220\u9664\u53ef\u80fd\u4f1a\u5192\u72af\u9ed1\u4eba\u793e\u533a\u5f00\u53d1\u4eba\u5458\u7684\u6761\u6b3e\u3002\n\u8fd9\u5305\u62ec\u4e3a&#34\uff1bMain/Default/Primary&#34\uff1b\u548c&#34\uff1b\u8f85\u52a9\uff1b&#34\uff1b\u7b49\u5907\u9009\u65b9\u6848\u5220\u9664&#34\uff1bMaster&#34\uff1b\u548c&#34\uff1bSlave&#34\uff1b\u7b49\u672f\u8bed\uff0c\u4f46\u4e5f\u4e3a&#34\uff1b\u5141\u8bb8\u540d\u5355&#34\uff1b\u548c&#34\uff1b\u62d2\u7edd/\u6392\u9664\u5217\u8868&#34\uff1b\u5220\u9664&#34\uff1b\u9ed1\u540d\u5355&#34\uff1b\u548c&#34\uff1b\u767d\u540d\u5355&#34\uff1b\u7b49\u672f\u8bed\u3002\n\u5b66\u8005\u4eec\u57282018\u5e74\u7684\u4e00\u4efd\u671f\u520a\u4e0a\u5199\u9053\uff0c\u8fd9\u6837\u7684\u672f\u8bed\u4e0d\u4ec5\u53cd\u6620\u4e86\u79cd\u65cf\u4e3b\u4e49\u6587\u5316\uff0c\u800c\u4e14\u8fd8\u6709\u52a9\u4e8e\u5f3a\u5316\u3001\u5408\u6cd5\u5316\u548c\u5ef6\u7eed\u8fd9\u79cd\u6587\u5316\u3002\n\u73b0\u5728\uff0c\u5728\u7f8e\u56fd\u5404\u5730\u201c\u9ed1\u4eba\u751f\u547d\u4e5f\u662f\u547d\u201d(Black Lives Matter)\u6297\u8bae\u6d3b\u52a8\u7684\u523a\u6fc0\u4e0b\uff0c\u79d1\u6280\u754c\u518d\u6b21\u53c2\u4e0e\u5230\u4ece\u6e90\u4ee3\u7801\u3001\u8f6f\u4ef6\u5e94\u7528\u7a0b\u5e8f\u548c\u5728\u7ebf\u670d\u52a1\u4e2d\u5220\u9664\u6b64\u7c7b\u8bed\u8a00\u7684\u52aa\u529b\u4e2d\u3002\n\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\uff0cPHPUnit\u5e93\u548cCurl\u6587\u4ef6\u4e0b\u8f7d\u5b9e\u7528\u7a0b\u5e8f\u5df2\u7ecf\u8868\u660e\u4ed6\u4eec\u6253\u7b97\u7528\u4e2d\u7acb\u7684\u66ff\u4ee3\u65b9\u6848\u66ff\u6362\u9ed1\u540d\u5355/\u767d\u540d\u5355\u3002\n\u540c\u6837\uff0cOpenZFS\u6587\u4ef6\u5b58\u50a8\u7ba1\u7406\u5668\u4e5f\u7528\u5408\u9002\u7684\u66ff\u6362\u66ff\u6362\u4e86\u7528\u4e8e\u63cf\u8ff0\u5b58\u50a8\u73af\u5883\u4e4b\u95f4\u5173\u7cfb\u7684\u4e3b/\u4ece\u672f\u8bed\u3002\n\u9886\u82f1(LinkedIn)\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u52a0\u5e03\u91cc\u57c3\u5c14\u00b7\u5361\u8428\u6ce2(Gabriel Csao)\u672c\u5468\u5728Twitter\u4e0a\u8868\u793a\uff0c\u4ed6\u4e5f\u5728\u7533\u8bf7\u66f4\u65b0\u5fae\u8f6f\u7684\u8bb8\u591a\u5185\u90e8\u7a0b\u5e8f\u5e93\uff0c\u5e76\u5220\u9664\u4efb\u4f55\u5e26\u6709\u79cd\u65cf\u8272\u5f69\u7684\u77ed\u8bed\u3002\n\u5176\u4ed6\u6ca1\u6709\u5728\u5176\u6e90\u4ee3\u7801\u6216\u7528\u6237\u754c\u9762\u4e2d\u76f4\u63a5\u4f7f\u7528\u5e26\u6709\u79cd\u65cf\u8272\u5f69\u7684\u6784\u9020\u7684\u9879\u76ee\u73b0\u5728\u6b63\u5728\u67e5\u770b\u5b83\u4eec\u7684\u6e90\u4ee3\u7801\u5b58\u50a8\u5e93\u3002\n\u8fd9\u4e9b\u9879\u76ee\u4e2d\u7684\u5927\u591a\u6570\u901a\u8fc7Git\u8f6f\u4ef6\u6216GitHub\u5728\u7ebf\u95e8\u6237(\u63d0\u4f9b\u57fa\u4e8eGit\u7684\u6e90\u4ee3\u7801\u6258\u7ba1)\u6765\u7ba1\u7406\u5b83\u4eec\u7684\u6e90\u4ee3\u7801\u3002\nGit\u548cGitHub\u90fd\u4f7f\u7528\u672f\u8bedMaster\u6765\u8868\u793a\u6e90\u4ee3\u7801\u5b58\u50a8\u5e93\u7684\u9ed8\u8ba4\u7248\u672c\u3002\u5f00\u53d1\u4eba\u5458\u6d3e\u751f\u4e00\u4e2a\u7248\u672c\u7684\u6bcd\u7248\u4ee5\u521b\u5efa\u8f85\u52a9\u7248\u672c\uff0c\u5c06\u4ed6\u4eec\u81ea\u5df1\u7684\u4ee3\u7801\u6dfb\u52a0\u5230\u6b64\u9ed8\u8ba4\u7248\u672c\uff0c\u7136\u540e\u5c06\u4ed6\u4eec\u7684\u66f4\u6539\u5408\u5e76\u56de\u6bcd\u7248\u3002&#34\uff1b\n\u73b0\u5728\uff0c\u51e0\u4e2a\u5f00\u653e\u6e90\u7801\u9879\u76ee\u6b63\u5728\u5c06\u5176\u9ed8\u8ba4Git repo\u7684\u540d\u79f0\u4ece&#34\uff1bmaster&#34\uff1b\u66f4\u6539\u4e3amain\u3001default\u3001primary\u3001root\u6216\u5176\u4ed6\u540d\u79f0\u3002\n\u4f8b\u5982\uff0cZDNet\u53d1\u73b0\uff0cOpenSSL\u52a0\u5bc6\u8f6f\u4ef6\u5e93\u3001\u81ea\u52a8\u5316\u8f6f\u4ef6Ansible\u3001\u5fae\u8f6f\u7684PowerShell\u811a\u672c\u8bed\u8a00\u3001P5.js JavaScript\u5e93\u7b49\u8bb8\u591a\u9879\u76ee\u90fd\u5728\u8003\u8651\u66f4\u6539\u5176\u9ed8\u8ba4\u6e90\u4ee3\u7801Repos\u7684\u540d\u79f0\uff0c\u4ee5\u675c\u7edd\u79cd\u65cf\u6307\u63a7\u548c\u4e0e\u5974\u96b6\u5236\u76f8\u5173\u7684\u672f\u8bed\uff0c\u4ee5\u663e\u793a\u5bf9BLM\u8fd0\u52a8\u53ca\u5176\u6297\u8bae\u6d3b\u52a8\u7684\u652f\u6301\u3002\n\u8fd9\u4e00\u4e3e\u52a8\u5728\u5f00\u653e\u6e90\u7801\u5f00\u53d1\u793e\u533a\u5f15\u8d77\u4e86\u8f69\u7136\u5927\u6ce2\uff0c\u4ee5\u81f3\u4e8e\u5c31\u8fdeGit\u9879\u76ee\u672c\u8eab\u73b0\u5728\u90fd\u5728\u8003\u8651\u6b63\u5f0f\u7684\u6539\u53d8\uff0c\u5c3d\u7ba1\u5176\u90ae\u4ef6\u5217\u8868\u548cGitHub\u95ee\u9898\u90e8\u5206\u7684\u8ba8\u8bba\u4ecd\u5728\u7ee7\u7eed\uff0c\u4f46\u4ecd\u6709\u76f8\u5f53\u5927\u7684\u963b\u529b\u3002\n\u4f46\u662f\uff0c\u5373\u4f7fGit\u6b63\u5f0f\u53d6\u4ee3\u5927\u5e08\u7684\u540d\u5b57\uff0cGitHub\u4f3c\u4e4e\u4e5f\u51b3\u5b9a\u7ee7\u7eed\u524d\u8fdb\uff0c\u800c\u4e0d\u8003\u8651Git\u7684\u51b3\u5b9a\u3002\n\u5468\u4e94\uff0c\u8c37\u6b4cChrome\u5f00\u53d1\u8005Una Kravets\u5728\u63a8\u7279\u4e0a\u8868\u793a\uff0cChrome\u9879\u76ee\u6b63\u5728\u8003\u8651\u91c7\u53d6\u7c7b\u4f3c\u7684\u4e3e\u63aa\uff0c\u5c06Chrome\u6d4f\u89c8\u5668\u6e90\u4ee3\u7801\u7684\u9ed8\u8ba4\u5206\u652f\u4eceMaster\u91cd\u547d\u540d\u4e3a\u7c7b\u4f3c\u4e8emain\u7684\u4e2d\u6027\u672f\u8bed\u3002\nKravets\u8981\u6c42GitHub\u6548\u4eff\u8c37\u6b4c\u7684\u4e3e\u63aa\uff0c\u5e2e\u52a9\u63a8\u52a8\u6574\u4e2a\u884c\u4e1a\u7684\u53d8\u9769\uff0cGitHub\u9996\u5e2d\u6267\u884c\u5b98\u7eb3\u7279\u00b7\u5f17\u91cc\u5fb7\u66fc(Nat Friedman)\u8fc5\u901f\u56de\u5e94\u4e86\u8fd9\u4e00\u4e3e\u63aa\uff0c\u5e76\u900f\u9732\u516c\u53f8\u5df2\u7ecf\u5728\u52aa\u529b\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\nGitHub\u5bf9\u8fd9\u4e00\u8fd0\u52a8\u7684\u652f\u6301\u6709\u6548\u5730\u786e\u4fdd\u4e86\u8be5\u672f\u8bed\u5c06\u5728\u6570\u767e\u4e07\u4e2a\u9879\u76ee\u4e2d\u88ab\u5220\u9664\uff0c\u5e76\u6709\u6548\u5730\u4f7f\u672c\u6708\u5f00\u59cb\u7684\u6e05\u7406\u8f6f\u4ef6\u672f\u8bed\u7684\u52aa\u529b\u5408\u6cd5\u5316\u3002\n\u4f46\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e9b\u52aa\u529b\u59cb\u4e8e\u51e0\u5e74\u524d\uff0c\u4e5f\u5c31\u662f2014\u5e74\uff0c\u5f53\u65f6Drupal\u9879\u76ee\u9996\u6b21\u8fdb\u9a7b\uff0c\u7528\u4e3b/\u526f\u672c\u53d6\u4ee3\u4e86\u4e3b/\u4ece\u672f\u8bed\u3002\n\u7d27\u968f\u5176\u540e\u7684\u662fPython\u7f16\u7a0b\u8bed\u8a00\u3001Chromium(\u57fa\u4e8eChrome\u7684\u5f00\u6e90\u6d4f\u89c8\u5668\u9879\u76ee)\u3001\u5fae\u8f6f\u7684Roslyn.NET\u7f16\u8bd1\u5668\u4ee5\u53caPostgreSQL\u548cRedis\u6570\u636e\u5e93\u7cfb\u7edf\u3002\n\u7136\u800c\uff0c\u5c3d\u7ba1\u4e00\u4e9b\u76f8\u5f53\u5927\u7684\u9879\u76ee\u5df2\u7ecf\u6295\u5165\u4f7f\u7528\uff0c\u591a\u5e74\u6765\u6e05\u7406\u8f6f\u4ef6\u8bed\u8a00\u7684\u52aa\u529b\u5e76\u6ca1\u6709\u5f97\u5230\u5e7f\u6cdb\u7684\u63a5\u53d7\u3002\n\u5927\u591a\u6570\u6279\u8bc4\u8005\u4ee5\u53ca\u5728\u8fd9\u4e9b\u8ba8\u8bba\u4e2d\u7ecf\u5e38\u91cd\u65b0\u51fa\u73b0\u7684\u89e3\u91ca\u662f\uff0c\u4e3b/\u5974\u7b49\u672f\u8bed\u73b0\u5728\u88ab\u66f4\u5e7f\u6cdb\u5730\u7528\u4e8e\u63cf\u8ff0\u6280\u672f\u573a\u666f\uff0c\u800c\u4e0d\u662f\u5b9e\u9645\u7684\u5974\u96b6\u5236\uff0c\u800c\u4e14\u9ed1\u540d\u5355\u8fd9\u4e2a\u8bcd\u4e0e\u9ed1\u4eba\u65e0\u5173\uff0c\u800c\u662f\u5728\u4e2d\u4e16\u7eaa\u7684\u82f1\u683c\u5170\u4f7f\u7528\u9ed1\u76ae\u4e66\u5199\u4e0b\u95ee\u9898\u5de5\u4eba\u7684\u540d\u5b57\uff0c\u4ee5\u907f\u514d\u672a\u6765\u62db\u8058\u7684\u505a\u6cd5\u3002", "note_en": "GitHub is working on replacing the term &#34;master&#34; on its service with a neutral term like &#34;main&#34; to avoid any unnecessary references to slavery, its CEO said on Friday.\n The code-hosting portal is just the latest in a long line of tech companies and open source projects that have expressed support for removing terms that may be offensive to developers in the black community.\n This includes dropping terms like &#34;master&#34; and &#34;slave&#34; for alternatives like &#34;main/default/primary&#34; and &#34;secondary;&#34; but also terms like &#34;blacklist&#34; and &#34;whitelist&#34; for &#34;allow list&#34; and &#34;deny/exclude list.&#34;\n  &#34;Such terminology not only reflects racist culture, but also serves to reinforce, legitimize, and perpetuate it,&#34; wrote academics  in a 2018 journal.\n    Now, spurred by the Black Lives Matter protests across the US, the tech community is engaging again in efforts to remove such language from source code, software applications, and online services.\n For starters, the  PHPUnit library and the  Curl file download utility have stated their intention to replace blacklist/whitelist with neutral alternatives.\n   Similarly, the  OpenZFS file storage manager has also replaced its master/slave terms used for describing relations between storage environments with suitable replacements.\n Gabriel Csapo, a software engineer at LinkedIn,  said on Twitter this week that he&#39;s also in the process of filing requests to update many of Microsoft&#39;s internal libraries and remove any racially-charged phrases.\n Other projects that don&#39;t use racially-charged constructs in their source code or user interfaces directly are now looking at their source code repositories.\n Most of these projects manage their source code via the Git software, or the GitHub online portal (which provides Git-based source code hosting).\n Both Git and GitHub use the term &#34;master&#34; for the default version of a source code repository. Developers fork a version of the &#34;master&#34; to create secondary versions, add their own code to this default version, and then merge their changes back into the &#34;master.&#34;\n Now, several open source projects are changing the name of their default Git repo from &#34;master&#34; to alternatives like main, default, primary, root, or another.\n For example, ZDNet found that projects like the  OpenSSL encryption software library, automation software  Ansible,  Microsoft&#39;s PowerShell scripting language, the  P5.js JavaScript library, and  many  others are looking at changing the name of their default source code repos, in a bid to stamp out racially-charged and slavery-related terms, in a way of showing support for the BLM movement and their protests.\n The move has taken the open source development community by storm, so much so that even the Git project itself is now considering an official change, albeit discussions in its  mailing list and  GitHub Issues section are still going on, with considerable pushback.\n  But even if Git formally replaces the &#34;master&#34; name or not, GitHub appears to have decided to move on, regardless of Git&#39;s decision.\n On Friday, Google Chrome developer Una Kravets tweeted that the Chrome project was considering a similar move of renaming the default branch of the Chrome browser source code from &#34;master&#34; to a neutral term like &#34;main.&#34;\n Kravets asked GitHub to follow Google in its move and help drive change across the industry, a move to which GitHub CEO  Nat Friedman answered promptly, revealing that the company was already working on the issue.\n  GitHub lending its backing to this movement effectively ensures the term will be removed across millions of projects, and effectively legitimizes the effort to clean up software terminology that started this month.\n But, in reality, these efforts started years ago, in 2014, when  the Drupal project first moved in to replace &#34;master/slave&#34; terminology with &#34;primary/replica.&#34;\n Drupal&#39;s move was followed by  the Python programming language,  Chromium (the open source browser project at the base of Chrome),  Microsoft&#39;s Roslyn .NET compiler, and the  PostgreSQL and  Redis database systems.\n However, despite some pretty big projects getting on board, efforts to clean up software language across the years have not been widely embraced.\n Most detractors and the explanation that often resurfaces in these discussions is that terms like master/slave are now more broadly used to describe technical scenarios than actual slavery and that  the word &#34;blacklist&#34; has nothing to do with black people, but the practice of using black books in medieval England to write down the names of problematic workers to avoid hiring in the future.", "posttime": "2020-06-14 23:44:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "github,\u66ff\u4ee3,replace,\u6e90\u4ee3\u7801", "title": "GitHub\u5c06\u7528\u66ff\u4ee3\u672f\u8bed\u53d6\u4ee3\u201cmaster\u201d\u4ee5\u907f\u514d\u5974\u96b6\u5236\u63d0\u6cd5", "title_en": "GitHub to replace \u201cmaster\u201d with alternative term to avoid slavery references", "transed": 1, "url": "https://www.zdnet.com/article/github-to-replace-master-with-alternative-term-to-avoid-slavery-references/", "via": "", "real_tags": ["github", "\u66ff\u4ee3", "replace", "\u6e90\u4ee3\u7801"]}, {"category": "", "categoryclass": "", "imagename": "db5b62daa5e6d1ebbc92fc128cd390cf.jpg", "infoid": 1006532, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65b0\u51a0\u80ba\u708e\u8eab\u4e0a\u7684\u75c5\u6bd2\u53ef\u4ee5\u7a83\u53d6\u4e00\u4e2a\u4eba\u7684\u55c5\u89c9\uff0c\u8ba9\u4ed6\u4eec\u770b\u4e0d\u89c1\u65b0\u5272\u7684\u8349\uff0c\u770b\u4e0d\u5230\u8f9b\u8fa3\u7684\u98df\u7269\uff0c\u751a\u81f3\u770b\u4e0d\u5230\u81ea\u5df1\u7684\u9648\u65e7\u8863\u670d\u3002\n\u4f46\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5173\u4e8e\u5f15\u8d77COVID-19\u7684\u51a0\u72b6\u75c5\u6bd2SARS-CoV-2\u5982\u4f55\u6e17\u900f\u5e76\u5173\u95ed\u4eba\u4f53\u55c5\u89c9\u673a\u68b0\u7684\u7ec6\u8282\u4ecd\u7136\u96be\u4ee5\u6349\u6478\u3002\u6700\u8fd1\u6709\u4e00\u4f4d\u5e74\u8f7b\u7684\u653e\u5c04\u6280\u5e08\u5931\u53bb\u4e86\u55c5\u89c9\u3002\u5979\u7684\u5927\u8111\u6709\u75c5\u6bd2\u611f\u67d3\u7684\u8ff9\u8c61\u3002\u7136\u800c\uff0c\u5176\u4ed6\u7814\u7a76\u8fd8\u6ca1\u6709\u5728\u5927\u8111\u4e2d\u53d1\u73b0\u8fd9\u79cd\u75c5\u6bd2\u7684\u8ff9\u8c61\u3002\n\u76f8\u53cd\uff0c\u6ca1\u6709\u4eba\u77e5\u9053SARS-CoV-2\u662f\u5426\u53ef\u4ee5\u76f4\u63a5\u611f\u67d3\u5927\u8111\u4e2d\u7684\u795e\u7ecf\u7ec6\u80de\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u75c5\u6bd2\u662f\u5426\u6709\u65f6\u4f1a\u4ece\u9f3b\u5b50\u5f00\u59cb\u8fdb\u5165\u5927\u8111\u3002\u4e86\u89e3\u4eba\u4eec\u7684\u55c5\u89c9\u662f\u5982\u4f55\u53d7\u5230\u635f\u5bb3\u7684(SN\uff1a5/11/20)\uff0c\u8fd9\u4e00\u75c7\u72b6\u4f30\u8ba1\u4f1a\u56f0\u627020%\u523080%\u7684\u65b0\u51a0\u80ba\u708e\u60a3\u8005\uff0c\u8fd9\u53ef\u80fd\u4f1a\u63ed\u793a\u66f4\u591a\u5173\u4e8e\u75c5\u6bd2\u5982\u4f55\u8fd0\u4f5c\u7684\u4fe1\u606f\u3002\n\u4e0d\u8fc7\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6709\u4e00\u4ef6\u4e8b\u662f\u80af\u5b9a\u7684\uff1a\u75c5\u6bd2\u53ef\u4ee5\u4ee5\u4e00\u79cd\u4e0d\u6b63\u5e38\u7684\u65b9\u5f0f\u7a83\u53d6\u55c5\u89c9\u3002\n\u6ce2\u58eb\u987f\u54c8\u4f5b\u533b\u5b66\u9662\u7684\u795e\u7ecf\u5b66\u5bb6\u6851\u8fea\u666e\u00b7\u7f57\u4f2f\u7279\u00b7\u8fbe\u5854\u8bf4\uff1a\u201c\u65b0\u51a0\u80ba\u708e\u548c\u55c5\u89c9\u4e4b\u95f4\u7684\u5173\u7cfb\u6709\u4e9b\u4e0d\u5bfb\u5e38\u3002\u201d\u611f\u5192\u53ef\u4ee5\u901a\u8fc7\u7528\u7c98\u6db2\u585e\u4f4f\u9f3b\u5b50\u6765\u9632\u6b62\u6c14\u5473\uff0c\u4f46SARS-CoV-2\u75c5\u6bd2\u901a\u5e38\u4f1a\u8ba9\u9f3b\u5b50\u4fdd\u6301\u5e72\u51c0\u3002\u8fbe\u5854\u8bf4\uff1a\u201c\u5f88\u591a\u4eba\u62b1\u6028\u8bf4\uff0c\u5f53\u4ed6\u4eec\u4e00\u70b9\u4e5f\u4e0d\u89c9\u5f97\u585e\u6ee1\u7684\u65f6\u5019\uff0c\u4ed6\u4eec\u5c31\u4f1a\u5931\u53bb\u55c5\u89c9\u3002\u201d\n\u79d1\u5b66\u5bb6\u548c\u8bb0\u8005\u90fd\u6709\u4e00\u4e2a\u5171\u540c\u7684\u6838\u5fc3\u4fe1\u5ff5\uff0c\u90a3\u5c31\u662f\u63d0\u95ee\u3001\u89c2\u5bdf\u548c\u6838\u5b9e\u4ee5\u83b7\u5f97\u771f\u76f8\u3002\u79d1\u5b66\u65b0\u95fb\u62a5\u9053\u8de8\u79d1\u5b66\u5b66\u79d1\u7684\u91cd\u8981\u7814\u7a76\u548c\u53d1\u73b0\u3002\u6211\u4eec\u9700\u8981\u4f60\u4eec\u7684\u8d22\u653f\u652f\u6301\u6765\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807-\u6bcf\u4e00\u7b14\u8d21\u732e\u90fd\u662f\u6709\u610f\u4e49\u7684\u3002\n\u7acb\u5373\u8ba2\u9605\u6216\u6350\u8d60\u3002\n\u6700\u8fd1\u7684\u7814\u7a76\u5df2\u7ecf\u5f00\u59cb\u786e\u5b9a\u55c5\u89c9\u4e0a\u76ae\u4e2d\u7684\u7ec6\u80de\uff0c\u55c5\u89c9\u4e0a\u76ae\u662f\u4e00\u79cd\u7ec6\u957f\u7684\u7ec4\u7ec7\uff0c\u6392\u5217\u5728\u9f3b\u8154\u7684\u4e00\u90e8\u5206\uff0c\u4f3c\u4e4e\u5bb9\u6613\u53d7\u5230SARS-CoV-2\u7684\u611f\u67d3\u3002\u79d1\u5b66\u5bb6\u4eec\u5728\u4e24\u7bc7\u65b0\u7684\u8bba\u6587\u4e2d\u62a5\u544a\u8bf4\uff0c\u88ab\u79f0\u4e3a\u652f\u6301\u55c5\u89c9\u7684\u7ec6\u80de\u79f0\u4e3a\u652f\u6301\u7ec6\u80de\u5f88\u53ef\u80fd\u662f\u76ee\u6807\uff0c\u4e00\u7bc7\u53d1\u8868\u5728ACS\u5316\u5b66\u795e\u7ecf\u79d1\u5b66\u4e0a\uff0c\u53e6\u4e00\u7bc7\u53d1\u8868\u5728BioRxiv.org\u4e0a\uff0c\u8fd9\u662f\u4e00\u4e2a\u6ca1\u6709\u5f97\u5230\u5176\u4ed6\u79d1\u5b66\u5bb6\u540c\u884c\u8bc4\u5ba1\u7684\u7814\u7a76\u8d44\u6e90\u5e93\u3002\n\u8d39\u57ce\u83ab\u5185\u5c14\u5316\u5b66\u611f\u89c9\u4e2d\u5fc3\u7684\u611f\u89c9\u5fc3\u7406\u5b66\u5bb6\u8d1d\u5f17\u5229\u00b7\u8003\u74e6\u7279\u8bf4\uff1a\u201c\u663e\u7136\u6211\u4eec\u8fd8\u4e0d\u786e\u5b9a\uff0c\u4f46\u76ee\u524d\u770b\u6765\uff0c\u4e0eSARS-CoV-2\u76f8\u5173\u7684\u55c5\u89c9\u4e27\u5931\u53ef\u80fd\u662f\u7531\u4e8e\u5b83\u5bf9\u55c5\u89c9\u4e0a\u76ae\u4e2d\u7684\u652f\u6301\u7ec6\u80de--\u975e\u795e\u7ecf\u7ec6\u80de--\u7684\u5f71\u54cd\u3002\u201d\u5979\u6ca1\u6709\u53c2\u4e0e\u8fd9\u4e24\u9879\u7814\u7a76\u3002\nDatta\u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u8fdb\u884c\u4e86\u5b9e\u9a8c\uff0c\u4ece\u5c0f\u9f20\u548c\u4eba\u7684\u9f3b\u7ec6\u80de(\u652f\u6301\u7ec6\u80de\u548c\u5411\u5927\u8111\u53d1\u9001\u4fe1\u606f\u7684\u795e\u7ecf\u7ec6\u80de)\u4e2d\u5bfb\u627eACE2\u7684\u8ff9\u8c61\uff0cACE2\u662fSARS-CoV-2\u9501\u4f4f\u7684\u4e00\u79cd\u5173\u952e\u86cb\u767d\u8d28\uff0c\u53ef\u4ee5\u5206\u89e3\u6210\u7ec6\u80de(SN\uff1a2/3/20)\u3002\u7814\u7a76\u4eba\u5458\u53d1\u73b0\uff0c\u5728\u5305\u62ec\u652f\u6301\u7ec6\u80de\u5728\u5185\u7684\u9f3b\u5b50\u652f\u6301\u7ec6\u80de\u4e2d\u53d1\u73b0\u4e86\u8868\u660eACE2\u86cb\u767d\u5c06\u88ab\u5236\u9020\u7684\u5206\u5b50\u4fe1\u53f7\u3002\u8fd9\u4e9b\u7ec6\u80de\u88ab\u8ba4\u4e3a\u6709\u52a9\u4e8e\u7ef4\u6301\u9f3b\u8154\u5185\u5316\u5b66\u7269\u8d28\u7684\u7cbe\u786e\u6d53\u5ea6\u3002\u8fd9\u4e9b\u6df7\u5408\u7269\u53ef\u4ee5\u8ba9\u795e\u7ecf\u7ec6\u80de\uff0c\u4e5f\u5c31\u662f\u6240\u8c13\u7684\u4e18\u8111\u611f\u53d7\u5668\u795e\u7ecf\u5143\uff0c\u5411\u5927\u8111\u53d1\u51fa\u55c5\u89c9\u4fe1\u53f7\u3002\n\u4f46\u662f\u8fd9\u4e9b\u795e\u7ecf\u5143\u660e\u663e\u7f3a\u4e4f\u8840\u7ba1\u7d27\u5f20\u7d20\u8f6c\u6362\u91762\uff0c\u7814\u7a76\u4eba\u5458\u6700\u521d\u4e8e3\u670828\u65e5\u5728biRxiv.org\u4e0a\u62a5\u9053\u3002\u57285\u670818\u65e5\u53d1\u8868\u7684\u8fd9\u7bc7\u8bba\u6587\u7684\u4fee\u8ba2\u7248\u4e2d\uff0c\u8fbe\u5854\u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u652f\u6301\u4e86\u8fd9\u4e00\u8bc1\u636e\uff0c\u5305\u62ec\u5728\u652f\u6301\u7ec6\u80de\u4e2d\u76f4\u63a5\u68c0\u6d4b\u5230ACE2\u86cb\u767d\u672c\u8eab\uff0c\u4f46\u5728\u795e\u7ecf\u5143\u4e2d\u6ca1\u6709\u68c0\u6d4b\u5230\u3002\n5\u67087\u65e5\u53d1\u8868\u5728\u201cACS\u5316\u5b66\u795e\u7ecf\u79d1\u5b66\u201d\u4e0a\u7684\u53e6\u4e00\u9879\u7814\u7a76\u5728\u8001\u9f20\u8eab\u4e0a\u53d1\u73b0\u4e86\u7c7b\u4f3c\u7684\u7ed3\u679c\u3002\u6ce2\u5170\u6bd4\u5fb7\u6208\u5179\u5e02\u5c3c\u53e4\u62c9\u65af\u00b7\u54e5\u767d\u5c3c\u5927\u5b66\u7684\u62c9\u6cd5\u5c14\u00b7\u5e03\u6258\u7279\u548c\u4ed6\u7684\u540c\u4e8b\u62a5\u9053\uff0c\u652f\u6301\u7ec6\u80de\u542b\u6709ACE2\u86cb\u767d\u3002\u4f46\u662f\u795e\u7ecf\u5143\u6ca1\u6709\u8840\u7ba1\u7d27\u5f20\u7d20\u8f6c\u6362\u91762\u3002\u5df4\u6258\u7279\u8bf4\uff0c\u8fd9\u4e9b\u7ed3\u679c\u8868\u660eSARS-CoV-2\u75c5\u6bd2\u4e0d\u4f1a\u611f\u67d3\u55c5\u89c9\u611f\u53d7\u5668\u795e\u7ecf\u5143\u672c\u8eab\uff0c\u6216\u8005\u5982\u679c\u53ef\u4ee5\u7684\u8bdd\uff0c\u8fd9\u79cd\u60c5\u51b5\u5f88\u5c11\u53d1\u751f\uff0c\u5c3d\u7ba1\u8fd8\u9700\u8981\u66f4\u591a\u7684\u5de5\u4f5c\u6765\u8bc1\u660e\u8fd9\u4e00\u70b9\u3002(\u8fbe\u5854\u76ee\u524d\u4ecd\u4e0d\u77e5\u9053\u795e\u7ecf\u5143\u662f\u5426\u4f1a\u88ab\u611f\u67d3\u3002)\u3002\n\u5982\u679cSARS-CoV-2\u4e0d\u76f4\u63a5\u7784\u51c6\u55c5\u89c9\u611f\u53d7\u5668\u795e\u7ecf\u5143\uff0c\u90a3\u53ef\u80fd\u662f\u4e2a\u597d\u6d88\u606f\u3002\u8fd9\u662f\u56e0\u4e3a\uff0c\u5c31\u795e\u7ecf\u5143\u800c\u8a00\uff0c\u55c5\u89c9\u611f\u53d7\u5668\u795e\u7ecf\u5143\u662f\u4e0d\u5bfb\u5e38\u7684-\u5b83\u4eec\u751f\u6d3b\u5728\u5927\u8111\u4e4b\u5916\uff0c\u4f46\u4e00\u53ea\u811a\u7559\u5728\u91cc\u9762\u3002\u8fd9\u79cd\u6447\u6447\u6b32\u5760\u7684\u8de8\u5ea6\u4f7f\u5b83\u4eec--\u4ee5\u53ca\u5927\u8111\u672c\u8eab--\u5bb9\u6613\u53d7\u5230\u611f\u67d3\u3002\u5176\u4ed6\u75c5\u539f\u4f53\uff0c\u5305\u62ec\u4e00\u79cd\u4e0d\u540c\u7684\u51a0\u72b6\u75c5\u6bd2\u548c\u4e00\u79cd\u5403\u8111\u7684\u963f\u7c73\u5df4(SN\uff1a7/20/15)\uff0c\u53ef\u4ee5\u5229\u7528\u5230\u8fbe\u5927\u8111\u7684\u795e\u7ecf\u5143\u53ca\u5176\u53d1\u9001\u4fe1\u606f\u7684\u8f74\u7a81\u4f5c\u4e3a\u8fde\u63a5\u5927\u8111\u7684\u901a\u9053\u3002\u201c\u6700\u5927\u7684\u60ac\u800c\u672a\u51b3\u7684\u95ee\u9898\u662fSARS-CoV-2\u75c5\u6bd2\u662f\u5426\u80fd\u6cbf\u7740\u55c5\u795e\u7ecf\u8f74\u7a81\u79fb\u52a8\u5230\u5927\u8111\uff0c\u201d\u5e03\u6258\u7279\u8bf4\u3002\n\u5176\u4ed6\u7814\u7a76\u8868\u660e\uff0c\u8be5\u75c5\u6bd2\u80fd\u591f\u4fb5\u5165\u5927\u8111\u3002\u5728\u4e00\u9879\u7814\u7a76\u4e2d\uff0c\u79d1\u5b66\u5bb6\u5c06\u75c5\u6bd2\u653e\u5165\u7ecf\u8fc7\u6539\u9020\u7684\u5177\u6709\u4eba\u7c7b\u5f62\u5f0f\u7684ACE2\u86cb\u767d\u7684\u8001\u9f20\u7684\u9f3b\u5b50\u91cc\u3002\u79d1\u5b66\u5bb6\u57285\u670826\u65e5\u7684\u201c\u7ec6\u80de\u5bbf\u4e3b\u4e0e\u5fae\u751f\u7269\u201d\u6742\u5fd7\u4e0a\u62a5\u9053\uff0c\u540e\u6765\uff0c\u75c5\u6bd2\u6269\u6563\u5230\u4e86\u8001\u9f20\u7684\u80ba\u90e8\u3001\u6c14\u7ba1\u548c\u5927\u8111\u3002\n\u201c\u8fd9\u662f\u6b63\u786e\u7684\u5b9e\u9a8c\uff0c\u201d\u8fbe\u5854\u8bf4\u3002\u4f46\u4ed6\u6307\u51fa\uff0c\u4e00\u4e9b\u5173\u952e\u7684\u7ec6\u8282\uff0c\u5982\u795e\u7ecf\u5143\u5728\u5927\u8111\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4ee5\u53ca\u5176\u4e2d\u6709\u591a\u5c11\u88ab\u611f\u67d3\uff0c\u5728\u8bba\u6587\u4e2d\u6ca1\u6709\u6df1\u5165\u62a5\u9053\u3002\u76ee\u524d\u4e5f\u4e0d\u6e05\u695a\u75c5\u6bd2\u662f\u5982\u4f55\u8fdb\u5165\u5927\u8111\u7684\u3002\n\u5bf9\u4eba\u8111\u7684\u7814\u7a76\u53c2\u5dee\u4e0d\u9f50\u3002\u5728\u5bf910\u540d\u6b7b\u4e8e\u65b0\u51a0\u80ba\u708e\u7684\u4eba\u7684\u5c38\u68c0\u7814\u7a76\u4e2d\uff0c\u6ca1\u6709\u4eba\u5728\u8111\u810a\u6db2\u4e2d\u68c0\u51faSARS-CoV-2\uff0c\u8fd9\u8868\u660e\u75c5\u6bd2\u4e0d\u5728\u4ed6\u4eec\u7684\u5927\u8111\u4e2d\u30025\u670821\u65e5\u53d1\u8868\u5728\u201c\u7f8e\u56fd\u533b\u5b66\u4f1a\u6742\u5fd7\u201d(JAMA)\u4e0a\u7684\u8fd9\u7bc7\u8bba\u6587\u6ca1\u6709\u5305\u62ec\u8fd9\u4e9b\u4eba\u662f\u5426\u4e27\u5931\u4e86\u55c5\u89c9\u80fd\u529b\u3002\n\u4f46\u662f\u79d1\u5b66\u5bb6\u57285\u670829\u65e5\u7684\u201c\u7f8e\u56fd\u533b\u5b66\u4f1a\u795e\u7ecf\u5b66\u201d\u6742\u5fd7\u4e0a\u62a5\u9053\uff0c\u5bf9\u4e00\u540d\u5e74\u8f7b\u5973\u6027\u7684\u5927\u8111\u8fdb\u884c\u6838\u78c1\u5171\u632f\u6210\u50cf\u540e\uff0c\u5728\u4e0e\u55c5\u89c9\u6709\u5173\u7684\u51e0\u4e2a\u533a\u57df\u53d1\u73b0\u4e86SARS-CoV-2\u611f\u67d3\u7684\u8ff9\u8c61\uff0c\u5305\u62ec\u55c5\u7403\u548c\u5927\u8111\u4e2d\u88ab\u79f0\u4e3a\u53f3\u8111\u56de\u76f4\u808c\u7684\u90e8\u5206\uff0c\u8fd9\u6709\u52a9\u4e8e\u5904\u7406\u55c5\u89c9\u4fe1\u53f7\u3002\u8fd9\u540d\u5973\u5b50\u5728\u6cbb\u7597COVID-19\u60a3\u8005\u7684\u75c5\u623f\u91cc\u62c5\u4efb\u653e\u5c04\u5e08\uff0c\u5979\u5df2\u7ecf\u5b8c\u5168\u5931\u53bb\u4e86\u55c5\u89c9\uff0c\u4f46\u53ea\u6709\u8f7b\u5fae\u7684\u75c7\u72b6\u3002\u6839\u636e\u8fd9\u4e9b\u53d1\u73b0\uff0c\u610f\u5927\u5229\u7c73\u5170Humanitas\u4e34\u5e8a\u7814\u7a76\u533b\u9662\u548c\u5927\u5b66\u7684\u653e\u5c04\u79d1\u533b\u751fLetterio Politi\u548c\u4ed6\u7684\u540c\u4e8b\u6000\u7591\u75c5\u6bd2\u4ece\u5979\u7684\u9f3b\u5b50\u8fdb\u5165\u4e86\u5979\u7684\u5927\u8111\u3002\n\u795e\u7ecf\u7ec6\u80de\u5e76\u4e0d\u662f\u552f\u4e00\u7684\u6f5c\u5728\u8f7d\u4f53\u3002\u7814\u7a76\u8868\u660e\uff0c\u51a0\u72b6\u75c5\u6bd2\u53ef\u4ee5\u611f\u67d3\u5468\u7ec6\u80de\uff0c\u5468\u7ec6\u80de\u5305\u88f9\u7740\u8840\u7ba1\uff0c\u6709\u52a9\u4e8e\u63a7\u5236\u8840\u6d41\u3002\u5728\u5927\u8111\u4e2d\uff0c\u5468\u7ec6\u80de\u6709\u52a9\u4e8e\u7ef4\u6301\u8840\u8111\u5c4f\u969c\uff0c\u8be5\u5c4f\u969c\u65e8\u5728\u963b\u6b62\u75c5\u539f\u4f53\u8fdb\u5165\u3002\u90a3\u91cc\u7684\u6f0f\u6d1e\u53ef\u80fd\u4f1a\u8ba9\u75c5\u6bd2\u8fdb\u5165\u5927\u8111\u3002\u76ee\u524d\uff0c\u57fa\u7840\u77e5\u8bc6\u7684\u5dee\u8ddd\u548c\u8bb0\u5f55\u5728\u6848\u7684\u75c5\u4f8b\u7684\u7f3a\u4e4f\uff0c\u7559\u4e0b\u4e86\u51a0\u72b6\u75c5\u6bd2\u662f\u5426\u5230\u8fbe\u5927\u8111\uff0c\u5982\u679c\u5230\u8fbe\uff0c\u5982\u4f55\u5230\u8fbe\u7684\u95ee\u9898\u3002Datta\u8bf4\uff0c\u8feb\u5207\u9700\u8981\u5bf9\u6765\u81ea\u611f\u67d3\u8005\u7684\u7ec4\u7ec7\u8fdb\u884c\u66f4\u591a\u7684\u7814\u7a76\u3002\u201c\u6211\u4eec\u9700\u8981\u6bd4\u73b0\u5728\u591a\u5f97\u591a\u7684\u4fe1\u606f\u3002\u201d\nK.Bilinska\u7b49\u4eba\u3002\u55c5\u4e0a\u76ae\u7ec6\u80de\u4e2dSARS-CoV-2\u8fdb\u5165\u86cb\u767dACE2\u548cTMPRSS2\u7684\u8868\u8fbe\uff1a\u7ec6\u80de\u7c7b\u578b\u7684\u9274\u5b9a\u548c\u968f\u5e74\u9f84\u7684\u53d8\u5316\u8d8b\u52bf\u3002ACS\u5316\u5b66\u795e\u7ecf\u79d1\u5b66\u30022020\u5e745\u67087\u65e5\u3002doi\uff1a10.1021/acschemner.0c00210.\u3002\n\u5b59\u80dc\u534e\u7b49\u4eba\u3002SARS-CoV-2\u611f\u67d3\u5c0f\u9f20\u6a21\u578b\u53ca\u53d1\u75c5\u673a\u5236\u7814\u7a76\u3002\u7ec6\u80de\u5bbf\u4e3b\u548c\u653e\u7ebf\u83cc\u30022020\u5e745\u670826\u65e5\u300210.1016/j.chom.2020.05.020.\u3002\nT.Shaller\u7b49\u4eba\u3002\u65b0\u51a0\u80ba\u708e\u60a3\u8005\u7684\u5c38\u68c0\u3002\u300a\u7f8e\u56fd\u533b\u5b66\u4f1a\u6742\u5fd7\u300b\u4e8e2020\u5e745\u670821\u65e5\u5728\u7ebf\u53d1\u8868\u3002doi\uff1a10.1001/jama.2020.8907.\u3002\nL.Politi\u3001E.Salsano\u548cM.Grimaldi\u3002\u51a0\u72b6\u75c5\u6bd2\u75c52019\u5e74\u5408\u5e76\u55c5\u89c9\u969c\u788d\u60a3\u8005\u7684\u8111\u90e8\u78c1\u5171\u632f\u6210\u50cf\u6539\u53d8(\u65b0\u51a0\u80ba\u708e)\u3002JAMA\u795e\u7ecf\u79d1\u30022020\u5e745\u670829\u65e5\u5728\u7ebf\u53d1\u5e03\u3002DOI\uff1a10.1001/Jamaneurol.2020.2125.", "note_en": "The virusresponsible for COVID-19 can steal a person\u2019s sense of smell, leaving themnoseblind to fresh-cut grass, a pungent meal or even their own stale clothes.\n But so far,details remain elusive about how SARS-CoV-2, the coronavirus that causesCOVID-19, can infiltrate and shut down the body\u2019s smelling machinery. One recenthint comes from a young radiographer who lost her sense of smell. She had signsof viral infection in her brain. Other studies, though, have not turned upsigns of the virus in the brain.\n Contradictoryevidence means that no one knows whether SARS-CoV-2 can infect nerve cells inthe brain directly, and if so, whether the virus\u2019s route to the brain can sometimesstart in the nose. Understanding how people\u2019s  sense of smell is harmed ( SN:5/11/20), a symptom estimated to afflict anywhere between 20 and 80 percentof people with COVID-19, could reveal more about how the virus operates.\n One thing iscertain so far, though: The virus can steal the sense of smell in a way that\u2019snot normal.\n \u201cThere\u2019ssomething unusual about the relationship between COVID-19 and smell,\u201d saysneuroscientist Sandeep Robert Datta of Harvard MedicalSchool in Boston. Colds can prevent smelling by stuffing the nose up with mucus.But SARS-CoV-2 generally leaves the nose clear. \u201cLots of people are complainingabout losing their sense of smell when they don\u2019t feel stuffed up at all,\u201dDatta says.\n Scientists and journalists share a core belief in questioning, observing and verifying to reach the truth.  Science News reports on crucial research and discovery across science disciplines. We need your financial support to make it happen \u2013 every contribution makes a difference.\n  Subscribe or Donate Now\n Recentstudies have begun to identify the cells in the olfactory epithelium, a slendersheet of tissue that lines part of the nasal cavity, that seem vulnerable to SARS-CoV-2infection. Smell-supporting cells called sustentacular cells are likelytargets, scientists report in two new papers, one in  ACS Chemical Neuroscience and the other posted at bioRxiv.org, a repository for research that hasn\u2019t beenpeer-reviewed by other scientists.\n \u201cObviously we don\u2019t know for sure, but at this point, it appears that the smell losses associated with SARS-CoV-2 are probably due to its impact on the supporting cells, the non-neuronal cells, in the olfactory epithelium,\u201d says sensory psychologist Beverly Cowart of Monell Chemical Senses Center in Philadelphia, who was not involved in either study.\n Datta and hiscolleagues performed experiments that looked in nose cells \u2014 support cells and the nerve cells that send messages to thebrain \u2014 from both mice and people for signs of ACE2, a key  protein that SARS-CoV-2 latches ontoto break into cells ( SN: 2/3/20). Molecular signals indicating that the ACE2 protein wasgoing to be made were found in nose support cells, including sustentacularcells, the researchers found. These cells are thought to help maintain preciseconcentrations of chemicals in the nose. These mixtures allow nerve cells calledolfactory receptor neurons to fire off smell signals to the brain.\n  But ACE2 wasconspicuously absent from these neurons, the researchers initially reportedMarch 28 at bioRxiv.org. In a revised version of the paper posted May 18, Dattaand his colleagues bolstered that evidence, including a  direct detection of ACE2 proteinitself in support cells, but not in neurons.\n Another study, published May7 in  ACS Chemical Neuroscience, found similar results in mice. Sustentacularcells had ACE2 protein,  Rafal Butowt of  Nicolaus Copernicus University in Bydgoszcz, Poland andcolleagues reported. But neurons didn\u2019t have ACE2. The results  imply that SARS-CoV-2 can\u2019t infect olfactory receptorneurons themselves, or if it can,that it happens very rarely, Butowt says, though more work is needed to besure. (Datta, for now, remains agnostic on whether neurons can becomeinfected.)\n If SARS-CoV-2 doesn\u2019t targetolfactory receptor neurons directly, that could be good news. That\u2019s because, asfar as neurons go, olfactory receptor neurons are unusual  \u2014 they live outside of the brain, but keep one footinside it. This precarious straddle renders them \u2014 and the brain itself \u2014 vulnerable to infections. Other pathogens, includinga different coronavirus and a  brain-eating amoeba ( SN: 7/20/15), can use theseneurons, and their message-sending axons that reach the brain, as conduits to thebrain. \u201cThe big open question is whether or notthe SARS-CoV-2 virus can move along olfactory neuronal axons to the brain,\u201dButowt says.\n  Other research suggests thatthe virus is able to invade the brain. In one study, scientists put the virusin the noses of mice engineered to have the human form of ACE2 protein. Later,the  virus had spread to the mice\u2019s lungs, trachea and brains, scientists report May 26 in  Cell Host &amp; Microbe.\n \u201cThat\u2019s the right experimentto do,\u201d Datta says. But he notes that some key details, such as where theneurons are in the brain, and how many of them are infected, are not reportedin depth in the paper. It\u2019s also not clear how the virus actually got to thebrain.\n Studies on human brains aremixed. In postmortem studies of 10 people who died of COVID-19,  none had SARS-CoV-2 in cerebrospinal fluid, suggesting that the virus wasn\u2019t in their brains. Thepaper, published May 21 in  JAMA,didn\u2019t include whether these people had lost their ability to smell.\n But an MRI of a young woman\u2019s brain turned up  signs of SARS-CoV-2 infection in several areas involved in smell, including theolfactory bulb and a part of the brain called the right gyrus rectus, whichhelps process smell signals,scientists report May 29 in  JAMANeurology. The woman, who worked as a radiographer in a ward treatingCOVID-19 patients, had completely lost her sense of smell, but had only mild symptomsotherwise. Based on these findings, Letterio Politi,a radiologist at Humanitas Clinical and Research Hospital and University inMilan, Italy, and colleagues suspect thatthe virus moved into the woman\u2019s brain from her nose.\n  Nerve cells aren\u2019t the only potential vehicle. Studies have shown that the coronavirus can infect pericytes, cells that wrap around blood vessels and help control flow. In the brain, pericytes help maintain the blood-brain barrier, which is designed to keep pathogens out. A breach there could let the virus into the brain. For now, gaps in basic knowledge and a dearth of documented cases leave open the question of whether the coronavirus reaches the brain, and if so, how. More studies on tissue that comes from infected people are urgently needed, says Datta. \u201cWe need much more information than we have now.\u201d\n   K. Bilinska  et al.  Expression of the SARS-CoV-2 entry proteins, ACE2 and TMPRSS2, in cells of the olfactory epithelium: Identification of cell types and trends with age.  ACS Chemical Neuroscience. May 7, 2020. doi: 10.1021/acschemneuro.0c00210.\n        S.-H. Sun  et al.  A mouse model of SARS-CoV-2 infection and pathogenesis.  Cell Host &amp; Microbe. May 26, 2020.  10.1016/j.chom.2020.05.020.\n    T. Shaller  et al.  Postmortem examinations of patients with COVID-19.  JAMA.\u00a0 Published online May 21, 2020. doi:10.1001/jama.2020.8907.\n    L. Politi, E. Salsano and M. Grimaldi.  Magnetic resonance imaging alteration of the brain in a patient with Coronavirus Disease 2019 (COVID-19) and anosmia.  JAMA Neurology. Published online May 29, 2020. doi:10.1001/jamaneurol.2020.2125.", "posttime": "2020-06-14 23:09:32", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "coronavirus,\u75c5\u6bd2,\u51a0\u72b6\u75c5\u6bd2,\u6270\u4e71,messes", "title": "\u51a0\u72b6\u75c5\u6bd2\u6270\u4e71\u6c14\u5473\u7684\u65b9\u5f0f\u6697\u793a\u4e86\u5b83\u662f\u5982\u4f55\u5f71\u54cd\u5927\u8111\u7684\u3002", "title_en": "The way the coronavirus messes with smell hints at how it affects the brain", "transed": 1, "url": "https://www.sciencenews.org/article/covid-19-coronavirus-sense-smell-brain-nerve-cells", "via": "", "real_tags": ["\u75c5\u6bd2", "\u51a0\u72b6\u75c5\u6bd2", "\u6270\u4e71", "messes"]}]