[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1000736, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "41\u5e74\u524d\u7684\u8fd9\u4e2a\u590f\u5929\uff0c\u6211\u8fd8\u662f\u4e00\u540d\u5e74\u8f7b\u7684\u8c03\u67e5\u5458\uff0c\u5728\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5dde\u54c8\u91cc\u65af\u5821\u548c\u534e\u76db\u987f\u7279\u533a\u4e3a\u4e09\u91cc\u5c9b\u4e8b\u6545\u603b\u7edf\u59d4\u5458\u4f1a\u5de5\u4f5c\uff0c\u8fd9\u662f\u4e00\u9879\u7531\u8fbe\u7279\u8305\u65af\u6559\u6388\u7ea6\u7ff0\u00b7\u51ef\u6885\u5c3c(John Kemeny)\u4e3b\u6301\u7684\u5927\u578b\u8054\u90a6\u8c03\u67e5\uff0c\u4ed6\u6700\u51fa\u540d\u7684\u8eab\u4efd\u662fBasic\u7f16\u7a0b\u8bed\u8a00\u4e4b\u7236\u3002\u90a3\u5e74\u590f\u5929\u548c\u79cb\u5929\uff0c\u6211\u4e0d\u4ec5\u5b66\u5230\u4e86\u5f88\u591a\u5173\u4e8e\u6838\u4e8b\u6545\u7684\u77e5\u8bc6\uff0c\u4e5f\u5b66\u5230\u4e86\u5f88\u591a\u5173\u4e8e\u653f\u5e9c\u548c\u884c\u4e1a\u5982\u4f55\u5e94\u5bf9\u5371\u673a\u7684\u77e5\u8bc6\u3002\u5176\u4e2d\u4e00\u4e9b\u7ecf\u9a8c\u6559\u8bad\u9002\u7528\u4e8e\u76ee\u524d\u7684\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\uff0c\u5b83\u4e5f\u7ba1\u7406\u4e0d\u5584\u3002\u8fd9\u53ef\u80fd\u4f1a\u8ba9\u4f60\u5927\u5403\u4e00\u60ca(41\u5e74\u524d\u7684\u6559\u8bad\u4ecd\u7136\u9002\u7528)\uff0c\u4f46\u5c24\u5176\u662f\u653f\u5e9c\uff0c\u53d8\u5316\u901f\u5ea6\u975e\u5e38\u7f13\u6162\u3002\n\u6211\u4e3b\u8981\u4e0e\u4e4b\u6253\u4ea4\u9053\u7684\u4e24\u4e2a\u8054\u90a6\u673a\u6784\u662f\u8054\u90a6\u7d27\u6025\u4e8b\u52a1\u7ba1\u7406\u5c40(FEMA)\u548c\u6838\u7ba1\u7406\u59d4\u5458\u4f1a(NRC)\u3002\u8fd9\u4e24\u4e2a\u673a\u6784\u5728\u4e0d\u4e45\u4e4b\u524d\u90fd\u7ecf\u5386\u4e86\u54c1\u724c\u91cd\u5851\u7684\u52aa\u529b\uff0c\u6240\u4ee5\u6211\u9047\u5230\u7684\u51e0\u4e4e\u6240\u6709\u4eba\u90fd\u662f\u5728\u8001\u54c1\u724c\u4e0b\u5f00\u59cb\u4ed6\u4eec\u7684\u804c\u4e1a\u751f\u6daf\u7684-\u6c11\u9632\u548c\u539f\u5b50\u80fd\u59d4\u5458\u4f1a\u3002\u8fd9\u4e9b\u65e9\u671f\u7684\u8eab\u4efd\u662f\u8fd9\u4e2a\u6545\u4e8b\u7684\u5173\u952e\u3002\n\u5982\u679c\u4f60\u4e0d\u8bb0\u5f97\u6c11\u9632\uff0c\u90a3\u5c31\u662f\u8d1f\u8d23\u89c4\u5212\u7b2c\u4e09\u6b21\u4e16\u754c\u5927\u6218\u671f\u95f4\u884c\u52a8\u8ba1\u5212\u7684\u673a\u6784\u3002\u7b2c\u4e09\u6b21\u4e16\u754c\u5927\u6218\u662f\u4e00\u573a\u53ef\u80fd\u5bfc\u81f4\u6570\u767e\u4e07\u4eba\u6b7b\u4ea1\u7684\u70ed\u6838\u6218\u4e89\u3002\u6c11\u9632\u5728\u5168\u56fd\u5404\u5730\u7684\u516c\u5171\u5efa\u7b51\u5730\u4e0b\u5ba4\u4fee\u5efa\u4e86\u9632\u7a7a\u6d1e\uff0c\u4e3a\u5b83\u4eec\u914d\u5907\u4e86\u751f\u5b58\u7269\u8d44\u3002\u6c11\u9632\u6bcf\u5468\u8fdb\u884c\u4e00\u6b21\u7a7a\u88ad\u6d4b\u8bd5\uff0c\u5168\u9547\u90fd\u80fd\u542c\u5230\u5de8\u5927\u7684\u8b66\u62a5\u58f0\u3002\u6c11\u9632\u6559\u4f1a\u4e86\u50cf\u6211\u8fd9\u6837\u7684\u5c0f\u5b69\u5b50\u8eb2\u5728\u6211\u4eec\u5b66\u6821\u7684\u8bfe\u684c\u4e0b\uff0c\u5e0c\u671b\u80fd\u5728\u6838\u6b66\u5668\u843d\u4e0b\u7684\u60c5\u51b5\u4e0b\u62ef\u6551\u6211\u4eec\u3002\n\u4f46\u6838\u6b66\u5668\u4ece\u672a\u4e0b\u964d\uff0c\u6700\u7ec8\u6c11\u9632\u5bf9\u7f8e\u56fd\u653f\u7b56\u7684\u91cd\u8981\u6027\u5f00\u59cb\u4e0b\u964d\u3002\u6211\u660e\u767d\u6211\u4eec\u8fd8\u5904\u4e8e\u51b7\u6218\u65f6\u671f\u3002\u67cf\u6797\u5899\u4ecd\u7136\u5c79\u7acb\u4e0d\u5012\uff0c\u7f57\u7eb3\u5fb7\u00b7\u91cc\u6839\u751a\u81f3\u8fd8\u6ca1\u6709\u53c2\u52a0\u603b\u7edf\u7ade\u9009\u3002\u4f46\u4e8b\u60c5\u6e10\u6e10\u5e73\u606f\u4e0b\u6765\uff0c\u6240\u4ee5\u51b3\u5b9a\u5c06\u6c11\u9632\u6539\u5efa\u4e3a\u8054\u90a6\u5e94\u6025\u7ba1\u7406\u5c40\uff0c\u5e76\u627f\u62c5\u5176\u4ed6\u7c7b\u578b\u7684\u707e\u96be\u7684\u8d23\u4efb\uff0c\u5982\u98d3\u98ce\u3001\u9f99\u5377\u98ce\uff0c\u4ee5\u53ca\uff0c\u55ef\uff0c\u6838\u4e8b\u6545\u3002\u4e09\u91cc\u5c9b\u662f\u4ed6\u4eec\u7684\u7b2c\u4e00\u4e2a\u3002\n\u6ca1\u8fc7\u591a\u4e45\uff0c\u6211\u5c31\u610f\u8bc6\u5230\uff0c\u6211\u4f1a\u89c1\u7684\u6c11\u9632\u4eba\u5458(\u6bcf\u4e2a\u4eba\u90fd\u662f\u7537\u6027)\u90fd\u6000\u5ff5\u8fc7\u53bb\u4e0e\u4fc4\u7f57\u65af\u4eba\u4e89\u6597\u7684\u65e5\u5b50\uff0c\u4ed6\u4eec\u975e\u5e38\u4e0d\u786e\u5b9a\u5982\u4f55\u5904\u7406\u8fd9\u4e9b\u65b0\u7684\u7d27\u6025\u60c5\u51b5\uff0c\u6bd4\u5982\u6211\u4eec\u79f0\u4e4b\u4e3a\u4e09\u91cc\u5c9b(TMI)\u7684\u4e09\u91cc\u5c9b(Three Mile Island)\u3002\u62e5\u6709TMI(\u901a\u7528\u516c\u7528\u4e8b\u4e1a\u6216GPU)\u7684\u516c\u53f8\u8868\u793a\uff0c\u5de5\u5382\u662f\u4ed6\u4eec\u7684\u5b69\u5b50\uff0c\u4e8b\u6545\u90fd\u5728\u63a7\u5236\u4e4b\u4e2d\uff0c\u4ed6\u4eec\u5f88\u5feb\u5c31\u4f1a\u6062\u590d\u8fd0\u884c\u3002\u5f53\u7136\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f7b\u5934\u5f7b\u5c3e\u7684\u8c0e\u8a00\uff0c\u4f46\u8054\u90a6\u5e94\u6025\u7ba1\u7406\u5c40\u5e76\u4e0d\u77e5\u9053\uff0c\u56e0\u4e3a\u8054\u90a6\u5e94\u6025\u7ba1\u7406\u5c40\u4ec0\u4e48\u90fd\u4e0d\u77e5\u9053\u3002\n\u8054\u90a6\u5e94\u6025\u7ba1\u7406\u5c40\uff1a\u201c\u6211\u4eec\u6b63\u5728\u76d1\u6d4b\u60c5\u51b5\uff0c\u5e76\u652f\u6301GPU\uff0c\u8fd9\u4f3c\u4e4e\u505a\u5f97\u5f88\u597d\u3002\u201d\n\u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u8bf4\uff0c\u5f88\u96be\u6307\u8d23\u8054\u90a6\u5e94\u6025\u7ba1\u7406\u5c40\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u77e5\u9053\u81ea\u5df1\u4e0d\u77e5\u9053\u7684\u4e8b\u60c5\u3002\u4f46\u6211\u4eec\u53ef\u4ee5\u5728\u67d0\u79cd\u7ed3\u6784\u5c42\u9762\u4e0a\u6307\u8d23\u5b83\u4eec\u63a8\u8fdf\u4f7f\u7528GPU\u3002\u6211\u4eec\u5728\u76d1\u7ba1\u5b98\u50da\u673a\u6784\u4e2d\u7ecf\u5e38\u770b\u5230\u8fd9\u4e00\u70b9\u3002\u5982\u679c\u5176\u4ed6\u4eba\u8981\u4e3a\u8fd9\u573a\u5de8\u5927\u7684\u3001\u53ef\u80fd\u65e0\u6cd5\u53d6\u80dc\u7684\u5371\u673a\u627f\u62c5\u8d23\u4efb-\u90a3\u5c31\u8ba9\u4ed6\u4eec\u53bb\u5427-\u90a3\u662f\u4e00\u5806\u70ed\u6c14\u817e\u817e\u7684\u72d7\u5c4e\u3002\u7ad9\u5728\u4e00\u8fb9\u770b\u7740\u5047\u4eba\u5931\u8d25\u3002\u8fd9\u5c31\u662f\u8054\u90a6\u5e94\u6025\u7ba1\u7406\u5c40\u6700\u521d\u5728TMI\u505a\u7684\u4e8b\u60c5\u3002\u8fd9\u662f\u63a9\u9970\u81ea\u5df1\u7684\u597d\u529e\u6cd5\uff0c\u4f46\u6839\u672c\u4e0d\u662f\u89e3\u51b3\u5b9e\u9645\u5371\u673a\u6216\u5e2e\u52a9\u4f60\u7684\u56fd\u5bb6\u7684\u529e\u6cd5\u3002\u8054\u90a6\u5e94\u6025\u7ba1\u7406\u5c40\u6ca1\u6709\u5c3d\u5230\u81ea\u5df1\u7684\u804c\u8d23\u3002\n\u8054\u90a6\u5e94\u6025\u7ba1\u7406\u5c40\u4e0d\u5f97\u4e0d\u4e3a\u5361\u7279\u91cc\u5a1c\u98d3\u98ce\u548c\u739b\u4e3d\u4e9a\u98d3\u98ce\u518d\u6b21\u5438\u53d6\u540c\u6837\u7684\u6559\u8bad-\u53c8\u662f\u4e24\u573a\u4ed6\u4eec\u8fdf\u8fdf\u6ca1\u6709\u8fdb\u5165\u7684\u5de8\u5927\u707e\u96be\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u95ee\uff0c\u8054\u90a6\u5e94\u6025\u7ba1\u7406\u5c40\u57281979\u5e74\u64c5\u957f\u4ec0\u4e48\uff1f\u4ed6\u4eec\u8ba4\u4e3a\u5b58\u5728\u7684\u771f\u6b63\u539f\u56e0\u662f\u4ec0\u4e48\uff1f\u6211\u5f88\u5feb\u4e86\u89e3\u5230\u8054\u90a6\u5e94\u6025\u7ba1\u7406\u5c40\u975e\u5e38\u64c5\u957f\u7ed8\u5236\u5730\u56fe\u548c\u7814\u7a76\u76db\u884c\u98ce\u5411\u3002\u4ed6\u4eec\u8ba4\u4e3a\u4ed6\u4eec\u7684\u771f\u6b63\u804c\u80fd\u662f\u8ba1\u5212\u6838\u653b\u51fb\uff0c\u76ee\u6807\u662f\u5728\u6700\u521d\u768430\u5929\u5185\u5c06\u751f\u547d\u635f\u5931\u964d\u81f3\u6700\u4f4e\u3002\u4e3a\u6b64\uff0c\u8054\u90a6\u5e94\u6025\u7ba1\u7406\u5c40(\u5982\u6c11\u9632)\u5236\u5b9a\u5e76\u4e0d\u65ad\u66f4\u65b0\u4e86\u8be6\u7ec6\u7684\u8ba1\u5212\uff0c\u4ee5\u4fbf\u5728\u88ad\u51fb\u53d1\u751f\u540e\u4e0d\u4e45\u8f6c\u79fb\u5927\u91cf\u4eba\u5458\u3002\u4ed6\u4eec\u4f1a\u628a\u6b7b\u8005\u7559\u5728\u90a3\u91cc\uff0c\u628a\u6d3b\u7740\u7684\u4eba\u8f6c\u79fb\u5230\u4ed6\u4eec\u8ba1\u7b97\u8fc7\u7684\u5730\u65b9\uff0c\u5728\u90a3\u91cc\u98ce\u529b\u9a71\u52a8\u7684\u6838\u5c18\u57c3\u4f1a\u66f4\u5c11\u3002\n\u4ed6\u4eec\u7684\u52aa\u529b\u662f\u4e00\u9879\u5d07\u9ad8\u768430\u5e74\u52aa\u529b\uff0c\u6700\u7ec8\u4ea7\u751f\u4e86\u8d8a\u6765\u8d8a\u8be6\u7ec6\u548c\u590d\u6742\u7684\u8ba1\u5212\uff0c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u8fd9\u4e9b\u8ba1\u5212\u8d8a\u6765\u8d8a\u8fdc\u79bb\u73b0\u5b9e\u3002\u52301979\u5e74\uff0c\u8054\u90a6\u5e94\u6025\u7ba1\u7406\u5c40\u7684\u8ba1\u5212-\u53ea\u9488\u5bf9\u4e1c\u5317\u90e8\u5404\u5dde-\u662f\u5728\u6838\u88ad\u51fb\u540e\u768472\u5c0f\u65f6\u5185\u8f6c\u79fb\u8d85\u8fc75000\u4e07\u4eba-\u636e\u63a8\u6d4b\uff0c\u8fd9\u6b21\u88ad\u51fb\u4e5f\u4f1a\u6467\u6bc1\u5927\u90e8\u5206\u57fa\u7840\u8bbe\u65bd\u3002\n\u5728\u5f53\u524d\u51a0\u72b6\u75c5\u6bd2\u5371\u673a\u7684\u80cc\u666f\u4e0b\u770b\u5f85\u8fd9\u4e00\u70b9\u3002\u5728\u76ee\u524d\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6ca1\u6709\u88ab\u8981\u6c42\u642c\u5bb6\uff0c\u6211\u4eec\u88ab\u8981\u6c42\u4e0d\u8981\u642c\u5bb6\uff0c\u8fd9\u8981\u7b80\u5355\u5f97\u591a\u3002\u5b9e\u9645\u884c\u52a8\u4ec5\u9650\u4e8e\u533b\u7597\u7bb1\u3001\u4eba\u5458\u548c\u8865\u7ed9\u3002\u6211\u4eec\u5904\u7406\u5f97\u600e\u4e48\u6837\u4e86\uff1f\u8857\u9053\u5f88\u5b89\u9759\uff0c\u6ca1\u6709\u6838\u6b66\u5668\u6467\u6bc1\u4ed6\u4eec\uff0c\u6211\u4eec\u6240\u505a\u7684\u4e00\u5207\u5c31\u662f\u8f6c\u79fb\u6570\u767e\u4e07\u4eba\uff0c\u5411\u4ed6\u4eec\u63d0\u4f9b\u4ed6\u4eec\u9700\u8981\u7684\u4e1c\u897f\u3002\u8fdb\u5c55\u5982\u4f55\uff1f\u5766\u7387\u5730\u8bf4\uff0c\u4e8b\u60c5\u4e00\u70b9\u4e5f\u4e0d\u987a\u5229\u3002\n\u65e7\u7684CD/FEMA\u758f\u6563\u8ba1\u5212\u5f88\u50cf\u624b\u673a\u4e2d\u7684GPS\u8def\u7531\u7b97\u6cd5\uff0c\u5b83\u8ba9\u4f60\u989d\u5916\u8f6c\u4e03\u4e2a\u5f2f\uff0c\u5728100\u82f1\u91cc\u7684\u65c5\u7a0b\u4e2d\u8282\u77010.3\u82f1\u91cc\u3002\u5982\u679c\u4ed6\u4eec\u80fd\u5c065000\u4e07\u4eba\u4ece\u8f90\u5c04\u8f83\u591a\u7684\u5730\u65b9\u8f6c\u79fb\u5230\u8f90\u5c04\u8f83\u5c11(\u4f46\u4ecd\u6709\u8f90\u5c04)\u7684\u5730\u65b9\uff0c\u90a3\u4e48\u5982\u679c\u4ed6\u4eec\u771f\u7684\u5230\u8fbe\u76ee\u7684\u5730\uff0c\u5c31\u4f1a\u591a\u51fa\u51e0\u5343\u4eba\u5b58\u6d3b\u4e0b\u6765\u3002\u90a3\u4e4b\u540e30\u5929\u5462\uff1f\u8fd9\u5c31\u662f\u6c11\u9632\u8ba1\u5212\u505c\u6b62\u7684\u5730\u65b9\uff0c\u6240\u4ee5\u90a3\u4e9b\u73b0\u5728\u79bb\u5bb6\u51e0\u82f1\u91cc\u8fdc\uff0c\u60f3\u5fc5\u4ecd\u5728\u6b7b\u4e8e\u8f90\u5c04\u4e2d\u6bd2\u7684\u4eba\uff0c\u572830\u5929\u540e\uff0c\u5b8c\u5168\u662f\u72ec\u81ea\u4e00\u4eba\u3002\u662f\u554a\uff0c\u5bf9\u3002\n\u6211\u4e4b\u6240\u4ee5\u544a\u8bc9\u4f60\u8fd9\u4e9b\uff0c\u662f\u56e0\u4e3a\u6628\u5929\u75be\u63a7\u4e2d\u5fc3\u548c\u8054\u90a6\u5e94\u6025\u7ba1\u7406\u5c40\u5ba3\u5e03\u4ed6\u4eec\u6b63\u5728\u4e3a\u7f8e\u56fd\u5236\u5b9a\u91cd\u8fd4\u5de5\u4f5c\u5c97\u4f4d\u7684\u8ba1\u5212\u3002\u8fd9\u542c\u8d77\u6765\u662f\u4e0d\u662f\u5f00\u59cb\u6709\u70b9\u8033\u719f\u4e86\uff1f\n\u6211\u4e0d\u662f\u8bf4\u8054\u90a6\u5e94\u6025\u7ba1\u7406\u5c40/\u75be\u63a7\u4e2d\u5fc3\u7684\u8ba1\u5212\u4e0d\u597d\u3002\u6211\u7b80\u76f4\u4e0d\u77e5\u9053\u4ed6\u4eec\u7684\u8ba1\u5212\u3002\u4f46\u5982\u679c\u975e\u8981\u6211\u6253\u8d4c\u7684\u8bdd\uff0c\u6211\u4f1a\u8bf4\u8fd9\u4e2a\u8ba1\u5212\u4e0d\u662f\u5f88\u597d\u3002\u5b83\u4e0d\u662f\u5f88\u597d\u7684\u539f\u56e0\u662f\u56e0\u4e3a-\u5c31\u50cf\u65e7\u7684CD\u64a4\u79bb\u8ba1\u5212\u4e00\u6837-\u5b83\u4ece\u4e00\u4e2a\u6839\u672c\u4e0a\u4e0d\u597d\u7684\u60f3\u6cd5\u5f00\u59cb\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u662f\u201c\u6211\u4eec\u5982\u4f55\u57286\u67081\u65e5\u4e4b\u524d\u8ba9\u7ecf\u6d4e\u542f\u52a8\u548c\u8fd0\u884c\uff0c\u540c\u65f6\u6740\u6b7b\u6700\u5c11\u7684\u4eba\uff1f\u201d\n\u4ed6\u4eec\u4e0d\u4f1a\u8bf4\u8fd9\u662f\u76ee\u6807\uff0c\u4f46\u8fd9\u662f\u76ee\u6807\uff0c\u56e0\u4e3a\u8fd9\u662f\u7279\u6717\u666e\u603b\u7edf\u7684\u76ee\u6807\u3002\nCDC\u548cFEMA\u751a\u81f3\u4e0d\u4f1a\u5728\u8fd9\u4e00\u70b9\u4e0a\u516c\u5f00\u8ba1\u5212\uff0c\u5982\u679c\u4ed6\u4eec\u4e0d\u662f\u88ab\u767d\u5bab\u63a8\u52a8\u7684\u8bdd\u3002\n\u6240\u4ee5\u4ed6\u4eec\u7684\u76ee\u6807\u662f\u9519\u8bef\u7684\u3002\u5b83\u53ef\u80fd\u5e94\u8be5\u662f\u201c\u6211\u4eec\u5982\u4f55\u6700\u7ec8\u4ee5\u6700\u5c0f\u7684\u751f\u547d\u635f\u5931\u56de\u5230\u5de5\u4f5c\u5c97\u4f4d\uff1f\u201d\u4ed6\u4eec\u751a\u81f3\u53ef\u80fd\u4f1a\u8bf4\u8fd9\u5c31\u662f\u76ee\u6807\u3002\u4f46\u6211\u4eec\u90fd\u77e5\u9053\uff0c\u771f\u6b63\u7684\u76ee\u6807\u662f\u201c\u6211\u4eec\u5982\u4f55\u57286\u67081\u65e5\u4e4b\u524d\u6062\u590d\u5de5\u4f5c\uff0c\u5e76\u5c06\u751f\u547d\u635f\u5931\u964d\u81f3\u6700\u4f4e\uff1f\u201d\n\u8fd9\u4e24\u4e2a\u76ee\u6807\u4e4b\u95f4\u7684\u5dee\u5f02\u53ef\u80fd\u57283\u4e07\u52305\u4e07\u6b7b\u4ea1\u4eba\u6570\u4e4b\u95f4\uff0c\u8fd9\u4e9b\u4eba\u5c06\u4f1a\u6b7b\u4ea1\uff0c\u6240\u4ee5\u5510\u7eb3\u5fb7\u00b7\u7279\u6717\u666e\u6709\u5e0c\u671b\u518d\u6b21\u5f53\u9009\u3002\n\u57281979\u5e74\u4e0e\u8054\u90a6\u5e94\u6025\u7ba1\u7406\u5c40\u7684\u4f1a\u8bae\u4e0a\uff0c\u6211\u63d0\u51fa\u4e86\u4e00\u4e9b\u95ee\u9898\uff0c\u6211\u8ba4\u4e3a\u8fd9\u4e9b\u95ee\u9898\u5207\u4e2d\u4e86TMI\u5371\u673a\u7ba1\u7406\u95ee\u9898\u7684\u6838\u5fc3\u3002\u4ed6\u4eec\u4e0d\u559c\u6b22\u6211\u7684\u95ee\u9898\u3002\u4ed6\u4eec\u4e00\u70b9\u4e5f\u4e0d\u559c\u6b22\u6211\u95ee\u95ee\u9898\u3002\u8fd9\u5c31\u662f\u4ed6\u4eec\u5f00\u59cb\u5728\u4f1a\u8bae\u684c\u4e0a\u6572\u6253\u897f\u70b9\u519b\u6821\u73ed\u7ea7\u6212\u6307\u7684\u65f6\u5019\u3002\n\u5bf9\u4e8e1979\u5e74\u8054\u90a6\u5e94\u6025\u7ba1\u7406\u5c40\u7684\u7cbe\u82f1\u4eec\u6765\u8bf4\uff0c\u6211\u662f\u4e2a\u670b\u514b\u3002\u4f46\u6211\u662f\u4e3a\u7f8e\u56fd\u603b\u7edf\u5de5\u4f5c\u7684\u670b\u514b\u3002\u5409\u7c73\u00b7\u5361\u7279\u603b\u7edf\u672c\u4eba\u6bd5\u4e1a\u4e8e\u7f8e\u56fd\u6d77\u519b\u5b66\u9662\uff0c\u62e5\u6709\u6838\u5de5\u7a0b\u7814\u7a76\u751f\u5b66\u4f4d\u3002\u5409\u7c73\u00b7\u5361\u7279\u4e0d\u662f\u670b\u514b\uff0c\u6240\u4ee5\u8054\u90a6\u5e94\u6025\u7ba1\u7406\u5c40\u7684\u4eba\u5fc5\u987b\u628a\u6211\u5f53\u56de\u4e8b\u3002\n\u6240\u4ee5\u4ed6\u4eec\u5728\u4f1a\u8bae\u684c\u4e0a\u6572\u4e86\u6572\u4ed6\u4eec\u7684\u73ed\u7ea7\u6212\u6307\uff0c\u8ba9\u6211\u77e5\u9053\u4ed6\u4eec\u662f\u6210\u5e74\u4eba\uff0c\u800c\u6211\u662f\u4e2a\u670b\u514b\u3002\u4f46\u4e8b\u5b9e\u6700\u7ec8\u53d8\u5f97\u6e05\u6670\u8d77\u6765\uff0c\u4ed6\u4eec\u51e0\u4e4e\u4e0d\u77e5\u9053\u5b9e\u9645\u8be5\u505a\u4ec0\u4e48\uff0c\u4e3b\u8981\u662f\u5e0c\u671bGPU\u8bf4\u7684\u662f\u5b9e\u8bdd\uff0c\u6838\u4e8b\u6545\u5c06\u5728\u51e0\u5468\u5185\u7ed3\u675f\uff0c\u751f\u6d3b\u5c06\u6062\u590d\u6b63\u5e38\u3002\u8fd9\u542c\u8d77\u6765\u662f\u4e0d\u662f\u6709\u70b9\u8033\u719f\uff1f\n100\u591a\u4ebf\u7f8e\u5143\u548c41\u5e74\u540e\uff0cGPU\u7834\u4ea7\u548c\u6b7b\u4ea1\uff0c\u800cTMI\u4ecd\u7136\u9700\u8981\u82b1\u8d39\u91d1\u94b1\u6765\u4fee\u590d\u3002\n\u9002\u7528\u4e8e\u51a0\u72b6\u75c5\u6bd2\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u57286\u67081\u65e5\u4e4b\u524d\u4e0d\u80fd\u56de\u53bb\u5de5\u4f5c\u4e86\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u672c\u6253\u7b97\u7ee7\u7eed\u6211\u5728\u6838\u7ba1\u7406\u59d4\u5458\u4f1a\u7684\u5192\u9669\uff0c\u8fd9\u8ba9\u8054\u90a6\u5e94\u6025\u7ba1\u7406\u5c40\u770b\u8d77\u6765\u50cf\u9e70\u5f0f\u7ae5\u5b50\u519b\u3002\u4f46\u662f\u8fd9\u5df2\u7ecf\u592a\u957f\u4e86\uff0c\u6240\u4ee5\u8fd9\u5c06\u662f\u6211\u7684\u4e0b\u4e00\u4e2a\u4e13\u680f\u3002", "note_en": "Forty-one years ago this summer I was a young investigator working in Harrisburg, Pennsylvania and Washington, DC for the President\u2019s Commission on the Accident at Three Mile Island, a big federal investigation chaired by Dartmouth Professor  John Kemeny, who is best known as the father of the BASIC programming language. I learned a lot that summer and fall not only about nuclear accidents but about how governments and industries respond to crises. Some of those lessons apply to the current COVID-19 pandemic, which is also being poorly managed. This may surprise you (that 41-year-old lessons can still apply) but governments, especially, change at a glacial pace.\n The two federal agencies with which I mainly dealt were the Federal Emergency Management Agency ( FEMA) and the Nuclear Regulatory Commission ( NRC). Both agencies had not long before gone through rebranding efforts so nearly all of the people I met had started their careers under the old brands \u2014 Civil Defense and the Atomic Energy Commission. These earlier identities are key to this story.\n If you don\u2019t remember Civil Defense, it was the agency charged with planning what to do during World War III \u2014 a thermonuclear war that would have killed millions. Civil Defense built bomb shelters all over the country in the basements of public buildings, equipping them with survival supplies. Civil Defense ran  weekly air raid tests where huge sirens could be heard all over town. Civil Defense taught little kids like me to hide under our school desks in hopes that would save us in case the nukes ever dropped.\n But the nukes never dropped and eventually Civil Defense began to look less and less crucial to U.S. policy. Understand we were still in the Cold War. The Berlin Wall still stood and Ronald Reagan wasn\u2019t even running for President yet. But things were winding-down a bit, so it was decided that Civil Defense would be remade into FEMA and take on responsibility for other kinds of disasters like Hurricanes, tornadoes, and, well, nuclear accidents. Three Mile Island was their first one of those.\n It didn\u2019t take long for me to realize that the Civil Defense folks I was meeting with (everyone was a man) both missed the old days of sparring with the Russkies and they were very uncertain how to handle these new kinds of emergencies like Three Mile Island, which we called TMI. The company that owned TMI, General Public Utilities, or GPU, was saying the plant was their baby, that the accident was all under control, and they\u2019d be back up and running in no time at all. It was a complete lie of course, but FEMA didn\u2019t know that because FEMA didn\u2019t know much of anything.\n  FEMA: \u201cWe\u2019re monitoring the situation and supporting GPU, which seems to be doing a very good job.\u201d\n In one sense it is hard to fault FEMA because they didn\u2019t know what they didn\u2019t know. But we  can fault them on a kind of structural level for deferring to GPU. We see this a lot in regulatory bureaucracies. If someone else is going to grab responsibility for that huge and probably un-winnable crisis \u2014 that steaming pile of shit \u2014 heck, let them. Stand aside and watch the dummies fail. That\u2019s what FEMA did initially at TMI. It\u2019s a good way to cover your ass, but not at all a way to solve an actual crisis or to help your country. FEMA wasn\u2019t doing its job.\n FEMA had to learn this same lesson again for Hurricane Katrina and then again for Hurricane Maria \u2013two more huge disasters they were slow to enter.\n Here is a point where we might ask what  was FEMA good at back in 1979? What did they see as their real reason for existing? I quickly learned that FEMA was really good at making maps and studying prevailing winds. They saw their true function as planning for a nuclear attack with the goal of minimizing loss of life in those first 30 days. Toward that end FEMA (as Civil Defense) had created and continually updated elaborate plans for moving large groups of people shortly after an attack. They\u2019d leave the dead and move the living to places where they had calculated there would be less nuclear fallout driven by the wind.\n Theirs\u2019 was a noble 30-year effort that resulted in ever more detailed and complex plans that diverted further and further from reality as the years passed. By 1979, FEMA\u2019s plan \u2014 just for the northeast states \u2014 was to move more than 50 million people over the 72 hours following a nuclear attack \u2014 an attack that would presumably have also destroyed most infrastructure.\n Look at this in the context of the current COVID-19 crisis. In the current case we aren\u2019t being asked to move, we\u2019re being asked to  not move, which is way simpler. Actual movement is limited to medical cases, personnel, and supplies. How are we doing with that? The streets are quiet, no nukes have destroyed them, and all we are trying to do is move a couple million people around and supply them with what they need. How is that going? It\u2019s not going well at all, frankly.\n  The old CD/FEMA evacuation plan was a lot like that GPS routing algorithm in your phone that has you make seven extra turns to save 0.3 miles on a 100-mile trip. IF they could move 50 million people from where there was more fallout to where there was a little less fallout (but still fallout) then a few thousand more people were calculated to survive  if they actually made it to their destinations. And 30 days after that? That\u2019s where the Civil Defense plan stopped, so people who were now miles away from their homes and presumably still dying of radiation poisoning were, after 30 days, completely on their own. Yeah, right.\n I\u2019m telling you this because yesterday the CDC and FEMA announced they are working on a  back-to-work plan for America. Is this starting to sound familiar?\n I\u2019m not saying the FEMA/CDC plan is bad. I simply don\u2019t know their plan. But if I had to bet I\u2019d say the plan isn\u2019t very good. And the reason it isn\u2019t very good is because \u2014 just like the old CD evacuation plan \u2014 it is starting with a fundamentally bad idea, which in this case is \u201chow do we get the economy up and running by June 1 while killing the least people?\u201d\n They won\u2019t say that\u2019s the goal, but that\u00a0 is the goal because it is President Trump\u2019s goal.\n The CDC and FEMA wouldn\u2019t be even going public with a plan at this point if they weren\u2019t being pushed into it by the White House.\n So their goal is wrong. It probably should be \u201chow do we eventually get back to work with minimal loss of life?\u201d They may even say that\u2019s the goal. But we all know the real goal is \u201chow do we get back to work by June 1 with minimal loss of life?\u201d\n The difference between those two goals is probably somewhere between 30,000 and 50,000 dead people \u2014 people who will have died so Donald Trump has a hope of being re-elected.\n In my meetings with FEMA back in 1979, I asked questions that, I thought, got to the heart of the TMI crisis management problem. They didn\u2019t like my questions. They didn\u2019t like that I was asking questions at all. And that\u2019s when they would start tapping their West Point class rings on the conference table.\n To the fine men of FEMA in 1979, I was a punk. But I was a punk working for the President of the United States. And that President, Jimmy Carter, was himself a graduate of the U.S. Naval Academy and had a post-graduate degree in nuclear engineering. Jimmy Carter was no punk, so the FEMA guys had to take me seriously.\n  So they tapped their class rings on the conference table to let me know they were the adults and I was a punk. But the truth eventually became clear that they had little idea what actually to do and were mainly hoping GPU was telling the truth, that the nuclear accident would be over in a couple of weeks, and that life would get back to normal. Does this sound somewhat familiar?\n $10+ billion and 41 years later, GPU is bankrupt and dead and TMI is still costing money to fix.\n Applied to COVID-19 that means we won\u2019t be back to work by June 1.\n At this point, I had planned to move on to my adventures with the Nuclear Regulatory Commission, which made FEMA look like Eagle Scouts. But this is too long already, so that will be my next column.", "posttime": "2020-05-05 19:41:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u75c5\u6bd2,\u51a0\u72b6\u75c5\u6bd2,island,\u7ba1\u7406\u5c40,fema", "title": "\u4e09\u91cc\u5c9b\u51a0\u72b6\u75c5\u6bd2\u7684\u6559\u8bad\uff1a\u8054\u90a6\u5e94\u6025\u7ba1\u7406\u5c40\u548c\u6211", "title_en": "Three Mile Island Lessons for Covid-19: FEMA and Me", "transed": 1, "url": "https://www.cringely.com/2020/04/15/three-mile-island-lessons-for-covid-19-fema-and-me/", "via": "", "real_tags": ["\u75c5\u6bd2", "\u51a0\u72b6\u75c5\u6bd2", "island", "\u7ba1\u7406\u5c40", "fema"]}, {"category": "", "categoryclass": "", "imagename": "38cc5160afd1515105f2898de548cbd3.png", "infoid": 1000734, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Expensify\u5728\u5f88\u591a\u65b9\u9762\u90fd\u6709\u4e0d\u540c\u5bfb\u5e38\u7684\u6280\u672f\u5806\u6808\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u4e0d\u5728\u5185\u90e8\u4f7f\u7528DNS-\u53ea\u662f\u914d\u7f6e\u7ba1\u7406\u7684/etc/hosts\u6587\u4ef6-\u5b83\u5de5\u4f5c\u5f97\u5f88\u597d\u3002\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ea\u6709\u9650\u5730\u4f7f\u7528AWS-\u800c\u4e0d\u662f\u6258\u7ba1\u6211\u4eec\u81ea\u5df1\u7684Web\u548c\u6570\u636e\u5e93\u5c42\u786c\u4ef6-\u5b83\u5de5\u4f5c\u5f97\u5f88\u597d\u3002\u4f46\u6700\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u6211\u4eec\u6ca1\u6709\u4f7f\u7528MySQL\u6216Postgres-\u800c\u662f\u4f7f\u7528SQLite-\u5b83\u5de5\u4f5c\u5f97\u975e\u5e38\u597d\u3002\n\u8bda\u7136\uff0c\u5b83\u672c\u8eab\u5e76\u4e0d\u662fSQLite\u3002\u6211\u4eec\u5df2\u7ecf\u5c06\u5b83\u5305\u88c5\u5728\u4e00\u4e2a\u540d\u4e3aBedock\u7684\u81ea\u5b9a\u4e49\u5206\u5e03\u5f0f\u4e8b\u52a1\u5c42\u4e2d\uff0c\u8be5\u5c42\u662f\u5f00\u6e90\u7684\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u83b7\u5f97\uff1awww.Bedckdb.com\u3002\u5b83\u4e0d\u4ec5\u662f\u6211\u4eec\u6838\u5fc3\u6570\u636e\u5e93\u80cc\u540e\u7684\u4e3b\u529b\uff0c\u800c\u4e14\u8fd8\u4e3a\u6211\u4eec\u7684\u4efb\u52a1\u5173\u952e\u578b\u4f5c\u4e1a\u961f\u5217\u63d0\u4f9b\u52a8\u529b\uff0c\u5e76\u63d0\u4f9b\u4e00\u4e2a\u672c\u5730\u6258\u7ba1\u7684\u590d\u5236\u7f13\u5b58\u5c42\u3002\u529f\u80fd\u8d8a\u91cd\u8981\uff0c\u5b83\u5bf9Bedrock\u7684\u4f9d\u8d56\u5c31\u8d8a\u5927\u3002\n\u56e0\u6b64\uff0c\u8003\u8651\u52302017\u5e74\u7684\u7206\u70b8\u6027\u589e\u957f\uff0c\u5347\u7ea7\u9a71\u52a8\u57fa\u5ca9\u7684\u670d\u52a1\u5668\u4e00\u76f4\u662f\u5f53\u52a1\u4e4b\u6025--\u540c\u65f6\u5347\u7ea7\u57fa\u5ca9(\u5728\u4e0d\u53ef\u601d\u8bae\u7684SQLite\u56e2\u961f\u548cSQLite\u672c\u8eab\u7684\u5e2e\u52a9\u4e0b)\uff0c\u4ee5\u5229\u7528\u6240\u6709\u8fd9\u4e9b\u786c\u4ef6\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u5373\u5c06\u63a8\u51fa\u5168\u65b0\u7684\u4e00\u4ee3\u81ea\u6258\u7ba1\u786c\u4ef6\uff0c\u5176\u57fa\u672c\u89c4\u683c\u5982\u4e0b\uff1a\n\u8fd9\u662f\u4e00\u4e2a\u5e9e\u7136\u5927\u7269\u7684\u670d\u52a1\u5668\uff0c\u51e0\u4e4e\u662f\u5728\u73b0\u8d27Linux\u5185\u6838\u4e0a\u8fd0\u884c\u7684\u6700\u5927\u7684\u670d\u52a1\u5668(\u6ca1\u6709\u8fdb\u5165\u201c\u8d85\u7ea7\u8ba1\u7b97\u673a\u201d\u9886\u57df)\uff0c\u6211\u4eec\u6b63\u5728\u5f97\u5230\u4e00\u5927\u6279\u8fd9\u6837\u7684\u670d\u52a1\u5668\u3002\u4f46\u4ec5\u6709\u786c\u4ef6\u662f\u4e0d\u591f\u7684\u3002\u9700\u8981\u660e\u786e\u7684\u662f\uff0c\u4ee5\u4e0a\u89c4\u683c\u5bf9\u4e8e\u5927\u591a\u6570\u6570\u636e\u5e93\u6765\u8bf4\u662f\u6beb\u65e0\u610f\u4e49\u7684\uff0c\u56e0\u4e3a\u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55\u53ef\u4f38\u7f29\u7684\u4e1c\u897f\u53ef\u4ee5\u5f88\u597d\u5730\u5904\u7406\u8fd9\u79cd\u786c\u4ef6-\u800c\u4e14\u51e0\u4e4e\u6ca1\u6709\u4eba\u5c1d\u8bd5\u3002\n\u4f20\u7edf\u7684\u667a\u6167\u662f\uff0c\u4f60\u5e94\u8be5\u603b\u662f\u201c\u5411\u5916\u201d\u800c\u4e0d\u662f\u201c\u5411\u4e0a\u201d\uff0c\u8fd9\u610f\u5473\u7740\u62e5\u6709\u5927\u91cf\u7684\u5c0f\u670d\u52a1\u5668\u6bd4\u76f8\u5bf9\u8f83\u5c11\u7684\u5927\u578b\u670d\u52a1\u5668\u66f4\u597d\u3002\u5927\u591a\u6570\u516c\u53f8\u4f1a\u5c06\u4ed6\u4eec\u7684\u6570\u636e\u201c\u5206\u5272\u201d\u5230\u5355\u72ec\u7684\u670d\u52a1\u5668\u4e2d\uff0c\u6bd4\u5982\u5728\u6bcf\u53f0\u670d\u52a1\u5668\u4e0a\u653e\u7f6e1000\u540d\u5ba2\u6237-\u7136\u540e\u5728\u5ba2\u6237\u767b\u5f55\u65f6\u53ea\u9700\u5c06\u6bcf\u4e2a\u5ba2\u6237\u8def\u7531\u5230\u6b63\u786e\u7684\u670d\u52a1\u5668\u5373\u53ef\u3002\u8fd9\u79cd\u8bbe\u8ba1\u5bf9\u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\u90fd\u975e\u5e38\u6709\u6548\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u6c38\u8fdc\u4e0d\u9700\u8981\u5b66\u4e60\u5982\u4f55\u7ba1\u7406\u5927\u578b\u6570\u636e\u5e93-\u53ea\u9700\u8981\u5f88\u591a\u5c0f\u578b\u6570\u636e\u5e93\u3002\nExexpsify\u6709\u70b9\u4e0d\u540c\uff0c\u56e0\u4e3a\u6ca1\u6709\u5206\u7247-\u4e5f\u6ca1\u6709\u660e\u786e\u7684\u201c\u65ad\u5c42\u7ebf\u201d\u6765\u505a\u8fd9\u4ef6\u4e8b\u3002\u201c\u6bcf\u4e00\u4e2a\u7528\u6237\u90fd\u53ef\u4ee5\u4e0e\u5176\u4ed6\u6bcf\u4e2a\u7528\u6237\u5206\u62c5\u8d39\u7528\uff0c\u65e0\u8bba\u4ed6\u4eec\u5728\u54ea\u91cc\u5de5\u4f5c\u3002\u201d\u8fd9\u662f\u4e00\u4e2a\u5173\u952e\u529f\u80fd\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u4e3a\u7ba1\u7406\u6570\u767e\u751a\u81f3\u6570\u5343\u5ba2\u6237\u7684\u5927\u578b\u4f1a\u8ba1\u5e08\u4e8b\u52a1\u6240\u63d0\u4f9b\u5982\u6b64\u597d\u7684\u652f\u6301\uff1a\u5f53\u4e00\u5bb6\u516c\u53f8\u4e0e\u4e00\u5bb6\u516c\u53f8\u7ade\u4e89\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u8ba9\u8be5\u516c\u53f8\u8bbf\u95ee\u8be5\u516c\u53f8\u7684\u6570\u636e\uff0c\u800c\u4e0d\u9700\u8981\u5c06\u516c\u53f8\u8fc1\u79fb\u5230\u4f1a\u8ba1\u5e08\u4e8b\u52a1\u6240\u5df2\u7ecf\u5728\u4f7f\u7528\u7684\u540c\u4e00\u670d\u52a1\u5668\u4e0a\u3002(\u8fd9\u662f\u4e00\u4e2a\u5173\u952e\u529f\u80fd\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u4e3a\u7ba1\u7406\u6570\u767e\u751a\u81f3\u6570\u5343\u5ba2\u6237\u7684\u5927\u578b\u4f1a\u8ba1\u5e08\u4e8b\u52a1\u6240\u63d0\u4f9b\u5982\u6b64\u597d\u7684\u652f\u6301\uff1a\u5f53\u4e00\u5bb6\u516c\u53f8\u4e0e\u4e00\u5bb6\u516c\u53f8\u7ade\u4e89\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u8ba9\u8be5\u516c\u53f8\u8bbf\u95ee\u8be5\u516c\u53f8\u7684\u6570\u636e\uff0c\u800c\u4e0d\u9700\u8981\u5c06\u8be5\u516c\u53f8\u8fc1\u79fb\u5230\u8be5\u4f1a\u8ba1\u5e08\u4e8b\u52a1\u6240\u5df2\u7ecf\u5728\u4f7f\u7528\u7684\u540c\u4e00\u670d\u52a1\u5668\u4e0a\u3002\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u4f5c\u4e3a\u4e00\u540d\u4f1a\u8ba1\u5e08\uff0c\u4f60\u7684Expensify\u201c\u6536\u4ef6\u7bb1\u201d\u5411\u4f60\u5c55\u793a\u4e86\u4f60\u9700\u8981\u540c\u65f6\u5728\u6240\u6709\u5ba2\u6237\u8eab\u4e0a\u505a\u7684\u6240\u6709\u4e8b\u60c5\uff0c\u800c\u4e0d\u9700\u8981\u4ece\u4e00\u4e2a\u5ba2\u6237\u201c\u5207\u6362\u201d\u5230\u53e6\u4e00\u4e2a\u5ba2\u6237\uff0c\u770b\u770b\u662f\u5426\u9700\u8981\u4e3a\u6bcf\u4e2a\u5ba2\u6237\u505a\u4ec0\u4e48\u3002\u5f53\u7136\uff0c\u5373\u4f7f\u4f60\u8fdb\u884c\u4e86\u5206\u7247\uff0c\u4e5f\u6709\u5176\u4ed6\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u6ca1\u6709\u5206\u7247\uff0c\u8fd9\u4ee5\u53ca\u5176\u4ed6\u4e00\u7cfb\u5217\u7c7b\u4f3c\u7684\u591a\u5ba2\u6237\u5904\u7406\u53d8\u5f97\u8d85\u7ea7\u5bb9\u6613\u3002\n\u663e\u7136\uff0cSQLite\u4ece\u6765\u4e0d\u662f\u4e3a\u505a\u8fd9\u6837\u7684\u4e8b\u60c5\u800c\u8bbe\u8ba1\u7684\u3002\u4f46\u8fd9\u5e76\u4e0d\u80fd\u6539\u53d8\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u5b83\u505a\u5f97\u975e\u5e38\u597d\uff0c\u5c3d\u7ba1SQLite\u591a\u5e74\u6765\u5e94\u6211\u4eec\u7684\u8981\u6c42\u505a\u4e86\u4e00\u4e9b\u4fee\u6539(\u6211\u4eec\u662fSQLite\u8054\u76df\u975e\u5e38\u70ed\u60c5\u7684\u8d5e\u52a9\u5546\uff0c\u4ed6\u4eec\u7ed9\u4e86\u6211\u4eec\u5f88\u5927\u7684\u5e2e\u52a9)\u3002\u8fd9\u4e9b\u4fee\u6539\u662f\u5f00\u6e90\u7684\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u4f7f\u7528(\u53ea\u8981\u95ee\u4ed6\u4eec\uff0c\u6211\u76f8\u4fe1\u4ed6\u4eec\u4f1a\u628a\u4f60\u8054\u7cfb\u8d77\u6765)\uff0c\u800c\u4e14\u57fa\u672c\u4e0a\u4e0d\u5728\u672c\u6587\u7684\u8ba8\u8bba\u8303\u56f4\u5185\uff0c\u4f46\u5305\u62ec(\u5982\u679c\u6211\u90fd\u8bb0\u5f97\u7684\u8bdd)\uff1a\n\u7981\u7528POSIX\u5efa\u8bae\u9501\u3002\u8fd9\u4f1a\u963b\u6b62\u60a8\u5728\u6570\u636e\u5e93\u8fd0\u884c\u65f6\u4ece\u5916\u90e8\u8fdb\u7a0b(\u4f8b\u5982\uff0c\u4ece\u547d\u4ee4\u884c\u5de5\u5177)\u8bbf\u95ee\u540c\u4e00\u6570\u636e\u5e93\uff0c\u4f46\u8fd9\u5bf9\u4e8e\u6211\u4eec\u7684\u4f7f\u7528\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\n\u7981\u7528malloc()\u5168\u5c40\u9501(\u6211\u4e0d\u8bb0\u5f97\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u6837\u7684\u9501\uff0c\u4f46\u5bf9\u4e8e\u6211\u4eec\u7684\u60c5\u51b5\u663e\u7136\u4e0d\u9700\u8981)\u3002\n\u6362\u53e5\u8bdd\u8bf4\uff0cSQLite\u7684\u6838\u5fc3\u8bbe\u8ba1\u975e\u5e38\u51c6\u786e\u3002\u6211\u8ba4\u4e3a\u4eba\u4eec\u6ca1\u6709\u610f\u8bc6\u5230\u5b83\u662f\u4e00\u4e2a\u591a\u4e48\u4e0d\u53ef\u601d\u8bae\u7684\u5de5\u5177\u3002\u76f8\u53cd\uff0c\u4f18\u5316\u7cfb\u7edf\u6027\u80fd\u7684\u5927\u90e8\u5206\u52aa\u529b\u5f52\u7ed3\u4e3a\u4f18\u5316BIOS\u548c\u5185\u6838\u529f\u7387\u8bbe\u7f6e\uff0c\u4ee5\u6d88\u9664\u65e0\u5173\u7684\u5185\u5b58\u8bbf\u95ee(\u4f8b\u5982\uff0c\u7981\u7528\u9884\u53d6)\uff0c\u5e76\u9632\u6b62CPU\u81ea\u884c\u8282\u6d41\u4ee5\u8282\u7701\u7535\u529b\u3002\n\u4eba\u4eec\u666e\u904d\u8ba4\u4e3aEC2\u6bd4\u6258\u7ba1\u4f60\u81ea\u5df1\u7684\u786c\u4ef6\u66f4\u5feb\u3001\u66f4\u4fbf\u5b9c\u3001\u66f4\u5bb9\u6613\u3002\u4e5f\u8bb8\u6211\u662f\u8001\u6d3e\uff0c\u4f46\u6211\u4ece\u6765\u90fd\u4e0d\u5b8c\u5168\u8ba4\u540c\u8fd9\u4e2a\u89c2\u70b9\u3002\u4f60\u5728EC2\u670d\u52a1\u5668\u4e0a\u53ef\u80fd\u5f97\u5230\u7684\u6700\u597d\u4ef7\u683c\u662f\u9884\u4ed83\u5e74\u5408\u7ea6\u7684\u4e00\u5e74\uff0c\u4f46\u4f60\u5728\u7b2c\u4e00\u5929\u652f\u4ed8\u7684\u4ef7\u683c\u4ecd\u7136\u7b49\u4e8e\u786c\u4ef6\u6210\u672c\u3002\u56e0\u4e3a\u60f3\u60f3\u770b\uff1a\u4e9a\u9a6c\u900a\u4e0d\u4f1a\u5728\u4f60\u8eab\u4e0a\u5192\u9669\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e0d\u4f1a\u4e3a\u4f60\u8d2d\u4e70\u786c\u4ef6\uff0c\u9664\u975e\u4ed6\u4eec\u9884\u4ed8\u4e86\u94b1\uff0c\u5426\u5219\u4ed6\u4eec\u4e0d\u4f1a\u4e3a\u4f60\u8d2d\u4e70\u786c\u4ef6\uff0c\u56e0\u4e3a\u4e9a\u9a6c\u900a\u4e0d\u4f1a\u5728\u4f60\u8eab\u4e0a\u5192\u9669\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e0d\u4f1a\u4e3a\u4f60\u8d2d\u4e70\u786c\u4ef6\uff0c\u9664\u975e\u4ed6\u4eec\u9884\u4ed8\u4e86\u94b1\uff0c\u5426\u5219\u4ed6\u4eec\u4e0d\u4f1a\u4e3a\u4f60\u8d2d\u4e70\u786c\u4ef6\uff0c\u56e0\u4e3a\u4e9a\u9a6c\u900a\u4e0d\u4f1a\u5728\u4f60\u8eab\u4e0a\u5192\u9669\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e0d\u4f1a\u4e3a\u4f60\u8d2d\u4e70\u786c\u4ef6\uff0c\u9664\u975e\u4ed6\u4eec\u9884\u5148\u4ed8\u6b3e\u3002\u4ed6\u4eec\u76f8\u4fe1\u4ed6\u4eec\u4f1a\u5f97\u5230\u5f88\u591a\u500d\u7684\u56de\u62a5\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u540c\u6837\u7684\u786c\u4ef6\uff0c\u4f60\u62ff\u51fa\u4e86\u540c\u6837\u7684\u73b0\u91d1\uff0c\u9664\u4e86\u4e0d\u662f\u5f97\u52305\u5e74\u7684\u7a33\u5b9a\u4f7f\u7528-\u4f60\u9700\u8981\u518d\u652f\u4ed8\u540c\u6837\u7684\u94b15\u6b21(\u56e0\u4e3a\u4e0e\u624b\u673a\u4e0d\u540c\uff0c\u670d\u52a1\u5668\u786c\u4ef6\u57283\u5e74\u540e\u4e0d\u4f1a\u53d8\u6210\u5357\u74dc)\u3002EEC2\u7684\u6ea2\u4ef7\u4ee4\u4eba\u9707\u60ca-\u53ef\u80fd\u662f\u5b9e\u9645\u786c\u4ef6\u6210\u672c\u76843-10\u500d-\u5982\u679c\u4f60\u8fd9\u4e48\u770b\u91cd\u4fbf\u5229\u6027\uff0c\u8fd9\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u4f46\u9c9c\u4e3a\u4eba\u77e5\u7684\u662f\uff0c\u5b83\u4e5f\u4f1a\u5e26\u6765\u5de8\u5927\u7684\u6027\u80fd\u635f\u5931\u3002\n\u5728\u64b0\u5199\u672c\u6587\u65f6\uff0c\u60a8\u53ef\u4ee5\u4e70\u5230\u7684\u6700\u5927\u7684ec2\u5b9e\u4f8b\u662f\u5177\u6709128vCPU\u548c4TB\u5185\u5b58\u76843x1e.32xLarge\u3002\u5b83\u7684\u4ef7\u683c\u4e3a\u6bcf\u5c0f\u65f626.688\u7f8e\u5143\uff0c\u5373\u6bcf\u53f0\u670d\u52a1\u5668\u6bcf\u5e74233K\u7f8e\u5143\u3002)(\u5982\u679c\u60a8\u627f\u8bfa\u4f7f\u75283\u5e74\uff0c\u5e76\u9884\u4ed81\u5e74\uff0c\u5219\u53ef\u4ee5\u201c\u4ec5\u201d\u82b135\u4e07\u7f8e\u5143\u8d2d\u4e703\u5e74\u3002)\u4ee5\u4e0b\u662f\u8be5\u670d\u52a1\u5668\u4e0e\u60a8\u53ef\u4ee5\u6258\u7ba1\u7684\u670d\u52a1\u5668\u7684\u6bd4\u8f83\u7ed3\u679c\uff0c\u9884\u4ed8\u6210\u672c\u548c\u6301\u7eed\u6210\u672c\u90fd\u5f88\u4f4e\uff1a\u201c\u53ea\u9700\u201d35\u4e07\u7f8e\u5143\u3002(\u5982\u679c\u60a8\u627f\u8bfa\u8d2d\u4e703\u5e74\uff0c\u5e76\u9884\u4ed81\u5e74\u7684\u8d39\u7528\uff0c\u5219\u53ef\u4ee5\u201c\u4ec5\u201d\u82b135\u4e07\u7f8e\u5143\u8d2d\u4e703\u5e74\u7684\u670d\u52a1\u5668\u3002)\u4e0b\u9762\u662f\u8be5\u670d\u52a1\u5668\u4e0e\u60a8\u53ef\u4ee5\u6258\u7ba1\u7684\u670d\u52a1\u5668\u7684\u6bd4\u8f83\u7ed3\u679c\uff0c\u524d\u8005\u7684\u9884\u4ed8\u6210\u672c\u548c\u6301\u7eed\u6210\u672c\u90fd\u53ea\u6709\u5f88\u5c0f\u7684\u4e00\u90e8\u5206\uff1a\n\u7eb5\u8f74\u663e\u793a\u6bcf\u79d2\u67e5\u8be2\u7684\u603b\u6570\uff0c\u6a2a\u8f74\u663e\u793a\u83b7\u53d6\u8be5\u6570\u636e\u70b9\u6240\u4f7f\u7528\u7684\u7ebf\u7a0b\u6570\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u7ebf\u7a0b\u8ba1\u6570\u914d\u7f6e(\u4f8b\u5982\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u4e3a100s\uff0c\u4e24\u4e2a\u7ebf\u7a0b\u4e3a100s\uff0c\u7b49\u7b49)\uff0c\u6d4b\u8bd5\u8fd0\u884c100s\uff0c\u5e76\u4f7f\u7528\u6700\u5feb\u7684\u5355\u4e2a\u79d2\u4f5c\u4e3a\u7ed3\u679c\u3002(\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u56e0\u4e3aCPU\u7f13\u5b58\u201c\u9884\u70ed\u201d\u53ef\u80fd\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\uff0c\u8fd9\u4f1a\u8fc7\u6ee4\u6389\u4eba\u4e3a\u7f13\u6162\u7684\u6837\u672c\u3002)\u5b8c\u6574\u7684\u6027\u80fd\u6d4b\u8bd5\u53ef\u4ee5\u5728GitHub\u4e0a\u627e\u5230\u3002(\u8fd9\u5f88\u91cd\u8981\uff0c\u56e0\u4e3aCPU\u7f13\u5b58\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\u624d\u80fd\u201c\u9884\u70ed\u201d\uff0c\u8fd9\u4f1a\u8fc7\u6ee4\u6389\u4eba\u4e3a\u7f13\u6162\u7684\u6837\u672c\u3002)-\u5b8c\u6574\u7684\u6027\u80fd\u6d4b\u8bd5\u53ef\u4ee5\u5728GitHub\u4e0a\u627e\u5230\u3002(\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u56e0\u4e3aCPU\u7f13\u5b58\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\u624d\u80fd\u201c\u9884\u70ed\u201d\uff0c\u8fd9\u4f1a\u8fc7\u6ee4\u6389\u4eba\u4e3a\u7f13\u6162\u7684\u6837\u672c\u3002)\u3002\n\u67e5\u8be2\u672c\u8eab\u53ea\u662f\u5bf9\u968f\u673a\u6574\u6570\u768410B\u884c(447 GB)\u4e24\u5217\u6570\u636e\u5e93\u4e2d\u968f\u673a\u653e\u7f6e\u768410\u884c\u7684\u8303\u56f4\u6c42\u548c\uff0c\u5176\u4e2d\u4e00\u884c\u5df2\u7f16\u5236\u7d22\u5f15\uff0c\u53e6\u4e00\u884c\u672a\u7f16\u5236\u7d22\u5f15\u3002*\u8fd9\u610f\u5473\u7740\u6d4b\u8bd5\u5df2\u5b8c\u5168\u7f13\u5b58\u5728RAM\u4e2d\uff0c\u800c\u6570\u636e\u5e93\u5728\u6d4b\u8bd5\u4e4b\u524d\u5df2\u9884\u7f13\u5b58\u3002*\u5728\u6b64\u6d4b\u8bd5\u671f\u95f4\u4e0d\u6267\u884c\u5199\u5165\uff0c\u53ea\u6267\u884c\u8bfb\u53d6\u64cd\u4f5c\u3002*\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u652f\u6301NUMA\uff0c\u8fd9\u610f\u5473\u7740\u5176\u6240\u6709\u672c\u5730\u5185\u5b58\u8bbf\u95ee\u90fd\u5728\u672c\u5730\u5185\u5b58\u8282\u70b9\u5185\u5b8c\u6210\uff0c\u6570\u636e\u5e93\u672c\u8eab\u5728NUMA\u8282\u70b9\u4e4b\u95f4\u62c6\u5206(\u5c3d\u7ba1\u4e0e\u9884\u671f\u76f8\u53cd\uff0cNUMA\u611f\u77e5\u4e0d\u4f1a\u3002\n\u6a59\u8272\u7ebf\u6761\u663e\u793aEC2\u673a\u5668\u7684\u603b\u805a\u5408\u6027\u80fd\uff0c\u4e0a\u9650\u7ea6\u4e3a\u6bcf\u79d2150\u4e07\u6b21\u67e5\u8be2\u3002\u84dd\u7ebf\u663e\u793a\u5728\u201c\u88f8\u673a\u201d\u673a\u5668\u4e0a\u8fdb\u884c\u7684\u76f8\u540c\u6d4b\u8bd5\uff0c\u6bcf\u79d2\u67e5\u8be2\u6b21\u6570\u8d85\u8fc74M\u6b21\uff0c\u5e76\u4e14\u5728\u6d4b\u8bd5\u671f\u95f4\u4e0d\u65ad\u6500\u5347\u3002(\u51fa\u4e8e\u6d4b\u8bd5\u76ee\u7684\uff0c\u6211\u53ea\u5173\u5fc3192\u4e2a\u7ebf\u7a0b\uff0c\u6240\u4ee5\u6211\u4e0d\u62c5\u5fc3\u7ebf\u7a0b\u6570\u4f1a\u66f4\u9ad8\u3002)\u7ea2\u7ebf\u663e\u793a\u7684\u662f\u540c\u6837\u7684\u6d4b\u8bd5\uff0c\u53ea\u4e0d\u8fc7\u662f30B\u7684\u884c\u8868(1.3TB)--\u6bd4\u88f8\u673a\u7684\u7269\u7406RAM\u8fd8\u5927\u3002\n\u9996\u5148\uff0c\u54c7\u3002\u8fd9\u662f\u4e00\u5428\u7684\u9a6c\u529b\u3002\u4e00\u53f0\u670d\u52a1\u5668\u6bcf\u79d2\u8fdb\u884c400\u4e07\u6b21\u67e5\u8be2\u662f\u4e0d\u5bb9\u5c0f\u89d1\u7684\uff0c\u5373\u4f7f\u8ba4\u8bc6\u5230\u8fd9\u662f\u4e00\u4e2a\u5f88\u96be\u6d4b\u8bd5\u7684\u4eba\u5de5\u67e5\u8be2\u3002)(\u5982\u679c\u4f60\u6d4b\u8bd5\u201cSELECT 1\u201d\uff0c\u5b83\u6bcf\u79d2\u4f1a\u83b7\u5f97\u5927\u7ea61.6\u4ebf\u6b21\u67e5\u8be2\uff0c\u4f46\u8fd9\u66f4\u662f\u4eba\u4e3a\u7684\u3002)(\u5982\u679c\u4f60\u6d4b\u8bd5\u201cSELECT 1\u201d\uff0c\u5b83\u6bcf\u79d2\u4f1a\u5f97\u5230\u5927\u7ea61.6\u4ebf\u6b21\u67e5\u8be2\uff0c\u4f46\u8fd9\u66f4\u662f\u4eba\u4e3a\u7684\u3002)\u3002\n\u5176\u6b21\uff0cSQLite\u7684\u4f38\u7f29\u6027\u4ee4\u4eba\u60ca\u53f9\uff0c\u51e0\u4e4e\u5f00\u7bb1\u5373\u7528\u3002\u8fd9\u9879\u6d4b\u8bd5\u5728\u6dfb\u52a0\u7269\u7406CPU\u65f6\u5b9e\u73b0\u4e86\u8fd1\u4e4e\u5b8c\u7f8e\u7684\u7ebf\u6027\u53ef\u4f38\u7f29\u6027\uff0c\u8d85\u7ebf\u7a0b\u5728\u91ca\u653e\u989d\u5916\u5bb9\u91cf\u65b9\u9762\u7684\u6548\u679c\u6bd4\u6211\u9884\u671f\u7684\u8981\u597d\u5f97\u591a\u3002\n\u4f46\u7b2c\u4e09\uff0cwtf\u4e0eEC2\u6709\u95ee\u9898\uff1f\u6211\u771f\u7684\u8ba4\u4e3a1\u4e2avCPU\u5927\u81f4\u7b49\u4e8e1\u4e2a\u7269\u7406CPU\uff0c\u4f46MAN\u9519\u4e86\u3002\u8fd9\u4e00\u70b9\u5728\u8fd9\u91cc\u771f\u6b63\u7a81\u51fa\u663e\u793a\uff1a\n\u8fd9\u662f\u76f8\u540c\u7684\u57fa\u672c\u56fe\u8868\uff0c\u4f46\u8fd9\u4e00\u6b21\u663e\u793a\u4e86\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u5e73\u5747\u6027\u80fd\uff0c\u4ee5\u53ca\u8be5\u6027\u80fd\u662f\u5982\u4f55\u968f\u7740\u7ebf\u7a0b\u6570\u91cf\u7684\u53d8\u5316\u800c\u53d8\u5316\u7684\u3002\u84dd\u7ebf\u663e\u793a\u7684\u51e0\u4e4e\u4e0e\u6211\u9884\u671f\u7684\u4e00\u6837\uff1a\u5f53\u65b0\u7684\u7269\u7406\u6838\u5fc3\u88ab\u6fc0\u6d3b\u65f6\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u6027\u80fd\u4fdd\u6301\u7a33\u5b9a(\u975e\u5e38\u660e\u663e)\uff0c\u4f46\u5f53\u6211\u4eec\u8fbe\u5230\u8d85\u7ebf\u7a0b\u533a\u57df\u65f6\uff0c\u6027\u80fd\u5f00\u59cb\u4e0b\u964d\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u6bd4\u6211\u9884\u671f\u7684\u7ebf\u6027\u7a0b\u5ea6\u8981\u9ad8\u5f97\u591a\uff0c\u56e0\u4e3a\u6d4b\u8bd5\u7684\u8bbe\u8ba1\u65b9\u5f0f\u786e\u4fdd\u6bcf\u4e2aCPU 87.5%\u7684\u65f6\u95f4\u90fd\u5728\u8bbf\u95ee\u8fdc\u7a0bRAM\u3002\u8fd9\u610f\u5473\u7740\u8fd9\u51e0\u4e4e\u662f\u6700\u7cdf\u7cd5\u7684\u60c5\u51b5\u3002\u4f46\u8fd9\u4f3c\u4e4e\u4e1d\u6beb\u6ca1\u6709\u964d\u4f4e\u6d4b\u8bd5\u7684\u6027\u80fd\uff0c\u770b\u8d77\u6765\u82f1\u7279\u5c14\u53ef\u4ee5\u505a\u5bf9\u4e00\u4e9b\u4e8b\u60c5\uff0c\u800cPurley\u7684\u65b0\u5185\u5b58\u67b6\u6784\u76f8\u5f53\u7a33\u56fa\uff01\n\u6b64\u5916\uff0c\u7ea2\u7ebf\u663e\u793a\uff0c\u5373\u4f7f25%\u7684\u8bfb\u53d6\u8fdb\u5165\u78c1\u76d8\uff0c\u5bf9\u603b\u4f53\u6027\u80fd\u7684\u5f71\u54cd\u4e5f\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u3002\u6211\u5c06\u6b64\u5f52\u56e0\u4e8eNVMe\u56fa\u6001\u786c\u76d8\u7684\u75af\u72c2\u5feb\u901f\u8bbf\u95ee-\u540c\u6837\uff0c\u8fdc\u8fdc\u597d\u4e8e\u9884\u671f\u3002\n\u4f46\u6a59\u8272\u7684\u7ebf\u6761\u663e\u793a\uff0cEC2\u673a\u5668\u4e0a\u7684\u6bcf\u4e2a\u65b0\u7ebf\u7a0b\u90fd\u4f1a\u5bf9\u5176\u4ed6\u7ebf\u7a0b\u9020\u6210\u5f88\u5927\u7684\u60e9\u7f5a\u3002\u9996\u5148\uff0c\u8fd9\u4e2a\u56fe\u8868\u975e\u5e38\u660e\u663e\u5730\u663e\u793a\uff0c128\u4e2a\u201c\u865a\u62dfCPU\u201d\u5b9e\u9645\u4e0a\u610f\u5473\u774064\u4e2a\u7269\u7406CPU+\u8d85\u7ebf\u7a0b\u3002*\u8fd9\u76f8\u5f53\u4ee4\u4eba\u5931\u671b\u548c\u8bef\u5bfc\uff0c\u56e0\u4e3a\u6211\u771f\u7684\u8ba4\u4e3a\u6bcf\u4e2avCPU\u90fd\u610f\u5473\u7740\u540c\u7b49\u7684\u6027\u80fd\u3002\n\u7136\u800c\uff0c\u66f4\u91cd\u8981\u7684\u662f\u6a59\u7ebf\u672c\u8eab\u7684\u66f2\u7ebf\u3002\u5f53\u7528\u5355\u884c\u6570\u636e\u5e93\u66ff\u6362100\u4ebf\u884c\u6570\u636e\u5e93\u540e\u91cd\u65b0\u8fd0\u884c\u6d4b\u8bd5\u65f6\uff0c\u66f4\u5bb9\u6613\u770b\u5230\u8fd9\u4e00\u70b9\uff0c\u4ee5\u4fbf\u4ece\u7b49\u5f0f\u4e2d\u5220\u9664\u5185\u5b58\u8bbf\u95ee\uff1a\n(\u8bf7\u539f\u8c05\u53c2\u5dee\u4e0d\u9f50\u7684\u6570\u636e\uff0c\u8fd9\u662f\u4ee5\u6bcf\u4e2a\u6837\u672c\u8f83\u77ed\u7684\u5468\u671f\u8fd0\u884c\u7684\uff0c\u56e0\u6b64\u566a\u97f3\u8f83\u5927\uff0c\u4f46\u5b83\u8ba9\u4eba\u660e\u767d\u4e86\u8fd9\u4e00\u70b9\u3002)\n\u84dd\u7ebf\u663e\u793a\u4e86\u6dfb\u52a0\u65b0\u7ebf\u7a0b\u65f6\u88f8\u673a\u4e0a\u6bcf\u4e2a\u7ebf\u7a0b\u7684QPS\uff0c\u6b63\u5982\u60a8\u6240\u9884\u671f\u7684\u90a3\u6837\uff0c\u5b83\u83b7\u5f97\u4e86\u9ad8\u8fbe192\u4e2a\u7269\u7406\u6838\u5fc3\u7684\u5b8c\u7f8e\u7ebf\u6027\u53ef\u4f38\u7f29\u6027\uff0c\u7136\u540e\u968f\u7740\u8d85\u7ebf\u7a0b\u5f00\u59cb\u53d1\u6325\u4f5c\u7528\uff0cQPS\u7ebf\u6027\u4e0b\u964d\u3002\n\u7ea2\u7ebf\u662fEC2\u7684\u76d2\u5b50\uff0c\u6027\u80fd\u751a\u81f3\u5728\u8fbe\u523064\u4e2a\u7269\u7406\u6838\u5fc3\u4e4b\u524d\u5c31\u4f1a\u4e0b\u964d\uff0c\u4f46\u5728\u8fbe\u523064\u4e2a\u7269\u7406\u6838\u5fc3\u4e4b\u524d\u5c31\u4f1a\u6025\u5267\u4e0b\u964d\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u8fd9\u6761\u7ebf\u7684\u66f2\u7ebf\u8868\u660e\u5b83\u4e0d\u662f\u5185\u5b58\u8bbf\u95ee\u51cf\u6162\u4e86\u901f\u5ea6-\u8fd9\u662f\u7535\u6e90\u8282\u6d41\u3002*\u4e00\u65e6\u8d85\u8fc764\u4e2a\u6838\u5fc3\u5e76\u5f00\u59cb\u8d85\u7ebf\u7a0b\uff0c\u6bcf\u4e2aCPU\u6d88\u8017\u7684\u529f\u7387\u5c31\u4f1a\u4e0a\u5347\u3002\u4f46\u5f88\u660e\u663e\uff0cEC2\u5df2\u7ecf\u5c06\u5176\u914d\u7f6e\u4e3a\u67d0\u79cd\u201c\u5e73\u8861\u201d\u7684\u6027\u80fd\u914d\u7f6e\u6587\u4ef6\uff0c\u8fd9\u610f\u5473\u7740\u5f53\u603b\u529f\u8017\u53d8\u5f97\u592a\u9ad8\u65f6\uff0cCPU\u7684\u65f6\u949f\u901f\u5ea6\u4f1a\u964d\u4f4e-\u4ece\u800c\u9650\u5236\u4e86CPU\u7684\u8fd0\u884c\u901f\u5ea6\u3002\u4f46\u5f88\u660e\u663e\uff0cEC2\u5728\u8fbe\u523064\u4e2a\u7269\u7406\u6838\u5fc3\u4e4b\u524d\u5c31\u4f1a\u964d\u4f4e\u6027\u80fd\uff0c\u8fd9\u610f\u5473\u7740\u5f53\u603b\u529f\u8017\u8fc7\u9ad8\u65f6\uff0cCPU\u7684\u65f6\u949f\u901f\u5ea6\u4f1a\u964d\u4f4e\uff0c\u4ece\u800c\u9650\u5236\u4e86\u3002\n\u8fd9\u4f1a\u5bfc\u81f4\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u6027\u80fd-\u8ba1\u6570\u66f2\u7ebf\uff0c\u5728128\u4e2a\u7ebf\u7a0b\u5904\u8d8b\u4e8e\u5e73\u7f13\u7684\u7ebf\u6027\u4e0b\u964d\u659c\u7387\uff0c\u56e0\u4e3a\u8fd9\u662f\u6240\u6709128\u4e2aCPU\u90fd\u5728\u4f7f\u7528\u7684\u70b9\u3002\u201c\u4e00\u65e6\u6240\u6709CPU\u90fd\u88ab\u4f7f\u7528\u4e86\uff0c\u7ebf\u7a0b\u5c31\u4f1a\u7ade\u4e89\u4e00\u4e2a\u63d2\u69fd-\u6dfb\u52a0\u66f4\u591a\u7684\u7ebf\u7a0b\u4e0d\u4f1a\u6d88\u8017\u66f4\u591a\u7684\u7535\u529b(\u4f46\u5b83\u662f\u7ebf\u6027\u7684\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u65b0\u7ebf\u7a0b\u90fd\u4f1a\u5360\u7528\u73b0\u6709\u7ebf\u7a0b\u7684\u65f6\u95f4)\u3002\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u6258\u7ba1\u60a8\u81ea\u5df1\u7684\u786c\u4ef6\u7684\u4e00\u4e2a\u4e3b\u8981\u9690\u85cf\u4f18\u52bf\u662f\uff0c\u5b83\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u914d\u7f6eBIOS\u4ee5\u6ee1\u8db3\u60a8\u81ea\u5df1\u7684\u9700\u6c42\uff0c\u5728\u6211\u4eec\u7684\u7279\u5b9a\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u66f4\u6539\u5c31\u662f\u4e00\u5207\u3002\n\u8d2d\u4e70\u529f\u80fd\u5f3a\u5927\u7684\u670d\u52a1\u5668\u4ef7\u683c\u4f4e\u5f97\u60ca\u4eba(\u53ea\u8981\u60a8\u6258\u7ba1\u7684\u662f\u60a8\u81ea\u5df1\u7684\u786c\u4ef6)\u3002\n\u5e76\u4e0d\u662f\u6240\u6709\u7684EC2\u865a\u62dfCPU\u90fd\u662f\u76f8\u540c\u7684\uff0c\u800c\u4e14\u5b83\u4eec\u90fd\u4e0d\u50cf\u60a8\u81ea\u5df1\u6258\u7ba1\u7684\u5b9e\u9645CPU\u90a3\u6837\u5f3a\u5927\u3002\n\u6240\u6709\u8fd9\u4e9b\u6d4b\u8bd5\u90fd\u662f\u5728Meltdown\u548cSpectre\u4e4b\u524d\u5b8c\u6210\u7684\uff0c\u6240\u4ee5\u6211\u4e0d\u786e\u5b9a\u8fd9\u9879\u6d4b\u8bd5\u7684\u6027\u80fd\u4f1a\u53d7\u5230\u4ec0\u4e48\u5f71\u54cd\u3002\u201c\u6211\u4eec\u73b0\u5728\u6b63\u5728\u8fdb\u884c\u8fd9\u4e9b\u6d4b\u8bd5\uff0c\u5982\u679c\u6709\u4eba\u611f\u5174\u8da3\uff0c\u6211\u4f1a\u5199\u4e0b\u6765\u5206\u4eab\u7ed3\u679c\u3002\u201d\u65e9\u671f\u8ff9\u8c61\u663e\u793a\uff0c\u6027\u80fd\u5927\u7ea6\u4f1a\u4e0b\u964d2.5%\uff0c\u4f46\u8fd8\u6709\u66f4\u591a\u7684\u5de5\u4f5c\u8981\u505a\u3002\n\u6b64\u5916\uff0c\u867d\u7136\u8fd9\u9879\u6d4b\u8bd5\u7684\u91cd\u70b9\u662f\u8bfb\u53d6\u6027\u80fd\uff0c\u4f46\u6211\u5e94\u8be5\u63d0\u4e00\u4e0bSQLite\u4e5f\u6709\u51fa\u8272\u7684\u5199\u5165\u6027\u80fd\u3002*\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSQLite\u4f7f\u7528\u6570\u636e\u5e93\u7ea7\u9501\u5b9a(\u6700\u5c0f\u5e76\u53d1)\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u201c\u5f00\u7bb1\u5373\u7528\u201d\u7684\u9009\u9879\u6765\u4f7fWAL\u6a21\u5f0f\u83b7\u5f97\u51fa\u8272\u7684\u8bfb\u53d6\u5e76\u53d1\u6027--\u5982\u6b64\u6d4b\u8bd5\u6240\u793a\u3002\u4f46\u662f\u4e0d\u592a\u4e3a\u4eba\u6240\u77e5\u7684\u662f\uff0cSQLite\u6709\u4e00\u4e2a\u5206\u652f\u5177\u6709\u9875\u9762\u9501\u5b9a\uff0c\u8fd9\u53ef\u4ee5\u5b9e\u73b0\u51fa\u8272\u7684\u5e76\u53d1\u5199\u5165\u6027\u80fd\u3002\u5982\u679c\u60a8\u8054\u7cfbSQLite\u4eba\u5458\uff0c\u6211\u76f8\u4fe1\u4ed6\u4eec\u4f1a\u544a\u8bc9\u60a8\u66f4\u591a\uff01", "note_en": "Expensify has an unusual technology stack in many ways.\u00a0 For example, we don\u2019t use DNS internally \u2014 just configuration-managed /etc/hosts files \u2014 and it works  great.\u00a0 Similarly, we only make limited use of AWS \u2014 instead hosting our own hardware for the web and database layer \u2014 and it works\u00a0 great.\u00a0 But most surprising of all is that we don\u2019t use MySQL or Postgres \u2014 instead using none other than SQLite \u2014 and it works \u00a0great.\n Granted, it\u2019s not SQLite by itself.\u00a0 We\u2019ve wrapped it in a custom distributed transaction layer named Bedrock, which is open sourced and available here:  www.bedrockdb.com.\u00a0 It\u2019s not just the workhorse behind our core database, but also powers our mission-critical  job queue, and provides a locally-hosted  replicated caching layer.\u00a0 The more important the function, the more it depends on Bedrock.\n Accordingly, given the  explosive growth of 2017, upgrading the servers that power Bedrock has been a top priority \u2014 along with upgrading Bedrock (and with the help of incredible the SQLite team, SQLite itself) to take advantage of all that hardware.\u00a0 To that end we\u2019re just about to roll out an entirely new generation of self-hosted hardware with the following basic specs:\n  This is a monster server, nearly the biggest that is possible to buy that runs on a stock Linux kernel (without getting into \u201csupercomputer\u201d territory), and we\u2019re getting a bunch of them.\u00a0 But hardware alone isn\u2019t enough.\u00a0 To be clear, the above specs would be pointless for most databases, as almost nothing scales to handle this kind of hardware well \u2014 and almost nobody tries.\n  The traditional wisdom is that you should always build \u201cout\u201d not \u201cup\u201d, meaning it\u2019s better to have a large number of small servers than a relatively small number of large servers.\u00a0 Most companies will \u201cshard\u201d their data into separate servers, such as to put 1000 customers on each server \u2014 and then just route each customer to the right server when they sign in.\u00a0 That design works super well for many applications, and means you never need to learn how to manage a big database \u2014 just a lot of small databases.\n Expensify is a bit different in that there is no sharding \u2014 and no clear \u201cfaultline\u201d on which to do it.\u00a0 Every single user can share expenses with every single other user, regardless of where they work.\u00a0 This is a critical feature that enables us to offer such good support for large accounting firms that manage hundreds or even thousands of clients: when a company takes on a firm, we want to give that firm access to that company\u2019s data, without needing to migrate the company onto the same server the accounting firm is already on.\n Said another way, as an accountant, your Expensify \u201cInbox\u201d shows you everything you need to do aggregated across all your clients simultaneously, without needing to \u201cswitch\u201d from one client to the next to see if anything needs to be done for each.\u00a0 Sure, there are other ways to do it even if you do shard.\u00a0 But the lack of sharding makes this, and a bunch of other similar kinds of multi-client processing, super easy.\n  Obviously, SQLite was never designed to do anything like this.\u00a0 But that doesn\u2019t change the fact that it does this incredibly well, albeit with a few modifications created by SQLite over the years at our request (we are a very enthusiastic sponsor of the  SQLite Consortium, and they\u2019ve been a tremendous help).\u00a0 The modifications are open source and available to anyone (just ask them and I\u2019m sure they\u2019ll hook you up), and are largely out of scope of this post, but consist of (if I can remember them all):\n Disable Posix advisory locks.\u00a0 This prevents you from accessing the same database from an external process (eg, from the command line tool) while the database is running, but that is acceptable for our use.\n  Disable the malloc() global lock (I don\u2019t remember why this was there, but apparently not needed for our case)\n In other words, the core design of SQLite was pretty much on point.\u00a0 I don\u2019t think people realize how incredible a tool it is.\u00a0 Rather, most of the effort into optimizing the performance of the system came down to optimizing the BIOS and kernel power settings to eliminate extraneous memory access (eg, disable prefetching) and prevent CPUs self-throttling to conserve power.\n  There\u2019s a general conception that EC2 is faster, cheaper, and easier than hosting your own hardware.\u00a0 Maybe I\u2019m old school, but I\u2019ve never quite subscribed to that notion.\u00a0 The best price you can possibly get on an EC2 server is to prepay for a year with a 3 year commitment, but the price you still pay on day one is\u00a0 equal to the cost of the hardware.\u00a0 Because think of it: Amazon isn\u2019t going to take a chance on you, so they\u2019re not going to buy hardware for you unless they get paid up front, and are confident they\u2019ll get paid back many times more.\u00a0 So you are out the same amount of cash, for the same hardware, except rather than getting five years of solid use \u2014 you need to pay that same amount of money 5 more times (because unlike phones, server hardware doesn\u2019t turn into a pumpkin after 3 years).\u00a0 EC2 comes at an astonishing premium \u2014 perhaps 3-10x the actual hardware cost \u2014 which is fine if you value the convenience that much.\u00a0 But what\u2019s less known is that it also comes at an enormous performance penalty.\n At the time of this writing, the largest EC2 instance you can possibly buy is the\u00a0x1e.32xlarge, with 128 \u201cvCPUs\u201d and 4TB of RAM.\u00a0 It costs $26.688 per hour, meaning $233K/yr \u2014 for a single server.\u00a0 (If you commit to 3 years and prepay for 1, you can get it for \u201conly\u201d $350K for 3 years.)\u00a0 Here\u2019s how that server compares to what you can host yourself at a fraction of both the up front and ongoing cost:\n  The vertical axis shows the total number of Queries Per Second, and the horizontal axis shows how many threads are being used to get that datapoint.\u00a0 The test is run for 100s for each thread count configuration (eg, 100s with 1 thread, 100s with 2 threads, etc), and the fastest individual second is used as the result.\u00a0 (This is important as it can take a while for the the CPU caches to \u201cwarm up\u201d and this filters out the artificially slow samples.)\u00a0 The full performance test can be found on  GitHub here.\n The query itself just sums a range of 10 rows randomly located inside 10B row (447GB) two column database of random integers, one of which is indexed and the other not.\u00a0 This means that the test is fully cached in RAM, and the database is precached prior to the test.\u00a0 No writes are done during this test, only reads.\u00a0 Each thread is NUMA aware, meaning all its local memory access is done inside a local memory node, and the database itself is split between the NUMA nodes (though contrary to expectation, NUMA awareness doesn\u2019t actually matter much for this test).\u00a0 Everything is done on a stock 16.04 Ubuntu install.\n The orange line shows total aggregate performance of the EC2 box capping out around 1.5M queries per second.\u00a0 The blue line shows the same test on a \u201cbare metal\u201d machine, which gets upwards of 4M queries per second and keeps on climbing for the duration of the test.\u00a0 (I only care about 192 threads for the purpose of my test so I didn\u2019t worry about going higher.)\u00a0 The red line shows the same test, but for a 30B row table (1.3TB) \u2014 larger than the physical RAM of the bare metal machine.\n  First, wow.\u00a0 This is a ton of horsepower.\u00a0 4M queries per second from a single server is nothing to sneeze at, even recognizing that it\u2019s a pretty artificial query to be testing.\u00a0 (If you test \u201cSELECT 1;\u201d it gets about 160M queries per second, but that\u2019s even more artificial.)\n Second, SQLite scales amazingly, almost out of the box.\u00a0 This test achieves almost perfect linear scalability as we add physical CPUs, and hyperthreading works much better than I expected in eeking out extra capacity after that.\n But third, wtf is wrong with EC2?\u00a0 I really assumed 1 vCPU was roughly equal to 1 physical CPU, but man is that wrong.\u00a0 That is really highlighted here:\n  This is the same basic chart, but this time showing the average performance of each thread, and how that performance changes with thread count.\u00a0 The blue line shows pretty much what I\u2019d expect: per-thread performance stays stable (remarkably so) as new physical cores are activated, but starts to drop as we hit hyperthreading territory.\u00a0 In fact, this is scaling far more linearly than I expected, as the test is designed in such a way to ensure each CPU is accessing remote RAM 87.5% of the time.\u00a0 This means it\u2019s pretty much a worst-case scenario in terms of NUMA access, but it doesn\u2019t seem to degrade the performance of the test much at all.\u00a0 Looks like Intel can do something right, and Purley\u2019s new memory architecture is pretty solid!\n Additionally, the red line shows that even when 25% of the reads go to disk, it has a negligible impact on total performance.\u00a0 I attribute this to the crazy fast access of NVME SSD drives \u2014 again, much better than expected.\n But the orange line shows that each new thread on the EC2 box comes at a substantial penalty to the others.\u00a0 First, this chart shows pretty obviously that 128 \u201cvirtual CPUs\u201d actually means 64 physical CPUs + hyperthreading.\u00a0 That\u2019s pretty disappointing and misleading, as I really assumed every vCPU was implied to be equal performance.\n More importantly, however, is the curve of that orange line itself.\u00a0 This is easier to see when the test is re-run after replacing the 10-billion row database with a single-row database, to remove memory access from the equation:\n  (Please excuse the jagged data, this was run with a shorter period per sample and thus is a bit more noisy, but it gets the point across.)\n The blue line shows QPS per thread on the bare machine as new threads are added, and as you would expect, it gets perfect linear scalability up to 192 physical cores, and then linearly drops off as hyperthreading comes into play.\n The red line is the EC2 box, and performance degrades even before hitting 64 physical cores, but then drops off precipitously after that.\u00a0 Even worse, the curve of that line signals that it\u2019s not memory access slowing things down \u2014 it\u2019s power throttling.\u00a0 Once you get over 64 cores and start hyperthreading, the power consumed by each CPU goes up.\u00a0 But clearly EC2 has configured things in some kind of \u201cbalanced\u201d performance profile, which means the clock speed of the CPU is reduced when the total power consumption gets too high \u2014 thereby limiting power consumption at the expense of performance.\n This results in a curved performance-per-thread-count profile, which levels off into a linear downward slope at 128 threads because that\u2019s the point at which all the 128 CPUs are in use.\u00a0 Once all CPUs are used, threads just compete for a slot \u2014 and adding more threads doesn\u2019t consume any more power (but it\u2019s linear because each new thread takes time away from the existing threads).\n It turns out a major hidden advantage of hosting your own hardware is it means you can configure the BIOS to suit your own needs, and in our particular case those changes were everything.\n   Crazy powerful servers are surprisingly cheap to buy (so long as you are hosting your own hardware)\n   Not all EC2 virtual CPUs are the same, and none of them are remotely as powerful as an actual CPU you host yourself\n  All this testing was done before Meltdown and Spectre, so I\u2019m not sure how the performance of this test will be impacted.\u00a0 We\u2019re running those tests now, and if anybody is interested, I\u2019ll write up and share the results.\u00a0 Early indications suggest about a 2.5% reduction in performance, but more work remains to be done.\n Additionally, though this test was focused on read performance, I should mention that SQLite has fantastic write performance as well.\u00a0 By default SQLite uses database-level locking (minimal concurrency), and there is an \u201cout of the box\u201d option to enable WAL mode to get fantastic read concurrency \u2014 as shown by this test.\u00a0 But lesser known is that there is a branch of SQLite that has\u00a0 page locking, which enables for fantastic concurrent write performance.\u00a0 Reach out to the SQLite folks and I\u2019m sure they\u2019ll tell you more!", "posttime": "2020-05-05 19:38:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "sqlite,\u670d\u52a1\u5668,single,\u6027\u80fd,performance", "title": "\u5728\u5355\u53f0\u670d\u52a1\u5668\u4e0a\u5c06SQLite\u6269\u5c55\u52304M QPS(EC2\u4e0e\u88f8\u673a)", "title_en": "Scaling SQLite to 4M QPS on a Single Server (EC2 vs. Bare Metal)", "transed": 1, "url": "https://blog.expensify.com/2018/01/08/scaling-sqlite-to-4m-qps-on-a-single-server/", "via": "", "real_tags": ["sqlite", "\u670d\u52a1\u5668", "single", "\u6027\u80fd"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000733, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5df4\u5c14\u7684\u6469\u8b66\u65b9\u5907\u53d7\u4e89\u8bae\u7684\u7a7a\u4e2d\u4fa6\u5bdf\u673a\u5468\u4e94\u5f00\u59cb\u98de\u884c\uff0c\u8bb0\u5f55\u57ce\u5e02\u4e2d\u6bcf\u4e2a\u4eba\u5728\u767d\u5929\u7684\u884c\u52a8\u3002\u8fd9\u662f\u8fd9\u4e2a\u9879\u76ee\u5728\u5df4\u5c14\u7684\u6469\u7684\u7b2c\u4e8c\u6b21\u751f\u547d\u3002\u5b83\u4e8e2016\u5e74\u5728\u5f53\u65f6\u7684\u4e13\u5458\u51ef\u6587\u00b7\u6234\u7ef4\u65af(Kevin Davis)\u7684\u9886\u5bfc\u4e0b\u9996\u6b21\u79d8\u5bc6\u8fd0\u8425\u3002\u73b0\u5728\uff0c\u5b83\u53d8\u5f97\u66f4\u52a0\u516c\u5f00\u4e86\uff0c\u4f46\u4e89\u8bba\u4ecd\u7136\u5b58\u5728\uff1a\u8fd9\u662f\u4fb5\u72af\u9690\u79c1\u8fd8\u662f\u6709\u6548\u7684\u6253\u51fb\u72af\u7f6a\u7684\u5de5\u5177\uff1f\u4f60\u4e0d\u80fd\u771f\u6b63\u770b\u5230\u8fd9\u4e00\u70b9\uff0c\u4f46\u79c1\u4eba\u8d44\u52a9\u7684\u4fa6\u5bdf\u673a\u6b63\u5728\u98de\u884c\u3002\u8fd9\u662f\u4e00\u79cd\u4fb5\u72af\u9690\u79c1\u7684\u884c\u4e3a\uff0c\u8fd8\u662f\u4e00\u79cd\u6709\u6548\u7684\u6253\u51fb\u72af\u7f6a\u7684\u5de5\u5177\uff1f\u4f60\u4e0d\u80fd\u771f\u6b63\u770b\u5230\u8fd9\u4e00\u70b9\uff0c\u4f46\u8fd9\u67b6\u79c1\u4eba\u8d44\u52a9\u7684\u4fa6\u5bdf\u673a\u6b63\u5728\u98de\u884c\u3002\u8be5\u9879\u76ee\u540d\u4e3a\u7a7a\u4e2d\u8c03\u67e5\u7814\u7a76(AIR)\u8bd5\u70b9\u9879\u76ee\uff0c\u7531\u4fc4\u4ea5\u4fc4\u5dde\u4e00\u5bb6\u516c\u53f8\u8fd0\u8425\uff0c\u8d39\u7528\u7531\u5fb7\u514b\u8428\u65af\u5dde\u7684\u4e00\u4f4d\u4ebf\u4e07\u5bcc\u7fc1\u652f\u4ed8\u3002\u5468\u4e94\u4e0b\u5348\uff0c\u8b66\u5bdf\u5c40\u957f\u8fc8\u514b\u5c14\u00b7\u54c8\u91cc\u68ee\u544a\u8bc911News I-Team\uff0c\u4ed6\u6b63\u5728\u63a7\u5236\u4eba\u4eec\u7684\u671f\u671b\u3002\u6211\u5bf9\u6b64\u6ca1\u6709\u4ec0\u4e48\u671f\u671b\uff0c\u6211\u4f1a\u6301\u5f00\u653e\u6001\u5ea6\uff0c\u8ba9\u6570\u636e\u6765\u8bf4\u660e\u95ee\u9898\u3002\u4e0e\u5176\u8bf4\u6211\u6709\u4ec0\u4e48\u770b\u6cd5\u6216\u671f\u671b\uff0c\u4e0d\u5982\u8bf4\u6211\u4e0d\u60f3\u62b1\u592a\u5927\u5e0c\u671b\uff0c\u4e5f\u4e0d\u60f3\u8ba9\u4efb\u4f55\u4eba\u62b1\u592a\u5927\u5e0c\u671b\u3002\u4f46\u54c8\u91cc\u68ee\u8bf4\uff0c\u8ba9\u6211\u4eec\u628a\u8fd9\u770b\u4f5c\u662f\u4e00\u9879\u5b9e\u9a8c\uff0c\u8be5\u9879\u76ee\u5c06\u8bd5\u884c6\u4e2a\u6708\u3002\u8be5\u5408\u540c\u5c06\u76d1\u89c6\u7684\u91cd\u70b9\u7f29\u5c0f\u5230\u67aa\u51fb\u3001\u51f6\u6740\u3001\u62a2\u52ab\u548c\u52ab\u8f66\uff0c\u56fe\u50cf\u50a8\u5b5845\u5929\uff0c\u53ea\u80fd\u7528\u4e8e\u5211\u4e8b\u8c03\u67e5\u3002\u4e3a\u4e86\u8bc4\u4f30\u8be5\u9879\u76ee\u7684\u6709\u6548\u6027\uff0c\u5c06\u8fdb\u884c\u4e00\u9879\u72ec\u7acb\u5ba1\u8ba1\u3002\u8be5\u9879\u76ee\u7684\u603b\u9884\u7b97\u4e3a3690667\u7f8e\u5143\uff0c\u5168\u90e8\u7531\u79c1\u4eba\u652f\u4ed8\u3002\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df(American Civil Liberties Union)\u5728\u7ef4\u6301\u8be5\u9879\u76ee\u7684\u8bc9\u8bbc\u4e2d\u8d25\u8bc9\uff0c\u4f46\u8be5\u7ec4\u7ec7\u5df2\u7ecf\u63d0\u8d77\u4e0a\u8bc9\u3002\u9a6c\u91cc\u5170\u5ddeACLU\u7684\u5f8b\u5e08\u5927\u536b\u00b7\u7f57\u5361\u8bf4\uff0c\u8fd9\u662f\u7f8e\u56fd\u5386\u53f2\u4e0a\u5bf9\u7f8e\u56fd\u57ce\u5e02\u5b9e\u65bd\u7684\u6700\u5168\u9762\u7684\u76d1\u63a7\u3002(\u6ce8\uff1a\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df(ACLU)\u5f8b\u5e08\u5927\u536b\u00b7\u7f57\u5361(David Rocah)\u8868\u793a\uff0c\u8be5\u9879\u76ee\u7684\u603b\u9884\u7b97\u4e3a3690667\u7f8e\u5143\uff0c\u5168\u90e8\u7531\u79c1\u4eba\u652f\u4ed8\u3002)\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df(American Civil Liberties Union)\u5728\u7ef4\u6301\u8be5\u9879\u76ee\u7684\u8bc9\u8bbc\u4e2d\u8d25\u8bc9\uff0c\u4f46\u8be5\u7ec4\u7ec7\u5df2\u7ecf\u4e0a\u8bc9\u3002\u8fd9\u662f\u7f8e\u56fd\u5386\u53f2\u4e0a\u5bf9\u7f8e\u56fd\u57ce\u5e02\u5b9e\u65bd\u7684\u6700\u5168\u9762\u7684\u76d1\u63a7\u3002\u8fd9\u5b9e\u9645\u4e0a\u76f8\u5f53\u4e8e\u8ba9\u4e00\u540d\u8b66\u5bdf\u5728\u5c45\u6c11\u6bcf\u6b21\u51fa\u95e8\u65f6\u90fd\u8ddf\u7740\u4ed6\u4eec\uff0c\u5982\u679c\u8fd9\u53d1\u751f\u5728\u73b0\u5b9e\u751f\u6d3b\u4e2d\uff0c\u6211\u4eec\u6240\u6709\u4eba\u90fd\u4f1a\u7406\u89e3\u8fd9\u6837\u505a\u5bf9\u9690\u79c1\u7684\u5de8\u5927\u5f71\u54cd\u3002\u54c8\u91cc\u68ee\u8ba4\u4e3a\u6ca1\u6709\u9690\u79c1\u95ee\u9898\u3002\u5728\u516c\u5171\u8857\u9053\u4e0a\uff0c\u4eba\u884c\u9053\u4e0a\u6ca1\u6709\u9690\u79c1\u53ef\u8a00\u3002\u54c8\u91cc\u68ee\u8bf4\uff0c\u5b83\u4e0d\u80fd\u5728\u79c1\u4eba\u573a\u6240\u6216\u5899\u5916\u62cd\u6444\uff0c\u800c\u4e14\u5f53\u4f60\u5728\u6237\u5916\u65f6\uff0c\u4e5f\u4e0d\u80fd\u671f\u671b\u9690\u79c1\u3002\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df\u8868\u793a\uff0c\u8054\u90a6\u4e0a\u8bc9\u6cd5\u9662\u5df2\u7ecf\u540c\u610f\u52a0\u5feb\u4e0a\u8bc9\u901f\u5ea6\uff0c\u4e89\u8bba\u53ef\u80fd\u4f1a\u5728\u4eca\u5e74\u590f\u5929\u8fdb\u884c\u542c\u8bc1\u3002||\u9605\u8bfb\uff1aBPD\u4fa6\u5bdf\u673a\u4e13\u4e1a\u670d\u52a1\u534f\u8bae\u5907\u5fd8\u5f55||", "note_en": "The controversial aerial surveillance planes for Baltimore police started flying Friday, recording movements of everyone in the city during the day.This is the second life of this program in Baltimore. It first operated in secret in 2016 under then-Commissioner Kevin Davis. Now, it&#39;s more public, but the debate remains the same: Is it an invasion of privacy or an effective crime-fighting tool?You can&#39;t really see it, but the privately funded surveillance plane is flying. It&#39;s called the Aerial Investigation Research (AIR) Pilot Program, and it&#39;s operated by an Ohio-based company and is paid for by a Texas billionaire.Police Commissioner Michael Harrison told the 11 News I-Team Friday afternoon that he&#39;s keeping expectations in check.&#34;I don&#39;t have an expectation, and I am going into this with an open mind and let the data speak for itself. And rather than have an opinion or an expectation, I don&#39;t want to get my hopes up or anybody&#39;s hopes up. But let&#39;s look at this as an experiment,&#34; Harrison said.The program will operate on a trial basis for six months. The contract narrows the focus of the surveillance to shootings, homicides, robberies and carjackings.Images are stored for 45 days and can be used only for criminal investigation. An independent audit will be done to evaluate the program&#39;s effectiveness.The total budget for the program is $3,690,667 -- all of it paid for privately.The American Civil Liberties Union lost a court battle to keep the program grounded, but the organization has already appealed.&#34;It&#39;s the most comprehensive surveillance ever imposed on an American city in the history of the country,&#34; ACLU of Maryland attorney David Rocah said. &#34;It&#39;s the virtual equivalent of having a police officer follow a resident every time they walk out the door, and if that happened in real life, all of us would understand the huge privacy implications in doing that.&#34;Harrison sees no privacy concern.There is no expectation of privacy on a public street, a sidewalk. It can&#39;t film inside private places or beyond walls, and while you are outside, there is no expectation of privacy,&#34; Harrison said.The ACLU said the federal appeals court has agreed to expedite the appeal, and arguments could be heard over the summer.|| Read: BPD surveillance plane professional service agreement memo ||", "posttime": "2020-05-05 19:27:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5df4\u5c14\u7684\u6469,plane,\u9879\u76ee,surveillance", "title": "\u4e00\u67b6\u4fa6\u5bdf\u673a\u5f00\u59cb\u5728\u5df4\u5c14\u7684\u6469\u4e0a\u7a7a\u98de\u884c\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u4eba\u7684\u884c\u52a8", "title_en": "Surveillance plane starts flying over Baltimore, recording everyone's movements", "transed": 1, "url": "https://www.wbaltv.com/article/baltimore-police-surveillance-plane-starts-flying-recording-everyones-movements/32346318", "via": "", "real_tags": ["\u5df4\u5c14\u7684\u6469", "plane", "\u9879\u76ee"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000732, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "NVIDIA\u57282006\u5e74\u53d1\u5e03\u7684\u7edf\u4e00\u7279\u65af\u62c9\u67b6\u6784\u89e3\u51b3\u4e86\u65e5\u76ca\u590d\u6742\u7684\u95ee\u9898\u3002\u5728G80\u6a21\u5177\u4e2d\uff0c\u5c42\u4e0e\u5c42\u4e4b\u95f4\u6ca1\u6709\u66f4\u591a\u7684\u533a\u522b\u3002\u6d41\u591a\u5904\u7406\u5668(SM)\u53d6\u4ee3\u4e86\u6240\u6709\u4ee5\u524d\u7684\u5355\u5143\uff0c\u8fd9\u8981\u5f52\u529f\u4e8e\u5b83\u80fd\u591f\u65e0\u5dee\u522b\u5730\u8fd0\u884c\u9876\u70b9\u3001\u788e\u7247\u548c\u51e0\u4f55\u4f53\u5185\u6838(kernel&#34\uff1bkernel)\u3002\u6839\u636e\u6d41\u6c34\u7ebf\u7684\u9700\u8981\uff0c\u901a\u8fc7\u4ea4\u6362\u6bcf\u4e2aSM\u8fd0\u884c\u7684\u5185\u6838\u81ea\u52a8\u5b9e\u73b0\u8d1f\u8f7d\u5e73\u8861\u3002\u6211\u4eec\u51e0\u4e4e\u4eceNV30/NV40\u4e2d\u4e22\u5f03\u4e86\u6574\u4e2a\u7740\u8272\u5668\u67b6\u6784\uff0c\u5e76\u4f7f\u7528\u65b0\u7684\u901a\u7528\u5904\u7406\u5668\u67b6\u6784(SIMT)\u4ece\u5934\u5f00\u59cb\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u7740\u8272\u5668\u67b6\u6784\uff0c\u8fd9\u4e5f\u5f15\u5165\u4e86\u65b0\u7684\u5904\u7406\u5668\u8bbe\u8ba1\u65b9\u6cd5\u3002\n\u4e0d\u518d\u652f\u6301SIMD\uff0c\u7740\u8272\u5668\u5355\u5143\u73b0\u5728\u6bcf\u4e2a\u65f6\u949f\u53ef\u4ee5\u5904\u7406\u4e00\u4e2a\u6574\u6570\u6216\u4e00\u4e2a\u6d6e\u70b932\u6307\u4ee4\u3002SM\u63a5\u6536\u4ee532\u6761\u4e3a\u4e00\u7ec4\u7684\u79f0\u4e3a\u7ecf\u7eb1\u7684\u7ebf\u7a0b\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0cWARP\u4e2d\u7684\u6240\u6709\u7ebf\u7a0b\u5c06\u540c\u65f6\u6267\u884c\u76f8\u540c\u7684\u6307\u4ee4\uff0c\u53ea\u662f\u9488\u5bf9\u4e0d\u540c\u7684\u6570\u636e(\u56e0\u6b64\u79f0\u4e3aSIMT)\u3002\u591a\u7ebf\u7a0b\u6307\u4ee4\u5355\u5143(MT)\u8d1f\u8d23\u542f\u7528/\u7981\u7528WARP\u4e2d\u7684\u7ebf\u7a0b\uff0c\u4ee5\u9632\u5b83\u4eec\u7684\u6307\u4ee4\u6307\u9488(IP)\u805a\u5408/\u53d1\u6563\u3002\u8fd9\u91cc\u6709\u4e24\u4e2aSFU\u5355\u5143\u6765\u5e2e\u52a9\u8fdb\u884c\u590d\u6742\u7684\u6570\u5b66\u8ba1\u7b97\uff0c\u5982\u5e73\u65b9\u6839\u53cd\u6bd4\u3001sin\u3001cos\u3001exp\u548crcp\u3002\u8fd9\u4e9b\u5355\u5143\u4e5f\u80fd\u591f\u5728\u6bcf\u4e2a\u65f6\u949f\u6267\u884c\u4e00\u6761\u6307\u4ee4\uff0c\u4f46\u662f\u56e0\u4e3a\u5b83\u4eec\u53ea\u6709\u4e24\u6761\uff0c\u6240\u4ee5WARP\u6267\u884c\u901f\u5ea6\u9664\u4ee54\u3002Float64\u6ca1\u6709\u786c\u4ef6\u652f\u6301\uff0c\u5b83\u662f\u7531\u8f6f\u4ef6\u5b8c\u6210\u7684\uff0c\u6781\u5927\u5730\u5f71\u54cd\u4e86\u6267\u884c\u901f\u5ea6\u3002\u5f53SM\u53ef\u4ee5\u901a\u8fc7\u59cb\u7ec8\u5177\u6709\u53ef\u8c03\u5ea6\u7684Warps\u6765\u9690\u85cf\u5185\u5b58\u5ef6\u8fdf\u65f6\uff0c\u800c\u4e14\u5f53Warp\u4e2d\u7684\u7ebf\u7a0b\u6ca1\u6709\u5206\u6b67\u65f6(\u63a7\u5236\u6d41\u5c06\u5b83\u4eec\u4fdd\u6301\u5728\u76f8\u540c\u7684\u6307\u4ee4\u8def\u5f84\u4e0a)\uff0cSM\u5c06\u4ee5\u5176\u6700\u5927\u6f5c\u529b\u6267\u884c\u30024KiB\u5bc4\u5b58\u5668\u6587\u4ef6(RF)\u662f\u5b58\u50a8\u7ebf\u7a0b\u72b6\u6001\u7684\u4f4d\u7f6e\u3002\u6d88\u8017\u592a\u591a\u5806\u6808\u7684\u7ebf\u7a0b\u4f1a\u51cf\u5c11\u53ef\u4ee5\u4fdd\u6301\u8fd0\u884c\u7684\u7ebf\u7a0b\u6570\u91cf\uff0c\u5e76\u4f1a\u964d\u4f4e\u6027\u80fd\u3002\u7279\u65af\u62c9\u7684\u65d7\u8230\u82af\u7247\u662f90\u7eb3\u7c73\u7684G80\uff0c\u5728GeForce 8800GTX\u4e2d\u5177\u6709\u7279\u8272\u3002\u4e24\u4e2aSMS\u4e0e\u7eb9\u7406\u5355\u5143\u548cTeX L1\u9ad8\u901f\u7f13\u5b58\u4e00\u8d77\u6346\u7ed1\u5230\u7eb9\u7406\u5904\u7406\u5668\u96c6\u7fa4(TPC)\u4e2d\u3002\u57288TPC\u7684\u60c5\u51b5\u4e0b\uff0cG80\u516c\u5e03\u4e86128\u4e2a\u5185\u6838\uff0c\u751f\u6210\u4e86345.6\u4e2aGflop[3]\u30028800GTX\u5361\u5728\u5f53\u65f6\u975e\u5e38\u53d7\u6b22\u8fce\uff0c\u6536\u5230\u4e86\u6781\u597d\u7684\u8bc4\u8bba\uff0c\u53d7\u5230\u4e86\u8d1f\u62c5\u5f97\u8d77\u7684\u5ba2\u6237\u7684\u559c\u7231\u3002\u5b83\u662f\u5982\u6b64\u5f3a\u5927\uff0c\u4ee5\u81f3\u4e8e\u5728\u53d1\u5e0313\u4e2a\u6708\u540e\uff0c\u5b83\u4ecd\u7136\u662f\u5e02\u573a\u4e0a\u901f\u5ea6\u6700\u5feb\u7684GPU\u4e4b\u4e00\u3002\u4e0e\u7279\u65af\u62c9\u4e00\u8d77\uff0cNVIDIA\u63a8\u51fa\u4e86\u8ba1\u7b97\u7edf\u4e00\u8bbe\u5907\u67b6\u6784(CUDA)C\u7f16\u7a0b\u8bed\u8a00\uff0c\u8fd9\u662fC99\u7684\u8d85\u96c6\u3002\u8fd9\u8ba9GPGPU\u7231\u597d\u8005\u677e\u4e86\u4e00\u53e3\u6c14\uff0c\u4ed6\u4eec\u6b22\u8fce\u7528GLSL\u7740\u8272\u5668\u548c\u7eb9\u7406\u6b3a\u9a97GPU\u7684\u53e6\u4e00\u79cd\u9009\u62e9\u3002\u5c3d\u7ba1\u672c\u8282\u5e7f\u6cdb\u5173\u6ce8SM\uff0c\u4f46\u5b83\u53ea\u662f\u7cfb\u7edf\u7684\u4e00\u534a\u3002SM\u9700\u8981\u63d0\u4f9b\u9a7b\u7559\u5728GPU\u5b58\u50a8\u5668\u4e2d\u7684\u6307\u4ee4\u548c\u6570\u636e\u3002\u4e3a\u4e86\u907f\u514d\u505c\u6ede\uff0cGPU\u4e0d\u4f1a\u50cfCPU\u90a3\u6837\u8bd5\u56fe\u907f\u514d\u5e26\u6709\u5927\u91cf\u7f13\u5b58\u548c\u6295\u673a\u7684\u5185\u5b58\u65c5\u884c\u3002GPU\u901a\u8fc7\u4f7f\u5185\u5b58\u603b\u7ebf\u9971\u548c\u6765\u6ee1\u8db3\u6570\u4ee5\u5343\u8ba1\u7684\u7ebf\u7a0bI/O\u6765\u5b9e\u73b0\u5ef6\u8fdf\u3002\u4e3a\u6b64\uff0c\u50cfG80\u8fd9\u6837\u7684\u82af\u7247\u901a\u8fc7\u516d\u6761\u53cc\u5411DRAM\u5b58\u50a8\u7ebf\u5b9e\u73b0\u4e86\u9ad8\u5185\u5b58\u541e\u5410\u91cf\u3002\n\u7279\u65af\u62c9\u662f\u4e00\u4e2a\u5192\u9669\u7684\u4e3e\u52a8\uff0c\u7ed3\u679c\u8bc1\u660e\u662f\u4e00\u4ef6\u975e\u5e38\u597d\u7684\u4e8b\u60c5\u3002\u5b83\u975e\u5e38\u6210\u529f\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u4e8c\u5341\u5e74\u91cc\u6210\u4e3a\u4e86NVIDIA\u56fe\u5f62\u5904\u7406\u5668\u7684\u57fa\u7840\u3002\u867d\u7136\u4ece\u90a3\u65f6\u8d77\u6211\u4eec\u786e\u5b9e\u8fdb\u884c\u4e86\u91cd\u5927\u7684\u67b6\u6784\u66f4\u6539(\u8d39\u7c73\u662f\u4e00\u4e2a\u91cd\u5927\u7684\u7cfb\u7edf\u67b6\u6784\u66f4\u6539\uff0cMaxwell\u662f\u5904\u7406\u5668\u8bbe\u8ba1\u7684\u53e6\u4e00\u4e2a\u91cd\u5927\u66f4\u6539)\uff0c\u4f46\u6211\u4eec\u5728G80\u4e2d\u5f15\u5165\u7684\u57fa\u672c\u7ed3\u6784\u81f3\u4eca\u4ecd\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4fdd\u7559\u7740[Pascal]\u3002\n2010\u5e74\uff0cNVIDIA\u53d1\u5e03\u4e86\u57fa\u4e8e\u5176\u5168\u65b0\u8d39\u7c73\u67b6\u6784\u7684GF100\u3002\u4ed6\u4eec\u6700\u65b0\u82af\u7247\u7684\u5185\u90e8\u7ed3\u6784\u5728\u8d39\u7c73\u767d\u76ae\u4e66\u4e2d\u6709\u5927\u91cf\u63cf\u8ff0[4]\u3002\u6267\u884c\u6a21\u578b\u4ecd\u7136\u56f4\u7ed5SM\u4e0a\u8c03\u5ea6\u768432\u4e2a\u7ebf\u7a0b\u7684\u504f\u5dee\u3002\u591a\u4e8f\u4e8640\u7eb3\u7c73\u7684\u5236\u7a0b\uff0cNVIDIA\u5c06\u6240\u6709\u4e1c\u897f\u90fd\u7ffb\u4e86\u4e00\u756a/\u7ffb\u4e86\u56db\u756a\u3002SM\u73b0\u5728\u53ef\u4ee5\u540c\u65f6\u8c03\u5ea6\u4e24\u4e2a\u534a\u7fd8\u66f2(16\u4e2a\u7ebf\u7a0b)\uff0c\u8fd9\u8981\u5f52\u529f\u4e8e16\u4e2aCUDA\u5185\u6838\u7684\u4e24\u4e2a\u9635\u5217\u3002\u7531\u4e8e\u6bcf\u4e2a\u5185\u6838\u6bcf\u4e2a\u65f6\u949f\u6267\u884c\u4e00\u6761\u6307\u4ee4\uff0c\u56e0\u6b64SM\u53ef\u4ee5\u5728\u6bcf\u4e2a\u65f6\u949f\u6709\u6548\u5730\u5f15\u9000\u4e00\u6761WARP\u6307\u4ee4(\u5bb9\u91cf\u662fTesla SM\u76844\u500d)\u3002\u7279\u79cd\u90e8\u961f\u7684\u6570\u91cf\u4e5f\u6709\u6240\u589e\u52a0\uff0c\u5c3d\u7ba1\u6ca1\u6709\u90a3\u4e48\u591a\uff0c\u56e0\u4e3a\u8fd0\u529b\u53ea\u589e\u52a0\u4e86\u4e00\u500d\u3002\u53ef\u4ee5\u63a8\u65ad\uff0c\u8fd9\u4e9b\u7c7b\u578b\u7684\u6307\u4ee4\u5e76\u6ca1\u6709\u88ab\u5e7f\u6cdb\u4f7f\u7528\u3002\u5bf9Float64\u6709\u534a\u786c\u4ef6\u652f\u6301\uff0c\u5176\u4e2d\u64cd\u4f5c\u7531\u4e24\u4e2aCUDA\u5185\u6838\u7ec4\u5408\u800c\u6210\u3002GF100\u53ef\u4ee5\u5728\u5355\u4e2a\u65f6\u949f\u5185\u8fdb\u884c\u6574\u6570\u4e58\u6cd5\u8fd0\u7b97\uff0c\u8fd9\u8981\u5f52\u529f\u4e8e32\u4f4dALU(\u7279\u65af\u62c9\u4e3a24\u4f4d)\uff0c\u5e76\u4e14\u4f7f\u7528\u878d\u5408\u4e58\u52a0(FMA)\u6280\u672f\u4eceIEEE 754-1985\u79fb\u52a8\u5230IEEE 754-2008\u7684Float32\u6d41\u6c34\u7ebf\u5177\u6709\u66f4\u597d\u7684\u7cbe\u5ea6(\u6bd4\u7279\u65af\u62c9\u4f7f\u7528\u7684MAD\u66f4\u7cbe\u786e)\u3002\u4ece\u7f16\u7a0b\u7684\u89d2\u5ea6\u6765\u770b\uff0cFermi\u7684\u7edf\u4e00\u5185\u5b58\u7cfb\u7edf\u5141\u8bb8CUDA C\u4f7f\u7528C++\u7279\u6027(\u5982\u5bf9\u8c61\u3001\u865a\u62df\u65b9\u6cd5\u548c\u5f02\u5e38)\u8fdb\u884c\u6269\u5c55\u3002\u968f\u7740\u7eb9\u7406\u5355\u4f4d\u73b0\u5728\u6210\u4e3aSM\u7684\u4e00\u90e8\u5206\uff0cTPC\u7684\u6982\u5ff5\u6d88\u5931\u4e86\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u5177\u6709\u56db\u4e2aSM\u7684\u56fe\u5f62\u5904\u7406\u5668\u7fa4\u96c6(GPC)\u3002\u6700\u540e\u4f46\u5e76\u975e\u6700\u4e0d\u91cd\u8981\u7684\u662f\uff0cSM\n\u6709\u4f20\u8a00\u79f0\uff0c\u4ee3\u53f7\u4e3aAmpere\u7684\u4e0b\u4e00\u4e2a\u67b6\u6784\u5c06\u4e8e2020\u5e74\u665a\u4e9b\u65f6\u5019\u5ba3\u5e03\u3002\u7531\u4e8e\u82f1\u7279\u5c14\u8bc1\u660e\u4e867\u7eb3\u7c73\u7684\u51b0\u6e56\u8fd8\u6709\u5c0f\u578b\u5316\u7684\u7a7a\u95f4\uff0c\u6beb\u65e0\u7591\u95ee\uff0cNVIDIA\u5c06\u5229\u7528\u5b83\u8fdb\u4e00\u6b65\u7f29\u5c0f\u5176SM\uff0c\u5e76\u518d\u6b21\u5c06\u6027\u80fd\u63d0\u9ad8\u4e00\u500d\u3002\u6709\u8da3\u7684\u662f\uff0c\u65e2\u7136\u73b0\u5728\u6709\u4e09\u79cd\u4e0d\u540c\u7528\u9014\u7684\u5185\u6838\uff0cNVIDIA\u5c06\u5982\u4f55\u7ee7\u7eed\u53d1\u5c55\u4e0b\u53bb\uff0c\u8fd9\u5c06\u662f\u4ee4\u4eba\u611f\u5174\u8da3\u7684\u3002\u6211\u4eec\u4f1a\u770b\u5230\u6a21\u5177\u5b8c\u5168\u7531\u5f20\u91cf\u82af\u6216RT\u82af\u7ec4\u6210\u5417\uff1f\u6211\u5f88\u597d\u5947\u60f3\u77e5\u9053\u3002\n*", "note_en": "Nvidia solved the problem of escalating complexity with its &#34;unified&#34; Tesla architecture, released in 2006.    In the G80 die, there is no more distinction between layers. The Stream Multiprocessor (SM) replaces all previous units thanks to is ability to run vertex, fragment and geometry &#34;kernel&#34; without distinction. The load balancing happens automatically by swapping the &#34;kernel&#34; run by each SM depending on the need of the pipeline.  We pretty much threw out the entire shader architecture from NV30/NV40 and made a new one from scratch with a new general processor architecture (SIMT), that also introduced new processor design methodologies.\n No longer SIMD capable, &#34;shaders units&#34; are now &#34;core&#34; capable of one integer or one float32 instruction per clock. SM receive threads in groups of 32 called warps. Ideally all threads in a warp will execute the same instruction at the same time, only on different data (hence the name SIMT). The Multi-threaded Instruction Unit (MT) takes care of enabling/disabling threads in a warp in case their Instruction Pointer (IP) converge/diverge.    Two SFU units are here to help with complex mathematic calculation such as inverse square root, sin, cos, exp, and rcp. These units are also able to execute one instruction per clock but since there are only two of them, warp execution speed is divided by four. There is no hardware support for float64, it is done in software and greatly affects the execution speed.     A SM will perform at its maximum potential when it can hide memory latency by always having schedulable warps but also when the thread in a warp don&#39;t diverge (control-flow keeps them on the same instruction path). The 4KiB Register File (RF) is where thread states are stored. Threads consuming too much stack reduce how many of them can be kept in-flight and will degrade performance.    The Tesla flagship die was the 90nm based G80, featured in the GeForce 8800 GTX. Two SMs are bundled into a Texture Processor Cluster (TPC) along with a Texture Unit and Tex L1 cache. With 8 TPC, the G80 advertised 128 cores generating 345.6 Gflops  [3]. The 8800 GTX card was immensely popular in its time, receiving stellar reviews and beloved by customers who could afford it. It was such a tour-de-force that thirteen months after its release, it remained one of the fastest GPU on the market.        Along with Tesla, Nvidia introduced the Compute Unified Device Architecture (CUDA) C programming language, a super-set of C99. It was a relief for GPGPU enthusiasts who welcomed an alternative to cheating the GPU with GLSL shaders and textures.    Even though this section focuses extensively on the SM, it is only one half of the system. The SM needs to be fed instructions and data which resides in the GPU memory. To avoid stalling, GPUs don&#39;t try to avoid memory trips with a lot of cache and speculation like CPUs do. GPUs embrace latency by saturating the memory bus to satisfy thousands of threads I/O. To this effect a die like the G80 implements a high memory throughput via six bi-directional DRAM memory lines.\n   Tesla was a risky move which turned out to be a very Good Thing. It was so successful that it became the foundation of NVidia GPUs for the next two decades. While we\u2019ve definitely made major architectural changes since then (Fermi was a major system architecture change and Maxwell was another large change to the processor design), the basic structure that we introduced in G80 is still very much there today [Pascal].\n In 2010, Nvidia released the GF100 based on its brand new Fermi architecture. The internals of their latest chip were abundantly described in the Fermi white-paper  [4].  The execution model still revolves around warps of 32 threads scheduled on a SM. Only thanks to a process of 40nm, NVidia doubled/quadrupled everything. A SM can now schedule two half-warp (16 threads) simultaneously thanks to two arrays of 16 CUDA cores. With each core executing one instruction per clock, a SM has can effective retire one warp instruction per clock (4x the capacity of Tesla SM).  The SFU count was also beefed up although not as much since capacity only doubled. It can be inferred these types of instructions were not widely used.  There is a semi-hardware support for float64 where operations are carried by two CUDA core combined. The GF100 can do an integer multiplication in a single clock thanks to a 32-bit ALU (vs 24-bit in Tesla) and has better accuracy with a float32 pipeline moving from IEEE 754-1985 to IEEE 754-2008 with Fused Multiply-Add (FMA) (more accurate than MAD used in Tesla).  From a programming perspective, the unified memory system of Fermi allowed CUDA C to be augmented with C++ features such as object, virtual methods, and exceptions.   With the Texture Units now part of the SM, the concept of TPC disappeared. It is replaced with the Graphics Processor Clusters (GPC) which features four SMs.Last but not least, the SM is gifted with a Polymorph Engine which takes care of vertex fetching, viewport transform, and tessellation. The flagship card, the GeForce GTX 480 featured a GF100 advertising 512 cores and 1,345 Gflops  [5].\n   In 2012 Nvidia released the Kepler architecture named after the astrologer best known for his laws of planetary motion. As usual an inside peek was allowed by the GK104 whitepaper  [6].   With Kepler, Nvidia drastically improved the energy efficiency of their die by lowering the clock and unifying the core clock with the card clock (they used to be clocked at 2x).  These changes should have resulted in lower performance. However, thanks to a process halved down to 28nm and the removal of the hardware scheduler in favor of software, Nvidia was able to not only pack more SMs but also improve their design.  The Next Generation Streaming Multiprocessor (SMX) is a monster where pretty much everything has been doubled or tripled.  With four warp scheduler able to process a whole warp in one clock (compared to Fermi&#39;s half-warp design) the SMX now contains 196 cores. Each scheduler has a double dispatch to execute a second instruction in a warp if it is independent from the instruction currently executed. This double scheduling may not always doable since one column of 32 cores is shared by two dispatchs.   This approach made the scheduling logic more complicated (we will revisit this) but with up to six warp instruction per clock a SMX provided 2x the performance of a Fermi SM.  The flagship NVIDIA GeForce GTX 680 card with a GK104 die and 8 SMX advertised 1536 cores to reach 3,250 Gflops  [7]. The details of the die become so intricate that the labels in the drawing must be removed.        Notice how a completely revamped memory sub-systems running at a whooping 6Ghz allowed to reduce the number of memory controllers from six to four.\n   In 2014 Nvidia release Maxwell, its 10th generation GPU. As the GM107 whitepaper  [8] explains, the soul of the first generation was &#34;Extreme power efficiency and Exceptionalperformance per watt consumed&#34;. The consumer target was &#34;power-limited environments like notebooks and small form factor (SFF) PC&#34;.  The major decision was to drop the Kepler approach of having a non-power-of-two CUDA cores per SM where some cores are shared and go back to running half-warp. For the first time in the series, the SMM features less cores than its predecessor with &#34;only&#34; 128 cores.   Having the core count &#34;aligned with warp size&#34; improved die partitioning which resulted in saved area and power.     The second generation of Maxwell (described in the GM200 whitepaper  [9]) improved performance significantly while preserving the energy efficiency of the first generation.   With a process stagnating at 28nm, Nvidia engineers could not bank on raw miniaturization to improve performance. However, fewer cores per SMM reduced their size which meant many more SMM could be packed on a die. Maxwell Gen2 packs 2x the number of SMM as Kepler with only a 25% increase in die area.     On the list of improvements can also be found a simplified scheduling logic which reduced redundant recomputation of scheduling decisions reduced computation latency to provide a better warp occupancy. Memory clock was also cranked up 15%.  Looking at the Maxwell GM200 block diagram starts to hurt the eyes. But we still do it like the GPU heroes we are. The flagship NVIDIA GeForce GTX 980 Ti card with a GM200 die and 24 SMM advertised 3072 cores to reach 6,060 Gflops  [10].\n    In 2016, Nvidia introduced Pascal. The GP104 whitepaper  [11] gives a impression of &#34;deja-vu&#34; since the Pascal SM looks exactly like the Maxwell SMM. No change in the SM did not mean stagnating performance since the 16nm process allowed to pack more SMs and once again double the Gflops.   The other major improvements was the memory system built around the brand new GDDR5X. Providing 10 Gflops transfer rates thanks to eight memory controllers, the 256-bit memory interface provides 43% more memory bandwidth to reduce warp starvation.  The flagship NVIDIA GeForce GTX 1080 Ti card with a GP102 die and 28 TSM advertised 3584 cores to reach 11,340 Gflops  [12].\n   With the release of Turing in 2018, Nvidia operated its &#34;biggest architectural leap forward in over a decade&#34;  [13]. Not only the &#34;Turing SM&#34; added A.I dedicated Tensor cores, they also gained Raytracing cores. This fragmented design reminds of the Pre-Tesla layered architecture, proving once again that history likes to repeat itself. Besides the new cores, Turing added three major features. First, the CUDA core is now a super-scalar able to execute both integer instruction and float instruction in parallel. If you were around in 1996 this may remind you of the Intel &#34;breakthrough&#34; Pentium architecture.  Second, the new GDDR6X memory sub-system, backed by 16 controllers, can now achieve 14 Gbps.   Last, threads are no longer sharing their Instruction Pointer in a warp. Thanks to Independent Thread Scheduling introduced in Volta each thread has its own IP. As a result, SMs are free to fine schedule threads in a warp without the need to make them converge as soon as possible.   The flagship NVIDIA GeForce GTX 2080 Ti card with a TU102 die and 68 TSM advertised 4352 cores to reach 13,45 Gflops  [14]. No block diagram is provided since it would have looked like a blurry green blob.\n   The next architecture, codenamed Ampere, is rumored to be announced later in 2020. Since Intel proved that there is still room for miniaturization with the 7nm of Ice Lake, there is little doubt Nvidia will leverage it to shrink its SM even more and double performance again.        What will be interesting is to see is how Nvidia keeps on evolving now that there dies have three types of cores serving different purpose. Will we see die entirely made of Tensors cores or RT cores? I am curious to find out.\n       *", "posttime": "2020-05-05 19:12:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "nvidia,stream,sm,memory", "title": "NVIDIA Stream\u591a\u5904\u7406\u5668\u53d1\u5c55\u53f2", "title_en": "An History of Nvidia Stream Multiprocessor", "transed": 1, "url": "http://fabiensanglard.net/cuda/index.html", "via": "", "real_tags": ["nvidia", "stream", "sm", "memory"]}, {"category": "", "categoryclass": "", "imagename": "b5d0f1167a86fdbbb8945644fc4c54f6.png", "infoid": 1000731, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5177\u6709\u7cfb\u7edf\u8ddf\u8e2a\u529f\u80fd\u7684Python GOTO\u3002GitHub Gist\uff1a\u5373\u65f6\u5171\u4eab\u4ee3\u7801\u3001\u7b14\u8bb0\u548c\u4ee3\u7801\u7247\u6bb5\u3002", "note_en": "python goto with system trace function . GitHub Gist: instantly share code, notes, and snippets.", "posttime": "2020-05-05 19:12:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python,goto,\u4ee3\u7801", "title": "Python Goto\u5b9e\u73b0\u7cfb\u7edf\u8ddf\u8e2a\u529f\u80fd(2017)", "title_en": "Python goto implemented with system trace function (2017)", "transed": 1, "url": "https://gist.github.com/georgexsh/ede5163a294ced53c3e2369ccaa392cc", "via": "", "real_tags": ["python", "goto", "\u4ee3\u7801"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000730, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u9879\u7814\u7a76\u663e\u793a\uff0c\u5168\u7403\u6c14\u6e29\u6bcf\u4e0a\u53471\u6444\u6c0f\u5ea6\uff0c10\u4ebf\u4eba\u8981\u4e48\u6d41\u79bb\u5931\u6240\uff0c\u8981\u4e48\u88ab\u8feb\u5fcd\u53d7\u96be\u4ee5\u5fcd\u53d7\u7684\u9ad8\u6e29\uff0c\u6c14\u5019\u5371\u673a\u7684\u4eba\u7c7b\u4ee3\u4ef7\u5c06\u6bd4\u4e4b\u524d\u8ba4\u4e3a\u7684\u66f4\u4e25\u91cd\u3001\u66f4\u5e7f\u6cdb\u3001\u66f4\u5feb\u3002\n\u8fd9\u7bc7\u8bba\u6587\u8b66\u544a\u8bf4\uff0c\u5728\u52a0\u901f\u6392\u653e\u7684\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u76ee\u524d\u5c45\u4f4f\u7740\u4e16\u754c\u4e09\u5206\u4e4b\u4e00\u4eba\u53e3\u7684\u5730\u533a\u5c06\u572850\u5e74\u5185\u53d8\u5f97\u4e0e\u6492\u54c8\u62c9\u6700\u70ed\u7684\u5730\u533a\u4e00\u6837\u70ed\u3002\u5373\u4f7f\u5728\u6700\u4e50\u89c2\u7684\u524d\u666f\u4e0b\uff0c12\u4ebf\u4eba\u4e5f\u5c06\u843d\u5165\u4eba\u7c7b\u81f3\u5c11\u57286000\u5e74\u6765\u84ec\u52c3\u53d1\u5c55\u7684\u8212\u9002\u201c\u6c14\u5019\u5229\u57fa\u201d\u4e4b\u5916\u3002\n\u8fd9\u9879\u7814\u7a76\u7684\u4f5c\u8005\u8bf4\uff0c\u4ed6\u4eec\u5bf9\u8fd9\u4e9b\u53d1\u73b0\u611f\u5230\u201c\u9707\u60ca\u201d\u548c\u201c\u9707\u60ca\u201d\uff0c\u56e0\u4e3a\u4ed6\u4eec\u6ca1\u6709\u60f3\u5230\u6211\u4eec\u8fd9\u4e2a\u7269\u79cd\u4f1a\u5982\u6b64\u8106\u5f31\u3002\n\u201c\u6570\u5b57\u4ee4\u4eba\u77a0\u76ee\u7ed3\u820c\u3002\u57c3\u514b\u585e\u7279\u5927\u5b66\u7684\u8482\u59c6\u00b7\u5170\u987f(Tim Lenton)\u8bf4\uff1a\u201c\u6211\u7b2c\u4e00\u6b21\u770b\u5230\u5b83\u4eec\u7684\u65f6\u5019\uff0c\u771f\u7684\u662f\u770b\u4e86\u4e24\u773c\u3002\u201d\u201c\u6211\u4e4b\u524d\u7814\u7a76\u8fc7\u6c14\u5019\u4e34\u754c\u70b9\uff0c\u901a\u5e38\u88ab\u8ba4\u4e3a\u662f\u4e16\u754c\u672b\u65e5\u3002\u4f46\u8fd9\u66f4\u52a0\u5207\u4e2d\u8981\u5bb3\u3002\u8fd9\u8ba9\u5a01\u80c1\u53d8\u5f97\u975e\u5e38\u4eba\u6027\u5316\u3002\u201c\u3002\n\u8fd9\u7bc7\u53d1\u8868\u5728\u201c\u7f8e\u56fd\u56fd\u5bb6\u79d1\u5b66\u9662\u9662\u520a\u201d\u4e0a\u7684\u8bba\u6587\u6ca1\u6709\u5c06\u6c14\u5019\u53d8\u5316\u89c6\u4e3a\u4e00\u4e2a\u7269\u7406\u5b66\u6216\u7ecf\u6d4e\u5b66\u95ee\u9898\uff0c\u800c\u662f\u7814\u7a76\u4e86\u5b83\u5982\u4f55\u5f71\u54cd\u4eba\u7c7b\u6816\u606f\u5730\u3002\n\u7edd\u5927\u591a\u6570\u4eba\u7c7b\u4e00\u76f4\u751f\u6d3b\u5728\u5e74\u5e73\u5747\u6c14\u6e29\u57286\u6444\u6c0f\u5ea6(43\u534e\u6c0f\u5ea6)\u523028\u6444\u6c0f\u5ea6(82\u534e\u6c0f\u5ea6)\u5de6\u53f3\u7684\u5730\u533a\uff0c\u8fd9\u5bf9\u4eba\u7c7b\u5065\u5eb7\u548c\u98df\u54c1\u751f\u4ea7\u662f\u7406\u60f3\u7684\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u4eba\u4e3a\u7684\u5168\u7403\u53d8\u6696\uff0c\u8fd9\u4e00\u751c\u871c\u70b9\u6b63\u5728\u8f6c\u79fb\u548c\u7f29\u5c0f\uff0c\u8fd9\u8ba9\u66f4\u591a\u7684\u4eba\u9677\u5165\u4e86\u4f5c\u8005\u6240\u8bf4\u7684\u201c\u51e0\u4e4e\u4e0d\u9002\u5408\u5c45\u4f4f\u201d\u7684\u6781\u7aef\u5883\u5730\u3002\n\u4eba\u7c7b\u4e4b\u6240\u4ee5\u7279\u522b\u654f\u611f\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u96c6\u4e2d\u5728\u9646\u5730\u4e0a--\u9646\u5730\u53d8\u6696\u7684\u901f\u5ea6\u6bd4\u6d77\u6d0b\u8fd8\u5feb--\u800c\u4e14\u672a\u6765\u7684\u4eba\u53e3\u589e\u957f\u5927\u591a\u5c06\u5728\u672c\u5df2\u708e\u70ed\u7684\u975e\u6d32\u548c\u4e9a\u6d32\u5730\u533a\u3002\u7531\u4e8e\u8fd9\u4e9b\u4eba\u53e3\u56e0\u7d20\uff0c\u5f53\u5168\u7403\u6c14\u6e29\u8fbe\u52303\u6444\u6c0f\u5ea6(\u9884\u8ba1\u5230\u672c\u4e16\u7eaa\u672b)\u65f6\uff0c\u4eba\u7c7b\u5e73\u5747\u6c14\u6e29\u5c06\u4e0a\u53477.5\u6444\u6c0f\u5ea6\u3002\n\u5728\u8fd9\u4e2a\u6c34\u5e73\u4e0a\uff0c\u4e16\u754c\u4e0a\u5927\u7ea630%\u7684\u4eba\u53e3\u5c06\u751f\u6d3b\u5728\u6781\u7aef\u9ad8\u6e29\u4e2d-\u5b9a\u4e49\u4e3a\u5e73\u5747\u6e29\u5ea6\u4e3a29\u6444\u6c0f\u5ea6(84\u534e\u6c0f\u5ea6)\u3002\u5728\u6492\u54c8\u62c9\u6c99\u6f20\u6700\u708e\u70ed\u7684\u5730\u533a\u4ee5\u5916\uff0c\u8fd9\u79cd\u60c5\u51b5\u6781\u5176\u7f55\u89c1\uff0c\u4f46\u968f\u7740\u5168\u7403\u6c14\u6e29\u8fbe\u52303\u6444\u6c0f\u5ea6\uff0c\u9884\u8ba1\u5370\u5ea6\u5c06\u670912\u4ebf\u4eba\uff0c\u5c3c\u65e5\u5229\u4e9a\u5c06\u67094.85\u4ebf\u4eba\uff0c\u5df4\u57fa\u65af\u5766\u3001\u5370\u5ea6\u5c3c\u897f\u4e9a\u548c\u82cf\u4e39\u5404\u5c06\u8d85\u8fc71\u4ebf\u4eba\u3002\n\u201c\u6211\u8ba4\u4e3a\u516c\u5e73\u5730\u8bf4\uff0c\u5e73\u5747\u6c14\u6e29\u8d85\u8fc729\u6444\u6c0f\u5ea6\u662f\u4e0d\u9002\u5b9c\u5c45\u4f4f\u7684\u3002\u4f60\u5fc5\u987b\u642c\u5bb6\u6216\u9002\u5e94\u3002\u4f46\u9002\u5e94\u662f\u6709\u9650\u5ea6\u7684\u3002\u5982\u679c\u4f60\u6709\u8db3\u591f\u7684\u94b1\u548c\u7cbe\u529b\uff0c\u4f60\u53ef\u4ee5\u7528\u7a7a\u8c03\u548c\u7a7a\u8fd0\u98df\u7269\uff0c\u7136\u540e\u4f60\u53ef\u80fd\u5c31\u6ca1\u4e8b\u4e86\u3002\u4f46\u5bf9\u5927\u591a\u6570\u4eba\u6765\u8bf4\uff0c\u60c5\u51b5\u5e76\u975e\u5982\u6b64\uff0c\u201c\u8be5\u7814\u7a76\u7684\u4e3b\u8981\u4f5c\u8005\u4e4b\u4e00\u3001\u74e6\u683c\u5b81\u6839\u5927\u5b66\u7684\u9a6c\u817e\u00b7\u8c22\u5f17\u6559\u6388\u8bf4\u3002\n\u8c22\u5f17\u662f\u4e00\u540d\u8bad\u7ec3\u6709\u7d20\u7684\u751f\u6001\u5b66\u5bb6\uff0c\u4ed6\u8bf4\u8fd9\u9879\u7814\u7a76\u6700\u521d\u662f\u4e00\u6b21\u601d\u7ef4\u5b9e\u9a8c\u3002\u4ed6\u4e4b\u524d\u66fe\u7814\u7a76\u8fc7\u70ed\u5e26\u96e8\u6797\u548c\u7a00\u6811\u8349\u539f\u7684\u6c14\u5019\u5206\u5e03\uff0c\u5e76\u60f3\u77e5\u9053\u5982\u679c\u4ed6\u5c06\u540c\u6837\u7684\u65b9\u6cd5\u5e94\u7528\u4e8e\u4eba\u7c7b\uff0c\u7ed3\u679c\u4f1a\u662f\u4ec0\u4e48\u3002\u201c\u6211\u4eec\u77e5\u9053\u5927\u591a\u6570\u751f\u7269\u7684\u6816\u606f\u5730\u90fd\u53d7\u5230\u6e29\u5ea6\u7684\u9650\u5236\u3002\u4f8b\u5982\uff0c\u4f01\u9e45\u53ea\u5728\u51b7\u6c34\u4e2d\u53d1\u73b0\uff0c\u73ca\u745a\u53ea\u5728\u6e29\u6696\u7684\u6c34\u4e2d\u53d1\u73b0\u3002\u4f46\u6211\u4eec\u6ca1\u60f3\u5230\u4eba\u7c7b\u4f1a\u8fd9\u4e48\u654f\u611f\u3002\u6211\u4eec\u8ba4\u4e3a\u81ea\u5df1\u9002\u5e94\u80fd\u529b\u5f88\u5f3a\uff0c\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u8863\u670d\u3001\u6696\u6c14\u548c\u7a7a\u8c03\u3002\u4f46\u4e8b\u5b9e\u4e0a\uff0c\u7edd\u5927\u591a\u6570\u4eba\u90fd\u751f\u6d3b\u5728--\u800c\u4e14\u4e00\u76f4\u90fd\u751f\u6d3b\u5728--\u8fd9\u4e2a\u6c14\u5019\u5229\u57fa\u73af\u5883\u4e2d\uff0c\u8fd9\u4e2a\u73af\u5883\u6b63\u5728\u4ee5\u524d\u6240\u672a\u6709\u7684\u901f\u5ea6\u79fb\u52a8\u3002\u201c\u3002\n\u6211\u4eec\u88ab\u9707\u7ea7\u9707\u64bc\u4e86\uff0c\u201c\u4ed6\u8bf4\u3002\u201c\u672a\u676550\u5e74\u5c06\u53d1\u751f\u6bd4\u8fc7\u53bb6000\u5e74\u66f4\u591a\u7684\u53d8\u5316\u3002\u201d\n\u4f5c\u8005\u8bf4\uff0c\u4ed6\u4eec\u7684\u53d1\u73b0\u5e94\u8be5\u4f1a\u523a\u6fc0\u653f\u7b56\u5236\u5b9a\u8005\u52a0\u5feb\u51cf\u6392\uff0c\u5171\u540c\u52aa\u529b\u5e94\u5bf9\u79fb\u6c11\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u53ef\u4ee5\u907f\u514d\u7684\u53d8\u6696\u7a0b\u5ea6\u90fd\u5c06\u62ef\u655110\u4ebf\u4eba\uff0c\u4f7f\u5176\u514d\u4e8e\u8131\u79bb\u4eba\u7c7b\u7684\u6c14\u5019\u5229\u57fa\u3002\n\u53e6\u4e00\u4f4d\u4f5c\u8005\u3001\u5357\u4eac\u5927\u5b66\u7684\u5f90\u9a70\u8868\u793a\uff1a\u201c\u663e\u7136\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u5168\u7403\u6027\u7684\u65b9\u5f0f\u6765\u4fdd\u62a4\u6211\u4eec\u7684\u5b69\u5b50\u514d\u53d7\u9884\u671f\u53d8\u5316\u53ef\u80fd\u5f15\u53d1\u7684\u6f5c\u5728\u5de8\u5927\u793e\u4f1a\u7d27\u5f20\u5c40\u52bf\u7684\u5f71\u54cd\u3002\u201d", "note_en": "The human cost of the  climate crisis will hit harder, wider and sooner than previously believed, according to a  study that shows a billion people will either be displaced or forced to endure insufferable heat for every additional 1C rise in the global temperature.\n In a worst-case scenario of accelerating emissions, areas currently home to a third of the world\u2019s population will be as hot as the hottest parts of the Sahara within 50 years, the paper warns. Even in the most optimistic outlook, 1.2 billion people will fall outside the comfortable \u201cclimate niche\u201d in which humans have thrived for at least 6,000 years.\n The authors of the study said they were \u201cfloored\u201d and \u201cblown away\u201d by the findings because they had not expected our species to be so vulnerable.\n \u201cThe numbers are flabbergasting. I literally did a double take when I first saw them, \u201d Tim Lenton, of Exeter University, said. \u201cI\u2019ve previously studied climate tipping points, which are usually considered apocalyptic. But this hit home harder. This puts the threat in very human terms.\u201d\n  Instead of looking at climate change as a problem of physics or economics, the paper, published in the Proceedings of the National Academy of Sciences, examines how it affects the human habitat.\n The vast majority of humanity has always lived in regions where the average annual temperatures are around 6C (43F) to 28C (82F), which is ideal for human health and food production. But this sweet spot is shifting and shrinking as a result of manmade global heating, which drops more people into what the authors describe as \u201cnear unliveable\u201d extremes.\n Humanity is particularly sensitive because we are concentrated on land \u2013 which is warming faster than the oceans \u2013 and because most future population growth will be in already hot regions of Africa and Asia. As a result of these demographic factors, the average human will experience a temperature increase of 7.5C when global temperatures reach 3C, which is forecast towards the end of this century.\n At that level, about 30% of the world\u2019s population would live in extreme heat \u2013 defined as an average temperature of 29C (84F). These conditions are extremely rare outside the most scorched parts of the Sahara, but with global heating of 3C they are projected to envelop 1.2 billion people in India, 485 million in Nigeria and more than 100 million in each of Pakistan, Indonesia and Sudan.\n   \u201cI think it is fair to say that average temperatures over 29C are unliveable. You\u2019d have to move or adapt. But there are limits to adaptation. If you have enough money and energy, you can use air conditioning and fly in food and then you might be OK. But that is not the case for most people,\u201d said one of the lead authors of the study, Prof Marten Scheffer of Wageningen University.\n An ecologist by training, Scheffer said the study started as a thought-experiment. He had previously studied the climate distribution of rainforests and savanna and wondered what the result would be if he applied the same methodology to humans. \u201cWe know that most creatures\u2019 habitats are limited by temperature. For example, penguins are only found in cold water and corals only in warm water. But we did not expect humans to be so sensitive. We think of ourselves as very adaptable because we use clothes, heating and air conditioning. But, in fact, the vast majority of people live \u2013 and have always lived \u2013 inside a climate niche that is now moving as never before.\u201d\n We were blown away by the magnitude,\u201d he said. \u201cThere will be more change in the next 50 years than in the past 6,000 years.\u201d\n The authors said their findings should spur policymakers to accelerate emission cuts and work together to cope with migration because each degree of warming that can be avoided will save a billion people from falling out of humanity\u2019s climate niche.\n \u201cClearly we will need a global approach to safeguard our children against the potentially enormous social tensions the projected change could invoke,\u201d another of the authors, Xu Chi of Nanjing University, said.", "posttime": "2020-05-05 19:12:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u751f\u6d3b,people,\u4eba\u7c7b", "title": "50\u5e74\u5185\u5c06\u670910\u4ebf\u4eba\u751f\u6d3b\u5728\u4ee4\u4eba\u96be\u4ee5\u5fcd\u53d7\u7684\u708e\u70ed\u4e2d--\u7814\u7a76", "title_en": "One billion people will live in insufferable heat within 50 years \u2013 study", "transed": 1, "url": "https://www.theguardian.com/environment/2020/may/05/one-billion-people-will-live-in-insufferable-heat-within-50-years-study", "via": "", "real_tags": ["\u751f\u6d3b", "people", "\u4eba\u7c7b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000728, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e3a\u4e86\u5e2e\u52a9\u652f\u6301\u6211\u4eec\u7684\u793e\u533a\u5728COVID-19\u671f\u95f4\u8fdc\u7a0b\u5de5\u4f5c\uff0c\u6211\u4eec\u5c06\u57282020\u5e746\u670830\u65e5\u4e4b\u524d\u514d\u8d39\u8bbf\u95eeACM\u5728\u6211\u4eec\u7684\u6570\u5b57\u56fe\u4e66\u9986\u4e2d\u53d1\u5e03\u7684\u6240\u6709\u4f5c\u54c1\u3002\u4e86\u89e3\u66f4\u591a\u3002\n\u6211\u4eec\u4f7f\u7528\u997c\u5e72\uff0c\u4ee5\u786e\u4fdd\u6211\u4eec\u7ed9\u4f60\u6700\u597d\u7684\u7ecf\u9a8c\uff0c\u5728\u6211\u4eec\u7684\u7f51\u7ad9\u3002\n\u60a8\u7684\u6d4f\u89c8\u5668\u4f3c\u4e4e\u4e0d\u652f\u6301\u5b83\u4eec\uff0c\u8fd9\u4f1a\u5f71\u54cd\u7f51\u7ad9\u529f\u80fd\u3002", "note_en": "To help support our community working remotely during COVID-19, we are making all work published by ACM in our Digital Library freely accessible through June 30, 2020.  Learn more\n   We use cookies to ensure that we give you the best experience on our website.\n  It seems your browser doesn&#39;t support them and this affects the site functionality.", "posttime": "2020-05-05 18:43:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5ea6\u91cf,cost,\u7f51\u7ad9,ensure", "title": "\u5728\u5b9e\u8df5\u4e2d\u5ea6\u91cf\u56de\u5f52\u6d4b\u8bd5\u7684\u6210\u672c", "title_en": "Measuring the Cost of Regression Testing in Practice", "transed": 1, "url": "https://dl.acm.org/doi/pdf/10.1145/3106237.3106288", "via": "", "real_tags": ["\u5ea6\u91cf", "cost", "\u7f51\u7ad9", "ensure"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000726, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5b66\u751f\u4eec\u7ecf\u5e38\u8981\u6c42\u63a8\u8350\u4ed6\u4eec\u4e0b\u4e00\u6b65\u5e94\u8be5\u5b66\u4e60\u4ec0\u4e48\u8bed\u8a00\u3002\u5982\u679c\u4f60\u6b63\u5728\u627e\u4e00\u4efd\u5de5\u4e1a\u754c\u7684\u5de5\u4f5c\uff0c\u6211\u7684\u56de\u7b54\u662f\u5b66\u4e60\u76ee\u524d\u6700\u70ed\u95e8\u7684\u4e1c\u897f\uff1aC++\u3001Java\u548cC#--\u53ef\u80fd\u8fd8\u6709Python\u3001Ruby\u3001PHP\u548cPerl\u3002\n\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u4f60\u5bf9\u542f\u8499\u3001\u5b66\u672f\u7814\u7a76\u6216\u521d\u521b\u4f01\u4e1a\u611f\u5174\u8da3\uff0c\u90a3\u4e48\u4f60\u9009\u62e9\u4e0b\u4e00\u95e8\u8bed\u8a00\u7684\u6807\u51c6\u4e0d\u662f\u5c31\u4e1a\u80fd\u529b\uff0c\u800c\u662f\u8868\u8fbe\u80fd\u529b\u3002\u5728\u5b66\u672f\u7814\u7a76\u548c\u521b\u4e1a\u4e2d\uff0c\u4f60\u9700\u8981\u63d0\u9ad8\u4f60\u4f5c\u4e3a\u7a0b\u5e8f\u5458\u7684\u6548\u7387\uff0c\u56e0\u4e3a\u4f60(\u53ef\u80fd)\u4e0d\u4f1a\u4f7f\u7528\u6839\u6df1\u8482\u56fa\u7684\u4ee3\u7801\u5e93\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u81ea\u7531\u5730\u4f7f\u7528\u4efb\u4f55\u6700\u9002\u5408\u624b\u5934\u4efb\u52a1\u7684\u8bed\u8a00\u3002\n\u5728\u8fd9\u91cc\uff0c\u60a8\u5c06\u627e\u5230\u56db\u79cd\u503c\u5f97\u5b66\u4e60\u7684\u597d\u8bed\u8a00\u7684\u63cf\u8ff0--Haskell\u3001Scala\u3001ML\u548cScheme--\u6bcf\u79cd\u8bed\u8a00\u90fd\u5217\u51fa\u4e86\u6211\u6700\u559c\u6b22\u7684\u7279\u6027\uff0c\u5e76\u6307\u51fa\u4e86\u5728\u54ea\u91cc\u53ef\u4ee5\u5b66\u5230\u66f4\u591a\u3002\n\u5f53\u7136\uff0c\u8fd9\u4efd\u7b80\u77ed\u7684\u540d\u5355\u7edd\u4e0d\u662f\u8be6\u5c3d\u7684\u3002\u6709\u8bb8\u591a\u4e0d\u540c\u5bfb\u5e38\u7684\u8bed\u8a00\u64c5\u957f\u4e8e\u5229\u57fa\u8bed\u8a00\u3002\u4ec5\u4e3e\u51e0\u4e2a\u4f8b\u5b50\uff0c\u8fd8\u6709\u7528\u4e8e\u7cfb\u7edf\u7f16\u7a0b\u7684D\uff1b\u7528\u4e8e\u5e76\u53d1\u7684Erlang\u6216Clojure\uff1b\u4ee5\u53ca\u7528\u4e8e\u7ea6\u675f\u7f16\u7a0b\u7684Datalog\u3002\u7136\u540e\u8fd8\u6709\u50cfSmalltalk\u8fd9\u6837\u7684\u8bed\u8a00--\u5f88\u4e45\u4ee5\u524d\u4ece\u4e3b\u6d41\u8ba1\u7b97\u4e2d\u5206\u652f\u51fa\u6765\u7684\u53e6\u7c7b\u4f46\u529f\u80fd\u9f50\u5168\u7684\u9886\u57df\u3002\n\u6211\u9f13\u52b1\u6211\u7684\u5b66\u751f\u6c38\u8fdc\u4e0d\u8981\u505c\u6b62\u5b66\u4e60\u5229\u57fa\u8bed\u8a00\u3002\u5b83\u4eec\u62d3\u5c55\u4e86\u4f60\u7684\u601d\u7ef4\u65b9\u5f0f\uff0c\u62d3\u5c55\u4e86\u4f60\u5feb\u901f\u89e3\u51b3\u7684\u95ee\u9898\u79cd\u7c7b\uff0c\u62d3\u5c55\u4e86\u4f60\u5bf9\u8ba1\u7b97\u610f\u4e49\u7684\u7406\u89e3\u3002\nHaskell\u4f5c\u4e3a\u7f16\u5199\u7f16\u8bd1\u5668\u3001\u89e3\u91ca\u5668\u6216\u9759\u6001\u5206\u6790\u5668\u7684\u8bed\u8a00\u8868\u73b0\u51fa\u8272\u3002\u6211\u4e0d\u505a\u5f88\u591a\u4eba\u5de5\u667a\u80fd\u3001\u81ea\u7136\u8bed\u8a00\u5904\u7406\u6216\u673a\u5668\u5b66\u4e60\u7814\u7a76\uff0c\u4f46\u5982\u679c\u6211\u505a\u4e86\uff0c\u54c8\u65af\u514b\u5c14\u4e5f\u4f1a\u662f\u6211\u5728\u90a3\u91cc\u7684\u7b2c\u4e00\u9009\u62e9\u3002(\u8be5\u8ba1\u5212\u5c06\u662f\u7b2c\u4e8c\u4e2a\u5f3a\u6709\u529b\u7684\u8ba1\u5212\u3002)\u3002Haskell\u662f\u552f\u4e00\u5e7f\u6cdb\u4f7f\u7528\u7684\u7eaf\u60f0\u6027\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\u3002\n\u4e0eStandard ML\u548cOCaml\u4e00\u6837\uff0cHaskell\u4f7f\u7528\u4e86Hindley-Milner\u98ce\u683c\u7684\u7c7b\u578b\u63a8\u65ad\u7684\u6269\u5c55\uff0c\u8fd9\u610f\u5473\u7740\u7a0b\u5e8f\u5458\u4e0d\u5fc5\u5199\u4e0b(\u5927\u591a\u6570)\u7c7b\u578b\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u53ef\u4ee5\u63a8\u65ad\u5b83\u4eec\u3002\u6839\u636e\u6211\u7684\u7ecf\u9a8c\uff0c\u901a\u8fc7Hindley-Milner\u7c7b\u578b\u7684\u7cfb\u7edf\u5f88\u96be\u83b7\u5f97bug\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6709\u7ecf\u9a8c\u7684\u7a0b\u5e8f\u5458\u80fd\u591f\u719f\u7ec3\u5730\u5c06\u6b63\u786e\u6027\u7ea6\u675f\u76f4\u63a5\u7f16\u7801\u5230Haskell\u7c7b\u578b\u7684\u7cfb\u7edf\u4e2d\u3002\u5728\u7b2c\u4e00\u6b21\u7528Haskell(\u6216ML)\u7f16\u7a0b\u540e\uff0c\u4eba\u4eec\u5e38\u8bf4\u7684\u4e00\u53e5\u8bdd\u662f\uff0c\u4e00\u65e6\u7a0b\u5e8f\u7f16\u8bd1\u5b8c\u6bd5\uff0c\u51e0\u4e4e\u53ef\u4ee5\u80af\u5b9a\u5b83\u662f\u6b63\u786e\u7684\u3002\n\u4f5c\u4e3a\u4e00\u79cd\u7eaf\u8bed\u8a00\uff0c\u5176\u526f\u4f5c\u7528(\u53d8\u91cf\u6216\u6570\u636e\u7ed3\u6784\u548cI/O\u7684\u7a81\u53d8)\u5728\u8bed\u8a00\u672c\u8eab\u4e2d\u662f\u88ab\u7981\u6b62\u7684\u3002\u8fd9\u8feb\u4f7f\u8be5\u8bed\u8a00\u7684\u8bbe\u8ba1\u8005\u8ba4\u771f\u8003\u8651\u5982\u4f55\u63d0\u4f9b\u8fd9\u6837\u7684\u529f\u80fd\u3002\u4ed6\u4eec\u7684\u7b54\u6848\u662fMonads\uff0c\u4f7f\u4eba\u4eec\u80fd\u591f\u5728\u5b89\u5168\u7ea6\u675f\u7684\u6846\u67b6\u5185\u6267\u884c\u526f\u4f5c\u7528\u548cI/O\u3002\u5f53\u7136\uff0cHaskell\u5141\u8bb8\u7528\u6237\u5b9a\u4e49\u4ed6\u4eec\u81ea\u5df1\u7684Monad\uff0c\u73b0\u5728\u7a0b\u5e8f\u5458\u53ef\u4ee5\u8bbf\u95eeMonad\u6765\u8fdb\u884c\u5ef6\u7eed\u3001\u4f20\u611f\u5668\u3001\u5f02\u5e38\u3001\u903b\u8f91\u7f16\u7a0b\u7b49\u7b49\u3002\n\u9664\u4e86\u7eaf\u6d01\u4e4b\u5916\uff0c\u54c8\u65af\u514b\u5c14\u8fd8\u5f88\u61d2\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cHaskell\u4e2d\u7684\u8868\u8fbe\u5f0f\u76f4\u5230(\u5e76\u4e14\u9664\u975e)\u5176\u7ed3\u679c\u662f\u5411\u524d\u8ba1\u7b97\u6240\u5fc5\u9700\u7684\uff0c\u5426\u5219\u4e0d\u4f1a\u6c42\u503c\u3002\u4e00\u4e9b\u4eba\u4e89\u8fa9\u8bf4\uff0c\u627f\u8bfa\u7684\u61d2\u60f0\u5e26\u6765\u7684\u6548\u7387\u6536\u76ca\u5e76\u6ca1\u6709\u5b9e\u73b0\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u6211\u5173\u5fc3\u7684\u95ee\u9898\u3002\u6211\u6b23\u8d4f\u61d2\u60f0\uff0c\u56e0\u4e3a\u5b83\u589e\u52a0\u4e86\u8868\u73b0\u529b\u3002\u5728Haskell\u4e2d\uff0c\u63cf\u8ff0\u65e0\u9650\u8303\u56f4\u7684\u6570\u636e\u7ed3\u6784\u662f\u5fae\u4e0d\u8db3\u9053\u7684\u3002\u5728\u5176\u4ed6\u8bed\u8a00\u5141\u8bb8\u76f8\u4e92\u9012\u5f52\u51fd\u6570\u7684\u60c5\u51b5\u4e0b\uff0cHaskell\u5141\u8bb8\u76f8\u4e92\u9012\u5f52\u7684\u503c\u3002\n\u66f4\u52a1\u5b9e\u7684\u662f\uff0c\u6211\u53d1\u73b0\u61d2\u60f0\u5728\u7f16\u7801\u9009\u9879\u7c7b\u578b\u65f6\u5f88\u6709\u7528\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5229\u7528\u7a7a\u683c\u5e94\u8be5\u603b\u662f\u4f1a\u7834\u574f\u7a0b\u5e8f\u3002\u5728Haskell\u4e2d\uff0c\u60a8\u53ef\u4ee5\u907f\u514d\u521b\u5efa\u9009\u9879\u7c7b\u578b\uff0c\u800c\u662f\u4f7f\u7528ERROR\u751f\u6210\u7a7a\u503c\u3002\u7531\u4e8e\u61d2\u60f0\uff0cHaskell\u4e2d\u7684\u6bcf\u79cd\u7c7b\u578b\u90fd\u81ea\u52a8\u5177\u6709\u4e24\u4e2a\u9644\u52a0\u503c\uff1a\u4e0d\u7ec8\u6b62\u548c\u9519\u8bef\u3002\u4f7f\u7528\u5f97\u5f53\uff0c\u8fd9\u6d88\u9664\u4e86\u8bb8\u591a\u7e41\u7410\u7684\u6a21\u5f0f\u5339\u914d\u3002\n\u6211\u6700\u559c\u6b22\u7684Haskell\u7279\u6027\u662f\u7c7b\u578b\u7c7b\u3002Haskell\u7684\u7c7b\u578b\u7cfb\u7edf\u5141\u8bb8\u7f16\u8bd1\u5668\u6839\u636e\u5176\u7c7b\u578b\u4e0a\u4e0b\u6587\u63a8\u65ad\u8981\u8fd0\u884c\u7684\u6b63\u786e\u4ee3\u7801\uff0c\u5373\u4f7f\u8be5\u7c7b\u578b\u4e0a\u4e0b\u6587\u4e5f\u88ab\u63a8\u65ad\u51fa\u6765\u3002\u8ba9\u6211\u5174\u594b\u7684\u7c7b\u578b\u7c7b\u7684\u4f8b\u5b50\u662f\u6709\u754c\u683c\u3002\u6709\u754c\u683c\u662f\u5177\u6709\u6700\u5c0f\u5143\u7d20(BOT)\u3001\u6700\u5927\u5143\u7d20(TOP)\u3001\u504f\u5e8f\u5c0f\u4e8e\u5173\u7cfb(&lt\uff1b\uff1a)\u3001\u8054\u63a5\u8fd0\u7b97(Join)\u548c\u76f8\u4ea4\u8fd0\u7b97(Meet)\u7684\u6570\u5b66\u7ed3\u6784\u3002\n\u5728Haskell\u4e2d\uff0c\u53ef\u4ee5\u5c06\u6709\u754c\u683c\u5b9a\u4e49\u4e3a\u7c7b\u578b\u7c7b\uff1aclass Lattice a where top\uff1a\uff1aa bot\uff1a\uff1aA(&lt\uff1b\uff1a)\uff1a\uff1aA-&gt\uff1ba-&gt\uff1bBool Join\uff1a\uff1aA-&gt\uff1ba-&&gt\uff1ba-&gt\uff1ba\u3002\n\u8fd9\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u7c7b\u578ba\u662f\u4e00\u4e2a\u683c\u5b50\uff0c\u90a3\u4e48a\u5c31\u652f\u6301\u9884\u671f\u7684\u64cd\u4f5c\u3002\n\u6211\u771f\u6b63\u559c\u6b22Haskell\u7684\u5730\u65b9\u662f\uff0c\u5b83\u5141\u8bb8\u7a0b\u5e8f\u5458\u5b9a\u4e49\u7c7b\u7684\u6761\u4ef6\u5b9e\u4f8b\uff1b\u4f8b\u5982\uff1aInstance(Ord k\uff0cLattice a)=&gt\uff1bLattice(Map K A)\uff0c\u5176\u4e2dbot=Map.Empty top=error$&#34\uff1b\u65e0\u6cd5\u8868\u793a\u3002&#34\uff1bf&lt\uff1b\uff1ag=Map.isSubmapOfBy(&lt\uff1b\uff1a)f g f`joining`g=Map.unionWith Join f g f`Meet`g=Map.inter.\u3002\n\u8fd9\u6761\u89c4\u5219\u8bf4\uff0c\u5982\u679c\u7c7b\u578bk\u662f\u5e8f\u7684\u5b9e\u4f8b(\u7c7bOrd)\uff0c\u7c7b\u578ba\u662f\u683c\u7684\u5b9e\u4f8b\uff0c\u90a3\u4e48\u4ecek\u5230a\u7684\u6620\u5c04\u4e5f\u662f\u683c\u7684\u5b9e\u4f8b\u3002\n\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u793a\u4f8b\uff0c\u60a8\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5c06\u4e24\u4e2a\u6676\u683c\u7684\u7b1b\u5361\u5c14\u4e58\u79ef\u8f6c\u6362\u4e3a\u6676\u683c\uff1aInstance(Lattice a\uff0cLattice b)=&gt\uff1bLattice(a\uff0cb)\uff0c\u5176\u4e2dbot=(bot\uff0cbot)top=(top\uff0ctop)(a1\uff0cb1)&lt\uff1b\uff1a(a2\uff0cb2)=(a1&lt\uff1b\uff1aa2)||(a1=a2&amp\uff1b&amp\uff1bb1&lt\uff1b\uff1ab2)(a1\uff0cb1)`\u52a0\u5165`(a2\uff0cb2)=(a1`\u52a0\u5165`a2\uff0cb1`\u52a0\u5165`b2)(a1\uff0cb1)`\u76f8\u9047`(a2\uff0cb2)=(a1`\u76f8\u9047`a2\uff0cb1`\u76f8\u9047`b2)\n\u5b83\u5f88\u5bb9\u6613\u5c06\u7f51\u683c\u64cd\u4f5c\u3001\u5173\u7cfb\u548c\u5143\u7d20\u81ea\u7136\u5730\u63d0\u5347\u5230\u51e0\u4e4e\u4efb\u4f55\u6570\u636e\u7ed3\u6784\u3002\u6700\u7ec8\u7ed3\u679c\u662f\uff0c\u5982\u679c\u60a8\u5728\u4ee3\u7801\u4e2d\u7684\u4efb\u4f55\u4f4d\u7f6e\u4f7f\u7528\u8868\u8fbe\u5f0fbot\u6216\u5173\u7cfb&lt\uff1b\uff1a\uff0cHaskell\u5c31\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u6839\u636e\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b(\u5b83\u4e5f\u53ef\u4ee5\u63a8\u65ad)\u63a8\u65ad\u51fa\u5b83\u4eec\u7684\u9002\u5f53\u542b\u4e49\u3002\nML\u8bed\u8a00\u6709\u51fd\u6570\u5668\u6765\u626e\u6f14\u7c7b\u578b\u7c7b\u7684\u89d2\u8272\uff0c\u4f46\u662f\u5b83\u4eec\u7f3a\u4e4f\u5bf9Haskell\u7c7b\u578b\u7c7b\u7684\u5373\u5e2d\u591a\u6001\u6027\u652f\u6301\u3002\u5728MLS\u548cHaskell\u4e2d\u82b1\u8d39\u4e86\u76f8\u5f53\u591a\u7684\u65f6\u95f4\u8fdb\u884c\u7f16\u7a0b\uff0c\u63a8\u7406\u5bf9\u8868\u73b0\u529b\u7684\u5b9e\u9645\u5f71\u54cd\u600e\u4e48\u5f3a\u8c03\u90fd\u4e0d\u4e3a\u8fc7\u3002\n\u771f\u5b9e\u4e16\u754c\u7684\u54c8\u65af\u514b\u5c14\u3002\u6b63\u5982\u4e66\u540d\u6240\u6697\u793a\u7684\uff0c\u672c\u4e66\u5173\u6ce8\u7684\u662f\u5c06Haskell\u7528\u4e8e\u5b9e\u9645\u5e94\u7528\u7a0b\u5e8f(\u4f8b\u5982\uff0cWeb\u7f16\u7a0b)\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u7f16\u8bd1\u5668\u3001\u89e3\u91ca\u5668\u548c\u7a0b\u5e8f\u5206\u6790\u5668\u3002\nScala\u662fJava\u7684\u4e00\u4e2a\u575a\u56fa\u3001\u5bcc\u6709\u8868\u73b0\u529b\u3001\u7edd\u5bf9\u4f18\u8d8a\u7684\u66ff\u4ee3\u54c1\u3002Scala\u662f\u6211\u7528\u4e8e\u7f16\u5199Web\u670d\u52a1\u5668\u6216IRC\u5ba2\u6237\u7aef\u7b49\u4efb\u52a1\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u4e0eOCaml\u4e0d\u540c\u7684\u662f\uff0cOCaml\u662f\u4e00\u79cd\u79fb\u690d\u4e86\u9762\u5411\u5bf9\u8c61\u7cfb\u7edf\u7684\u51fd\u6570\u5f0f\u8bed\u8a00\uff0c\u800cScala\u611f\u89c9\u66f4\u50cf\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u6df7\u5408\u4f53\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u5458\u5e94\u8be5\u80fd\u591f\u7acb\u5373\u5f00\u59cb\u4f7f\u7528Scala\uff0c\u53ea\u6309\u7167\u4ed6\u4eec\u9009\u62e9\u7684\u65b9\u5f0f\u9009\u62e9\u529f\u80fd\u90e8\u5206\u3002\n\u6211\u662f\u4ece\u9a6c\u4e01\u00b7\u5965\u5fb7\u65af\u57fa(Martin Odersky)\u57282006\u5e74POPL\u7684\u7279\u9080\u6f14\u8bb2\u4e2d\u4e86\u89e3\u5230Scala\u7684\u3002\u5f53\u65f6\uff0c\u6211\u8ba4\u4e3a\u51fd\u6570\u5f0f\u7f16\u7a0b\u4e25\u683c\u4f18\u4e8e\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff0c\u6240\u4ee5\u6211\u4e0d\u8ba4\u4e3a\u9700\u8981\u4e00\u79cd\u878d\u5408\u4e86\u51fd\u6570\u5f0f\u7f16\u7a0b\u548c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u8bed\u8a00\u3002(\u8fd9\u53ef\u80fd\u662f\u56e0\u4e3a\u6211\u5f53\u65f6\u5199\u7684\u53ea\u6709\u7f16\u8bd1\u5668\u3001\u89e3\u91ca\u5668\u548c\u9759\u6001\u5206\u6790\u5668\u3002)\u3002\n\u76f4\u5230\u6211\u4ece\u5934\u5f00\u59cb\u7f16\u5199\u4e86\u4e00\u4e2a\u5e76\u53d1httpd\u6765\u652f\u6301\u9488\u5bf9yaplet\u7684\u957f\u671f\u8f6e\u8be2\u7684Ajax\uff0c\u6211\u624d\u610f\u8bc6\u5230\u5bf9Scala\u7684\u9700\u6c42\u3002\u4e3a\u4e86\u83b7\u5f97\u591a\u6838\u652f\u6301\uff0c\u6211\u7528Java\u7f16\u5199\u4e86\u7b2c\u4e00\u4e2a\u7248\u672c\u3002\u6211\u4e0d\u8ba4\u4e3aJava\u6709\u90a3\u4e48\u7cdf\u7cd5\uff0c\u6211\u53ef\u4ee5\u4eab\u53d7\u505a\u5f97\u5f88\u597d\u7684\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u3002\u7136\u800c\uff0c\u4f5c\u4e3a\u4e00\u540d\u51fd\u6570\u5f0f\u7a0b\u5e8f\u5458\uff0c\u7f3a\u5c11\u5bf9\u51fd\u6570\u5f0f\u7f16\u7a0b\u7279\u6027(\u5982\u9ad8\u9636\u51fd\u6570)\u7684\u7b80\u6d01\u652f\u6301\u8ba9\u6211\u5f88\u607c\u706b\u3002\u6240\u4ee5\uff0c\u6211\u7ed9\u4e86\u65af\u5361\u62c9\u4e00\u4e2a\u673a\u4f1a\u3002\nScala\u5728JVM\u4e0a\u8fd0\u884c\uff0c\u56e0\u6b64\u6211\u53ef\u4ee5\u9010\u6b65\u5c06\u73b0\u6709\u9879\u76ee\u79fb\u690d\u5230Scala\u4e2d\u3002\u8fd9\u8fd8\u610f\u5473\u7740\uff0cScala\u9664\u4e86\u62e5\u6709\u76f8\u5f53\u5927\u7684\u5e93\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u8bbf\u95ee\u6574\u4e2aJava\u5e93\u3002\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u5728Scala\u4e2d\u5b8c\u6210\u771f\u6b63\u7684\u5de5\u4f5c\u3002\n\u5f53\u6211\u5f00\u59cb\u4f7f\u7528Scala\u65f6\uff0c\u51fd\u6570\u4e16\u754c\u548c\u9762\u5411\u5bf9\u8c61\u4e16\u754c\u662f\u5982\u6b64\u7d27\u5bc6\u5730\u6df7\u5408\u5728\u4e00\u8d77\uff0c\u7ed9\u6211\u7559\u4e0b\u4e86\u6df1\u523b\u7684\u5370\u8c61\u3002\u5177\u4f53\u5730\u8bf4\uff0cScala\u6709\u4e00\u4e2a\u5f3a\u5927\u7684case\u7c7b/\u6a21\u5f0f\u5339\u914d\u7cfb\u7edf\uff0c\u89e3\u51b3\u4e86\u6211\u4f7f\u7528Standard ML\u3001OCaml\u548cHaskell\u65f6\u6325\u4e4b\u4e0d\u53bb\u7684\u70e6\u607c\uff1a\u7a0b\u5e8f\u5458\u53ef\u4ee5\u51b3\u5b9a\u5bf9\u8c61\u7684\u54ea\u4e9b\u5b57\u6bb5\u5e94\u8be5\u5339\u914d(\u800c\u4e0d\u662f\u5f3a\u5236\u6240\u6709\u5b57\u6bb5\u90fd\u5339\u914d)\uff0c\u5e76\u4e14\u5141\u8bb8\u4f7f\u7528\u53ef\u53d8\u53c2\u6570\u3002\u4e8b\u5b9e\u4e0a\uff0cScala\u751a\u81f3\u5141\u8bb8\u7a0b\u5e8f\u5458\u5b9a\u4e49\u7684\u6a21\u5f0f\u3002\n\u6211\u7f16\u5199\u4e86\u5f88\u591a\u5728\u62bd\u8c61\u8bed\u6cd5\u8282\u70b9\u4e0a\u64cd\u4f5c\u7684\u51fd\u6570\uff0c\u6240\u4ee5\u53ea\u5728\u8bed\u6cd5\u5b50\u8282\u70b9\u4e0a\u5339\u914d\uff0c\u800c\u5ffd\u7565\u6ce8\u91ca\u6216\u6e90\u4f4d\u7f6e\u7684\u5b57\u6bb5\u662f\u5f88\u597d\u7684\u3002\nCASE\u7c7b\u7cfb\u7edf\u5141\u8bb8\u8de8\u591a\u4e2a\u6587\u4ef6\u6216\u540c\u4e00\u6587\u4ef6\u7684\u591a\u4e2a\u90e8\u5206\u62c6\u5206\u4ee3\u6570\u6570\u636e\u7c7b\u578b\u7684\u5b9a\u4e49\u3002Scala\u8fd8\u901a\u8fc7\u79f0\u4e3a\u7279\u5f81\u7684\u7c7b\u7ed3\u6784\u652f\u6301\u5b9a\u4e49\u826f\u597d\u7684\u591a\u91cd\u7ee7\u627f\u3002\u800c\u4e14\uff0cScala\u5141\u8bb8\u64cd\u4f5c\u7b26\u91cd\u8f7d\uff1b\u751a\u81f3\u51fd\u6570\u5e94\u7528\u7a0b\u5e8f\u548c\u96c6\u5408\u66f4\u65b0\u4e5f\u53ef\u4ee5\u91cd\u8f7d\u3002\u5982\u679c\u4f7f\u7528\u5f97\u5f53\uff0c\u8fd9\u5f80\u5f80\u4f1a\u4f7f\u6211\u7684Scala\u7a0b\u5e8f\u66f4\u52a0\u76f4\u89c2\u548c\u7b80\u6d01\u3002\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u4e0e\u7c7b\u578b\u7c7b\u5728Haskell\u4e2d\u8282\u7701\u4ee3\u7801\u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u6709\u4e00\u4e2a\u7279\u6027\u53ef\u4ee5\u8282\u7701\u5927\u91cf\u4ee3\u7801\uff0c\u90a3\u5c31\u662f\u9690\u542b\u3002\u60a8\u53ef\u4ee5\u5c06\u9690\u542b\u60f3\u8c61\u4e3a\u7c7b\u578b\u68c0\u67e5\u5668\u7684\u9519\u8bef\u6062\u590d\u9636\u6bb5\u7684API\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u5f53\u7c7b\u578b\u68c0\u67e5\u5668\u9700\u8981X\u4f46\u5f97\u5230Y\u65f6\uff0c\u5b83\u5c06\u68c0\u67e5\u5728\u4f5c\u7528\u57df\u4e2d\u662f\u5426\u6709\u6807\u8bb0\u4e3a\u9690\u5f0f\u7684\u51fd\u6570\u5c06Y\u8f6c\u6362\u4e3aX\uff1b\u5982\u679c\u627e\u5230\uff0c\u5b83\u4f1a\u81ea\u52a8\u5e94\u7528\u9690\u5f0f\u51fd\u6570\u6765\u4fee\u590d\u7c7b\u578b\u9519\u8bef\u3002\n\u542b\u4e49\u4f7f\u60a8\u770b\u8d77\u6765\u50cf\u662f\u5728\u6709\u9650\u8303\u56f4\u5185\u6269\u5c55\u7c7b\u578b\u7684\u529f\u80fd\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u60a8\u60f3\u8981\u5c06&#34\uff1b\u4e00\u4e2aegrieHTML()\u65b9\u6cd5\u6dfb\u52a0\u5230\u5b57\u7b26\u4e32\u7c7b\u578b\u4e2d\u3002\u60a8\u4e0d\u80fd\u4fee\u6539String\u7684\u5b9a\u4e49\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u9690\u5f0f\u4fee\u6539\uff0c\u4ee5\u4fbf\u5f53myString.scape eHTML()\u7684\u7c7b\u578b\u68c0\u67e5\u5931\u8d25\u65f6\uff0c\u5b83\u5c06\u5728\u4f5c\u7528\u57df\u4e2d\u67e5\u627e\u9690\u5f0f\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u53ef\u4ee5\u5c06String\u5bf9\u8c61\u8f6c\u6362\u4e3a\u652f\u6301audeHTML()\u65b9\u6cd5\u7684\u7c7b\u578b\u3002\nIMPLICE\u8fd8\u5141\u8bb8\u5728Scala\u4e2d\u4f7f\u7528\u66f4\u5e72\u51c0\u7684\u7279\u5b9a\u4e8e\u57df\u7684\u5d4c\u5165\u5f0f\u8bed\u8a00(DSEL)\uff0c\u56e0\u4e3a\u5b83\u4eec\u5141\u8bb8\u60a8\u5c06Scala\u6587\u5b57(\u59823\u6216#34\uff1bWhile)\u900f\u660e\u5730\u6620\u5c04\u5230dsel\u4e2d\u7684\u6587\u5b57\u3002\nMartin Odersky(Scala\u7684\u521b\u5efa\u8005)\u3001Lex Spoon\u548cBill Venners\u5728Scala\u4e2d\u7684\u7f16\u7a0b\u65e2\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4ecb\u7ecd\uff0c\u4e5f\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u53c2\u8003\u3002\nML\u5bb6\u65cf\u662f\u8bed\u8a00\u8bbe\u8ba1\u9886\u57df\u7684\u4e00\u4e2a\u751c\u871c\u70b9\uff1a\u4e25\u683c\u7684\u3001\u526f\u4f5c\u7528\u5927\u7684\u548cHindley-Milner\u7c7b\u578b\u63a8\u65ad\u7684\u3002\u8fd9\u4f7f\u5f97\u8fd9\u4e9b\u8bed\u8a00\u9002\u7528\u4e8e\u9700\u8981\u9ad8\u6027\u80fd\u548c\u66f4\u5f3a\u7684\u6b63\u786e\u6027\u4fdd\u8bc1\u7684\u5b9e\u9645\u9879\u76ee\u3002ML\u5bb6\u65cf\u5f97\u5230\u4e86\u822a\u7a7a\u5de5\u7a0b\u5e08(\u56e0\u4e3a\u5b83\u5bf9\u65e0bug\u4ee3\u7801\u7684\u652f\u6301)\u548c\u91d1\u878d\u884c\u4e1a\u7684\u7a0b\u5e8f\u5458(\u51fa\u4e8e\u540c\u6837\u7684\u539f\u56e0)\u7684\u652f\u6301\u3002\u6807\u51c6ML\u662f\u6211\u5b66\u5f97\u5f88\u597d\u7684\u7b2c\u4e00\u79cd\u51fd\u6570\u5f0f\u8bed\u8a00\uff0c\u6240\u4ee5\u6211\u4ecd\u7136\u8bb0\u5f97\u88ab\u5b83\u7684\u8868\u73b0\u529b\u6240\u9707\u60ca\u3002\n\u4eca\u5929\uff0cOCaml\u4f3c\u4e4e\u662f\u6700\u53d7\u6b22\u8fce\u7684\u5b66\u4e60ML\uff0c\u4f46\u81f3\u5c11\u6709\u4e00\u4e2a\u4ee4\u4eba\u4fe1\u670d\u7684\u8bba\u636e\u652f\u6301SML&#39\uff1bMLton\u3002MLton\u786e\u5b9e\u9610\u8ff0\u4e86\u51fd\u6570\u5f0f\u8bed\u8a00\u63d0\u4f9b\u6700\u597d\u7684\u4f18\u5316\u673a\u4f1a\u8fd9\u4e00\u8bba\u70b9\u3002\u4f5c\u4e3a\u4e00\u4e2a\u5168\u7a0b\u5e8f\u4f18\u5316\u7f16\u8bd1\u5668\uff0c\u6211\u8fd8\u6ca1\u6709\u770b\u5230\u53e6\u4e00\u4e2a\u7f16\u8bd1\u5668\u7684\u6027\u80fd\u80fd\u4e0e\u4e4b\u5339\u654c\u3002\u6211\u66fe\u7ecf\u4e3aMLton\u521b\u5efa\u4e86OpenGL\u7ed1\u5b9a\u6765\u73a9\u5f043D\u56fe\u5f62\uff0c\u7ed3\u679c\u5f97\u5230\u7684\u7a0b\u5e8f\u6bd4\u6211\u7528\u4f5c\u53c2\u8003\u7684\u57fa\u4e8eC++\u7684\u6a21\u578b\u8fd0\u884c\u5f97\u66f4\u5feb\uff0c\u53ea\u7528\u4e8610%\u7684\u4ee3\u7801\u3002\nSML\u4e2d\u7684\u51fd\u6570\u5668\u7cfb\u7edf\u867d\u7136\u6bd4Haskell\u7684\u7c7b\u578b\u7c7b\u7cfb\u7edf\u66f4\u5197\u957f\uff0c\u4f46\u66f4\u7075\u6d3b\u3002\u4e00\u65e6\u60a8\u5728Haskell\u4e2d\u4e3a\u79cd\u7c7b/\u7c7b\u578bk\u5b9e\u4f8b\u5316\u4e86\u4e00\u4e2a\u7c7b\u578b\u7c7bT\uff0c\u60a8\u5c31\u4e0d\u80fd\u4e3a\u8be5\u79cd\u7c7b/\u7c7b\u578b\u518d\u6b21\u5b9e\u4f8b\u5316\u8be5\u7c7b\u578b\u7c7b\u3002\u4f7f\u7528\u51fd\u6570\u5668\uff0c\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u6709\u81ea\u5df1\u7684\u540d\u79f0\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u62e5\u6709\u540c\u4e00\u7c7b\u578b\u7684\u7ed9\u5b9a\u51fd\u6570\u5668\u7684\u591a\u4e2a\u5b9e\u4f8b\u3002\u6211\u5f88\u5c11\u9700\u8981\u8fd9\u6837\u7684\u8868\u73b0\u529b\uff0c\u4f46\u5728\u90a3\u4e9b\u6211\u9700\u8981\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u5f88\u597d\u7684\u3002\nML\u65cf\u8c31\u4e0a\u7684\u53e6\u4e00\u4e2a\u73b0\u4ee3\u5206\u652fOCaml\u662f\u5f88\u597d\u4e86\u89e3\u7684\uff0c\u56e0\u4e3a\u6709\u4e00\u4e2a\u5f88\u5927\u7684\u793e\u533a\u6295\u8d44\u4e8e\u5b83\uff0c\u8fd9\u610f\u5473\u7740\u6709\u5f88\u591a\u53ef\u7528\u7684\u5e93\u3002OCaml\u5de5\u5177\u94fe\u4e5f\u5f88\u4e30\u5bcc\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u4f7f\u7528\u89e3\u91ca\u5668\u3001\u4f18\u5316\u7f16\u8bd1\u5668\u548c\u5b57\u8282\u7801\u7f16\u8bd1\u5668\u3002\n\u56e0\u4e3aML\u8bed\u8a00\u6bd4\u6240\u6709\u4e3b\u6d41\u8bed\u8a00\u66f4\u6709\u8868\u73b0\u529b\uff0c\u4f46\u662f\u5b83\u4eec\u4ecd\u7136\u5141\u8bb8\u4ea7\u751f\u526f\u4f5c\u7528\uff0c\u6240\u4ee5\u5b83\u4eec\u5728\u5b66\u4e60Haskell\u7684\u8fc7\u7a0b\u4e2d\u505a\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u505c\u987f\u3002\u5728Haskell\u4e2d\uff0c\u8fd8\u4e0d\u7cbe\u901a\u51fd\u6570\u5f0f\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u7a0b\u5e8f\u5458\u53ef\u80fd\u4f1a\u53d1\u73b0\u4ed6\u4eec\u5728\u89d2\u843d\u91cc\u91cd\u590d\u7f16\u5199\u4ee3\u7801\uff0c\u5728\u90a3\u91cc\u4ed6\u4eec\u65e0\u6cd5\u8bbf\u95ee\u4ed6\u4eec\u9700\u8981\u7684Monad\u3002MLS\u4fdd\u6301\u5bf9\u4e0d\u5b8c\u6574\u8bbe\u8ba1\u7684\u526f\u4f5c\u7528\u8fdb\u884c\u4fee\u8865\uff0c\u8fd9\u53ef\u4ee5\u9632\u6b62\u9879\u76ee\u7a81\u7136\u51fa\u73b0\u4e0d\u53ef\u9884\u6599\u7684\u91cd\u6784\u6216\u4e2d\u6b62\u51b3\u5b9a\u70b9\u3002(\u5de5\u4e1a\u548c\u4fe1\u606f\u5316\u90e8\u7535\u5b50\u79d1\u5b66\u6280\u672f\u60c5\u62a5\u7814\u7a76\u6240\u9648\u51af\u5bcc\u73cd\u8bd1\u4e3a\u201c\u9003\u751f\u8231\u95e8\u201d\uff0c\u5373\u201c\u9003\u751f\u8231\u95e8\u201d)\uff0c\u4ee5\u9632\u6b62\u9879\u76ee\u7a81\u7136\u51fa\u73b0\u610f\u5916\u7684\u91cd\u6784\u6216\u4e2d\u6b62\u51b3\u7b56\u70b9\u3002\u8bed\u8a00\u7684\u4e00\u4e2a\u6709\u7528\u7684\u8861\u91cf\u6807\u51c6\u662f\u5b83\u5bf9\u8f6f\u4ef6\u7cfb\u7edf\u7684\u7cdf\u7cd5\u6216\u4e0d\u5b8c\u6574\u8bbe\u8ba1\u7684\u5bb9\u5fcd\u5ea6\uff0c\u56e0\u4e3a\u8bbe\u8ba1\u4e0d\u53ef\u907f\u514d\u5730\u4f1a\u968f\u7740\u7a0b\u5e8f\u7684\u53d1\u5c55\u800c\u53d8\u5316\u3002\u5728\u8fd9\u65b9\u9762\uff0cMLS\u4ecd\u7136\u6bd4\u54c8\u65af\u514b\u5c14\u5360\u4e0a\u98ce\u3002\n\u9762\u5411\u6b63\u5728\u5de5\u4f5c\u7684\u7a0b\u5e8f\u5458\u7684ML\u53ef\u4f5c\u4e3aSML\u7684\u5f88\u597d\u7684\u5165\u95e8\u548c\u53c2\u8003\u6587\u672c\u3002\u8fd9\u662f\u6211\u5b66\u5230\u7684\u4e00\u672c\u4e66\uff0c\u5b83\u5f88\u597d\u5730\u4ecb\u7ecd\u4e86ML\u8bed\u8a00\u5bb6\u65cf(\u5305\u62ecHaskell)\u7684\u7f16\u7a0b\u601d\u60f3\u8fc7\u7a0b\u3002\u5b83\u8fd8\u4ecb\u7ecd\u4e86\u5982\u4f55\u5b9e\u73b0SML\u5e93\u6ca1\u6709\u63d0\u4f9b\u7684\u91cd\u8981\u529f\u80fd\u6570\u636e\u7ed3\u6784(\u6811\u548c\u6620\u5c04)\u3002\nSchema\u662f\u4e00\u79cd\u5177\u6709\u7eaf\u7cb9\u6838\u5fc3(\u03bb\u6f14\u7b97\u548c\u5217\u8868\u7406\u8bba)\u548c\u6700\u5927\u5316\u8868\u8fbe\u81ea\u7531\u7684\u8bbe\u8ba1\u4efb\u52a1\u7684\u8bed\u8a00\u3002\u5b83\u662f\u975e\u7c7b\u578b\u5316\u7684\uff0c\u8fd9\u4f7f\u5f97\u5b83\u975e\u5e38\u9002\u5408\u57fa\u4e8e\u7f51\u7edc\u7684\u7f16\u7a0b\u548c\u5feb\u901f\u539f\u578b\u5236\u4f5c\u3002\u8003\u8651\u5230\u5b83\u7684Lisp\u4f20\u7edf\uff0cScheme\u662f\u4eba\u5de5\u667a\u80fd\u7684\u5929\u7136\u9009\u62e9\u3002\n\u7531\u4e8e\u652f\u6301\u4efb\u610f\u7cbe\u5ea6\u7684\u6570\u5b57\uff0cScheme\u4e5f\u662f\u6211\u5b9e\u73b0\u5bc6\u7801\u7b97\u6cd5\u7684\u9996\u9009\u3002[\u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605\u6211\u5bf9RSA\u7684\u7b80\u77ed\u5b9e\u73b0\uff0c\u4ee5\u53caScheme\u4e2d\u7684Fermat\u548cSolovay-Strassen\u7d20\u6570\u6d4b\u8bd5\u3002]\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4f7f\u7528Scheme\u6700\u6709\u8bf4\u670d\u529b\u7684\u7406\u7531\u662f\u5b83\u7684\u5b8f\u89c2\u7cfb\u7edf\u3002Scheme\u53ef\u7528\u7684\u6240\u6709\u5b8f\u7cfb\u7edf\uff0c\u5305\u62ec\u6807\u51c6\u8bed\u6cd5\u89c4\u5219\u548c\u8bed\u6cd5\u5927\u5c0f\u5199\u7cfb\u7edf\uff0c\u90fd\u662f\u56fe\u7075\u7b49\u4ef7\u7684\u3002\n\u56e0\u6b64\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u91cd\u65b0\u914d\u7f6e\u65b9\u6848\uff0c\u4ee5\u51cf\u5c11\u8bed\u8a00\u548c\u624b\u5934\u4efb\u52a1\u4e4b\u95f4\u7684\u963b\u6297\u5931\u914d\u3002\u4e0e\u5bf9\u4e00\u6d41\u5ef6\u7eed\u7684\u652f\u6301\u76f8\u7ed3\u5408\uff0c\u751a\u81f3\u53ef\u4ee5\u5d4c\u5165\u66ff\u4ee3\u7f16\u7a0b\u8303\u4f8b(\u5982\u903b\u8f91\u7f16\u7a0b)\u3002\n\u4f8b\u5982\uff0c\u5728\u4ee3\u7801\u4e2d\uff1a(let((x(Amb345))(y(Amb678)(assert(=(+xy)12))(Display X)(Display Y))\u3002\n\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2aamb\u5b8f\uff0c\u8be5\u5b8f\u9009\u62e9\u6b63\u786e\u7684\u53c2\u6570\u4f7f\u540e\u7eed\u7684ASSERT\u8bed\u53e5\u4e3a\u771f\u3002(\u6b64\u7a0b\u5e8f\u5148\u6253\u53704\uff0c\u7136\u540e\u6253\u53708\u3002)\u3002\n\u5728Scheme\u4e2d\uff0c\u5728\u8ba1\u7b97\u7684\u4efb\u4f55\u65f6\u95f4\u70b9\uff0c\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u6355\u83b7\u5f53\u524d\u5ef6\u7eed\u4f5c\u4e3a\u8fc7\u7a0b\uff1a\u8c03\u7528\u6b64\u8fc7\u7a0b\u4f1a\u5c06\u7a0b\u5e8f\u8fd4\u56de\u5230\u6355\u83b7\u5ef6\u7eed\u65f6\u5b58\u5728\u7684\u6c42\u503c\u4e0a\u4e0b\u6587\u3002\u4f7f\u7528\u5ef6\u7eed\u7684\u7f16\u7a0b\u611f\u89c9\u5c31\u50cf\u5728\u65f6\u95f4\u4e2d\u6765\u56de\u65c5\u884c\uff0c\u5728\u5e73\u884c\u7684\u5b87\u5b99\u4e4b\u95f4\u8f6c\u6362\u3002\n\u5f52\u6839\u7ed3\u5e95\uff0cScheme\u662f\u5982\u6b64\u7684\u5c0f\u5de7\u548c\u53ef\u6269\u5c55\uff0c\u6240\u4ee5\u5173\u4e8e\u5b83\u6ca1\u6709\u592a\u591a\u53ef\u8bf4\u7684\uff0c\u9664\u4e86Scheme\u5141\u8bb8\u7a0b\u5e8f\u5458\u4ece\u8bed\u8a00\u4e2d\u63d0\u53d6\u7a0b\u5e8f\u5458\u613f\u610f\u653e\u5165\u5176\u4e2d\u7684\u4efb\u4f55\u5185\u5bb9\u3002\n\u7403\u62cd(\u524d\u8eab\u4e3aPLT Scheme)\u662f\u4e00\u4e2a\u5305\u542b\u7535\u6c60\u7684Scheme\u7cfb\u7edf\uff0c\u5305\u62ec\u4e00\u4e2a\u7ecf\u8fc7\u6218\u6597\u6d4b\u8bd5\u7684IDE\u3001\u4e00\u4e2a\u7f16\u8bd1\u5668\u548c\u4e00\u4e2a\u89e3\u91ca\u5668\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0cracket\u5e93\u975e\u5e38\u5e9e\u5927\uff1a\u5b83\u6709\u4e00\u4e2a\u5c06\u7c7b\u578b\u7cfb\u7edf\u6dfb\u52a0\u5230\u8bed\u8a00\u4e2d\u7684\u6a21\u5757\uff1b\u5b83\u6709\u4e00\u4e2a\u6dfb\u52a0\u6a21\u5f0f\u5339\u914d\u7684\u6a21\u5757\uff1b\u5b83\u6709\u4e00\u4e2a\u7528\u4e8eOpenGL\u7f16\u7a0b\u7684\u6a21\u5757\uff1b\u5b83\u8fd8\u6709\u4e00\u4e2a\u7528\u4e8e\u57fa\u4e8e\u5ef6\u7eed\u7684web\u670d\u52a1\u5668\u7684\u6a21\u5757\u3002\u5728\u7403\u62cd\u4e2d\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u4e1c\u897f\u90fd\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u6a21\u5757\u3002\n\u6211\u5728\u7403\u62cd\u4e0a\u770b\u5230\u7684\u6700\u597d\u7684\u4e00\u672c\u4e66--\u7403\u62cd\u9886\u57df--\u901a\u8fc7\u6e38\u620f\u7f16\u7a0b\u4ecb\u7ecd\u4e86\u8fd9\u79cd\u8bed\u8a00\u7684\u7279\u70b9\uff1a", "note_en": "Students often ask for a recommendation on what language they should learn next. If you&#39;re looking for a job in industry, my reply is to learn whatever is hot right now: C++, Java and C#--and probably Python, Ruby, PHP and Perl too.\n  If, on the other hand, you&#39;re interested in enlightenment, academic research or a start-up, the criterion by which you should choose your next language is not employability, but expressiveness. In academic research and in entrepreneurship, you need to multiply your effectiveness as a programmer, and since you (probably) won&#39;t be working with an entrenched code base, you are free to use whatever language best suits the task at hand.\n  Here you&#39;ll find descriptions of four good languages to learn--Haskell, Scala, ML and Scheme--with a list of my favorite features for each, and pointers on where to learn more.\n  Of course, this short list is by no means exhaustive. There are many uncommon languages that excel at niches. To name just a few more, there&#39;s also D for systems programming; Erlang or Clojure for concurrency; and Datalog for constraint programming. Then there are languages like Smalltalk--alternate yet fully capable universes that branched off from mainstream computing long ago.\n  I encourage my students to never stop learning niche languages. They expand your modes of thinking, the kinds of problems you solve quickly and your appreciation for the meaning of computation.\n   Haskell excels as a language for writing a compiler, an interpreter or a static analyzer. I don&#39;t do a lot of artificial intelligence, natural-language processing or machine-learning research, but if I did, Haskell would be my first pick there too. ( Scheme would be a strong second.) Haskell is the only widely used pure, lazy functional programming language.\n  Like Standard ML and OCaml, Haskell uses an extension of  Hindley-Milner-style type inference, which means that the programmer doesn&#39;t have to write down (most) types, because the compiler can infer them. It has been my experience that it is difficult to get a bug through the Hindley-Milner type system. In fact, experienced programmers become adept at encoding correctness constraints directly into the Haskell type system. A common remark after programming in Haskell (or ML) for the first time is that once the program compiles, it&#39;s almost certainly correct.\n  As a pure language, side effects (mutations of variables or data structures and I/O) are prohibited in the language proper. This has forced the language&#39;s designers to think seriously about how to provide such functionality. Their answer,  monads, enables one to perform side effects and I/O inside a safely constrained framework. Naturally, Haskell lets users define their own monads, and now the programmer has access to monads for continuations, transducers, exceptions, logic programming and more.\n  Aside from being pure, Haskell is also lazy. That is, an expression in Haskell is not evaluated until (and unless) its result is required to make forward computational progress. Some have argued that the promised efficiency gains from laziness haven&#39;t materialized, but that&#39;s not of concern for me. I appreciate laziness for the increase in  expressiveness. In Haskell, it is trivial to describe data structures of infinite extent. Where other languages permit mutually recursive functions, Haskell permits mutually recursive values.\n  More pragmatically, I have found laziness useful in encoding option types, where utilizing the empty case should always nuke the program. In Haskell, you can avoid creating an option type and instead use  error to produce the empty value. Because of laziness, every type in Haskell automatically has two additional values: non-termination and error. Used well, this eliminates much tedious pattern matching.\n  My favorite feature of Haskell is type classes. Haskell&#39;s type system allows the compiler to infer the correct code to run based on its type context, even when that type context is  also inferred. The example of type classes that got me excited was bounded lattices. A  bounded lattice is a mathematical structure that has a least element ( bot), a greatest element ( top), a partially ordered less than relation ( &lt;:), a join operation ( join) and a meet operation ( meet).\n  In Haskell, one can define a bounded lattice as a type class:  class Lattice a where top :: a bot :: a (&lt;:) :: a -&gt; a -&gt; Bool join :: a -&gt; a -&gt; a meet :: a -&gt; a -&gt; a\n This says that if type  a is a  Lattice, then  a supports the expected operations.\n  What I really love about Haskell is that it lets the programmer define conditional instances of a class; for example:  instance (Ord k, Lattice a) =&gt; Lattice (Map k a) where bot = Map.empty top = error $ &#34;Cannot be represented.&#34; f &lt;: g = Map.isSubmapOfBy (&lt;:) f g f `join` g = Map.unionWith join f g f `meet` g = Map.intersectionWith meet f g\n This rule says that if the type  k is an instance of an order (class  Ord) and the type  a is an instance of a lattice, then a map from  k to  a is also an instance of a lattice.\n  As another example, you can easily turn the Cartesian product of two lattices into a lattice:  instance (Lattice a, Lattice b) =&gt; Lattice (a,b) where bot = (bot,bot) top = (top,top) (a1,b1) &lt;: (a2,b2) = (a1 &lt;: a2) || (a1 == a2 &amp;&amp; b1 &lt;: b2) (a1,b1) `join` (a2,b2) = (a1 `join` a2, b1 `join` b2) (a1,b1) `meet` (a2,b2) = (a1 `meet` a2, b1 `meet` b2)\n  It&#39;s easy to make the &#34;natural&#34; lifting of the lattice operations, relations and elements to almost any data structure. The end result is that if you use the expression  bot or the relation  &lt;: anywhere in your code, Haskell can infer, at compile-time, their &#34;appropriate&#34; meaning based on the type of the expression (which it can also infer).\n  The ML languages have functors to play the role of type classes, but they lack the  ad hoc polymorphism support of Haskell&#39;s type classes. Having spent a considerable amount of time programming in the MLs and in Haskell, the practical ramifications of inference on expressiveness cannot be overstated.\n        Real World Haskell. As the title implies, this book pays attention to using Haskell for real applications ( e.g., web programming), instead of just for compilers, interpreters and program analyzers.\n      Scala is a rugged, expressive, strictly superior replacement for Java. Scala is the programming language I use for tasks like writing web servers or IRC clients. In contrast to  OCaml, which was a functional language with an object-oriented system grafted to it, Scala feels more like a true hybrid. That is, object-oriented programmers should be able to start using Scala immediately, picking up the functional parts only as they choose to.\n  I learned of Scala from  Martin Odersky&#39;s invited talk at POPL 2006. At the time, I saw functional programming as strictly superior to object-oriented programming, so I didn&#39;t see a need for a language that fused functional and object-oriented programming. (That was probably because all I wrote back then were compilers, interpreters and static analyzers.)\n  The need for Scala didn&#39;t become apparent to me until I wrote a concurrent HTTPD from scratch to support long-polled AJAX for  yaplet. In order to get multicore support, I wrote the first version in Java. I don&#39;t think Java is all that bad, and I can enjoy well-done object-oriented programming. As a functional programmer, however, the lack of terse support for functional programming features (like higher-order functions) grates on me. So, I gave Scala a chance.\n  Scala runs on the JVM, so I could gradually port my existing project into Scala. It also means that Scala, in addition to its own rather  large library, has access to the entire Java library as well. This means you can get real work done in Scala.\n  As I started using Scala, I became impressed by how tightly the functional and object-oriented worlds had been blended. In particular, Scala has a powerful case class/pattern-matching system that addressed annoyances lingering from my experiences with Standard ML, OCaml and Haskell: the programmer can decide which fields of an object should be matchable (as opposed to being forced to match on all of them), and variable-arity arguments are permitted. In fact, Scala even allows programmer-defined patterns.\n  I write a lot of functions that operate on abstract syntax nodes, so it&#39;s nice to match on only the syntactic children, while ignoring fields for annotations or source location.\n  The case class system lets one split the definition of an algebraic data type across multiple files or across multiple parts of the same file. Scala also supports well-defined multiple inheritance through class-like constructs called traits. And, Scala allows operator overloading; even function application and collection update can be overloaded. Used well, this tends to make my Scala programs more intuitive and concise.\n  One feature that turns out to save a lot of code, in the same way that type classes save code in Haskell, is implicits. You can imagine implicits as an API for the error-recovery phase of the type-checker. In short, when the type checker needs an X but got a Y, it will check to see if there&#39;s a function marked implicit in scope that converts Y into X; if it finds one, it automatically applies the implicit function to repair the type error.\n  Implicits make it possible to look like you&#39;re extending the functionality of a type for a limited scope. For example, suppose you want to &#34;add&#34; an  escapeHTML() method to type  String. You can&#39;t modify the definition of  String, but with implicits, you can make it so that when type-checking fails on  myString.escapeHTML(), it will look for an implicit function in scope that can convert a  String object into a type that supports the  escapeHTML() method.\n  Implicits also allow cleaner domain-specific embedded languages (DSELs) in Scala, since they allow you to transparently map Scala literals (like  3 or  &#34;while&#34;) into literals in the DSEL.\n            Programming in Scala  by Martin Odersky (creator of Scala), Lex Spoon, and Bill Venners is great as both an introduction and a reference.\n      The ML family is a sweet spot in the language-design space: strict, side-effectable and Hindley-Milner type-inferred. This makes these languages practical for real-world projects that need high performance  and stronger guarantees of correctness. The ML family has gained traction with aerospace engineers (for its support of bug-free code) and with programmers in the financial industry (for the same reason). Standard ML was the first functional language I learned well, so I still remember being shocked by its expressiveness.\n  Today, OCaml seems to be the popular ML to learn, but there is at least one convincing argument in SML&#39;s favor:  MLton. MLton really delivers on the thesis that functional languages offer the best opportunities at optimization. As a whole-program optimizing compiler, I&#39;ve yet to see another compiler match its performance. I once created OpenGL bindings for MLton to toy around with 3D graphics, and the resulting program ran faster than the C++-based model I had used as a reference, with just 10% of the code.\n  The functor system in SML, while more verbose than Haskell&#39;s type class system, is more flexible. Once you instantiate a type class  T for a kind/type  k in Haskell, you can&#39;t instantiate that type class again for that kind/type. With functors, each instance gets its own name, so you can have multiple instances of a given functor for the same type. It&#39;s rarely been the case that I needed such expressiveness, but it has been nice in those cases where I have.\n  The other modern branch on the ML family tree, OCaml, is good to know because there is a large community invested in it, which means that there are a lot of libraries available. The OCaml tool-chain is also rich, with interpreters, optimizing compilers and byte-code compilers available to the developer.\n  Because the ML languages are more expressive than all the mainstream languages, but they still permit side effects, they make a nice stop on the way to learning Haskell. In Haskell, programmers not yet well versed in functional program design may find they repeatedly code themselves into a corner, where they don&#39;t have access to the monad that they need. The MLs keep the side effects &#34;escape hatch&#34; open to patch over incomplete design, which prevents projects from coming to a sudden, unexpected &#34;refactor-or-abort&#34; decision point. One useful measure of a language is how well it tolerates a bad or incomplete design for the software system, since design is something that inevitably changes as a program evolves. In this regard, the MLs still have the upper hand over Haskell.\n        ML for the Working Programmer  serves as a good introductory and reference text for SML.   It&#39;s the book I learned from, and it&#39;s a good introduction to the thought process of programming in the ML family of languages (including Haskell). It also covers how to implement the important functional data structures (trees and maps) not provided by the SML library.\n      Scheme is a language with a pure core (\u03bb-calculus and the theory of lists) and a design mandate to maximize freedom of expression. It&#39;s untyped, which makes it ideal for web-based programming and rapid prototyping. Given its Lisp heritage, Scheme is a natural fit for artificial intelligence.\n  With its support for arbitrary-precision numerics, Scheme is also my first choice for implementing cryptographic algorithms. [For examples, see my short implementations of  RSA and the  Fermat and Solovay-Strassen primality tests in Scheme.]\n  By far, the most compelling reason to use Scheme is its macro system. All of the macro systems available for Scheme, including the standard  syntax-rules and  syntax-case systems, are Turing-equivalent.\n  Consequently, the programmer can reconfigure Scheme to reduce the impedance mismatch between the language and the task at hand. Combined with support for first-class continuations, it is even possible to embed alternate programming paradigms (like logic programming).\n  For example, in the code:  (let ((x (amb 3 4 5)) (y (amb 6 7 8 ))) (assert (= (+ x y) 12)) (display x) (display y))\n it is possible to write an  amb macro that &#34;chooses&#34; the right argument to make a subsequent  assert statement be true. (This program prints 4 and then 8.)\n  In Scheme, during any point in the computation, the program can capture the current continuation as a procedure: invoking this procedure returns the program to the evaluation context that existed when the continuation was captured. Programming with continuations feels like traveling back and forth in time and shifting between parallel universes.\n  Ultimately, Scheme is so minimal and extensible that there&#39;s not a whole lot to say about it, except that Scheme allows the programmer to extract from the language whatever the programmer is willing to put into it.\n            Racket (formerly PLT Scheme) is a &#34;batteries included&#34; Scheme system, including a battle-tested IDE, a compiler and an interpreter. More importantly, the Racket library is immense: it has a module that adds a type system to the language; it has a module that adds pattern-matching; it has a module for OpenGL programming; and it has a module for continuation-based web servers. In Racket, there&#39;s already a module for just about everything.\n  The best book I&#39;ve seen on Racket -- Realm of Racket  -- introduces the features of the language through game programming:", "posttime": "2020-05-05 18:43:33", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u7a0b,programming language,\u7f16\u7a0b\u8bed\u8a00,programming,\u7c7b\u578b", "title": "\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00", "title_en": "Advanced Programming Languages", "transed": 1, "url": "http://matt.might.net/articles/best-programming-languages/", "via": "", "real_tags": ["\u7f16\u7a0b", "language", "\u7f16\u7a0b\u8bed\u8a00", "\u7c7b\u578b"]}, {"category": "", "categoryclass": "", "imagename": "26b84a86800a731030ff2028a4cc736f.jpg", "infoid": 1000725, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u6211\u4eec\u7684\u6700\u4f73CPU\u6307\u5357\u7cfb\u5217\u4e2d\uff0c\u8fd9\u91cc\u662f\u6211\u4eec\u63a8\u8350\u7684\u5de5\u4f5c\u7ad9CPU\u5217\u8868\u7684\u6700\u65b0\u66f4\u65b0\u3002\u6587\u672c\u4e2d\u7684\u6240\u6709\u6570\u5b57\u90fd\u4f1a\u66f4\u65b0\uff0c\u4ee5\u53cd\u6620\u64b0\u5199\u65f6\u7684\u5b9a\u4ef7\u3002\u56fe\u8868\u4e2d\u7684\u6570\u5b57\u53cd\u6620\u4e86MSRP\u3002\n\u6709\u65f6\u9009\u62e9CPU\u5f88\u56f0\u96be\u3002\u6240\u4ee5\u6211\u4eec\u4f1a\u5e2e\u4f60\u63a9\u62a4\u7684\u3002\u5728\u6211\u4eec\u7684CPU\u6307\u5357\u4e2d\uff0c\u6211\u4eec\u4e3a\u60a8\u6311\u9009\u4e86\u4e00\u4e9b\u53ef\u7528\u7684\u6700\u597d\u7684\u5904\u7406\u5668\uff0c\u5e76\u4ece\u6211\u4eec\u7684\u8bc4\u8bba\u4e2d\u63d0\u4f9b\u4e86\u6570\u636e\u3002\u6211\u4eec\u7684\u5de5\u4f5c\u7ad9\u6700\u4f73CPU\u6307\u5357\u4e3b\u8981\u6db5\u76d6\u6d88\u8d39\u8005\u53ef\u7528\u7684\u5de5\u4f5c\u7ad9\u5904\u7406\u5668\uff0c\u5c3d\u7ba1\u6709\u4e9b\u670d\u52a1\u5668\u4ea7\u54c1\u6db5\u76d6\u4e86\u8fd9\u4e24\u4e2a\u7ec6\u5206\u5e02\u573a\u3002\nEPYC 7302P(2 TB/skt)\u82f1\u7279\u5c14\u7ea7\u8054\u6e56(2 TB/skt\uff1f)\u82f1\u7279\u5c14\u81f3\u5f3a+Optane(4.5 TB/skt)\u3002\n\u968f\u7740\u6211\u4eec\u8fc8\u51652020\u5e74\uff0c\u9ad8\u7aef\u53f0\u5f0f\u673a\u5e02\u573a\u4f1a\u6709\u6240\u653e\u7f13\uff0c\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u6682\u65f6\u5750\u5728\u4e00\u4e9b\u65b0\u786c\u4ef6\u4e0a\uff0c\u56e0\u4e3a\u4ed6\u4eec\u77e5\u9053\u81ea\u5df1\u7684\u94b1\u662f\u6700\u5212\u7b97\u7684\u3002\u968f\u7740AMD\u7684\u7b2c\u4e09\u4ee3ThreadRipper\u5904\u7406\u5668\u548cIntel\u7684Cascade Lake-X\u786c\u4ef6\u7684\u53d1\u5e03\uff0c\u6211\u4eec\u73b0\u5728\u6b63\u5904\u4e8e\u8fd9\u4e2a\u5b89\u9759\u7684\u65f6\u671f\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u51fa\u4e00\u4e9b\u5efa\u8bae\u3002\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u9ad8\u7aef\u53f0\u5f0f\u673a\u7528\u6237\uff0c\u7279\u522b\u662f\u4e13\u4e1a\u4eba\u58eb\u6765\u8bf4\uff0c\u7531\u4e8e\u541e\u5410\u91cf\u7684\u589e\u52a0\uff0c\u53ef\u4ee5\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u644a\u9500\u786c\u4ef6\u6210\u672c\uff0c\u4ef7\u683c\u548c\u5bff\u547d\u53ef\u80fd\u4e0d\u662f\u95ee\u9898\u3002\u6b64\u5916\uff0c\u4f01\u4e1a\u751a\u81f3\u5b66\u672f\u673a\u6784\u53ef\u80fd\u4f1a\u9996\u9009\u9884\u5efa\u7cfb\u7edf\u7684\u4f9b\u5e94\u5546\uff0c\u56e0\u6b64\u5c06\u4f53\u9a8c\u5230\u4e0e\u7b80\u5355\u5730\u8d2d\u4e70\u5904\u7406\u5668\u4e0d\u540c\u7684\u6210\u672c\u7ed3\u6784-\u4ed6\u4eec\u6700\u7ec8\u5f97\u5230\u7684\u7cfb\u7edf\u53ef\u80fd\u5177\u6709\u5ef6\u957f\u7684\u90e8\u4ef6\u548c\u652f\u6301\u4fdd\u4fee\uff0c\u751a\u81f3\u53ef\u80fd\u5177\u6709\u6e10\u8fdb\u7684\u81ea\u52a8\u5347\u7ea7\uff0c\u8fd9\u5c06\u7531\u4f9b\u5e94\u5546\u6765\u63d0\u4f9b\u3002\u5e0c\u671b\u8fd9\u4efd\u6e05\u5355\u5728\u4e3a\u4ed6\u4eec\u7684\u5ba2\u6237\u6784\u5efa\u7cfb\u7edf\u65f6\u4e5f\u80fd\u5bf9\u8fd9\u4e9b\u4f9b\u5e94\u5546\u6709\u7528\u3002\n\u53e6\u5916\uff0c\u4e3a\u4e86\u89e3\u51b3\u5728AMD\u7684Ryzen\u548cThreadRipper\u5e73\u53f0\u4e0a\u7684ECC\u95ee\u9898\u3002ECC\u4f4d\u4e8e\u8fd9\u4e00\u5730\u533a\uff0c\u8fd9\u7c7b\u5de5\u4f5c\uff0c\u4f46\u5b83\u662f\u672a\u7ecf\u9a8c\u8bc1\u7684\u3002\u8fd8\u6709\u6240\u8c13\u7684\u975e\u5b98\u65b9\u652f\u6301\uff0c\u8fd9\u4e0e\u5b98\u65b9\u8d44\u683c\u4e0d\u540c\u3002\u4ece\u6280\u672f\u4e0a\u8bb2\uff0cRyzen\u548cThreadRipper CPU\u90fd\u4e0d\u662fECC\u7684\u6b63\u5f0f\u5408\u683c\u5904\u7406\u5668\uff0c\u4f46\u662f\u5b83\u4eec\u4e2d\u7684\u5927\u591a\u6570(\u5982\u679c\u4e0d\u662f\u5168\u90e8)\u5c06\u663e\u793a\u975e\u5b98\u65b9\u652f\u6301\u3002\u8fd9\u610f\u5473\u7740\u5b83\u53ef\u80fd\u4f1a\u8d77\u4f5c\u7528\uff0c\u4f46AMD\u4e0d\u4f1a\u4e3a\u6b64\u7ed9\u4f60\u5e2e\u52a9\u3002\u5bf9\u6b64\uff0c\u6709\u4e24\u70b9\u9700\u8981\u6ce8\u610f\uff1a\n\u9996\u5148\uff0c\u5b83\u9700\u8981\u4e3b\u677f\u652f\u6301\u3002\u4e00\u4e9b\u4f9b\u5e94\u5546\u6b63\u5728\u8bbe\u8ba1\u5177\u6709ECC\u652f\u6301\u7684\u7535\u8def\u677f\uff0c\u4e00\u4e9b\u4f9b\u5e94\u5546\u5c06\u6b63\u5f0f\u83b7\u5f97\u652f\u6301ECC\u7684\u8d44\u683c\u3002\u8bf7\u6ce8\u610f\uff0c\u5373\u4f7f\u4f9b\u5e94\u5546\u5217\u51fa\u4e86\u5b98\u65b9\u652f\u6301\uff0c\u4eceAMD\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u60a8\u4e5f\u5c5e\u4e8e\u975e\u5b98\u65b9\u652f\u6301\u3002\n\u5176\u6b21\uff0c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u90a3\u5c31\u662f\u5b83\u662f\u5426\u8d77\u4f5c\u7528\u4e86\u3002\u5f53\u7136\uff0c\u60a8\u53ef\u4ee5\u5728\u4e3b\u677f\u4e0a\u62e5\u6709\u975e\u6b63\u5f0f\u652f\u6301ECC\u7684CPU\u548c\u6b63\u5f0f\u652f\u6301ECC\u7684ECC\u5185\u5b58\uff0c\u5e76\u4e14\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u6709\u4e00\u4e9b\u5de5\u5177\u53ef\u4ee5\u786e\u5b9a\u94fe\u4e2d\u7684\u6240\u6709\u90e8\u5206\u662f\u5426\u90fd\u652f\u6301ECC\u3002\u4f46\u4e0b\u4e00\u4e2a\u95ee\u9898\u662f\u5b83\u662f\u5426\u771f\u7684\u8d77\u4f5c\u7528\u4e86--\u4e00\u4e9b\u8f6f\u4ef6\u53ea\u68c0\u67e5\u5b83\u662f\u5426\u652f\u6301ECC\u6807\u5fd7\uff0c\u800c\u4e0d\u662f\u5b9e\u9645\u6d4b\u8bd5\u5b83\u3002\u6709\u62a5\u544a\u79f0\uff0c\u6839\u636e\u5927\u591a\u6570\u8861\u91cf\u6807\u51c6\uff0c\u7528\u6237\u5df2\u5c06\u94fe\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u6392\u5e8f\u5e76\u62a5\u544a\u4e3a\u6b63\u5728\u5de5\u4f5c\uff0c\u4f46\u6ca1\u6709\u4e00\u9879\u5b9e\u9645\u542f\u7528\u3002\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u7279\u5b9a\u9a71\u52a8\u7a0b\u5e8f\u6216BIOS\u95ee\u9898\u9020\u6210\u7684\u3002\u67d0\u4e9b\u8f6f\u4ef6\u53ef\u80fd\u4f1a\u663e\u793a\u627e\u5230\u3001\u8fd0\u884c\u4f46\u672a\u542f\u7528ECC\u6216\u7c7b\u4f3c\u7684\u6587\u5b57\u3002\u6700\u7ec8\uff0c\u60a8\u9700\u8981\u80fd\u591f\u652f\u6301ECC\u8ddf\u8e2a\uff0c\u8fd9\u5728\u6d88\u8d39\u7ea7\u4e3b\u677f\u4e0a\u901a\u5e38\u4e0d\u53d7\u672c\u5730\u652f\u6301\u3002\u5728\u670d\u52a1\u5668\u7ea7\u4e3b\u677f\u4e0a\uff0c\u662f\u8fd9\u6837\u7684\u3002\n\u8fd9\u662f\u4e00\u4e2a\u96f7\u533a\uff0c\u4f60\u7684\u91cc\u7a0b\u6570\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u6211\u4eec\u8fd9\u91cc\u7684\u5efa\u8bae\u662f\uff0c\u5982\u679c\u60a8\u7edd\u5bf9\u9700\u8981\u4e00\u4e2a\u5e26\u6709ECC\u7684AMD CPU\u4f5c\u4e3a\u6784\u5efa\u7684\u5173\u952e\u4efb\u52a1\u90e8\u5206\uff0c\u90a3\u4e48\u53ef\u4ee5\u9009\u62e9EPYC\u3002\n\u56e0\u6b64\uff0c\u9a6c\u4e0a\u5c31\u4f1a\u6709\u5f3a\u70c8\u7684\u6297\u8bae\uff0c\u56e0\u4e3a\u6211\u4e0d\u5efa\u8bae\u5728\u8fd9\u91cc\u4f7f\u7528\u4efb\u4f55\u82f1\u7279\u5c14CPU\u3002\u82f1\u7279\u5c14\u6700\u8fd1\u572811\u6708\u63a8\u51fa\u4e86Cascade Lake-X\u5237\u65b0\u5e73\u53f0\uff0c\u4ef7\u683c\u660e\u663e\u4f4e\u4e8e\u4e0a\u4e00\u4ee3Skylake Refresh-X\uff0c\u90a3\u4e48\u4e3a\u4ec0\u4e48\u8fd9\u4f1a\u6210\u4e3a\u95ee\u9898\u5462\uff1f\u5b83\u5206\u4e3a\u51e0\u4e2a\u9636\u6bb5\u3002\n\u9996\u5148\uff0c\u82f1\u7279\u5c14\u6700\u8fd1\u7684\u751f\u4ea7\u6301\u7eed\u4f9b\u4e0d\u5e94\u6c42\u3002\u56e0\u6b64\uff0c\u8be5\u516c\u53f8\u4e3b\u8981\u4e13\u6ce8\u4e8e\u5236\u9020\u9ad8\u6027\u80fd\u786c\u4ef6\uff0c\u4e3b\u8981\u662fXeon\u7cfb\u5217\u3002\u82f1\u7279\u5c14\u4e4b\u524d\u66fe\u627f\u8bfa\u7ee7\u7eed\u4ee5\u9177\u777fi9\u548c\u9177\u777fi7\u786c\u4ef6\u4fdd\u4f4f\u5e02\u573a\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u7f8e\u56fd\u7684\u4e3b\u8981\u7535\u5b50\u96f6\u552e\u5546\u627e\u4e0d\u5230\u4efb\u4f55HEDT\u5904\u7406\u5668\u7684\u4e8b\u5b9e\u662f\u4e00\u4e2a\u76f8\u5f53\u4ee4\u4eba\u62c5\u5fe7\u7684\u95ee\u9898\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u6d88\u8d39\u7ea7\u76849900K\u5904\u7406\u5668\u4f3c\u4e4e\u786e\u5b9e\u4f9b\u5e94\u5145\u8db3\u3002\n\u6b64\u5916\uff0c\u7531\u4e8e\u5e93\u5b58\u4e0d\u8db3\u548c\u7f3a\u4e4f\u83b7\u5f97\u65b0\u5e93\u5b58\u7684\u627f\u8bfa\uff0c\u7f8e\u56fd\u7684\u4e3b\u8981\u7f51\u5e97\u751a\u81f3\u4ece\u4ed6\u4eec\u7684\u7f51\u7ad9\u4e0a\u5b8c\u5168\u5220\u9664\u4e86\u82f1\u7279\u5c14\u7684\u4ea7\u54c1\u9875\u9762\u3002\u5c3d\u7ba1\u82f1\u7279\u5c14\u9996\u5e2d\u6267\u884c\u5b98\u9c8d\u52c3\u00b7\u65af\u65fa\u751a\u81f3\u5728\u4e00\u5c01\u9898\u4e3a\u201c\u6211\u4eec\u4e3a\u4f60\u800c\u6765\u201d\u7684\u516c\u5f00\u4fe1\u4e2d\u5199\u4e0b\u4e86\u7ef4\u6301\u751f\u4ea7\u548c\u652f\u6301\u5ba2\u6237\u7684\u5185\u5bb9\uff0c\u4f46\u8fd9\u4e00\u70b9\u4ecd\u7136\u5b58\u5728\u3002\u5728\u4e9a\u9a6c\u900a\u4e0a\u641c\u7d22\u9ad8\u7aef\u7684Cascade Lake-X Corei9-10980XE\u6ca1\u6709\u663e\u793a\u5217\u8868\uff0c\u53ea\u6709\u7b2c\u4e8c\u4ef6\u5b9e\u9645\u4e0a\u7ed9\u51fa\u4e86\u4e00\u4e2a\u6ca1\u6709\u5e93\u5b58\u7684\u76f8\u5173CPU\u3002\u7b2c\u4e09\u65b9\u6709\u4e00\u4e9b\u5e93\u5b58\uff0c\u4f8b\u5982Newegg\u4e0a\u7684\u6838\u5fc3\u8ba1\u6570\u6700\u4f4e\u7684\u6a21\u578b\uff0c\u4f46\u6ca1\u6709\u5e93\u5b58\u3002B&amp\uff1bH\u6709\u6240\u6709CPU\u7684\u5217\u8868\uff0c\u4f46\u6240\u6709CPU\u90fd\u6ca1\u6709\u5e93\u5b58\u6216\u5ef6\u4ea4\u8ba2\u5355\u3002\n\u82f1\u7279\u5c14\u8868\u793a\uff0c\u52302020\u5e74\uff0c\u5176\u5904\u7406\u5668\u4ecd\u5c06\u5b58\u5728\u4f9b\u5e94\u95ee\u9898\u3002\u9274\u4e8eHEDT\u5e02\u573a\u53ea\u5360\u516c\u53f8\u603b\u541e\u5410\u91cf\u7684\u5f88\u5c0f\u4e00\u90e8\u5206\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u4e2a\u5e02\u573a\u76ee\u524d\u53ef\u80fd\u4e0d\u662f\u751f\u4ea7\u7684\u4f18\u5148\u7ea7\u3002\u6b64\u5916\uff0c\u8003\u8651\u5230\u82f1\u7279\u5c14\u6700\u8fd1\u7f29\u5c0f\u4e86\u5176Cooper Lake Xeon\u5e73\u53f0\u7684\u8303\u56f4\uff0c\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u82f1\u7279\u5c14\u7684HEDT\u5e73\u53f0\u672a\u6765\u4f1a\u6709\u4ec0\u4e48\u3002\u8be5\u516c\u53f8\u521a\u521a\u53d1\u5e03\u4e86Comet Lake\u5904\u7406\u5668\uff0c\u4f46\u8fd9\u53ea\u662f\u6d88\u8d39\u8005\u5e73\u53f0\u4e0a\u53cc\u901a\u9053\u8bbe\u8ba1\u7684\u6700\u591a10\u4e2a\u5185\u6838\u3002\n\u6709\u65f6\uff0c\u60a8\u9700\u8981\u7684\u53ea\u662f\u6838\u5fc3--\u8981\u4e48\u662f\u5927\u91cf\u865a\u62df\u673a\u7684\u6838\u5fc3\uff0c\u8981\u4e48\u662f\u9ad8\u5ea6\u5e76\u884c\u7684\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u6216\u8005\u5176\u4ed6\u4ec0\u4e48\u3002AMD\u548c\u82f1\u7279\u5c14\u90fd\u8bd5\u56fe\u4e3a\u5176\u4f01\u4e1a\u7ea7\u4ea7\u54c1\u7ebf\u4fdd\u7559\u5176\u6700\u9ad8\u5185\u6838\u6570\u91cf\u7684\u786c\u4ef6\uff0c\u4f8b\u598264\u6838EPYC\u548c28/56\u6838Xeons\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u4e9b\u786c\u4ef6\u8fd8\u9700\u8981\u4e3a\u591a\u63d2\u69fd\u529f\u80fd\u6216RDIMM\u652f\u6301\u548cRAS\u529f\u80fd\u7b49\u529f\u80fd\u652f\u4ed8\u989d\u5916\u8d39\u7528\u3002\n\u5bf9\u4e8e\u66f4\u591a\u7684\u201c\u6d88\u8d39\u8005\u201d\u786c\u4ef6\uff0c\u63d0\u4f9b\u7684\u6700\u9ad8\u5185\u6838\u6570\u91cf\u662fAMD\u768464\u4e2a\u5185\u6838\uff0cThreadRipper 3990X\uff0c\u76ee\u524d\u552e\u4ef7\u4e3a3700\u7f8e\u5143\uff0c\u5efa\u8bae\u96f6\u552e\u4ef7\u4e3a3990\u7f8e\u5143\u3002\u8be5\u82af\u7247\u63d0\u4f9b56\u4e2aPCIe 4.0\u901a\u9053\uff0c\u53e6\u59168\u4e2a\u901a\u9053\u7528\u4e8e\u82af\u7247\u7ec4\uff0c\u57fa\u9891\u4e3a2.9 GHz\uff0cTurbo\u4e3a4.3 GHz\u3002\u6211\u4eec\u5728\u4ef7\u503c20000\u7f8e\u5143\u7684\u82f1\u7279\u5c14\u9ad8\u7ea7\u4f01\u4e1aCPU\u4e0a\u6d4b\u8bd5\u4e86ThreadRipper 3990X\uff0c\u5e76\u6d4b\u8bd5\u4e86\u4ee4\u4eba\u5c34\u5c2c\u7684\u5e76\u884c\u5de5\u4f5c\u8d1f\u8f7d\u3002\n\u5982\u679c\u9700\u8981ECC\uff0c\u7528\u6237\u5982\u679c\u60f3\u53bbEPYC\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u83b7\u5f9764\u4e2a\u5185\u6838\u3002\u5355\u8def64\u6838EPYC 7702P\u662f\u8fd9\u91cc\u7684\u6b63\u786e\u9009\u62e9\uff0c\u5efa\u8bae\u96f6\u552e\u4ef7\u4e3a4425\u7f8e\u5143\uff0c\u6216\u8005\u8bf4\u6700\u8fd1\u7684\u96f6\u552e\u4ef7\u4e3a4784\u7f8e\u5143\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u4ef7\u683c\uff0c\u786c\u4ef6\u67092.0 GHz\u7684\u57fa\u9891\u548c3.35 GHz\u7684turbo\u9891\u7387\uff0c\u5e76\u4e14\u53ef\u4ee5\u8bbf\u95ee8\u4e2a\u5b8c\u6574\u7684\u5185\u5b58\u901a\u9053\u3002ThreadRipper 3990X\u5177\u6709\u66f4\u9ad8\u7684\u9891\u7387\uff0c\u8fd9\u662f\u56e0\u4e3a\u5b83\u7684TDP\u66f4\u9ad8(200W\u6bd4280W)\uff0c\u4f46\u5230\u76ee\u524d\u4e3a\u6b62\uff0c3990X\u53ea\u6709\u56db\u4e2a\u5185\u5b58\u901a\u9053\u3002\u91cd\u8981\u7684\u662f\u8981\u7262\u8bb0\u8fd9\u4e00\u70b9\u3002\n\u82f1\u7279\u5c14\u7684\u4ea7\u54c1\u5305\u62ec56\u6838\u7684Cascade Lake-AP\u5904\u7406\u5668\uff0c\u4f46\u8fd9\u4e9b\u5904\u7406\u5668\u53ea\u80fd\u4f5c\u4e3a\u9ed8\u8ba4\u670d\u52a1\u5668\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u63d0\u4f9b\uff0c\u82f1\u7279\u5c14\u7684\u5408\u4f5c\u4f19\u4f34\u53ef\u4ee5\u5728\u5176\u4e0a\u9500\u552e\u3002\u82f1\u7279\u5c14\u4ecd\u7136\u62d2\u7edd\u900f\u9732\u8fd9\u6b3e\u5904\u7406\u5668\u7684\u4ef7\u683c\uff0c\u5c3d\u7ba1\u6211\u4eec\u4f30\u8ba1\u5b83\u7684\u4ef7\u683c\u572825000\u7f8e\u5143\u5de6\u53f3\u3002\u670928\u4e2a\u5185\u6838\u7684\u81f3\u5f3aW-3175X\u5f85\u552e\uff0c\u552e\u4ef7\u4e3a3100\u7f8e\u5143\uff0c\u4f46\u53ea\u6709\u4e00\u534a\u5185\u6838\u7684\u4ef7\u683c\u51e0\u4e4e\u76f8\u540c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cEPYC7702P\u662f\u4e00\u4e2a\u53ef\u4ee5\u73b0\u6210\u8d2d\u4e70\u7684\u63d2\u5165\u5f0f\u90e8\u4ef6\uff0c\u5f97\u5230\u4e86\u6211\u4eec\u7684\u6295\u7968\u3002\n\u6700\u8fd1HEDT\u66f4\u65b0\u7684\u6700\u4f73\u6027\u80fd\u4e4b\u4e00\u662fThreadRipper 3970X\u3002\u5728\u91c7\u7528\u7edf\u4e00\u5185\u5b58\u8bbe\u8ba1\u7684\u9ad8\u7aef\u53f0\u5f0f\u673a\u5e73\u53f0\u4e0a\u4ee5\u82f1\u7279\u5c14\u4e0d\u4e45\u524d\u63d0\u4f9b\u768410\u4e2a\u5185\u6838\u7684\u4ef7\u683c\u63d0\u4f9b32\u4e2a\u5185\u6838\uff0c\u6bcf\u7f8e\u5143\u7684\u5185\u6838\u6570\u91cf\u662f\u4e00\u4e2a\u60ca\u4eba\u7684\u98de\u8dc3\uff0c\u800c\u5f53\u4f60\u8003\u8651\u5230ThreadRipper\u62e5\u6709\u66f4\u9ad8\u7684IPC\u548c\u6fc0\u8fdb\u7684\u9891\u7387\u65f6\uff0c\u5b83\u5c31\u66f4\u52a0\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u3002\n\u4e0a\u4e00\u4ee332\u6838\u7b2c\u4e8c\u4ee3Threadriper\u7684\u4e3b\u8981\u62b1\u6028\u662f\u5185\u5b58\u5206\u5e03\u4e0d\u5747\uff0c\u8fd9\u4e00\u70b9\u968f\u77403970X\u4e00\u8d77\u6d88\u5931\u4e86\uff0c\u5141\u8bb8\u66f4\u7edf\u4e00\u7684\u8bbe\u8ba1\uff0c\u51e0\u4e4e\u53ef\u4ee5\u5728\u5de5\u4f5c\u7ad9\u4e0a\u5f88\u597d\u5730\u5b8c\u6210\u60a8\u60f3\u8981\u505a\u7684\u6240\u6709\u4e8b\u60c5\u3002\n\u5728\u6211\u4eec\u76843970X\u8bc4\u6d4b\u4e2d\uff0c\u6211\u7528\u4e86\u201c\u8840\u6d17\u201d\u8fd9\u4e2a\u8bcd\uff0c\u56e0\u4e3a\u5728\u4efb\u4f55\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c\u9177\u777fi9-10980XE\u60f3\u8981\u505a\u5f97\u5f88\u597d\uff0c3970X\u90fd\u4f1a\u83b7\u80dc\uff0c\u6709\u65f6\u4f1a\u56e0\u4e3a\u62e5\u6709\u51e0\u4e4e\u4e24\u500d\u7684\u5185\u6838\u800c\u5927\u5e45\u9886\u5148\u300210980XE\u8d62\u5f97\u7684\u552f\u4e00\u4e00\u6b21\u591a\u7ebf\u7a0b\u6d4b\u8bd5\u662f\u4e0eAVX512\u76f8\u5173\u7684\uff0c\u4e00\u4e9b\u4eba\u62b1\u6028\u8bf4\uff0c\u6211\u6ca1\u6709\u6307\u51fa10980XE\u4e5f\u4ee5\u5f88\u5c0f(\u4f4e\u4e8e3%)\u7684\u5229\u6da6\u7387\u8d62\u5f97\u4e8635+\u6e38\u620f\u6d4b\u8bd5\uff0c\u4f46\u90a3\u4e9b\u4eba\u663e\u7136\u4e0d\u77e5\u9053\u8fd9\u4e9b\u5904\u7406\u5668\u662f\u600e\u4e48\u56de\u4e8b\u3002\u5bf9\u4e8e\u4efb\u4f55\u4eba\u6765\u8bf4\uff0c3970X\u90fd\u662f\u4e00\u6b3e\u5f88\u597d\u7684\u5904\u7406\u5668\uff0c\u53ea\u8981\u4ed6\u4eec\u80fd\u4e3a\u82af\u7247\u652f\u4ed82000\u7f8e\u5143\uff0c\u53e6\u5916\u518d\u652f\u4ed8100\u7f8e\u5143\u4ee5\u4e0a\u7684\u6563\u70ed\u8d39(\u7136\u540e\u662f500\u7f8e\u5143\u4ee5\u4e0a\u7684\u5185\u5b58\uff0c500\u7f8e\u5143\u7684\u4e3b\u677f\uff0c\u7b49\u7b49)\u3002\n\u5bf9\u4e8e\u4efb\u4f55\u60f3\u8981\u66f4\u5177\u6210\u672c\u6548\u76ca\u7684\u9ad8\u7aef\u53f0\u5f0f\u673a\u7cfb\u7edf\u7684\u4eba\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u770b\u770b\u4e2d\u5c42\u53f0\u5f0f\u673a\u6765\u8282\u7701\u4e00\u4e9b\u94b1\u3002\u8fd9\u5c31\u662f\u82f1\u7279\u5c14\u5b9e\u9645\u4e0a\u66f4\u5177\u7ade\u4e89\u529b\u7684\u5730\u65b9\uff1ai9-10980XE\u670918\u4e2a\u5185\u6838\uff0cOEM\u4ef7\u683c\u4e3a979\u7f8e\u5143\uff0c\u800c24\u6838TR 3960X\u7684\u4ef7\u683c\u4e3a1399\u7f8e\u5143\u3002\u6bcf\u4e2a\u6838\u5fc3\u7684\u6210\u672c\u663e\u7136\u5f88\u63a5\u8fd1\uff0c\u4e24\u4e2a\u5904\u7406\u5668\u7684\u6210\u672c\u90fd\u572855\u7f8e\u5143\u5de6\u53f3\uff0c\u800c\u4e14\u4e24\u4e2a\u5904\u7406\u5668\u90fd\u6709\u52a0\u5206(\u5c3d\u7ba1\u5728\u6211\u4eec\u7684\u6d4b\u8bd5\u4e2d\uff0c24\u6838\u786e\u5b9e\u7ecf\u5e38\u9886\u5148\uff0c\u8fd9\u53ef\u80fd\u662f\u610f\u6599\u4e4b\u4e2d\u7684)\u3002\n\u5728\u4ee5\u524d\u7684\u6307\u5357\u4e2d\uff0c\u7531\u4e8e\u53ef\u7528\u6027\u7684\u4e0d\u540c\uff0c\u8fd9\u4e00\u90e8\u5206\u59cb\u7ec8\u662f\u4e0d\u540c\u7684\u3002\u7136\u800c\uff0c\u5c3d\u7ba1\u82f1\u7279\u5c14\u4ecd\u7136\u5b58\u5728\u95ee\u9898\uff0c\u4f46\u8fd9\u4e00\u6b21AMD\u7684\u9009\u62e9\u4f3c\u4e4e\u5f88\u591a\u3002\u5176\u4e2d\u4e00\u4e9b\u5904\u7406\u5668\u6700\u7ec8\u843d\u5165\u7cfb\u7edf\u5efa\u9020\u5546\u6216\u539f\u59cb\u8bbe\u5907\u5236\u9020\u5546(\u5c24\u5176\u662f\u82f1\u7279\u5c14)\u624b\u4e2d\uff0c\u800c\u4e0d\u662f\u8fdb\u5165\u96f6\u552e\u5e02\u573a\u3002\n\u8fd9\u91cc\u7684\u4e00\u4e2a\u9009\u62e9\u662f\u770b\u770bAMD\u7684Ryzen93950X\uff0c\u5c3d\u7ba1\u5728\u9ad8\u7aef\u684c\u9762\u7a7a\u95f4\uff0c\u5982\u679c\u4f60\u9700\u8981\u5927\u91cf\u7684\u5185\u5b58\u6216PCIe\u901a\u9053\uff0c\u8fd9\u5e76\u4e0d\u662f\u5f88\u5408\u9002\u3002Ryzen 9 3950X\u5728\u67d0\u4e9b\u5730\u533a\u4e5f\u5f88\u96be\u627e\u5230\u3002\n\u53ef\u4ee5\u9009\u62e9\u67e5\u770b\u8f83\u65e7\u7684\u786c\u4ef6\u3002AMD\u768416\u6838\u7b2c\u4e8c\u4ee3Threadriper 2950X\u662f\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u5c3d\u7ba1\u8003\u8651\u5230\u7b2c\u4e09\u4ee3\u786c\u4ef6\u7684\u6027\u80fd\uff0c\u6211\u53ef\u80fd\u4f1a\u907f\u514d\u66f4\u9ad8\u7684\u5185\u6838\u6570\u91cf\uff0c\u9664\u975e\u5b83\u771f\u7684\u5f88\u4fbf\u5b9c\u3002\u82f1\u7279\u5c14\u4ecd\u5728\u9500\u552eSkylake-X\u5904\u7406\u5668\uff0c\u5e0c\u671b\u5f53\u8fd9\u7bc7\u6587\u7ae0\u4e0a\u7ebf\u65f6\uff0c\u4ed6\u4eec\u80fd\u4eab\u53d7\u534a\u4ef7\u6298\u6263\uff0c\u5c3d\u7ba1\u8fd9\u53ef\u80fd\u4e0d\u662f\u65e2\u5b9a\u7684\u3002\n\u5982\u679c\u4f60\u771f\u7684\u60f3\u8981\u6700\u597d\u7684\u4e2d\u7aef\u786c\u4ef6\uff0c\u5bf9\u4e8eAMD\uff0c\u6211\u5efa\u8bae\u4f60\u4e70\u4fbf\u5b9c\u76842950X\uff0c\u6216\u8005\u7b49\u52303960X\u4e0a\u5e02\u3002\n\u6211\u5728\u8fd9\u91cc\u6dfb\u52a0\u4e86AVX\u5904\u7406\u5668\u7684\u5efa\u8bae\uff0c\u56e0\u4e3a\u5982\u679c\u7528\u6237\u53ef\u80fd\u9047\u5230AVX\u52a0\u901f\uff0c\u5b83\u5c06\u4f7f\u7528\u9488\u5bf9\u6d88\u8d39\u8005\u548c\u9ad8\u7aef\u684c\u9762\u7528\u6237\u7684\u8f6f\u4ef6\u3002\u82f1\u7279\u5c14\u4e00\u76f4\u5728\u63a8\u52a8\u5176AVX512\u652f\u6301\uff0c\u751a\u81f3\u5c06\u5176\u5f15\u5165\u5176\u6d88\u8d39\u7c7b\u7b14\u8bb0\u672c\u7535\u8111\u5904\u7406\u5668\uff0c\u4ee5\u52aa\u529b\u63a8\u52a8DLBoost\u7b49\u4ea7\u54c1\u63d0\u9ad8AI\u541e\u5410\u91cf\u3002\u5728\u8fc7\u53bb\u7684\u51e0\u5e74\u91cc\uff0c\u6211\u5728\u82f1\u7279\u5c14\u9047\u5230\u7684\u4e00\u4e2a\u75db\u70b9\u5b9e\u9645\u4e0a\u662f\u83b7\u5f97\u4e86\u4e00\u4efdAVX512\u4f7f\u7528\u6848\u4f8b\u7684\u5217\u8868\uff1a\u4f7f\u7528AVX512\u7684\u786e\u5207\u8f6f\u4ef6\u793a\u4f8b\u3002\u5b83\u901a\u5e38\u662f\u9488\u5bf9\u975e\u5e38\u5177\u4f53\u7684\u4e1c\u897f\u800c\u6dfb\u52a0\u7684\uff0c\u6bd4\u5982Photoshop\u4e2d\u7684\u67d0\u4e2a\u6ee4\u955c\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u7279\u522b\u7248\u7684\u57fa\u51c6\u6d4b\u8bd5\uff0c\u4f46\u6700\u7ec8\u9ad8\u6027\u80fd\u8ba1\u7b97\u9886\u57df\u7684\u4eba\u4f1a\u4ece\u4e2d\u83b7\u76ca\u6700\u591a\u3002\u5bf9\u4e8e\u90a3\u4e9b\u7528\u6237\uff0c\u8fd9\u4e2a\u5efa\u8bae\u662f\u7ed9\u60a8\u7684\u3002\n\u6211\u4eec\u7684\u9177\u777fi9-10980XE\u5ba1\u6838\u793a\u4f8b\u3002\u8fd9\u662f\u4e00\u4e2aQS(\u5408\u683c\u6837\u672c)\u82af\u7247\uff0c\u8fd9\u610f\u5473\u7740\u5c3d\u53ef\u80fd\u63a5\u8fd1\u96f6\u552e\u3002\n\u4f60\u80fd\u4e70\u5230\u7684\u9002\u7528\u4e8eAVX512\u7684\u6700\u597d\u7684\u9ad8\u7aef\u53f0\u5f0f\u673a\u73b0\u6210\u5904\u7406\u5668\u662f\u9177\u777fi9-10980XE\uff0c\u5b83\u768418\u6838\u90fd\u652f\u6301AVX512\u3002\u5982\u679c\u60a8\u9700\u8981ECC\uff0c\u90a3\u4e48Xeon W-3275/3175X\u5c06\u662f\u60a8\u6700\u597d\u7684\u9009\u62e9\uff0c\u4f46\u5b83\u7684\u6210\u672c\u4f1a\u7a0d\u9ad8\u4e00\u4e9b\uff0c\u5e76\u4e14\u9700\u8981\u4e00\u4e2a\u7279\u6b8a\u7684Xeon W\u4e3b\u677f\u3002\u5982\u679c\u4e0d\u8003\u8651\u6210\u672c\uff0c\u5219\u8fc1\u79fb\u5230\u5177\u6709Xeon Scalable\u5904\u7406\u5668\u7684\u53cc\u63d2\u69fd\u7cfb\u7edf\u53ef\u80fd\u66f4\u53ef\u53d6\uff0c\u4e0d\u8fc7\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4f1a\u5f15\u5165\u975e\u7edf\u4e00\u5185\u5b58\u8bbf\u95ee(NUMA)\u73af\u5883\uff0c\u5982\u679c\u8f6f\u4ef6\u4e0d\u652f\u6301NUMA\uff0c\u5219\u4f1a\u963b\u6b62\u6279\u91cf\u6570\u636e\u4f20\u8f93\u3002\u4e3a\u4e86\u5b89\u5168\u8d77\u89c1\uff0c\u901a\u5e38\u9996\u9009\u5355\u63d2\u5ea7\u3002\u82f1\u7279\u5c14\u5728\u8fd9\u91cc\u7684\u4e0d\u5229\u4e4b\u5904\u662f\u627e\u5230\u4e00\u4e2a\u5f85\u552e\u7684CPU\u3002\n\u6bcf\u63d2\u69fd\u9ad8\u8fbe2 TB\u7684AMD EPYC\u3001\u91c7\u7528Optane DCPMM\u7684\u82f1\u7279\u5c14\u81f3\u5f3a\uff0c\u6bcf\u63d2\u69fd\u9ad8\u8fbe4.5 TB\uff0c\u6216\u82f1\u7279\u5c14\u9177\u777fi9-10900X(\u6216\u4efb\u4f55\u9177\u777fi9-109xx\u7cfb\u5217)\u3002\n\u7531\u4e8e\u591a\u4e2a\u865a\u62df\u673a\u6216\u9ad8\u5185\u5b58\u4f7f\u7528\u60c5\u5f62\u8981\u6c42\uff0c\u6709\u4e9b\u7528\u6237\u53ea\u662f\u4e3a\u4e86\u63d0\u4f9b\u5185\u5b58\u652f\u6301\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u95ee\u9898\uff0c\u6709\u65f6\u5185\u5b58\u5bb9\u91cf\u6bd4\u8ba1\u7b97\u6027\u80fd\u66f4\u91cd\u8981\uff0c\u56e0\u4e3a\u8f6f\u4ef6\u9700\u8981\u4ee5TB\u4e3a\u5355\u4f4d\u7684\u5de5\u4f5c\u7a7a\u95f4-\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c06DRAM\u589e\u52a0\u4e00\u500d\u81f3128 GB\u6216\u66f4\u591a\u603b\u662f\u6bd4\u589e\u52a0\u8ba1\u7b97\u66f4\u6709\u5229\uff0c\u56e0\u4e3a\u5b83\u51cf\u5c11\u4e86\u5728DRAM\u548c\u5b58\u50a8\u4e4b\u95f4\u6765\u56de\u79fb\u52a8\u6570\u636e\u7684\u538b\u529b\u3002\u901a\u5e38\u4e5f\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5efa\u8bae\u4f7f\u7528\u5e26ECC\u7684RDIMM\uff0c\u56e0\u4e3a\u968f\u7740\u5185\u5b58\u5bb9\u91cf\u7684\u589e\u52a0\uff0c\u9519\u8bef\u4f4d\u7ffb\u8f6c\u7684\u53ef\u80fd\u6027\u786e\u5b9e\u4f1a\u968f\u7740\u5185\u5b58\u5bb9\u91cf\u7684\u589e\u52a0\u800c\u589e\u52a0\u3002\u8fd9\u4e00\u4ea7\u54c1\u7c7b\u522b\u7684\u5185\u5b58\u4ef7\u683c\u901a\u5e38\u4e5f\u6bd4CPU\u6210\u672c\u9ad8\u51fa\u4e00\u4e2a\u6570\u91cf\u7ea7\u3002\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e00\u79cd\u9009\u62e9\u662fEPYC\uff0c\u50cf\u552e\u4ef7500\u7f8e\u5143\u76847232P\u53ef\u4ee5\u8f7b\u677e\u652f\u63012TB\u7684LRDIMM(\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u8981\u8d2d\u4e70*\u90a3\u4e48\u591a\u5185\u5b58\uff0c\u90a3\u4e48\u4ee54784\u7f8e\u5143\u7684\u4ef7\u683c\u8d2d\u4e7064\u68387702P\u5e76\u4e0d\u662f\u4ec0\u4e48\u98de\u8dc3)\u3002\n\u4f7f\u7528x86\u5904\u7406\u5668\u83b7\u5f97\u66f4\u591a\u5185\u5b58\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u9009\u62e9\u914d\u5907Optane DC\u6c38\u4e45\u5185\u5b58\u7684\u82f1\u7279\u5c14\u81f3\u5f3a\u53ef\u6269\u5c55\u5904\u7406\u5668\uff0c\u6bcf\u4e2a\u63d2\u69fd\u5141\u8bb8\u9ad8\u8fbe4.5 TB\u7684\u5185\u5b58\u3002\u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e2a\u6570\u5b57\uff0c\u4f60\u5fc5\u987b\u6295\u8d44\u4e8eM\u4e2a\u5904\u7406\u5668\u4e2d\u7684\u4e00\u4e2a\uff0c\u8fd9\u4f1a\u4f7f\u82af\u7247\u7684\u6210\u672c\u518d\u589e\u52a03000\u7f8e\u5143\u3002\u8fd9\u91cc\u7684\u53e6\u4e00\u4e2a\u56e0\u7d20\u662fOptane DCPMM\u4e0d\u80fd\u901a\u8fc7\u901a\u5e38\u7684\u6e20\u9053\u514d\u8d39\u9500\u552e\uff1a\u5b83\u901a\u5e38\u662fOEM\u7cfb\u7edf\u6784\u5efa\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u7528\u6237\u6700\u7ec8\u5c06\u83b7\u5f97\u7279\u5b9aOEM\u7684\u652f\u6301\u8054\u7cfb\u3002\u5bf9\u4e8e\u8f83\u5927\u7684\u4f01\u4e1a\u548c\u7814\u7a76\u793e\u533a\uff0c\u8fd9\u5e94\u8be5\u662f\u5408\u9002\u7684-\u8bf7\u54a8\u8be2\u60a8\u9996\u9009\u7684OEM\uff0c\u4e86\u89e3\u4ed6\u4eec\u63d0\u4f9b\u7684\u4ea7\u54c1\u3002\n\u6211\u8fd8\u60f3\u5728\u8fd9\u91cc\u4e3a\u82f1\u7279\u5c14\u6700\u65b0\u7684Cascade Lake-X\u5904\u7406\u5668\u8bf4\u53e5\u8bdd\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6709\u56db\u4e2a\u901a\u9053/\u516b\u4e2a\u5185\u5b58\u63d2\u69fd\u548c\u6bcf\u4e2a\u63d2\u69fd32 GB\u7684DRAM\uff0c\u5219\u6700\u5927\u53ef\u8fbe256 GB\u3002\u4f46\u8db3\u591f\u6709\u8da3\u7684\u662f\uff0c\u5f53\u4e0eASRock X299\u4e3b\u677f(X299X Taichi\u3001X299 Steel Legend\u6216X299 Creator)\u914d\u5bf9\u65f6\uff0c\u8fd9\u4e9b\u4e3b\u677f\u73b0\u5728\u53ef\u4ee5\u652f\u6301128 GB RDIMM\uff0c\u5141\u8bb8\u6bcf\u4e2a\u5355\u4e2a\u63d2\u69fd\u67091 TB\u7684DRAM\u3002\n\u76ee\u524d\uff0c\u534e\u7855\u4e5f\u5728\u8003\u8651\u542f\u7528LRDIMM\u652f\u6301\u3002\u8fd9\u662f\u4e00\u4e2a\u76f8\u5bf9\u8f83\u65b0\u7684\u53d1\u5c55\uff0c\u7531ASRock\u7684\u4e00\u540d\u5de5\u7a0b\u5e08\u5728\u4ed6\u7684\u4e2a\u4eba\u793e\u4ea4\u5a92\u4f53\u8d26\u6237\u4e0a\u53d1\u5e03\uff0c\u4f46\u6240\u9700\u7684BIOS\u73b0\u5728\u662f\u516c\u5f00\u7684\uff0c\u5bf9\u4e8e\u6295\u8d44\u4e8e\u82f1\u7279\u5c14\u751f\u6001\u7cfb\u7edf\u7684\u7528\u6237\u6765\u8bf4\uff0c\u8fd9\u975e\u5e38\u503c\u5f97\u4e00\u770b\u3002\n\u5bf9\u4e8e\u4efb\u4f55\u60f3\u8981\u4ee5\u6700\u5c11\u7684$$\u83b7\u5f97\u6700\u591a\u5185\u6838\u7684\u4eba\u6765\u8bf4\uff0c\u5f53\u5b83\u4eec\u6253\u6298\u65f6\uff0c\u6211\u4eec\u7684\u9009\u62e9\u5fc5\u987b\u662f16\u6838ThreadRipper 2950X\u62161950X\u3002\u968f\u7740\u65b0\u76843000\u7cfb\u5217\u5f00\u7ebf\u5668\u5904\u7406\u5668\u7684\u63a8\u51fa\uff0c\u4ee5\u524d\u7684\u90e8\u4ef6\u7ecf\u5e38\u4ee5\u4f4e\u4ef7\u627e\u5230\uff0c\u4e00\u4e9b\u96f6\u552e\u5546\u5e0c\u671b\u6e05\u7a7a\u5e93\u5b58\u3002\u6211\u4eec\u770b\u5230\uff0c\u5373\u4f7f\u5728\u4e9a\u9a6c\u900a\u4e0a\uff0c2950X\u5904\u7406\u5668\u7684\u4ef7\u683c\u4e5f\u4f4e\u81f3GB330/400\u7f8e\u5143(\u76ee\u524d\u4e3a500\u7f8e\u5143)\uff0c\u800c1950X\u5904\u7406\u5668\u7684\u4ef7\u683c\u4e3a250\u7f8e\u5143\u3002\n\u62e5\u6709\u56db\u901a\u9053\u5185\u5b58\u548c64\u4e2aPCIe\u901a\u9053\u7528\u4e8e\u751f\u4ea7\u8005\u5de5\u4f5c\u6d41\u662f\u975e\u5e38\u68d2\u7684-\u6b63\u5982\u6211\u4eec\u5728\u8bc4\u8bba\u4e2d\u6307\u51fa\u7684\u90a3\u6837\uff0c\u8fd9\u4e9b\u5904\u7406\u5668\u8986\u76d6\u4e86\u5927\u591a\u6570(\u4f46\u4e0d\u662f\u5168\u90e8)\u9ad8\u7aef\u53f0\u5f0f\u673a\u57fa\u7840\uff0c\u56e0\u6b64\u503c\u5f97\u7814\u7a76\u54ea\u4e9b\u6700\u9002\u5408\u76ee\u6807\u8f6f\u4ef6\u3002\u4f46\u4e0e\u51e0\u5e74\u524d\u7684\u65e7\u786c\u4ef6\u76f8\u6bd4\uff0c\u8fd9\u5bf9\u5f88\u591a\u4eba\u6765\u8bf4\u662f\u975e\u5e38\u503c\u5f97\u5347\u7ea7\u7684\u3002\u4e0e2970WX/2990WX\u76f8\u6bd4\uff0c2950X\u5728\u591a\u4e2a\u5de5\u4f5c\u8d1f\u8f7d\u4e0a\u7684\u6027\u80fd\u4e5f\u66f4\u597d\uff0c\u800c\u4e14\u4ef7\u683c\u4fbf\u5b9c\u5f97\u591a\uff0c\u7269\u6709\u6240\u503c\u3002\n\u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e2a\u9884\u7b97\u5185\u7684HEDT\u7cfb\u7edf\uff0c\u95ee\u9898\u662f\u5b83\u662f\u5fc5\u987b\u662f\u65b0\u7684\u8fd8\u662f\u8981\u7528\u7684\u3002\u5728\u8bb8\u591a\u4e13\u4e1a\u60c5\u51b5\u4e0b\uff0cNEW\u4ecd\u7136\u662f\u9996\u9009\uff0c\u800c\u5728\u8fd9\u91cc\u83b7\u5f97\u9636\u68af\u7684\u5904\u7406\u5668\u662fAMD\u7684ThreadRipper 1900X\u30028\u6838\u5904\u7406\u5668\u63d0\u4f9b\u9ad8\u5bb9\u91cf\u5185\u5b58\u652f\u6301\uff0c\u5927\u91cfPCIe\u901a\u9053\uff0cThreadRipper\u7684\u4f4e\u7aef\u4e3b\u677f\u73b0\u5728\u6b63\u8fdb\u5165\u4e2d\u4f4e\u7aef\u5b9a\u4ef7\u3002\u5728\u51cf\u4ef7\u9500\u552e\u4e2d\uff0c1900X\u7684\u4ef7\u683c\u4e0d\u5230200\u7f8e\u5143(\u6709\u94b1\u7684\u7528\u6237\u53ef\u80fd\u4f1a\u8f6c\u800c\u5bfb\u627e\u4fbf\u5b9c\u76841950X)\uff0c\u5bf9\u4e8e\u9ad8\u7aef\u53f0\u5f0f\u673a\u5904\u7406\u5668\u6765\u8bf4\uff0c\u8fd9\u4f3c\u4e4e\u662f\u4e00\u4e2a\u75af\u72c2\u7684\u4f4e\u4ef7\u3002\n\u6211\u4eec\u6b63\u5904\u4e8e\u9ad8\u7aef\u53f0\u5f0f\u673a\u5e02\u573a\u76f8\u5bf9\u7a33\u5b9a\u7684\u65f6\u671f\u3002AMD\u548c\u82f1\u7279\u5c14\u6700\u8fd1\u90fd\u6709\u6700\u65b0\u4e00\u4ee3\u786c\u4ef6\u7684\u91cd\u5927\u53d1\u5e03\uff0c\u6211\u4eec\u81f3\u5c11\u8fd8\u67092-3\u4e2a\u5b63\u5ea6\u624d\u4f1a\u8c08\u8bba\u4e0b\u4e00\u4ee3\u90e8\u4ef6\uff0c\u5982\u679c\u4e0d\u662f\u66f4\u957f\u7684\u8bdd\uff0c\u8fd8\u67092\u4e2a\u5b63\u5ea6\u624d\u4f1a\u53d1\u5e03\u3002\u4eca\u5929\u8d2d\u4e70\u7684\u4efb\u4f55\u7cfb\u7edf\u90fd\u5c06\u6301\u7eed\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u56e0\u6b64\uff0c\u57282020\u5e74\u7684\u5927\u90e8\u5206\u65f6\u95f4\u91cc\uff0c\u4eba\u4eec\u90fd\u4e0d\u4f1a\u6709\u592a\u591a\u671f\u5f85\u3002\n\u5bf9\u4e8e\u82f1\u7279\u5c14\u6765\u8bf4\uff0c\u60c5\u51b5\u4e1d\u6beb\u4e0d\u660e\u6717\u3002\u6211\u4eec\u4e0d\u77e5\u9053\u82f1\u7279\u5c14\u8ba1\u5212\u5728\u8fd9\u4e00\u9886\u57df\u63a8\u51fa\u4ec0\u4e48\u4ea7\u54c1\uff0c\u4e5f\u4e0d\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u63a8\u51fa\u3002\u8be5\u516c\u53f8\u6700\u8fd1\u5c06\u5176Cooper Lake Xeon\u5e73\u53f0\u7684\u8303\u56f4\u7f29\u5c0f\u4e3a\u53ea\u9009\u62e9\u5ba2\u6237\uff0c\u8fd9\u4e5f\u505c\u6b62\u4e86\u4efb\u4f55HEDT\u4ea7\u54c1\u3002\u8fd9\u610f\u5473\u7740\u5373\u5c06\u4e0a\u5e02\u7684\u4e0b\u4e00\u4ee3Xeon\u5e94\u8be5\u662f\u8be5\u516c\u53f810\u7eb3\u7c73\u5236\u7a0b\u4e0a\u7684\u51b0\u6e56\u3002\u7531\u4e8e\u8fd9\u6b3e\u4ea7\u54c1\u7684\u9884\u8ba1\u53d1\u5e03\u65e5\u671f\u4e3a2020\u5e74\u5e95\uff0c\u4eba\u4eec\u5bf9\u5b9e\u9645\u63a8\u51fa\u591a\u5c11\u6b3e\u6709\u5f88\u591a\u62c5\u5fe7-\u51b0\u6e56\u81f3\u5f3a\u662f\u5426\u4f1a\u5168\u9762\u4e0a\u5e02\uff0c\u6027\u80fd\u4f1a\u662f\u4ec0\u4e48\u6837\u5b50\uff0c\u7136\u540e\u5bf9\u4e8eHEDT\u5e02\u573a\uff0c\u5b83\u5c06\u5728\u4ec0\u4e48\u65f6\u5019\u8fc7\u6ee4\u6389\u5462\uff1f\u3002\u8fd9\u4e9b\u90fd\u662f\u6211\u60f3\u77e5\u9053\u82f1\u7279\u5c14\u73b0\u5728\u662f\u5426\u53ef\u4ee5\u6697\u793a\u7684\u95ee\u9898--\u5bf9\u4e8e\u90a3\u4e2a\u5236\u9020\u8fc7\u7a0b\uff0c\u5173\u952e\u5c06\u662f\u8bd5\u56fe\u5236\u9020\u51fa\u5b83\u80fd\u505a\u5230\u7684\u6700\u5177\u6210\u672c\u6548\u76ca\u7684\u90e8\u4ef6\uff0c\u800cHEDT\u5e76\u4e0d\u80fd\u4e0e\u9ad8\u7aefXeon\u7ec4\u4ef6\u76f8\u63d0\u5e76\u8bba\u3002\u5728\u8fd9\u4e2a\u65f6\u95f4\u70b9\u4e0a\uff0c\u82f1\u7279\u5c142020\u5e74\u7684HEDT\u524d\u666f\u770b\u8d77\u6765\u5f88\u53ef\u6015\uff0c\u6211\u4eec\u5bf92021\u5e74\u621610 nm\u4e00\u65e0\u6240\u77e5\u3002\n\u8fd9\u65b9\u9762\u7684\u4eae\u70b9\u662fAMD\u7684ThreadRipper 3990X\u3002\u8be5\u516c\u53f8\u63a8\u51fa\u4e8664\u6838\u7248\u672c\u7684Zen 2\u9ad8\u7aef\u53f0\u5f0f\u673a\u7cfb\u5217\uff0c\u8fd9\u662f64\u6838EPYC\u5904\u7406\u5668\u4e4b\u4e00\uff0c\u4f46\u62e5\u6709\u4e00\u534a\u7684\u5185\u5b58\u3001\u4e00\u534a\u7684PCIe\u548c\u66f4\u9ad8\u7684280W TDP\uff0c\u4ee5\u63d0\u9ad8\u9891\u7387\u3002\u201c\u6211\u4eec\u9884\u8ba1Zen 3\u4ea7\u54c1\u5c06\u4e8e2020\u5e74\u5e95\u5f00\u59cb\u4e0a\u5e02\uff0c\u5c3d\u7ba1AMD\u627f\u8bfa\u5728\u4eca\u5e74\u5e74\u5e95\u4e4b\u524d\u63a8\u51faEPYC\u548cRyzen\u90e8\u4ef6\uff0c\u4f46\u6211\u4eec\u9884\u8ba1HEDT\u5e02\u573a\u5c06\u5904\u4e8e\u8fd9\u4e00\u4ea7\u54c1\u70ed\u6f6e\u7684\u540e\u7aef\u3002\u201d\n\u770b\u6765\u4eca\u5929\u8d2d\u4e70\u7684\u4efb\u4f55HEDT\u7cfb\u7edf\u5728\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u5185\u90fd\u4e0d\u4f1a\u8fc7\u65f6\u3002\n\u8fdb\u51652020\u5e74\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u672a\u676512-18\u4e2a\u6708\u5185\u66f4\u65b0\u6211\u4eec\u7684\u57fa\u51c6\u5957\u4ef6\u3002\u6700\u8fd1\uff0c\u6211\u4eec\u589e\u52a0\u4e86\u4e00\u4e2aAI\u57fa\u51c6\u6d4b\u8bd5\u3001\u66f4\u591a\u7684\u5ef6\u8fdf\u6d4b\u8bd5\u3001\u6307\u4ee4\u96c6\u6d4b\u8bd5\u3001NAMD(\u76ee\u524d\u9650\u5236\u4e3a64\u4e2a\u7ebf\u7a0b)\u3001\u4e00\u4e2a\u91cd\u91cf\u7ea7\u7684\u5355\u7ebf\u7a0b\u6709\u9650\u6a21\u62df\u6d4b\u8bd5\uff0c\u4ee5\u53ca\u5728CPU\u4e0a\u6e32\u67d3\u7684CROSITION\u3002\u6211\u4eec\u6b63\u5728\u5bfb\u627e\u66f4\u591a\u4ee5\u5de5\u4f5c\u7ad9\u4e3a\u91cd\u70b9\u7684\u6d4b\u8bd5\uff0c\u6700\u597d\u662f\u4f7f\u7528\u53ef\u4ee5\u81ea\u52a8\u5316\u7684Windows\u7248\u514d\u8bb8\u53ef\u8bc1\u8f6f\u4ef6\u3002\u5982\u679c\u4f60\u6709\u4ec0\u4e48\u60f3\u6cd5\uff0c\u8bf7\u544a\u8bc9\u6211\u4eec\u3002\u6216\u8005\uff0c\u5982\u679c\u4efb\u4f55ISV/\u8f6f\u4ef6\u4f9b\u5e94\u5546\u6b63\u5728\u9605\u8bfb\u672c\u6587\uff0c\u8ba4\u4e3a\u8be5\u8f6f\u4ef6\u975e\u5e38\u9002\u5408\uff0c\u5e76\u4e14\u53ef\u4ee5\u5b89\u6392\u65b0\u95fb\u8bb8\u53ef\uff0c\u8bf7\u52a1\u5fc5\u4e0e\u5176\u8054\u7cfb\u3002\n\u53d1\u8868\u8bc4\u8bba\u6ca1\u6709\u5355\u6838\u7c7b\u522b\uff1f\u9057\u61be\u7684\u662f\uff0c\u5927\u591a\u6570\u5de5\u4f5c\u7ad9\u90fd\u662f\u5728\u540c\u6b65\u5de5\u4f5c\u8d1f\u8f7d\u4e2d\u4f7f\u7528\u7684\uff0c\u8fd9\u4e9b\u5de5\u4f5c\u8d1f\u8f7d\u4e0d\u4f1a\u8de8\u6838\u5fc3\u5747\u8861\u8d1f\u8f7d\u3002\u56de\u8986\u3002\n\u5927\u591a\u6570\uff1f\u4f60\u4f3c\u4e4e\u4e0d\u660e\u767d\u90a3\u662f\u4ec0\u4e48\u610f\u601d\u3002\u4ec5\u9650\u5355\u6838\u7684\u5de5\u4f5c\u8d1f\u8f7d\u662f\u5c0f\u4f17\u4ea7\u54c1\uff0c\u4efb\u4f55\u7cfb\u7edf(\u82f1\u7279\u5c14\u6216AMD)\u90fd\u80fd\u63d0\u4f9b\u8db3\u591f\u4e0d\u9519\u7684\u5355\u6838\u6027\u80fd\u3002\u56de\u8986\u3002\n\u6211\u4e0d\u77e5\u9053\u5927\u591a\u6570\u60c5\u51b5\uff0c\u4f46AutoCAD\u4e3b\u8981\u662f\u4e00\u4e2a\u5355\u6838\u5fc3\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u662f\u5e7f\u6cdb\u4f7f\u7528\u7684\u5de5\u4f5c\u7ad9\u8f6f\u4ef6\u3002\u5b83\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u662f\u53d7CPU\u9650\u5236\u7684\uff0c\u56e0\u6b64\u5355\u6838\u6027\u80fd\u81f3\u5173\u91cd\u8981\u3002\u56de\u8986\u3002\nAutodesk\u6709\u8bb8\u591a\u4ea7\u54c1\u662f\u5355\u7ebf\u7a0b\u7684\uff0c\u6216\u8005\u6ca1\u6709\u5f88\u597d\u5730\u5229\u7528\u591a\u7ebf\u7a0b\u3002\u8fd8\u6709\u8bb8\u591a\u79d1\u5b66\u5de5\u4f5c\u8d1f\u8f7d\u6ca1\u6709\u5185\u7f6e\u7ebf\u7a0b\u3002\u8fd9\u5305\u62ec\u8bb8\u591aR(\u6216\u65e7\u7684S)\u5305\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u5f88\u591a\u79d1\u5b66\u6846\u67b6\u9700\u8981\u5feb\u901f\u7684\u5355\u6838\u6027\u80fd\u3002\u5bf9\u4e8e\u8bb8\u591a\u4eba\u6765\u8bf4\uff0c\u8fd9\u786e\u5b9e\u5305\u62ec\u5927\u591a\u6570\u5de5\u4f5c\u91cf\u3002\u8fd9\u5f53\u7136\u4e0d\u662f\u901a\u7528\u7684\uff0c\u4f46\u5e76\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u6709\u73b0\u4ee3\u4ee3\u7801\u5e93\u3001\u79ef\u6781\u7684\u8f6f\u4ef6\u4f18\u5316\u6216\u53ef\u5e76\u884c\u7684\u4ee3\u7801\u8def\u5f84\u3002\u56de\u8986\u3002\n\u5b58\u5728\u8bb8\u591a\u5355\u7ebf\u7a0b\u6216\u4e25\u91cd\u591a\u7ebf\u7a0b\u7684\u5de5\u4f5c\u8d1f\u8f7d\u3002\n..", "note_en": "In our series of Best CPU guides, here\u2019s the latest update to our recommended workstation CPUs list. All numbers in the text are updated to reflect pricing at the time of writing. Numbers in graphs reflect MSRP.\n    Sometimes choosing a CPU is hard. So we&#39;ve got you covered. In our CPU Guides, we give you our pick of some of the best processors available, supplying data from our reviews. Our Best CPUs for Workstations guide mostly covers workstation processors available to consumers, although some server products cover both segments.\n  EPYC 7302P (2 TB/skt) \r\t\t\tIntel Cascade Lake (2 TB/skt?) \r\t\t\tIntel Xeon + Optane (4.5 TB/skt)\n  As we move through 2020, there comes a time when the high-end desktop market slows down a bit and everyone can sit on some new hardware for a while, knowing that they have the best for their money. With the release of AMD\u2019s Third Generation Threadripper processors and Intel\u2019s Cascade Lake-X hardware, we are now in that quiet period and we can give some recommendations.\n  It is worth noting that for some high-end desktop users, particularly professionals that can amortize the cost of the hardware over time due to their increased throughput, price and longevity might not be an issue. Also, businesses or even academic institutions may have preferred vendors for their pre-built systems, and as a result will experience a different cost structure than just simply buying a processor \u2013 they end up with a system that might have an extended parts and support warranty, or even with progressive automatic upgrades, and it will be up to the vendor to supply that. Hopefully this list can be useful to those vendors as well when it comes to building systems for their customers.\n    Also, to address the issue of ECC on AMD&#39;s Ryzen and Threadripper platforms. ECC lies in this region of &#39;it kind of works&#39; but isn&#39;t validated. There is what&#39;s called &#39;unofficial support&#39;, which is different to &#39;official qualification&#39;. Technically, none of the Ryzen and Threadripper CPUs are &#39;officially qualified&#39; for ECC, however most of them (if not all) will exhibit unofficial support. This means that it might work, but AMD won&#39;t give you assistance for it. There are two caveats to this:\n  First, it requires motherboard support. Some vendors are designing their boards with ECC support, and some will formally qualify supporting ECC. Note that even if the vendor lists official support, you are in &#39;unofficial support&#39; from AMD&#39;s perspective.\n  Secondly, there&#39;s the &#39;is it working&#39; question. Sure you can have a CPU that unofficially supports ECC, and ECC memory in a motherboard that &#39;officially supports&#39; ECC, and there are tools in the OS to determine that all the parts of the chain support it. But the next question is if it actually works - some software only checks the &#39;does it support ECC&#39; flag, rather than actually testing for it. There are reports of users who, by most measures, have everything in the chain sorted and reported as working, but none of it is actually enabled. This could be down to specific drivers, or a BIOS issue. Some software might say &#39;ECC found, running, but not enabled&#39;, or words to that effect. Ultimately you need the ability to support ECC tracking, which often isn&#39;t supported natively on consumer grade motherboards. On server grade motherboards, it is.\n  It&#39;s a minefield, and your mileage may vary. Our recommendation here is that if you absolutely need an AMD CPU with ECC as a mission critical part of your build, go for EPYC.\n    So straight off the bat, there\u2019s going to be an outcry that I\u2019m not recommending any Intel CPUs here. Intel recently launched its Cascade Lake-X Refresh platform in November with significantly lower prices than the previous Skylake Refresh-X generation, so why is this a problem? It comes in several stages.\n  Firstly, Intel\u2019s recent production demand continues to outstrip supply. As a result, the company is focusing on manufacturing mostly its high performance hardware, mostly in its Xeon line. Intel has previously made a commitment to still keeping the market with Core i9 and Core i7 hardware, so the fact that we can\u2019t find any HEDT processors to buy at the major etailers in the US is quite a concern. The consumer 9900K processors do seem to be in good supply by comparison.\n  Also, major etailers in the US have even gone so far as to remove Intel \u00a0product pages from their website completely, due to both the lack of stock and the lack of a commitment to obtaining new stock. This is despite Intel\u2019s CEO Bob Swan even writing about maintaining production and supporting its customers in an open letter entitled \u2018 We Are Here For You\u2019. Searching for the top-end Cascade Lake-X Corei9-10980XE on  Amazon shows no listing, and only the second item actually gives a relevant CPU that isn\u2019t in stock. There is some stock at third parties, such as on Newegg with the  lowest core count model, but out of stock.  B&amp;H has listings for all CPUs, but zero stock or back-order for all of them.\n  Intel has stated that through 2020 there will still be supply issues for its processors. Given that the HEDT market is a thin slice of the company\u2019s total throughput, it means that this market might be low priority for production right now. Also, given that Intel has  recently reduced the scope of its Cooper Lake Xeon platform, at this point we don\u2019t know what\u2019s in store for Intel\u2019s HEDT platform in the future. The company has just announced its  Comet Lake processors, but this is only up to 10 cores for a dual channel design on the consumer platform.\n      Sometimes all you want are cores - either for masses of virtual machines, or highly parallel workloads, or something else. Both AMD and Intel try to keep their highest core count hardware for their enterprise lines, such as 64-core EPYCs and 28/56-core Xeons, which means that these also come at an additional cost for features such as multi-socket capabilities or RDIMM support and RAS features.\n  For more \u2018consumer\u2019 hardware, the highest core count on offer is 64 cores from AMD, with the Threadripper 3990X, currently available for $3700 from its MSRP of $3990. This chip gives 56 lanes of PCIe 4.0, with another 8 lanes for the chipset, and comes in at a base frequency of 2.9 GHz and turbo of 4.3 GHz. \u00a0We tested the Threadripper 3990X against $20k of Intel\u2019s premium enterprise CPUs, and for workloads that were embarrassingly parallel.\n        If there is a need for ECC, users can get 64 cores in this way if they want to go EPYC. The single socket 64-core EPYC 7702P is the right choice here, with an MSRP of $4425, or a recent retail price of $4784. For that price the hardware has a base frequency of 2.0 GHz and a turbo frequency of 3.35 GHz, and access to eight full memory channels. The Threadripper 3990X has higher frequencies due to its higher TDP (200W vs. 280W), but as far the 3990X only has four memory channels. It will be important to keep this in mind.\n    Intel\u2019s offerings go up to the 56-core Cascade Lake-AP processors, but these are only available as part of a default server system that Intel\u2019s partners can sell on. Intel still refuses to attribute a price to this processor, although we\u2019ve estimated it around $25000. There is the Xeon W-3175X up for sale, with 28-cores, for $3100, but this is almost the same cost for only half the cores. The EPYC 7702P in this instance, being a socketed part that can be purchased off the shelf, gets our vote.\n      One of the peak performers of the recent HEDT refreshes was the Threadripper 3970X. Offering 32 cores on a high-end desktop platform with a unified memory design at a price where Intel used to offer 10 cores not too long ago is an astonishing leap in cores per dollar, and when you factor in that the Threadripper has a higher IPC and an aggressive frequency makes it all the more impressive.\n  The main complaint with the previous generation 32-core 2 nd gen Threadripper was the un-even memory distribution, and that is gone with the 3970X, allowing for a more unified design that does almost everything you want to do on a workstation really well.\n    In  our 3970X review, I used the word \u2018bloodbath\u2019, because any benchmark where the Core i9-10980XE wanted to do well, the 3970X came and won, sometimes by a large margin by having nearly double the cores. The only multi-threaded test that the 10980XE won was AVX512 related, and some people complained that I didn\u2019t point at the 35+ gaming tests where the 10980XE also won by small (sub-3%) margins, but those people clearly don\u2019t know what these processors are about. The 3970X is a fine processor for anyone who can lay down $2000 for the chip and another $100+ for cooling (then $500+ for memory, $500 for motherboard, etc).\n        For anyone wanting a more cost-effective high-end desktop system, then we can save some monies by looking at the mid-stack. This is where Intel is actually a bit more competitive: 18 cores in the i9-10980XE for an OEM price of $979 compared to the 24 core TR 3960X at $1399. Cost per core is obviously close, around $55/core for both, and both processors have plus points (although in our tests, the 24-core does pull ahead more often than not as is perhaps to be expected).\n    In previous guides this segment has always been varied due to availability. However while Intel still has issues, AMD\u2019s options seem plentiful this time around. Some of these processors are ending up in the hands of system builders or OEMs (especially in Intel\u2019s case), rather than going to retail.\n    One option here is to look at AMD\u2019s Ryzen 9 3950X, although in the high-end desktop space this isn\u2019t really suitable if you need lots of memory or lots of PCIe lanes. The Ryzen 9 3950X is also hard to find in certain regions.\n  There is an option of looking at older hardware. Finding a good deal on AMD\u2019s 16-core 2 nd generation Threadripper, the 2950X, is a good option, although given the performance of the 3rd generation hardware, I would perhaps avoid higher core counts unless it was really cheap. Intel is still selling the Skylake-X processors, and hopefully when this post goes live they will have half-price discounts applied, although that might not be a given.\n  If you really want the best mid-tier hardware, for AMD I\u2019d suggest a cheap 2950X or wait until a 3960X is available.\n      I have added an AVX processor suggestion here for the simple fact that if a user is likely to encounter AVX acceleration, it\u2019s going to be with software aimed at prosumers and high-end desktop users. Intel has been pushing its AVX512 support, even bringing it into its consumer laptop processors, in an effort to drive things like DLBoost to enhance AI throughput. One of the pain points I\u2019ve had with Intel over the last couple of years is actually getting a list of AVX512 use cases: exact software examples where AVX512 is used. It often gets added for very specific things, like a certain filter in Photoshop, or a special edition of a benchmark, but ultimately those in the HPC space get the most from it. For those users, this suggestion is for you.\n  Our Core i9-10980XE review sample. It&#39;s a QS (Qualification Sample) chip, \rwhich is meant to be as near as retail as possible.\n  The best high-end desktop off-the-shelf processor for AVX512 you can buy is the Core i9-10980XE, with 18-cores that all enable AVX512. If you need ECC, then the Xeon W-3275/3175X is going to be your best bet, but it will cost a bit more and a special Xeon W motherboard is needed. If cost is no object, then moving into a dual socket system with Xeon Scalable processors might be preferable, although take note that this introduces a non-uniform memory access (NUMA) environment, which would inhibit bulk data transfer if the software is not NUMA-aware. To be on the safe side usually single socket is preferred.\u00a0The downside to going Intel here is finding a CPU for sale.\n    AMD EPYC up to 2 TB per socket, \rIntel Xeon with Optane DCPMM up to 4.5 TB per socket, \ror Intel Core i9-10900X (or any Core i9-109xx series)\n  Some users are in it just for the memory support, either due to multiple VMs or high-memory use-case requirements. For these, sometimes the memory capacity is more important than the compute performance, as the software requires workspace in the terabytes \u2013 in this case doubling up to 128 GB of DRAM or more is always more beneficial than adding compute, as it reduces the pressure on moving data back and forth between DRAM and storage. Normally it is in this instance too that RDIMMs with ECC are recommended, just because as the memory capacity gets larger, the chance of an errant bit flip does scale with memory capacity. The price of the memory in this product category normally outweighs the CPU cost by an order of magnitude as well.\n    In this instance, one choice is an EPYC, something like the  7232P at $500 will easily support 2 TB of LRDIMMs (mind you, if you\u2019re buying *that* much memory, then going for the  64-core 7702P at $4784 isn\u2019t that much of a leap) out of the box.\n  The only way to get more memory than this with an x86 processor would be to look to Intel Xeon Scalable processors equipped with Optane DC Persistent Memory, allowing up to 4.5 TB per socket. In order to get that amount, you have to invest in one of the M processors, which adds another $3k to the cost of the chip. The other factor here is that Optane DCPMM isn\u2019t freely for sale through usual channels: it typically comes as part of an OEM system build, and as a result the user will end up with a support contact for a specific OEM. For bigger businesses and research communities, that should be suitable \u2013 check with your preferred OEM with what they have to offer.\n  I also want to put in a word here for Intel\u2019s latest Cascade Lake-X processors. Normally, with four channels / eight memory slots and 32 GB of DRAM per slot, this would max out at 256 GB. But interestingly enough, when paired with an ASRock X299 motherboard (either the X299X Taichi, the X299 Steel Legend, or the X299 Creator), these motherboards can now support 128 GB RDIMMs, allowing for 1 TB of DRAM per single socket.\n    At this time ASRock is looking into also enabling LRDIMM support. This is a relatively new development, posted by one of ASRock\u2019s engineers to his personal social media accounts, but the BIOSes required are now public, and for users invested in the Intel ecosystem this is well worth a look.\n      For anyone wanting the most cores for the least amount of $$$, then our pick has to go to the 16-core Threadripper 2950X or 1950X when these are on sale. With the launch of the new 3000 series Threadripper processors, the previous parts are often found at low prices with some retailers looking to empty their stock of them. We\u2019ve seen 2950X processors as low as \u00a3330/$400 even on Amazon (currently $500), and 1950X for $250.\n      Having four channel memory and 64 PCIe lanes for prosumer workflows is great \u2013 as we noted in our reviews these processors cover most, but not all, the high-end desktop bases, so it is worth researching what works best for the intended software. But compared to several years old hardware, this is very much a worthy upgrade for a lot of people. The 2950X also performs better on a number of workloads compared to the 2970WX/2990WX, and can be found for a lot cheaper, making it a worthwhile purchase.\n      If you want a HEDT system on a budget, the question to ask is if it has to be new or used. In a lot of professional circumstances, new is still preferred, and the processor to get on the ladder here is AMD\u2019s Threadripper 1900X. The 8-core processor offers high capacity memory support, lots of PCIe lanes, and the low-end motherboards for Threadripper are now entering that low-to-mid range pricing. In a sale, the 1900X can be found for under $200 (users with more money might look for a cheap 1950X instead), which seems like a crazy low price for a high-end desktop processor.\n      We\u2019re at a time where the high-end desktop market is relatively stable. Both AMD and Intel have recently had big launches of the latest generation hardware, and we\u2019re at least 2-3 quarters away from even speaking about the next generation parts, if not longer, and another 2 quarters away from launch. Any system purchased today will be set to last for a long time, and as a result, there isn\u2019t much to look forward to for most of 2020.\n  For Intel, the situation is not clear in the slightest. We don\u2019t know what Intel plans to launch in this space, or when. The company recently  reduced the scope of its Cooper Lake Xeon platform to select customers only, which also puts a stop to any HEDT product. This means that the next generation Xeon coming to market should be Ice Lake on the company\u2019s 10nm process. With an expected launch date of late 2020 for this, there are lots of concerned thoughts as to how many will actually be available \u2013 will Ice Lake Xeon be in general availability, what will the performance be like, and then for the HEDT market, when will it filter down? These are all questions I wonder if Intel can even hint at right now \u2013 for that manufacturing process, the key would be trying to manufacture the most cost effective parts that it can, and HEDT doesn\u2019t hold a candle to the premium Xeon components. At this point in time, Intel\u2019s HEDT future in 2020 looks dire, and we have no idea about 2021 or 10nm.\n    The highlight on this perspective is AMD\u2019s Threadripper 3990X. The company launched a 64 core version of its Zen 2 high-end desktop family, which is one of the 64-core EPYC processors but with half the memory, half the PCIe, and a higher 280W TDP to drive the frequency higher.\u00a0We&#39;re expecting Zen 3 products to start coming by the end of 2020, and although AMD has committed to both EPYC and Ryzen parts being available by the end of the year, we expect the HEDT market to be at the back end of that product rush, so we&#39;re looking into the middle of 2021 for a Threadripper refresh.\n  It seems then that any HEDT system purchased today isn&#39;t going to be obsolete for a long while yet.\n              Moving into 2020, we&#39;re looking to update our benchmark suite for the next 12-18 months. Recently we&#39;ve added an AI benchmark, more latency tests, instruction set testing, NAMD (limited to 64 threads right now), a heavy single threaded-limited simulation test, and Crysis rendered on the CPU. We&#39;re on the lookout for more workstation-focused tests, preferably with licence-free software for Windows that can be automated. If you have any ideas, please let us know. Or, if any ISV / software vendor is reading this, think the software is a good fit, and can arrange press licenses, please do get in touch.\n  POST A COMMENT      No Single-core category? Sadly most workstations are used in synchronous workloads that do not balance loads across cores.  Reply\n  Most? You don\u2019t appear to understand what that means. Single core only workloads are niche, and any system (Intel or AMD) provides decent enough single core performance.  Reply\n  Don&#39;t know about &#39;most&#39;, but AutoCAD is mostly a single-core application, and it&#39;s widely used workstation software. It is CPU bound in many cases, thus single-core performance is critical.  Reply\n  Autodesk has a number of products that are single-threaded or don&#39;t make good use of multithreading. There are also a number of scientific workloads that have no threading built-in. This includes many R (or old S) packages. In addition, there are plenty of scientific frameworks that need fast single core performance.  For many people, this does include &#34;most&#34; workloads. This certainly isn&#39;t universal, but not everyone has the luxury of modern codebases, agressive software optimization or parallelizable code paths.  Reply\n  There are many single-threaded or badly multi-threaded workloads arou\n......", "posttime": "2020-05-05 18:43:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,anandtech,cpus,\u5904\u7406\u5668,intel", "title": "AnandTech\uff1a\u5de5\u4f5c\u7ad9\u7684\u6700\u4f73CPU\uff0c2020\u5e745\u6708", "title_en": "AnandTech: Best CPUs for Workstations, May 2020", "transed": 1, "url": "https://www.anandtech.com/show/11891/best-cpus-for-workstations", "via": "", "real_tags": ["2020", "anandtech", "cpus", "\u5904\u7406\u5668", "intel"]}, {"category": "", "categoryclass": "", "imagename": "27037f3d6116bb61e74f4c78d02e50b4.png", "infoid": 1000724, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Amazon RDS for PostgreSQL\u73b0\u5728\u652f\u6301\u4e3b\u8981\u7248\u672c12\u3002PostgreSQL 12\u5305\u62ec\u66f4\u597d\u7684\u7d22\u5f15\u7ba1\u7406\u3001\u6539\u8fdb\u7684\u5206\u533a\u529f\u80fd\u3001\u7b26\u5408SQL/JSON\u89c4\u8303\u7684JSON\u8def\u5f84\u67e5\u8be2\u3001\u652f\u6301ICU\u63d0\u4f9b\u7684\u6392\u5e8f\u7684\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u548c\u4e0d\u533a\u5206\u91cd\u97f3\u7684\u4e0d\u786e\u5b9a\u6392\u5e8f\u3001\u6539\u8fdb\u67e5\u8be2\u8ba1\u5212\u7684\u6700\u5e38\u89c1\u503c\u7edf\u8ba1\u4fe1\u606f\u3001\u521b\u5efa\u4f7f\u7528\u8868\u8fbe\u5f0f\u8ba1\u7b97\u503c\u7684\u751f\u6210\u5217\uff0c\u4ee5\u53ca\u8bb8\u591a\u5176\u4ed6\u529f\u80fd\u3002\n\u6b64\u7248\u672c\u5c06\u6269\u5c55\u5305\u62ecPostGIS\u66f4\u65b0\u52303.0\u7248\uff0cPGAudit\u66f4\u65b0\u52301.4\u7248\uff0cwal2json\u66f4\u65b0\u52302.1\u7248\uff0cPLV8\u66f4\u65b0\u52302.3.14\u7248\uff0cOrafce\u66f4\u65b0\u52303.8\u7248\uff0cpg_repack\u66f4\u65b0\u52301.4.5\u7248\uff0cpg_hint_plan\u66f4\u65b0\u52301.3.5.22a77c\u7248\uff0cpglogic\u66f4\u65b0\u52302.3.0\u7248\u3002\n\u8981\u4f7f\u7528\u65b0\u7248\u672c\uff0c\u60a8\u53ea\u9700\u5728AWS\u7ba1\u7406\u63a7\u5236\u53f0\u4e2d\u5355\u51fb\u51e0\u4e0b\u5373\u53ef\u521b\u5efa\u65b0\u7684Amazon RDS for PostgreSQL\u6570\u636e\u5e93\u5b9e\u4f8b\u3002\nAmazon RDS for PostgreSQL\u4f7f\u60a8\u53ef\u4ee5\u5728\u4e91\u4e2d\u8f7b\u677e\u8bbe\u7f6e\u3001\u64cd\u4f5c\u548c\u6269\u5c55PostgreSQL\u90e8\u7f72\u3002\u6709\u5173\u5b9a\u4ef7\u8be6\u7ec6\u4fe1\u606f\u548c\u533a\u57df\u53ef\u7528\u6027\uff0c\u8bf7\u53c2\u9605Amazon RDS for PostgreSQL\u5b9a\u4ef7\u3002\u6709\u5173PostgreSQL 12\u65b0\u529f\u80fd\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95eeAWS\u6570\u636e\u5e93\u535a\u5ba2\u3002", "note_en": "Amazon RDS for PostgreSQL now supports major version 12.  PostgreSQL 12 includes better management of indexing, improved partitioning capabilities, JSON path queries per SQL/JSON specifications, nondeterministic collations that support case-insensitive and accent-insensitive comparisons for ICU provided collations, most common-value statistics for improved query plans, creation of generated columns that computes values with an expression, and many additional features.\n  This release updates extensions including  PostGIS to version 3.0,  PGAudit to version 1.4,  wal2json to version 2.1,  PLV8 to version 2.3.14,  Orafce to version 3.8,  pg_repack to version 1.4.5,  pg_hint_plan to version 1.3.5.22a77c, and  pglogical to version 2.3.0.\n  To use the new version, you can create a new  Amazon RDS for PostgreSQL database instance with just a few clicks in the  AWS Management Console.\n  Amazon RDS for PostgreSQL makes it easy to set up, operate, and scale PostgreSQL deployments in the cloud. See  Amazon RDS for PostgreSQL Pricing for pricing details and regional availability.\u00a0Learn more about the new functionality of PostgreSQL 12 in the  AWS Database Blog.", "posttime": "2020-05-05 18:42:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "amazon,postgresql,rds,version", "title": "Amazon RDS\u73b0\u5728\u652f\u6301PostgreSQL 12", "title_en": "Amazon RDS Now Supports PostgreSQL 12", "transed": 1, "url": "https://aws.amazon.com/about-aws/whats-new/2020/03/amazon-rds-now-supports-postgresql-12/", "via": "", "real_tags": ["amazon", "rds", "version"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000722, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eceJSON\u3001\u6a21\u5f0f\u548cGraphQL\u751f\u6210\u6a21\u578b\u548c\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u4ee5\u4fbf\u5728\u4efb\u4f55\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5feb\u901f\u3001\u5b89\u5168\u5730\u5904\u7406\u6570\u636e\u3002\n\u7acb\u5373\u751f\u6210\u4ee3\u7801\u3002\n{\uff1a[{\uff1a&#34\uff1bAtticus&#34\uff1b\uff0c\uff1a100}\uff0c{\uff1a&#34\uff1bCleo&#34\uff1b\uff0c\uff1a900}\uff0c{\uff1a&#34\uff1bOrly&#34\uff1b}\uff0c{\uff1a&#34\uff1bJasper&#34\uff1b}]}\u3002\n\u7c7bmyData{\uff1aPerson[]\uff1bStatic(\uff1aString){\u2026\u3002}}\u7c7b\u4eba\u5458{\uff1astring\uff1b\uff1aint\uff1f\uff1b}\u3002\n\u8bbeDATA=MyData\u3002(&#39\uff1b{&#34\uff1bPeople&#34\uff1b\uff1a[{&#34\uff1bname&#34\uff1b\uff1a&#34\uff1bOlivia&#34\uff1b}]}&#39\uff1b)\u3002{\u6253\u5370(\u4eba\u5458\u3002)\u3002\u4e00\u4e2a\u4eba\u3002++}\u9ad8\u5206\u53ef\u80fd\u672a\u5b9a\u4e49\u3002\n\u4ecenpm\u5b89\u88c5\u5feb\u901f\u7c7b\u578b\u751f\u6210\u7b80\u5355JSON\u793a\u4f8b$ECHO&#39\uff1b[1\uff0c2\uff0c3.14]&#39\uff1b|\u5feb\u901f\u7c7b\u578b--lang Go\u4e3a\u6bd4\u7279\u5e01API\u751f\u6210C#$QuickType https://blockchain.info/latestblock-o LatestBlock.cs\u4e3a\u5929\u6c14API\u751f\u6210\u6253\u5b57\u811a\u672c\u548c\u8fd0\u884c\u65f6\u68c0\u67e5$QuickType https://goo.gl/Dq2yKd-o Weather.ts--\u8fd0\u884c\u65f6-\u7c7b\u578b\u68c0\u67e5\u4ece\u6253\u5b57\u811a\u672c\u7c7b\u578b\u751f\u6210C#\u7c7b\u4ece\u793a\u4f8b\u76ee\u5f55\u751f\u6210SWIFT alum.json artist.cs\u3002\n\u4e00\u4e2a\u597d\u7684\u662f\u91d1\u8272\u7684\uff0c\u4f46\u662f\u5927\u591a\u6570\u90fd\u662f\u8fc7\u65f6\u7684\uff0c\u6216\u8005\u6839\u672c\u5c31\u4e0d\u80fd\u5728\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\u4f7f\u7528\u3002\n\u8fd9\u9700\u8981\u5f88\u5927\u7684\u52aa\u529b\uff0c\u5e76\u4e14\u5fc5\u987b\u5728API\u66f4\u6539\u65f6\u8fdb\u884c\u66f4\u65b0\u3002\u4e0d\u7ba1\u600e\u6837\uff0c\u4f60\u5e94\u8be5\u4e13\u6ce8\u4e8e\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\u8fd9\u662f\u4e00\u79cd\u4ee4\u4eba\u4e0d\u5feb\u7684\u7f16\u7a0b\u65b9\u5f0f\uff0c\u5e76\u4e14\u4f7f\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u5bb9\u6613\u53d7\u5230API\u66f4\u6539\u7684\u5f71\u54cd\u3002\n\u7ed9\u5b9a\u793a\u4f8bAPI\u54cd\u5e94\u540e\uff0cQuickType\u5c06\u4ee5\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u8bed\u8a00\u751f\u6210\u4e00\u4e2a\u6613\u4e8e\u4f7f\u7528\u7684\u5ba2\u6237\u7aef\u5e93\u3002\n\u5f53API\u66f4\u6539\u65f6\uff0cQuickType\u53ef\u4ee5\u91cd\u65b0\u751f\u6210\u7c7b\u578b\uff0c\u56e0\u6b64\u60a8\u53ea\u9700\u66f4\u65b0\u53d7\u5f71\u54cd\u7684\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801(\u5982\u679c\u6709\u7684\u8bdd)\u5373\u53ef\u3002\n\u5728\u5904\u7406\u7c7b\u578b\u5316API\u6570\u636e\u65f6\uff0c\u5145\u5206\u5229\u7528\u7f16\u8f91\u5668\u6216IDE(\u81ea\u52a8\u5b8c\u6210\u3001\u91cd\u6784)\u3002", "note_en": "Generate models and serializers from JSON, schema, and GraphQL for working with data quickly &amp; safely in any programming language.\n Generate Code Now\n {  : [ {  :  &#34;Atticus&#34;,  :  100 }, {  :  &#34;Cleo&#34;,  :  900 }, {  :  &#34;Orly&#34; }, {  :  &#34;Jasper&#34; } ]}\n class  MyData {  :  Person[];  static  ( :  string) {\u2026}} class  Person {  :  string;  :  int?;}\n let  data =  MyData. ( &#39;{ &#34;people&#34;: [ { &#34;name&#34;: &#34;Olivia&#34; } ]}&#39;) for  person  in  data.  {  print( person. )  person. ++} highScore may be undefined\n Install quicktype from npm  Generate Go for a simple JSON sample $ echo &#39;[1, 2, 3.14]&#39; | quicktype --lang go  Generate C# for a Bitcoin API $ quicktype https://blockchain.info/latestblock -o LatestBlock.cs  Generate TypeScript and runtime checks for a weather API $ quicktype https://goo.gl/Dq2yKd -o Weather.ts --runtime-typecheck  Generate C# classes from TypeScript types  Generate Swift from a directory of samples  album.json artist.json track.json $ quicktype spotify-api-samples -o SpotifyClient.swift\n A good one is golden, however most are outdated or simply unavailable in your app\u2019s programming language.\n  Takes a lot of effort and must be updated when the API changes. You should be focused on your app, anyway.\n  This is an unpleasant way to program and leaves your app vulnerable to API changes.\n Given sample API responses, quicktype will generate an easy-to-use client library in your app\u2019s language.\n  quicktype can regenerate types when APIs change, so you can simply update affected app code, if any.\n  Get more out of your editor or IDE (autocomplete, refactoring) when working with typed API data.", "posttime": "2020-05-05 18:40:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,json,convert,\u751f\u6210,generate", "title": "QuickType-\u5c06JSON\u8f6c\u6362\u6210\u4efb\u4f55\u8bed\u8a00\u7684\u534e\u4e3d\u3001\u7c7b\u578b\u5b89\u5168\u7684\u4ee3\u7801", "title_en": "Quicktype - convert JSON into gorgeous, typesafe code in any language", "transed": 1, "url": "https://quicktype.io", "via": "", "real_tags": ["\u4ee3\u7801", "json", "convert", "\u751f\u6210", "generate"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000721, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "PermalLink GitHub\u662f5000\u591a\u4e07\u5f00\u53d1\u4eba\u5458\u7684\u5bb6\u56ed\uff0c\u4ed6\u4eec\u4e00\u8d77\u5de5\u4f5c\uff0c\u5171\u540c\u6258\u7ba1\u548c\u5ba1\u67e5\u4ee3\u7801\u3001\u7ba1\u7406\u9879\u76ee\u548c\u6784\u5efa\u8f6f\u4ef6\u3002\n\u62a5\u540d", "note_en": "Permalink     GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.\n  Sign up", "posttime": "2020-05-05 18:40:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7b97\u6cd5,algorithms,\u5f3a\u5316,reinforcement,\u5ba1\u67e5", "title": "\u7f51\u683c\u4e16\u754c\u4e2d\u7684\u8868\u683c\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5", "title_en": "Tabular Reinforcement Learning Algorithms in Gridworld", "transed": 1, "url": "https://github.com/laxatives/rl/blob/master/gridworld_mdp.ipynb", "via": "", "real_tags": ["\u7b97\u6cd5", "\u5f3a\u5316", "\u5ba1\u67e5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000720, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fd9\u672c\u7b14\u8bb0\u672c\u4e2d\uff0c\u6211\u4eec\u53cd\u590d\u6c42\u89e3\u4e00\u4e2a\u7b80\u5355\u7684\u73af\u5883\uff0c\u63a2\u7d22\u4ee5\u4e0b\u7b97\u6cd5\u7c7b\u7684\u7279\u70b9\uff1a{\u7ebf\u6027\u89c4\u5212(LP)\u3001\u52a8\u6001\u89c4\u5212(DP)\u3001\u8499\u7279\u5361\u7f57(MC)\u548c\u65f6\u5dee\u5b66\u4e60(TD)}\u3002\u5bf9\u4e8eMC\u548cTD\uff0c\u6211\u4eec\u8fd8\u5728\u9884\u6d4b\u3001\u6309\u7b56\u7565\u63a7\u5236\u548c\u975e\u7b56\u7565\u63a7\u5236\u65b9\u9762\u63a2\u7d22\u4e86\u66f4\u591a\u7684\u95ee\u9898\u7a7a\u95f4\u3002\nfrom__Future__import print_function from IPython.display\u5bfc\u5165Display\uff0cclear_output from datetime import datetime\uff0ctimeDelta from itertools\u4ecePANDA\u5bfc\u5165\u4ea7\u54c1\u3002ploting import register_matplotlib_Converters\u5bfc\u5165ipywidget\u4e0enp\u4e00\u6837\u5bfc\u5165umpy\u4f5c\u4e3anP\u5bfc\u5165matplotlib.pylot\u4f5c\u4e3aPLT\u5bfc\u5165\u718a\u732b\u4f5c\u4e3aPD\u5bfc\u5165\u968f\u673a\u5bfc\u5165TensorFlow\u4f5c\u4e3aTF PD\u3002\u9009\u9879\u3002\u663e\u793a\u3002MAX_COLUMNS=NONE REGISTER_matplotlib_Converters()%matplotlib\u5185\u8054\u3002\n%pip install ortools from ortools.line_solver import pyspraplp#\u9996\u6b21\u5b89\u88c5\u540e\u9700\u8981\u91cd\u65b0\u542f\u52a8\u7b14\u8bb0\u672c\u7535\u8111_=pyspraplp\u3002\u6c42\u89e3\u5668(&#39\uff1bLinearProgrammingGridWorld&#39\uff1b\uff0cpyraplp)\u3002\u6c42\u89e3\u5668\u3002GLOP_LINEAR_PROGRAM)\u3002\n\u5728\u7d22\u5f15\u4e2d\u67e5\u627e\uff1ahttps://pypi.org/simple\uff0chttps://pypi.lyft.net/pypi/Requirement\u5df2\u7ecf\u6ee1\u8db3\uff1a/CODE/venvs/venv/lib/python3.6/site-Packages(7.6.7691)\u4e2d\u7684ortools\u5df2\u7ecf\u6ee1\u8db3\u8981\u6c42\uff1a/code/venvs/venv/lib/python3.6/site-Packages(From Ortools)(3.11.3)\u4e2d\u7684\u534f\u8baebuf&gt\uff1b=3.11.2in/code/venvs/venv/lib/python3.6/site-Packages(From Ortools)(3.11.3)\u5df2\u7ecf\u6ee1\u8db3\u8981\u6c42\uff1a6&gt\uff1b=1.10 in/code/venvs/venv/lib/python3.6/site-Packages(From Ortools)(1.12.0)\u5df2\u6ee1\u8db3\u8981\u6c42\uff1a/code/venvs/venv/lib/python3.6/site-Packages(from protocol buf&gt\uff1b=3.11.2-&gt\uff1bor tools)(45.2.0)\u6ce8\u610f\uff1a\u60a8\u53ef\u80fd\u9700\u8981\u91cd\u65b0\u542f\u52a8\u5185\u6838\u624d\u80fd\u4f7f\u7528\u66f4\u65b0\u7684\u8f6f\u4ef6\u5305\u3002\n#\u6700\u4f18\u7b56\u7565\uff0cGamma=0.9 Expect_Values=Np\u3002array([[22.0\uff0c24.4\uff0c22.0\uff0c19.4\uff0c17.5]\uff0c[19.8\uff0c22.0\uff0c19.8\uff0c17.8\uff0c16.0]\uff0c[17.8\uff0c19.8\uff0c17.8\uff0c16.0\uff0c14.4]\uff0c[16.0\uff0c17.8\uff0c16.0\uff0c14.4\uff0c13.0]\uff0c[14.4\uff0c16.0\uff0c14.4\uff0c13.0\uff0c11.7])\u3002\n\u4ece\u679a\u4e3e\u5bfc\u5165\u679a\u4e3e\u7c7b\u64cd\u4f5c(\u679a\u4e3e)\uff1a\u5317=&#39\uff1bN&#39\uff1b\uff0c0\uff0c\u03bbx\uff1a(X[0]-1\uff0cx[1])\uff0c(0\uff0c1)\u4e1c=&#39\uff1bE&#39\uff1b1\uff0c\u03bbx\uff1a(x[0]\uff0cx[1]+1)\uff0c(1\uff0c0)\u897f=&#39\uff1bW&#39\uff1b\uff0c2\uff0c\u03bbx\uff1a(X[0]\uff0cx[1]-1)\uff0c(-1\uff0c0)South=&#39\uff1bS&#39\uff1b\uff0c3\uff0c\u03bbx\uff1a(x[0]+1\uff0cx[1])\uff0c(0\uff0c-1)def__init__(self\uff0cdisplay_name\uff0cindex\uff0cTransition\uff0cDirection)\uff1aself\u3002DISPLAY_NAME=\u663e\u793a\u540d\u79f0\u81ea\u8eab\u3002INDEX=\u7d22\u5f15\u81ea\u8eab\u3002TRANSPION=TRANSPION#Numpy\u884c-\u4e3b\u5750\u6807SELF\u3002\u65b9\u5411=\u65b9\u5411#matplotlib\u5750\u6807def__str__(Self)\uff1a\u8fd4\u56de\u81ea\u8eab\u3002\u663e\u793a\u540d\u79f0\u3002\n\u7c7bAgent(Object)\uff1adef__init__(self\uff0cname)\uff1aself\u3002name=name def policy(self\uff0cstate)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b\u8fd4\u56de\u7ed9\u5b9a\u72b6\u6001\u7684\u64cd\u4f5c&#34\uff1b&#34\uff1b&#34\uff1b\u5f15\u53d1NotImplementedError()\u3002\nGreedyAgent\u7c7b(\u4ee3\u7406)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b\u8fd9\u4e2a\u4ee3\u7406\u62e5\u6709\u5173\u4e8e\u73af\u5883\u8f6c\u6362\u6982\u7387\u548c\u5956\u52b1\u7684\u5b8c\u6574\u4fe1\u606f\u3002\u8fd9\u79cd\u65b9\u6cd5\u5bf9\u4e8e\u73af\u5883\u672a\u77e5\u7684\u590d\u6742\u95ee\u9898\u662f\u4e0d\u53ef\u884c\u7684\u3002&#34\uff1b&#34\uff1b&#34\uff1bdef__init__(SELF\uff0cSTATE_VALUES=NONE\uff0cNAME=&#39\uff1bOPTIME&#39\uff1b\uff0cGAMMA=0.9)\uff1aSUPER()\u3002__init__(Name)\u5982\u679cSTATE_VALUES\u4e3aNONE\uff1aSTATE_VALUES=NP\u3002\u968f\u673a\u7684\u3002Randn(5\uff0c5)Self\u3002STATE_VALUES=STATE_VALUES#v(S)\u81ea\u8eab\u3002Gamma=Gamma Self\u3002Environment=GridWorld()def policy(self\uff0cstate)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b\u4f7f\u7528\u786e\u5207\u7684\u8fc7\u6e21/\u5956\u52b1\u7ed3\u679c\u8fdb\u884c\u7b56\u7565\u8fed\u4ee3\u3002&#34\uff1b&#34\uff1b&#34\uff1baction=one max_action_value=-1000\u8868\u793a\u6b63\u5728\u6267\u884c\u64cd\u4f5c\uff1a\u81ea\u6211\u3002\u73af\u5883\u3002set_state(State)s1\uff0cr=self\u3002\u73af\u5883\u3002\u8f6c\u6362(A)action_value=r+self\u3002\u4f3d\u9a6c*\u81ea\u6211\u3002STATE_VALUES[S1]if action_value&gt\uff1bmax_action_value\uff1aaction=a max_action_value=action_value\u8fd4\u56de\u64cd\u4f5c\n\u7c7bEpsilonGreedyAgent(GreedyAgent)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b\u5e26\u6709epsilon\u8d2a\u5a6a\u63a2\u7d22\u7684GreedyAgent\u3002\u8fd9\u79cd\u65b9\u6cd5\u5bf9\u4e8e\u73af\u5883\u672a\u77e5\u7684\u590d\u6742\u95ee\u9898\u662f\u4e0d\u53ef\u884c\u7684\u3002&#34\uff1b&#34\uff1b&#34\uff1bdef__init__(self\uff0cepsilon=1e-2\uff0c**kwargs)\uff1aSuper()\u3002__init__(**kwargs)\u81ea\u6211\u3002epsilon=epsilon\u5b9a\u4e49\u7b56\u7565(\u81ea\u8eab\uff0c\u72b6\u6001)\uff1a\u5982\u679c\u662f\u968f\u673a\u7684\u3002\u968f\u673a()&lt\uff1b\u81ea\u8eab\u3002\u57c3\u666e\u897f\u9686\uff1a\u968f\u673a\u8fd4\u56de\u3002CHOICE([a for a in Action])\u8fd4\u56deSUPER()\u3002\u7b56\u7565(\u5dde)\u3002\n\u7c7bLearnedAgent(Agent)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b\u4ece\u968f\u673a\u7b56\u7565\u5f00\u59cb\u5b66\u4e60\u6700\u4f18\u7b56\u7565\uff0c\u5e76\u4e14\u6ca1\u6709\u5148\u9a8c\u8bb0\u5f55\u3002&#34\uff1b&#34\uff1b&#34\uff1bdef__init__(self\uff0cname=&#39\uff1bLearning&#39\uff1b\uff0cGamma=0.9\uff0cdim=5\uff0cepsilon=0)\uff1aSuper()\u3002__init__(\u540d\u79f0)\u81ea\u8eab\u3002ACTION_VALUES=NP\u3002\u968f\u673a\u7684\u3002Randn(5\uff0c5\uff0c4)#q(s\uff0ca)self\u3002_POLICY={s\uff1a\u968f\u673a\u3002\u4ea7\u54c1(Range(DIM)\uff0cRange(DIM))}Self\u7684\u9009\u62e9([a for a in Action])\u3002Gamma=Gamma Self\u3002epsilon=epsilon\u5b9a\u4e49\u7b56\u7565(\u81ea\u8eab\uff0c\u72b6\u6001)\uff1a\u5982\u679c\u662f\u968f\u673a\u7684\u3002\u968f\u673a()&lt\uff1b\u81ea\u8eab\u3002\u57c3\u666e\u897f\u9686\uff1a\u968f\u673a\u8fd4\u56de\u3002Choose([a for a in Action])\u8fd4\u56deSelf\u3002_policy[state]def update_state_policy(self\uff0cs)\uff1aold_action=self\u3002_POLICY[s]STRATE=True max_action_value=-1000 for a in Action\uff1aaction_value=self\u3002ACTION_VALUES[(s[0]\uff0cs[1]\uff0ca.\u3002index)]if action_value&gt\uff1bmax_action_value\uff1aaction=a max_action_value=action_value if action\uff01=old_action\uff1apolicy_Stability=false self\u3002_POLICY[s]=action return\u7a33\u5b9a\u5b9a\u4e49POLICY_IMPORT(SELF)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b\u6839\u636e\u6211\u4eec\u6700\u65b0\u7684ACTION_VALUES&#34\uff1b&#34\uff1b&#34\uff1bPOLICY_STRATE=Self\u4e2ds\u7684True\u66f4\u65b0\u6211\u4eec\u7684\u7b56\u7565\u3002_\u7b56\u7565\u3002KEYS()\uff1aSTRATE=SELF\u3002UPDATE_STATE_POLICY\u5982\u679c\u4e0d\u7a33\u5b9a\uff1aPOLICY_STRATE=FALSE RETURN POLICY\u3002\n\u7c7bGridWorld(Object)\uff1adef__init__(self\uff0cinitial_state=(0\uff0c0))\uff1aself\u3002DIM=5\u81ea\u8eab\u3002STATE=\u521d\u59cb\u72b6\u6001\u5b9a\u4e49SET_STATE(SELF\uff0cSTATE)\uff1aSELF\u3002STATE=STATE DEF_TRANSION_STATE(SELF\uff0cACTION)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1bx\uff0cy=ACTION\u3002\u8fc7\u6e21(\u81ea\u6211\u3002\u72b6\u6001)\u5982\u679cx&lt\uff1b0\u6216x&gt\uff1b=SELF\u3002\u6234\u59c6\uff1a\u56de\u5f52\u81ea\u6211\u3002\u72b6\u6001\u4e3ay&lt\uff1b0\u6216y&gt\uff1b=self\u3002\u6234\u59c6\uff1a\u56de\u5f52\u81ea\u6211\u3002\u72b6\u6001\u8fd4\u56dex\uff0cy\u5b9a\u4e49\u8f6c\u6362(Self\uff0caction)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b\u5982\u679cSelf\uff0c\u5219&#34\uff1b&#34\uff1b&#34\uff1breward=0\u3002STATE==(0\uff0c1)\uff1a#\u7279\u6b8a\u72b6\u6001A NEW_STATE=(4\uff0c1)REWARY=10 ELIF SELF\u3002STATE==(0\uff0c3)\uff1a#\u7279\u6b8a\u72b6\u6001B NEW_STATE=(2\uff0c3)REWARY=5 ELSE\uff1aNEW_STATE=SELF\u3002_TRANSPATION_STATE(Action)#\u5982\u679cNEW_STATE==SELF\uff0c\u5219\u79fb\u52a8\u65e0\u6548\u3002\u72b6\u6001\uff1a\u5956\u52b1=-1\u81ea\u6211\u3002STATE=NEW_STATE\u8fd4\u56deNEW_STATE\uff0c\u5956\u52b1\u3002\n\u7ed9\u5b9a\u6559\u79d1\u4e66\u4e0a\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6211\u4eec\u7684\u4ee3\u7406\u901a\u5e38\u76f4\u63a5\u79fb\u52a8\u5230\u4f4d\u7f6e(1\uff0c4)\u6765\u9886\u53d610\u5206\u5956\u52b1\u3002\n\u5b9a\u4e49DISPLAY_STATE_VALUES(STATE_VALUES\uff0c\u6807\u9898=\u65e0)\uff1aFIG\uff0cAX=PLT\u3002\u5b50\u56fe(\u56fe\u5927\u5c0f=(4.8\uff0c4.8))\uff0c\u5982\u679c\u6807\u9898\uff1aAX\u3002set_title(Title)#\u5c06\u884c\u8f83\u957f\u7684umpy\u5750\u6807\u8f6c\u6362\u4e3amatplotlib\u5750\u6807Transform_Values=np\u3002rot90(STATE_VALUES\u3002t)im=ax\u3002imshow(Transform_Values\uff0cCmap=&#39\uff1bhot&39\uff1b)\u56fe\u3002\u4ea7\u54c1(\u8303\u56f4(5)\uff0c\u8303\u56f4(5))\u4e2ds\u7684ColorBar(im\uff0cax=ax)agent=GreedyAgent(State_Value)\uff1aaction=agent\u3002\u7b56\u7565dx\uff0cdy=\u64cd\u4f5c\u3002\u65b9\u5411#\u5c06\u884c\u6570\u8f83\u591a\u7684\u591a\u4e2a\u5750\u6807\u53d8\u6362\u4e3amatplotlib\u5750\u6807x\uff0cy=s[1]\uff0c4-s[0]ax\u3002\u7bad\u5934(x-0.25*dx\uff0cy-0.25*dy\uff0c0.5*dx\uff0c0.5*dy\uff0chead_width=0.05)\u8f74\u3002set_xlim(-0.5\uff0c4.5)ax\u3002set_ylim(-0.5\uff0c4.5)PLT\u3002show()def display_state(state\uff0cfig=NONE\uff0cAX=NONE)\uff1a\u5982\u679cAX==NONE\uff1aFIG\uff0cAX=PLT\u3002\u5b50\u56fe(\u56fe\u5927\u5c0f=(6.4*2\uff0c4.8))GRID=NP\u3002\u96f6((5\uff0c5))\u6805\u683c[STATE[0]\uff0cSTATE[1]]=1 AX\u3002imshow(grid\uff0ccmap=#39\uff1bviridis\uff1b)display(\u56fe)Clear_Output(Wait=True)PLT\u3002show()\u3002\n\u7cbe\u786e\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u5bf9\u516c\u5f0f\u3001\u8d85\u53c2\u6570\u6781\u5176\u654f\u611f\uff0c\u5e76\u4e14\u4e0d\u80fd\u6269\u5c55\u5230\u9664\u4e86\u6700\u7b80\u5355\u7684\u95ee\u9898\u4e4b\u5916\u7684\u4efb\u4f55\u95ee\u9898\uff0c\u800c\u4e0d\u4f1a\u8fdb\u884c\u5267\u70c8\u7684\u7b80\u5316/\u5047\u8bbe\u3002\ndef SOLVE_OPTIMIZATION(Gamma=0.9\uff0cDim=5)\uff1a\u89e3\u7b97\u5668=pyspraplp\u3002\u6c42\u89e3\u5668(&#39\uff1bLinearProgrammingGridWorld&#39\uff1b\uff0cpyraplp)\u3002\u6c42\u89e3\u5668\u3002GLOP_LINEAR_PROGRAM)STATE_VALUES={s\uff1a\u6c42\u89e3\u5668\u3002NumVar(-\u6c42\u89e3\u5668\u3002\u65e0\u7a77()\uff0c\u6c42\u89e3\u5668\u3002\u4ea7\u54c1(range(Dim)\uff0crange(Dim))}Objective=\u6c42\u89e3\u5668\u4e2ds\u7684infinity()\uff0cf&#39\uff1bstate_{s[0]}_{s[1]}&#39\uff1b)\u3002\u76ee\u7684()\u76ee\u7684\u3002SetMinimization()Environment=GridWorld()#\u76ee\u6807\uff1a\u6700\u5c0f\u5316STATE_VALUES\u4e2ds0\uff0cv_s0\u7684\u6240\u6709s\u7684sum(v(S))\u3002\u9879\u76ee()\uff1a\u5ba2\u89c2\u3002\u8bbe\u7f6e\u7cfb\u6570(v_s0\uff0c1)#\u6700\u4f18\uff1av(S)=max_a{r+\u03b3*v(s&\n\u4f7f\u7528\u68af\u5ea6\u4e0b\u964d\u548c\u56f4\u7ed5v(S)-v*(S)\u4e4b\u95f4\u7684\u8bef\u5dee\u5b9a\u4e49\u7684\u635f\u5931(\u8fd9\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u8981\u5f52\u529f\u4e8eGautam Kedia\u6e05\u7406\u4e86\u635f\u5931\u51fd\u6570)\u3002\nTF\u3002\u914d\u7f6e\u3002\u5b9e\u9a8c\u6027Run_Functions_Eagerly(True)@Tf\u3002\u51fd\u6570def get_Problem(Gamma\uff0cConstraint_Payment\uff0cSTATE_VALUES=NONE\uff0cDIM=5)\uff1a#TODO\uff1a\u5982\u679cSTATE_VALUES==NONE\uff1aSTATE_VALUES={s\uff1atf\uff0c\u5219\u8bbe\u7f6e\u66f4\u597d\u7684\u521d\u59cb\u503c\u3002\u53d8\u91cf(np.\u3002\u968f\u673a\u7684\u3002Rand()\uff0cname=f&#39\uff1bstate_{s[0]}_{s[1]}&#39\uff1b\uff0cdtype=tf\u3002Float32)for s in product(range(Dim)\uff0crange(Dim))}Errors=[]Environment=GridWorld()for s0\uff0cv_s0 in state_value\u3002Items()\uff1aACTION_VALUES=[]for a in Action\uff1a#\u786e\u5b9a\u6027\u5730\u5c06(s\uff0ca)\u5e94\u7528\u4e8eGridWorld\u4ee5\u83b7\u53d6(s&#39\uff1b\uff0cr)\u73af\u5883\u3002set_state(S0)s1\uff0cr=\u73af\u5883\u3002\u8f6c\u6362(A)v_s1=STATE_VALUES[S1]ACTION_VALUE=r+\u03b3*v_S1 ACTION_VALUES\u3002\u8ffd\u52a0(action_value-v_s0)\u9519\u8bef\u3002\u8ffd\u52a0(Tf.\u3002Reduce_max(Action_Values)\u76ee\u6807=Tf\u3002REDUTE_SUM(TF.\u3002Square(\u9519\u8bef)\uff0cname=&#39\uff1bObjective&#39\uff1b)\u8fd4\u56de\u76ee\u6807\uff0cSTATE_VALUES\u5b9a\u4e49PLOT_LP_STATE_VALUES(STATE_VALUES_DICT\uff0cTITLE=NONE)\uff1aLP_VALUES=NP\u3002\u5bf9\u4e8e(x\uff0cy)\uff0cSTATE_VALUES_DICT\u4e2d\u7684\u53d8\u91cf\u4e3a\u96f6((5\uff0c5))\u3002Items()\uff1alp_values[x\uff0cy]=var\u3002Numpy()DISPLAY_STATE_VALUES(LP_VALUES\uff0cTITLE=TITLE)\u8fd4\u56deLP_VALUES def solve_gradients_tf(\u4f3d\u9a6c=0.9\uff0c\u7ea6\u675f_\u7f5a\u91d1=10\uff0c\u8fed\u4ee3=50000\uff0c\u505c\u6b62_\u589e\u91cf=1e-4\uff0c\u5bf9\u6570\u9891\u7387=NONE)\uff1a\u5982\u679cLOG_FREQUENCE\u4e3aNONE\uff1aLOG_FREQUENCE=\u8fed\u4ee3+1\u4f18\u5316\u5668=TF\u3002\u773c\u955c\u86c7\u3002\u4f18\u5316\u5668\u3002ADAM()PRIV_LOSS_VALUE=1e9 LOSS_HISTORY=[]Objective\uff0cSTATE_VALUES=Get_Problem(Gamma=Gamma\uff0cConstraint_Payment=Constraint_Payment)\uff0c\u8303\u56f4(1\uff0c\u8fed\u4ee3)\uff1a\u4f7f\u7528TF\u3002GradientTape()AS TAPE\uff1aOBJECT\uff0cSTATE_VALUES=GET_PROBUCT(GAMA=GAMA\uff0cCONSTRAINT_PINDITY=CONSTRAINT_PINDY\uff0cSTATE_VALUES=STATE_VALUES)\u3002\u503c())\u635f\u5931=\u76ee\u6807\u68af\u5ea6=\u78c1\u5e26\u3002\u68af\u5ea6(Lost\uff0cTraining_vars)\u4f18\u5316\u5668\u3002\u5e94\u7528\u68af\u5ea6(zip(grads\uff0cTraining_vars))LOSS_VALUE=LOSS\u3002Numpy()LOSS_HISTORY\u3002APPEND(LOSS_VALUE)IF I%LOG_FREQUENCE==0\uff1aPRINT(f&#39\uff1bIteration{i}\uff1aLoss={Lost_Value}&#39\uff1b)PLOT_LP_STATE_VALUES(STATE_VALUES\uff0cTitle=f&#39\uff1bIteration{i}&#39\uff1b)If abs(prev_Loss_Value-Loss_Value)&lt\uff1bSTOPING_DELTA\uff1aBreak PRIV_LOSS_VALUE=LOSS_VALUE RETURN STATE_VALUES\u3002\n#\u53bb\u559d\u676f\u5496\u5561\uff0c\u8fd9\u5c06\u9700\u8981\u5927\u7ea620\u5206\u949f\u7684\u65f6\u95f4\uff0cLP_STATE_VALUES=SOLVE_GRANDIONS_TF(GAMMA=0.9\uff0cSTOPING_DELTA=0.1)PLOT_LP_STATE_VALUES(LP_STATE_VALUES\uff0cTitle=&#39\uff1bTensorFlow\u68af\u5ea6\u4e0b\u964d&#39\uff1b)\u3002\nArray([[21.97758293\uff0c24.41950417\uff0c21.97759247\uff0c19.41941071\uff0c17.47755814]\uff0c[19.77989769\uff0c21.97759819\uff0c19.77980042\uff0c17.801651\uff0c16.02147293]\uff0c[17.80190659\uff0c19.77986145\uff0c17.8018322\uff0c16.02175903\uff0c14.41941547]\uff0c[16.02163315\uff0c17.80198097\uff0c16.02163696\uff0c14.41940784\uff0c12.97757339]\uff0c[14.41948891\uff0c16.021698\uff0c14.41958618\uff0c12.97769833\uff0c12.97769833]])\u3002\n\u6570\u7ec4([[22.\u3002\u300124.4\u300122\u3002\uff0c19.4\uff0c17.5]\uff0c[19.8\uff0c22.\u3002\uff0c19.8\uff0c17.8\uff0c16.]\uff0c[17.8\uff0c19.8\uff0c17.8\uff0c16.\uff0c14.4]\uff0c[16\uff0c17.8\uff0c16.\uff0c14.4\uff0c13.]\uff0c[14.4\uff0c16.\uff0c14.4\uff0c13.\uff0c11.7])\u3002\n\u53e6\u4e00\u79cd\u627e\u5230\u7cbe\u786e\u89e3\u51b3\u65b9\u6848\u7684\u7b56\u7565\u3002\u8fd9\u8fd8\u9700\u8981\u5bf9\u73af\u5883\u6709\u5b8c\u7f8e\u7684\u4e86\u89e3\uff0c\u5e76\u4e14\u4e0d\u80fd\u6269\u5c55\u5230\u590d\u6742\u7684\u95ee\u9898\u3002\u5b83\u7684\u6536\u655b\u6027\u4fdd\u8bc1\u4e5f\u6bd4\u7ebf\u6027\u89c4\u5212\u5f31\u3002\u52a8\u6001\u89c4\u5212\u53ef\u4ee5\u5904\u7406\u6bd4\u7ebf\u6027\u89c4\u5212\u66f4\u5927\u7684\u95ee\u9898\uff0c\u4f46\u662f\u72b6\u6001\u7a7a\u95f4\u5448\u6307\u6570\u589e\u957f\uff0c\u6211\u4eec\u5fc5\u987b\u4f7f\u7528\u5176\u4ed6\u65b9\u6cd5\u6765\u89e3\u51b3\u6700\u5927\u7684\u95ee\u9898\u3002\ndef value_iteration(Gamma=0.9\uff0c\u03b5=1e-4)\uff1aSTATE_VALUES=Np\u3002\u968f\u673a\u7684\u3002RANDN(5\uff0c5)DIM=5\u73af\u5883=GridWorld()Delta=1000\u800cDelta&gt\uff1bepsilon\uff1a\u4ea7\u54c1\u4e2dS0\u7684\u589e\u91cf=0(Range(DIM)\uff0cRange(DIM))\uff1aV_S0=STATE_VALUES[S0]#\u7b56\u7565\uff1aARG-MAX ACTION-VALUE\uff0c\u5177\u6709\u5173\u4e8e\u73af\u5883OPTIME_ACTION_VALUE=-1000\u7684\u5b8c\u7f8e\u4fe1\u606f\u5728\u64cd\u4f5c\u4e2d\uff1a#\u786e\u5b9a\u6027\u5730\u5c06(s\uff0ca)\u5e94\u7528\u4e8eGridworld\u73af\u5883\u3002set_state(S0)s1\uff0cr=\u73af\u5883\u3002\u8f6c\u6362(a\u3002\nArray([[21.97747629\uff0c24.4194222\uff0c21.97747998\uff0c19.4194222\uff0c17.47747998]\uff0c[19.77972866\uff0c21.97747998\uff0c19.77973198\uff0c17.80175878\uff0c16.0215829]\uff0c[17.8017558\uff0c19.77973198\uff0c17.80175878\uff0c16.0215829\uff0c14.41942461]\uff0c[16.02158022\uff0c17.80175878\uff0c16.0215829\uff0c14.41942461\uff0c12.97748215]\uff0c[14.4194222\uff0c16.0215829\uff0c14.41942461\uff0c12.97748215\uff0c12.97748215]])\n\u8499\u7279\u5361\u7f57\u7b97\u6cd5\u662f\u7b2c\u4e00\u7c7b\u53ef\u6269\u5c55\u5230\u590d\u6742\u73b0\u5b9e\u95ee\u9898\u7684\u7b97\u6cd5\u3002\u4e0e\u4ee5\u524d\u7684\u65b9\u6cd5\u4e0d\u540c\uff0c\u8499\u7279\u5361\u7f57\u65b9\u6cd5\u4e0d\u9700\u8981\u73af\u5883\u6a21\u578b\uff0c\u65e2\u53ef\u4ee5\u4ece\u6a21\u62df\u4e8b\u4ef6\u4e2d\u5b66\u4e60\uff0c\u4e5f\u53ef\u4ee5\u4ece\u5b9e\u9645\u7ecf\u9a8c\u4e2d\u5b66\u4e60\u3002\u6b64\u5916\uff0c\u5982\u679c\u53ea\u6709\u7279\u5b9a\u533a\u57df\u4e0e\u6211\u4eec\u7684\u7528\u4f8b\u76f8\u5173\uff0c\u5219\u6b64\u7b56\u7565\u4e0d\u9700\u8981\u5bf9\u6bcf\u4e2a\u5dde\u8fdb\u884c\u7cbe\u786e\u4f30\u8ba1\u3002\n\u7136\u800c\uff0c\u8499\u7279\u5361\u6d1b\u9700\u8981\u4e00\u79cd\u751f\u6210\u60c5\u8282\u7684\u7b56\u7565\uff0c\u65e0\u8bba\u662f\u9488\u5bf9\u7b56\u7565\u4e0a\u7684\u5b66\u4e60\u3001\u7b56\u7565\u5916\u7684\u5b66\u4e60\u3001\u6a21\u62df\u8fd8\u662f\u56de\u6d4b\u3002\u5982\u679c\u6ca1\u6709\u67d0\u79cd\u5f62\u5f0f\u7684\u63a2\u7d22\uff0c\u4f8b\u5982\u03b5-\u8d2a\u5a6a\u7b56\u7565\uff0c\u8fd9\u4e9b\u7b97\u6cd5\u90fd\u4e0d\u4f1a\u5728\u5408\u7406\u7684\u65f6\u95f4\u5185\u4ea7\u751f\u5408\u7406\u7684\u7ed3\u679c\u3002\u8fd9\u662f\u4e00\u4e2a\u6781\u5176\u5f3a\u70c8\u7684\u8ff9\u8c61\uff0c\u8868\u660e\u6709\u76d1\u7763\u7684\u5b66\u4e60\u65b9\u6cd5\u4f1a\u5929\u771f\u5730\u8fbe\u5230\u6b21\u4f18\u7b56\u7565\uff0c\u800c\u6c38\u8fdc\u627e\u4e0d\u5230\u9003\u79bb\u5c40\u90e8\u6781\u5c0f\u503c\u6240\u9700\u7684\u6570\u636e\u3002\n#TODO\uff1a\u63d0\u524d\u505c\u6b62def MC_Prediction(EVERY_ACVISE=FALSE\uff0cGAMA=0.9\uff0cDIM=5\uff0cT=32\uff0cIterations=int(1e4)\uff0cLOG_FREQUENCE=NONE)\uff1a\u5982\u679cLOG_FREQUENCE\u4e3aNONE\uff1aLOG_FREQUENCE=Iterations+1#GreedyAgent\u5728\u8fd9\u91cc\u4e25\u91cd\u5931\u8d25(\u53ef\u80fd\u76d1\u7763\u5b66\u4e60\u4e5f\u4f1a\u5931\u8d25)agent=EpsilonGreedyAgent(name=&#39\uff1b\u7b2c\u4e00\u503cMC\u9884\u6d4b&#39\uff1b)\u8fd4\u56de{s\uff1a(0\uff0c0)for s in product(range(Dim)\uff0crange(Dim))}Environment=GridWorld()for i in range(1\uff0citerations)\uff1aif i%log_Frequency==0\uff1adisplay_state_value(\u4ee3\u7406\u3002STATE_VALUES\uff0cTitle=f&#39\uff1bMC\u9884\u6d4b\uff1a\u8fed\u4ee3{i}&#39\uff1b)#\u6a21\u62df\u5267\u96c6S0=(\u968f\u673a\u3002\u968f\u673a\u6570(0\uff0c4)\uff0c\u968f\u673a\u6570\u3002RANDINT(0\uff0c4))\u73af\u5883\u3002SET_STATE(S0)\u63d2\u66f2=[S0]#S0\uff0ca0\uff0cs1\uff0cr1\uff0ca1\uff0cs2\uff0cr2\uff0ca2\uff0cs3.\u3002FOR_IN\u8303\u56f4(T)\uff1aA0=\u5ea7\u5e2d\u3002\u7b56\u7565(S0)S1\uff0cR1=\u73af\u5883\u3002\u8fc7\u6e21(A0)\u96c6\u3002EXTEND([a0\uff0cs1\uff0cr1])s0=s1#\u5f53j&gt\u65f6\uff0c\u4ece\u5267\u96c6\u7ed3\u5c3eret=0 j=T-1 SEPTION_RETURNS={}\u5f00\u59cb\u56de\u653e([a0\uff0cs1\uff0cr1])s0=s1#\uff1b0\uff1ar1=SEPTION[3*j+3]s0=SEPTION[3*j-1]j-=1 ret=r1+Gamma*ret SESSION_RETURNS[s0]=ret if Every_access\uff1aean_ret\uff0cc=Returns[s0]\u8fd4\u56de[s0]=((ean_ret*c+ret)/(c+1)\uff0cc+1)#\u66f4\u65b0SESSION_RENS\u4e2ds\uff0cret\u7684\u72b6\u6001\u503cv(S)\u3002Items()\uff1a\u5982\u679c\u4e0d\u662fEVERY_ACCESS\uff1aMean_ret\uff0cc=\u8fd4\u56de[s]\u8fd4\u56de[s]=((Mean_ret*c+ret)/(c+1)\uff0cc+1)agent\u3002STATE_VALUES[s]=\u9000\u8d27[s][0]\u9000\u8d27\u4ee3\u7406\u3002\nArray([[16.88336638\uff0c19.11593205\uff0c15.90961158\uff0c14.10295261\uff0c12.66921586]\uff0c[10.19679358\uff0c16.39664102\uff0c9.64112818\uff0c12.32284046\uff0c7.02133044]\uff0c[12.84864394\uff0c14.33527863\uff0c7.98370027\uff0c10.955611\uff0c5.55804087]\uff0c[6.35501717\uff0c12.15020809\uff0c7.09423013\uff0c9.42028638\uff0c8.57767909]\uff0c[5.13072527\uff0c10.60466385\uff0c5.11104244\uff0c8.28273845\uff0c8.28273845]])\u3002\n\u4f7f\u7528\u672c\u671f\u8282\u76ee\u4e2d\u6240\u6709\u53ef\u7528\u7684\u793a\u4f8b\uff0c\u800c\u4e0d\u662f\u4ec5\u9488\u5bf9\u6bcf\u4e2a\u5dde\u4f7f\u7528\u6700\u65e9\u7684\u793a\u4f8b\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4f7f\u7528\u66f4\u591a\u7684\u6570\u636e\u6765\u4f30\u8ba1\u5dde\u4ef7\u503c\uff0c\u5373\u4f7f\u8fd9\u4e00\u96c6\u63a5\u8fd1\u5c3e\u58f0\u7684\u4f8b\u5b50\u4e0d\u662f\u975e\u5e38\u7cbe\u786e\u7684\u4f30\u8ba1\u3002\nArray([[15.75148645\uff0c14.64272644\uff0c15.7478293\uff0c13.97882859\uff0c10.39855134]\uff0c[13.88160682\uff0c10.6009308\uff0c13.97915625\uff0c12.37753395\uff0c10.17550269]\uff0c[6.95911765\uff0c8.5517532\uff0c8.20427254\uff0c10.83583432\uff0c8.98310377]\uff0c[8.1790024\uff0c7.07004833\uff0c3.72116253\uff0c9.01227403\uff0c7.80683278]\uff0c[4.35314417\uff0c5.67303207\uff0c2.75351299\uff0c7.98036612\uff0c7.98036612]])\u3002\n\u8fd9\u662f\u6211\u4eec\u7684\u5206\u6790\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u9700\u8981\u51c6\u786e\u7684\u73af\u5883\u6a21\u578b\u7684\u4f8b\u5b50\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u4f7f\u7528\u6211\u4eec\u7684\u4ee3\u7406\u4e0e\u73af\u5883\u4ea4\u4e92\u4ee5\u751f\u6210\u65b0\u7684\u6837\u672c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u901a\u8fc7\u5f71\u54cd\u7528\u6237\u6765\u5b66\u4e60\uff0c\u4e0d\u7ba1\u662f\u597d\u662f\u574f\uff0c\u5373\u4f7f\u8fd9\u610f\u5473\u7740\u5728\u77ed\u671f\u5185\u7ed9\u6211\u4eec\u7684\u7528\u6237\u5e26\u6765\u53ef\u6015\u7684\u4f53\u9a8c\u3002\ndef MC_CONTROL(EVERY_ACCESS=FALSE\uff0cGAMA=0.9\uff0cDIM=5\uff0cT=32\uff0cIterations=int(1e4)\uff0clog_Frequency=None)\uff1a\u5982\u679clog_Frequency\u4e3aNONE\uff1aLOG_FREQUENCE=Iterations+1 agent=LearnedAgent(Name=&#39\uff1bMC Control&#39\uff1b\uff0cepsilon=0.01)#\u8fd9\u4e0d\u4f1a&#39\uff1bt\u5728\u6ca1\u6709\u67d0\u4e9b\u63a2\u7d22\u7684\u60c5\u51b5\u4e0b\u5de5\u4f5c\u8fd4\u56de={(x\uff0cy\uff0ca)\uff1a(0\uff0c0)for x\uff0cy\uff0ca in product(range(Dim)\uff0crange(Dim)\uff0c[a for a in action])}Environment=Gridworld()for i in range(1\uff0c\u8fed\u4ee3\u6570)\uff1aif i%log_Frequency==0\uff1adisplay_state_value(\u4ee3\u7406\u3002ACTION_VALUES\u3002Max(\u8f74=2)\uff0ctitle=f&#39\uff1bMC\u63a7\u5236\uff1a\u8fed\u4ee3{i}&#39\uff1b)#\u4ece\u968f\u673a(\u72b6\u6001\uff0c\u52a8\u4f5c)x\uff0cy\uff0ca0=(\u968f\u673a.\u3002\u968f\u673a\u6570(0\uff0c4)\uff0c\u968f\u673a\u6570\u3002\u968f\u673a\u6570(0\uff0c4)\uff0c\u968f\u673a\u6570\u3002\u9009\u62e9([a for a in Action]))s0=(x\uff0cy)\u73af\u5883\u3002SET_STATE(S0)\u63d2\u66f2=[S0]#S0\uff0ca0\uff0cs1\uff0cr1\uff0ca1\uff0cs2\uff0cr2\uff0ca2\uff0cs3.\u3002FOR_IN\u8303\u56f4(T)\uff1aS1\uff0cR1=\u73af\u5883\u3002\u8fc7\u6e21(A0)\u96c6\u3002EXTEND([a0\uff0cs1\uff0cr1])a0=\u5ea7\u5e2d\u3002POLICY(S1)#\u4ece\u5267\u96c6\u7ed3\u5c3e\u5411\u540e\u56de\u653eret=0 j=T-1 SEPTION_RETURNS={\n..", "note_en": "In this notebook, we repeatedly solve a simple environment to explore the characteristics of the following algorithm classes, { Linear Programming (LP),  Dynamic Programming (DP),  Monte Carlo (MC), and  Temporal Difference Learning (TD)}. For  MC and  TD, we also explore further problem spaces in  Prediction,  On-Policy Control, and  Off-Policy Control.\n  from  __future__  import  print_function from  IPython.display  import  display ,  clear_output from  datetime  import  datetime ,  timedelta from  itertools  import  product from  pandas.plotting  import  register_matplotlib_converters import  ipywidgets  as  widgets import  numpy  as  np import  matplotlib.pyplot  as  plt import  pandas  as  pd import  random import  tensorflow  as  tf pd . options . display . max_columns  =  None register_matplotlib_converters () % matplotlib inline\n  % pip install ortools from  ortools.linear_solver  import  pywraplp # need to restart notebook after installing first time _  =  pywraplp . Solver ( &#39;LinearProgrammingGridworld&#39; ,  pywraplp . Solver . GLOP_LINEAR_PROGRAMMING )\n Looking in indexes: https://pypi.org/simple, https://pypi.lyft.net/pypi/Requirement already satisfied: ortools in /code/venvs/venv/lib/python3.6/site-packages (7.6.7691)Requirement already satisfied: protobuf&gt;=3.11.2 in /code/venvs/venv/lib/python3.6/site-packages (from ortools) (3.11.3)Requirement already satisfied: six&gt;=1.10 in /code/venvs/venv/lib/python3.6/site-packages (from ortools) (1.12.0)Requirement already satisfied: setuptools in /code/venvs/venv/lib/python3.6/site-packages (from protobuf&gt;=3.11.2-&gt;ortools) (45.2.0)Note: you may need to restart the kernel to use updated packages.\n   # optimal strategy, gamma=0.9 expected_values  =  np . array ([  [ 22.0 ,  24.4 ,  22.0 ,  19.4 ,  17.5 ],  [ 19.8 ,  22.0 ,  19.8 ,  17.8 ,  16.0 ],  [ 17.8 ,  19.8 ,  17.8 ,  16.0 ,  14.4 ],  [ 16.0 ,  17.8 ,  16.0 ,  14.4 ,  13.0 ],  [ 14.4 ,  16.0 ,  14.4 ,  13.0 ,  11.7 ] ])\n  from  enum  import  Enum class  Action ( Enum ):  NORTH  =  &#39;N&#39; ,  0 ,  lambda  x :  ( x [ 0 ]  -  1 ,  x [ 1 ]),  ( 0 ,  1 )  EAST  =  &#39;E&#39; ,  1 ,  lambda  x :  ( x [ 0 ],  x [ 1 ]  +  1 ),  ( 1 ,  0 )  WEST  =  &#39;W&#39; ,  2 ,  lambda  x :  ( x [ 0 ],  x [ 1 ]  -  1 ),  ( - 1 ,  0 )  SOUTH  =  &#39;S&#39; ,  3 ,  lambda  x :  ( x [ 0 ]  +  1 ,  x [ 1 ]),  ( 0 ,  - 1 )  def  __init__ ( self ,  display_name ,  index ,  transition ,  direction ):  self . display_name  =  display_name  self . index  =  index  self . transition  =  transition  # numpy row-major coordinates  self . direction  =  direction  # matplotlib coordinates  def  __str__ ( self ):  return  self . display_name\n  class  Agent ( object ):  def  __init__ ( self ,  name ):  self . name  =  name  def  policy ( self ,  state ):  &#34;&#34;&#34;Return an Action given STATE&#34;&#34;&#34;  raise  NotImplementedError ()\n class  GreedyAgent ( Agent ):  &#34;&#34;&#34;  This agent has perfect information regarding the environment transition probabilities and rewards.    This approach is infeasible for complex problems where the environment is unknown.  &#34;&#34;&#34;  def  __init__ ( self ,  state_values = None ,  name = &#39;Optimal&#39; ,  gamma = 0.9 ):  super () . __init__ ( name )  if  state_values  is  None :  state_values  =  np . random . randn ( 5 ,  5 )  self . state_values  =  state_values  # v(s)  self . gamma  =  gamma  self . environment  =  Gridworld ()  def  policy ( self ,  state ):  &#34;&#34;&#34;Policy iteration using the exact transition/reward outcomes.&#34;&#34;&#34;  action  =  None  max_action_value  =  - 1000  for  a  in  Action :  self . environment . set_state ( state )  s1 ,  r  =  self . environment . transition ( a )  action_value  =  r  +  self . gamma  *  self . state_values [ s1 ]  if  action_value  &gt;  max_action_value :  action  =  a  max_action_value  =  action_value  return  action\n class  EpsilonGreedyAgent ( GreedyAgent ):  &#34;&#34;&#34;  GreedyAgent with epsilon greedy exploration.    This approach is infeasible for complex problems where the environment is unknown.  &#34;&#34;&#34;  def  __init__ ( self ,  epsilon = 1e-2 ,  ** kwargs ):  super () . __init__ ( ** kwargs )  self . epsilon  =  epsilon  def  policy ( self ,  state ):  if  random . random ()  &lt;  self . epsilon :  return  random . choice ([ a  for  a  in  Action ])  return  super () . policy ( state )\n class  LearnedAgent ( Agent ):  &#34;&#34;&#34;Learn the Optimal Policy beginning with a random policy and no priors.&#34;&#34;&#34;  def  __init__ ( self ,  name = &#39;Learned&#39; ,  gamma = 0.9 ,  dim = 5 ,  epsilon = 0 ):  super () . __init__ ( name )  self . action_values  =  np . random . randn ( 5 ,  5 ,  4 )  # q(s, a)  self . _policy  =  { s :  random . choice ([ a  for  a  in  Action ])  for  s  in  product ( range ( dim ),  range ( dim ))}  self . gamma  =  gamma  self . epsilon  =  epsilon  def  policy ( self ,  state ):  if  random . random ()  &lt;  self . epsilon :  return  random . choice ([ a  for  a  in  Action ])  return  self . _policy [ state ]  def  update_state_policy ( self ,  s ):  old_action  =  self . _policy [ s ]  stable  =  True  max_action_value  =  - 1000  for  a  in  Action :  action_value  =  self . action_values [( s [ 0 ],  s [ 1 ],  a . index )]  if  action_value  &gt;  max_action_value :  action  =  a  max_action_value  =  action_value  if  action  !=  old_action :  policy_stable  =  False  self . _policy [ s ]  =  action  return  stable  def  policy_improvement ( self ):  &#34;&#34;&#34;Update our policy based on our latest action_values&#34;&#34;&#34;  policy_stable  =  True  for  s  in  self . _policy . keys ():  stable  =  self . update_state_policy ( s )  if  not  stable :  policy_stable  =  False  return  policy_stable\n  class  Gridworld ( object ):  def  __init__ ( self ,  initial_state = ( 0 ,  0 )):  self . dim  =  5  self . state  =  initial_state  def  set_state ( self ,  state ):  self . state  =  state  def  _transition_state ( self ,  action ):  &#34;&#34;&#34;Try to apply the ACTION and check whether it is valid&#34;&#34;&#34;  x ,  y  =  action . transition ( self . state )  if  x  &lt;  0  or  x  &gt;=  self . dim :  return  self . state  elif  y  &lt;  0  or  y  &gt;=  self . dim :  return  self . state  return  x ,  y  def  transition ( self ,  action ):  &#34;&#34;&#34;Apply the given ACTION to the current state and return the new state and reward.&#34;&#34;&#34;  reward  =  0  if  self . state  ==  ( 0 ,  1 ):  # special state A   new_state  =  ( 4 ,  1 )  reward  =  10  elif  self . state  ==  ( 0 ,  3 ):  # specal state B  new_state  =  ( 2 ,  3 )  reward  =  5  else :  new_state  =  self . _transition_state ( action )  # invalid move  if  new_state  ==  self . state :  reward  =  - 1  self . state  =  new_state  return  new_state ,  reward\n Given the textbook solution, our agent generally moves straight to position  (1, 4) to collect the 10 reward.\n def  display_state_values ( state_values ,  title = None ):  fig ,  ax  =  plt . subplots ( figsize = ( 4.8 ,  4.8 ))  if  title :  ax . set_title ( title )  # Transform row-major numpy coords to matplotlib coords   transformed_values  =  np . rot90 ( state_values . T )  im  =  ax . imshow ( transformed_values ,  cmap = &#39;hot&#39; )  fig . colorbar ( im ,  ax = ax )  agent  =  GreedyAgent ( state_values )  for  s  in  product ( range ( 5 ),  range ( 5 )):  action  =  agent . policy ( s )  dx ,  dy  =  action . direction  # Transform row-major numpy coords to matplotlib coords  x ,  y  =  s [ 1 ],  4  -  s [ 0 ]  ax . arrow ( x  -  0.25  *  dx ,  y  -  0.25  *  dy ,  0.5  *  dx ,  0.5  *  dy ,  head_width = 0.05 )  ax . set_xlim ( - 0.5 ,  4.5 )  ax . set_ylim ( - 0.5 ,  4.5 )  plt . show ()  def  display_state ( state ,  fig = None ,  ax = None ):  if  ax  ==  None :  fig ,  ax  =  plt . subplots ( figsize = ( 6.4 * 2 ,  4.8 ))  grid  =  np . zeros (( 5 ,  5 ))  grid [ state [ 0 ],  state [ 1 ]]  =  1  ax . imshow ( grid ,  cmap = &#39;viridis&#39; )  display ( fig )  clear_output ( wait = True )  plt . show ()\n  An exact solution, but extremely sensitive to formulation, hyperparameters, and unscaleable to anything but the simplest problems without making drastic simplifications/assumptions.\n def  solve_optimization ( gamma = 0.9 ,  dim = 5 ):  solver  =  pywraplp . Solver ( &#39;LinearProgrammingGridworld&#39; ,  pywraplp . Solver . GLOP_LINEAR_PROGRAMMING )  state_values  =  { s :  solver . NumVar ( - solver . infinity (),  solver . infinity (),  f &#39;state_ {s[0]} _ {s[1]} &#39; )  for  s  in  product ( range ( dim ),  range ( dim ))}  objective  =  solver . Objective ()  objective . SetMinimization ()  environment  =  Gridworld ()  # Objective: minimize sum(v(s)) for all s  for  s0 ,  v_s0  in  state_values . items ():  objective . SetCoefficient ( v_s0 ,  1 )  # Optimal: v(s) = max_a{r + gamma * v(s&#39;)}  for  a  in  Action :  # Deterministically apply (s, a) to Gridworld to get (s&#39;, r)  environment . set_state ( s0 )  s1 ,  r  =  environment . transition ( a )  v_s1  =  state_values [ s1 ]  # Constraint: v(s) - gamma * v(s&#39;) &gt;= r  constraint  =  solver . Constraint ( r ,  solver . infinity ())  constraint . SetCoefficient ( v_s0 ,  1 )  constraint . SetCoefficient ( v_s1 ,  - gamma )  print ( f &#39;Number of variables={solver.NumVariables()}, constraints={solver.NumConstraints()}&#39; )  solver . EnableOutput ()  status  =  solver . Solve ()  if  status  ==  solver . OPTIMAL :  values  =  np . zeros (( 5 ,  5 ))  for  ( x ,  y ),  var  in  state_values . items ():  values [ x ,  y ]  =  var . solution_value ()  return  values  else :  if  status  ==  solver . FEASIBLE :  print ( &#39;A potentially suboptimal solution was found.&#39; )  else :  print ( &#39;The solver could not solve the problem.&#39; )\n array([[ 3.00730776, 10.02435919, 3.00730776, 5.13874615, 1.54162384], [ 0.90219233, 3.00730776, 0.90219233, 1.54162384, 0.46248715], [ 0.2706577 , 0.90219233, 0.2706577 , 0.46248715, 0.13874615], [ 0.08119731, 0.2706577 , 0.08119731, 0.13874615, 0.04162384], [ 0.02435919, 0.08119731, 0.02435919, 0.04162384, 0.01248715]])\n Using gradient descent and a loss defined around the error between  v(s) - v*(s) (big thanks to Gautam Kedia for cleaning up the loss function).\n tf . config . experimental_run_functions_eagerly ( True ) @tf . function def  get_problem ( gamma ,  constraint_penalty ,  state_values = None ,  dim = 5 ):  # TODO: set better initial values  if  state_values  ==  None :  state_values  =  { s :  tf . Variable ( np . random . rand (),  name = f &#39;state_ {s[0]} _ {s[1]} &#39; ,  dtype = tf . float32 )  for  s  in  product ( range ( dim ),  range ( dim ))}  errors  =  []  environment  =  Gridworld ()  for  s0 ,  v_s0  in  state_values . items ():  action_values  =  []  for  a  in  Action :  # Deterministically apply (s, a) to Gridworld to get (s&#39;, r)  environment . set_state ( s0 )  s1 ,  r  =  environment . transition ( a )  v_s1  =  state_values [ s1 ]  action_value  =  r  +  gamma  *  v_s1  action_values . append ( action_value  -  v_s0 )  errors . append ( tf . reduce_max ( action_values ))  objective  =  tf . reduce_sum ( tf . square ( errors ),  name = &#39;objective&#39; )  return  objective ,  state_values def  plot_lp_state_values ( state_values_dict ,  title = None ):  lp_values  =  np . zeros (( 5 ,  5 ))  for  ( x ,  y ),  var  in  state_values_dict . items ():  lp_values [ x ,  y ]  =  var . numpy ()  display_state_values ( lp_values ,  title = title )  return  lp_values def  solve_gradients_tf ( gamma = 0.9 ,  constraint_penalty = 10. ,  iterations = 50000 ,  stopping_delta = 1e-4 ,  log_frequency = None ):  if  log_frequency  is  None :  log_frequency  =  iterations  +  1  optimizer  =  tf . keras . optimizers . Adam ()  prev_loss_value  =  1e9  loss_history  =  []  objective ,  state_values  =  get_problem ( gamma = gamma ,  constraint_penalty = constraint_penalty )  for  i  in  range ( 1 ,  iterations ):  with  tf . GradientTape ()  as  tape :  objective ,  state_values  =  get_problem ( gamma = gamma ,  constraint_penalty = constraint_penalty ,  state_values = state_values )  trainable_vars  =  list ( state_values . values ())  loss  =  objective  grads  =  tape . gradient ( loss ,  trainable_vars )  optimizer . apply_gradients ( zip ( grads ,  trainable_vars ))  loss_value  =  loss . numpy ()  loss_history . append ( loss_value )  if  i  %  log_frequency  ==  0 :  print ( f &#39;Iteration  {i} : Loss= {loss_value} &#39; )  plot_lp_state_values ( state_values ,  title = f &#39;Iteration  {i} &#39; )  if  abs ( prev_loss_value  -  loss_value )  &lt;  stopping_delta :  break  prev_loss_value  =  loss_value  return  state_values\n # Go get a coffee, this will take ~20 minutes lp_state_values  =  solve_gradients_tf ( gamma = 0.9 ,  stopping_delta = 0.1 ) plot_lp_state_values ( lp_state_values ,  title = &#39;Tensorflow Gradient Descent&#39; )\n array([[21.97758293, 24.41950417, 21.97759247, 19.41941071, 17.47755814], [19.77989769, 21.97759819, 19.77980042, 17.801651 , 16.02147293], [17.80190659, 19.77986145, 17.8018322 , 16.02175903, 14.41941547], [16.02163315, 17.80198097, 16.02163696, 14.41940784, 12.97757339], [14.41948891, 16.021698 , 14.41958618, 12.97769833, 11.68007278]])\n array([[22. , 24.4, 22. , 19.4, 17.5], [19.8, 22. , 19.8, 17.8, 16. ], [17.8, 19.8, 17.8, 16. , 14.4], [16. , 17.8, 16. , 14.4, 13. ], [14.4, 16. , 14.4, 13. , 11.7]])\n Another strategy for finding the exact solution. This also requires a perfect understanding of the environment and not scaleable to complex problems. It also has weaker convergence guarantees than Linear Programming. Dynamic Programming can handle larger problems than Linear Programming, however the state-space grows exponentially and we must use other methods for the largest problems.\n def  value_iteration ( gamma = 0.9 ,  epsilon = 1e-4 ):  state_values  =  np . random . randn ( 5 ,  5 )  dim  =  5  environment  =  Gridworld ()  delta  =  1000  while  delta  &gt;  epsilon :  delta  =  0  for  s0  in  product ( range ( dim ),  range ( dim )):  v_s0  =  state_values [ s0 ]  # Policy: arg-max action-value, having perfect information about the environment  optimal_action_value  =  - 1000  for  a  in  Action :  # Deterministically apply (s, a) to Gridworld  environment . set_state ( s0 )  s1 ,  r  =  environment . transition ( a )  v_s1  =  state_values [ s1 ]  action_value  =  r  +  gamma  *  v_s1  optimal_action_value  =  max ( action_value ,  optimal_action_value )  state_values [ s0 ]  =  optimal_action_value  delta  +=  abs ( v_s0  -  optimal_action_value )  return  state_values\n array([[21.97747629, 24.4194222 , 21.97747998, 19.4194222 , 17.47747998], [19.77972866, 21.97747998, 19.77973198, 17.80175878, 16.0215829 ], [17.8017558 , 19.77973198, 17.80175878, 16.0215829 , 14.41942461], [16.02158022, 17.80175878, 16.0215829 , 14.41942461, 12.97748215], [14.4194222 , 16.0215829 , 14.41942461, 12.97748215, 11.67973394]])\n Monte Carlo is the first class of algorithm that is scaleable to complex real world problems. Unlike the previous approaches, Monte Carlo methods do not require a model of the environment, learning from both simulated episodes and actual experience. Additionally, this strategy does not require precise estimation of every state if only particular regions are relevant to our use-case.\n However Monte Carlo requires a strategy for generating episodes, either for on-policy learning, off-policy learning, simulation, or back-test. None of the these algorithms generate sensible results in a reasonable amount of time without some form of exploration, such as epsilon-greedy policies. This is an extremely strong indication that a supervised learning approach would naively reach a suboptimal policy while never finding the data necessary to escape the local minima.\n # TODO: early stopping def  mc_prediction ( every_visit = False ,  gamma = 0.9 ,  dim = 5 ,  T = 32 ,  iterations = int ( 1e4 ),  log_frequency = None ):  if  log_frequency  is  None :  log_frequency  =  iterations  +  1  # GreedyAgent fails spectacularly here (likely supervised learning would also fail)  agent  =  EpsilonGreedyAgent ( name = &#39;First-Value MC Prediction&#39; )  returns  =  { s :  ( 0 ,  0 )  for  s  in  product ( range ( dim ),  range ( dim ))}  environment  =  Gridworld ()  for  i  in  range ( 1 ,  iterations ):  if  i  %  log_frequency  ==  0 :  display_state_values ( agent . state_values ,  title = f &#39;MC Prediction: Iteration  {i} &#39; )  # Simulate episode  s0  =  ( random . randint ( 0 ,  4 ),  random . randint ( 0 ,  4 ))  environment . set_state ( s0 )  episode  =  [ s0 ]  # s0, a0, s1, r1, a1, s2, r2, a2, s3...  for  _  in  range ( T ):  a0  =  agent . policy ( s0 )  s1 ,  r1  =  environment . transition ( a0 )  episode . extend ([ a0 ,  s1 ,  r1 ])  s0  =  s1  # Replay backwards from the end of the episode  ret  =  0  j  =  T  -  1  episode_returns  =  {}  while  j  &gt;  0 :  r1  =  episode [ 3 * j  +  3 ]  s0  =  episode [ 3 * j  -  1 ]  j  -=  1  ret  =  r1  +  gamma  *  ret  episode_returns [ s0 ]  =  ret  if  every_visit :  mean_ret ,  c  =  returns [ s0 ]  returns [ s0 ]  =  (( mean_ret  *  c  +  ret )  /  ( c  +  1 ),  c  +  1 )  # Update state values v(s)  for  s ,  ret  in  episode_returns . items ():  if  not  every_visit :  mean_ret ,  c  =  returns [ s ]  returns [ s ]  =  (( mean_ret  *  c  +  ret )  /  ( c  +  1 ),  c  +  1 )  agent . state_values [ s ]  =  returns [ s ][ 0 ]  return  agent\n array([[16.88336638, 19.11593205, 15.90961158, 14.10295261, 12.66921586], [10.19679358, 16.39664102, 9.64112818, 12.32284046, 7.02133044], [12.84864394, 14.33527863, 7.98370027, 10.955611 , 5.55804087], [ 6.35501717, 12.15020809, 7.09423013, 9.42028638, 8.57767909], [ 5.13072527, 10.60466385, 5.11104244, 8.28273845, 7.46509452]])\n Use every available example in the episode, instead of the earliest example only for each state. In other words, use more data to estimate state-value, even if the examples near the end of the episode are not very precise estimates.\n array([[15.75148645, 14.64272644, 15.7478293 , 13.97882859, 10.39855134], [13.88160682, 10.6009308 , 13.97915625, 12.37753395, 10.17550269], [ 6.95911765, 8.5517532 , 8.20427254, 10.83583432, 8.98310377], [ 8.1790024 , 7.07004833, 3.72116253, 9.01227403, 7.80683278], [ 4.35314417, 5.67303207, 2.75351299, 7.98036612, 6.97511888]])\n This is the first example in our analysis that does not need an accurate model of the environment. Instead, we use our Agent to interact with the environment to generate new samples. In other words, we learn through affecting users, for better or worse, even if this means giving our users a terrible experience in the short term.\n def  mc_control ( every_visit = False ,  gamma = 0.9 ,  dim = 5 ,  T = 32 ,  iterations = int ( 1e4 ),  log_frequency = None ):  if  log_frequency  is  None :  log_frequency  =  iterations  +  1  agent  =  LearnedAgent ( name = &#39;MC Control&#39; ,  epsilon = 0.01 )  # this doesn&#39;t work without some exploration  returns  =  {( x ,  y ,  a ):  ( 0 ,  0 )  for  x ,  y ,  a  in  product ( range ( dim ),  range ( dim ),  [ a  for  a  in  Action ])}  environment  =  Gridworld ()  for  i  in  range ( 1 ,  iterations ):  if  i  %  log_frequency  ==  0 :  display_state_values ( agent . action_values . max ( axis = 2 ),  title = f &#39;MC Control: Iteration  {i} &#39; )  # Simulate episode from random (state, action)  x ,  y ,  a0  =  ( random . randint ( 0 ,  4 ),  random . randint ( 0 ,  4 ),  random . choice ([ a  for  a  in  Action ]))  s0  =  ( x ,  y )  environment . set_state ( s0 )  episode  =  [ s0 ]  # s0, a0, s1, r1, a1, s2, r2, a2, s3...  for  _  in  range ( T ):  s1 ,  r1  =  environment . transition ( a0 )  episode . extend ([ a0 ,  s1 ,  r1 ])  a0  =  agent . policy ( s1 )  # Replay backwards from the end of the episode  ret  =  0  j  =  T  -  1  episode_returns  =  {\n......", "posttime": "2020-05-05 18:40:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7b97\u6cd5,algorithms,\u5b66\u4e60,learning,state", "title": "\u7f51\u683c\u4e16\u754c\u4e2d\u7684\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5", "title_en": "Reinforcement Learning Algorithms in Gridworld", "transed": 1, "url": "https://nbviewer.jupyter.org/url/github.com/laxatives/rl/blob/master/gridworld_mdp.ipynb", "via": "", "real_tags": ["\u7b97\u6cd5", "\u5b66\u4e60", "learning", "state"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1000719, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Nativefier\u662f\u4e00\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u53ef\u4ee5\u901a\u8fc7\u7b80\u6d01\u548c\u6700\u5c11\u7684\u914d\u7f6e\u8f7b\u677e\u5730\u4e3a\u4efb\u4f55\u7f51\u7ad9\u521b\u5efa\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\u3002\u5e94\u7528\u7a0b\u5e8f\u7531Electron\u6253\u5305\u5728\u64cd\u4f5c\u7cfb\u7edf\u53ef\u6267\u884c\u6587\u4ef6(.app\u3001.exe\u7b49)\u4e2d\u3002\u9002\u7528\u4e8eWindows\u3001MacOS\u548cLinux\u3002\n\u6211\u4e4b\u6240\u4ee5\u8fd9\u6837\u505a\uff0c\u662f\u56e0\u4e3a\u6211\u538c\u5026\u4e86\u5728\u4f7f\u7528Facebook Messenger\u6216Whatsapp Web(\u76f8\u5173\u9ed1\u5ba2\u65b0\u95fb\u5e16\u5b50)\u65f6\uff0c\u4e0d\u5f97\u4e0d\u5728\u6d4f\u89c8\u5668\u4e0a\u4f7f\u7528\u2318-Tab\u6216Alt-Tab\u952e\uff0c\u7136\u540e\u5728\u4f17\u591a\u6253\u5f00\u7684\u6807\u7b7e\u4e2d\u8fdb\u884c\u641c\u7d22\u3002\n\u53ef\u9009\u4f9d\u8d56\u9879\uff1a\u7528\u4e8e\u5728\u975eWindows\u5e73\u53f0\u4e0b\u6253\u5305Windows\u5e94\u7528\u7a0b\u5e8f\u7684WINE\u3002\u786e\u4fdd\u9152\u5728\u4f60\u7684$\u8def\u5f84\u4e0a\u3002\nNativefier\u5c06\u5c1d\u8bd5\u786e\u5b9a\u5e94\u7528\u7a0b\u5e8f\u540d\u79f0\u3001\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u548c\u5904\u7406\u5668\u67b6\u6784\uff0c\u4ee5\u53ca\u5176\u4ed6\u9009\u9879\u3002\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06--name&#34\uff1b\u4ecb\u8d28&#34\uff1b\u6307\u5b9a\u4e3a\u547d\u4ee4\u884c\u9009\u9879\u7684\u4e00\u90e8\u5206\u6765\u8986\u76d6\u5e94\u7528\u7a0b\u5e8f\u540d\u79f0\u6216\u5176\u4ed6\u9009\u9879\uff1a\n\u9605\u8bfbAPI\u6587\u6863(\u6216nativefier--help)\uff0c\u4e86\u89e3\u53ef\u7528\u4e8e\u914d\u7f6e\u6253\u5305\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4ed6\u547d\u4ee4\u884c\u6807\u5fd7\u3002\n\u8981\u8ba9\u5e94\u7528\u7a0b\u5e8f/\u57df\u540d\u9ed8\u8ba4\u4f7f\u7528\u9ad8\u5206\u8fa8\u7387\u56fe\u6807\uff0c\u8bf7\u5411\u56fe\u6807\u5e93\u6295\u7a3f\uff01\n\u8bf7\u6ce8\u610f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5e94\u7528\u7a0b\u5e8f\u83dc\u5355\u5904\u4e8e\u9690\u85cf\u72b6\u6001\uff0c\u4ee5\u5b9e\u73b0\u6700\u5c0f\u7684UI\u3002\u60a8\u53ef\u4ee5\u6309ALT\u952e\u76d8\u952e\u8fdb\u884c\u8bbf\u95ee\u3002\n\u5e26\u6709\u9002\u5f53\u7ba1\u9053\u7684\u6a21\u677f\u5e94\u7528\u7a0b\u5e8f\u5305\u542b\u5728./app\u6587\u4ef6\u5939\u4e2d\u3002\u5f53\u8fd0\u884c\u672c\u673a\u7a0b\u5e8f\u65f6\uff0c\u8be5\u6a21\u677f\u88ab\u53c2\u6570\u5316\uff0c\u5e76\u4f7f\u7528\u7535\u5b50\u6253\u5305\u7a0b\u5e8f\u6253\u5305\u3002\n\u6b64\u5916\uff0c\u6211\u5c06GitCloud\u6784\u5efa\u4e3a\u4f7f\u7528GitHub\u4f5c\u4e3a\u56fe\u6807\u7d22\u5f15\uff0c\u5e76\u4f7f\u7528pageIcon\u56de\u9000\u4eceURL\u63a8\u65ad\u76f8\u5173\u56fe\u6807\u3002\nDockerfile\u7684\u4f7f\u7528\u65b9\u5f0f\u4e0eNormal\u539f\u751f\u5e94\u7528\u7a0b\u5e8f\u7c7b\u4f3c\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5c06\u6267\u884c\u547d\u4ee4nativefier--help\u3002\u5728\u4f7f\u7528\u6620\u50cf\u4e4b\u524d\uff0c\u60a8\u5fc5\u987b\u6784\u5efa\u5b83\uff1a\n\u5728\u6b64\u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u5c06\u60a8\u7684\u7b2c\u4e00\u4e2a\u539f\u751f\u5e94\u7528\u7a0b\u5e8f\u6784\u5efa\u5230\u672c\u5730$target-path\u3002\u786e\u4fdd\u60a8\u5bf9$target-path\u5177\u6709\u5199\u5165\u6743\u9650\uff1a\n\u60a8\u8fd8\u53ef\u4ee5\u4f20\u9012\u672c\u5730\u5316\u6807\u5fd7\uff0c\u5e76\u6302\u8f7d\u5176\u4ed6\u5377\u4ee5\u63d0\u4f9b\u672c\u5730\u6587\u4ef6\u3002\u4f8b\u5982\uff0c\u8981\u4f7f\u7528\u56fe\u6807\uff0c\u8bf7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\nDocker run-v$path_to_icon/\uff1a/src-v$target-path\uff1a/target local/nativefier--icon/src/icon.png--name WhatsApp-p linux-a x64 https://my-web-app.com//target/", "note_en": "Nativefier is a command-line tool to easily create a desktop application for any web site with succinct and minimal configuration. Apps are wrapped by  Electron in an OS executable ( .app,  .exe, etc.) for use on Windows, macOS and Linux.\n I did this because I was tired of having to  \u2318-tab or  alt-tab to my browser and then search through the numerous open tabs when I was using  Facebook Messenger or  Whatsapp Web ( relevant Hacker News thread).\n     Optional dependencies: Wine to package Windows apps under non-Windows platforms. Make sure  wine is in your  $PATH.\n     Nativefier will attempt to determine the app name, your OS and processor architecture, among other options. If desired, the app name or other options can be overwritten by specifying the  --name &#34;Medium&#34; as part of the command line options:\n  Read the  API documentation (or  nativefier --help) for other command-line flags that can be used to configure the packaged app.\n To have high-resolution icons used by default for an app/domain, please contribute to the  icon repository!\n Note that the application menu is hidden by default for a minimal UI. You can press the  alt keyboard key to access it.\n  A template app with the appropriate plumbing is included in the  ./app folder. When  nativefier is run, this template is parameterized, and packaged using  Electron Packager.\n In addition, I built  GitCloud to use GitHub as an icon index, and also the  pageIcon fallback to infer a relevant icon from a URL.\n     The  Dockerfile is designed to be used like the &#34;normal&#34; nativefier app. By default, the command  nativefier --help will be executed. Before you can use the image, you have to build it:\n  After that, you can build your first nativefier app to the local  $TARGET-PATH. Ensure you have write access to the  $TARGET-PATH:\n  You can also pass nativefier flags, and mount additional volumes to provide local files. For example, to use a icon:\n docker run -v $PATH_TO_ICON/:/src -v $TARGET-PATH:/target local/nativefier --icon /src/icon.png --name whatsApp -p linux -a x64 https://my-web-app.com/ /target/", "posttime": "2020-05-05 18:40:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a0b\u5e8f,app,\u7f51\u9875,page,\u5e94\u7528\u7a0b\u5e8f", "title": "\u4f7f\u4efb\u4f55\u7f51\u9875\u6210\u4e3a\u684c\u9762\u5e94\u7528\u7a0b\u5e8f", "title_en": "Make any web page a desktop application", "transed": 1, "url": "https://github.com/jiahaog/nativefier", "via": "", "real_tags": ["\u7a0b\u5e8f", "app", "\u7f51\u9875", "page", "\u5e94\u7528\u7a0b\u5e8f"]}, {"category": "", "categoryclass": "", "imagename": "59d8feaa20495cf51f62a026e1bb62f1.jpeg", "infoid": 1000717, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u8ba9\u4eba\u4eec\u5f88\u4e3a\u96be\uff0c\u8ba9\u4ed6\u4eec\u4e0d\u5f97\u4e0d\u82b1\u4e00\u5206\u949f\u601d\u8003\u6211\u8981\u627e\u7684\u662f\u4ec0\u4e48\u3002\u8fd9\u662f\u4e0d\u662f\u67d0\u79cd\u9677\u9631\uff1f\u4ed6\u662f\u4e0d\u662f\u60f3\u627e\u4e2a\u4e0d\u96c7\u6211\u7684\u7406\u7531\uff1f\u6211\u60f3\u8981\u7684\u4e1c\u897f\u7684\u8bc9\u8bbc\u65f6\u6548\u5230\u4e86\u5417\uff1f\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u5b9e\u5b9e\u5728\u5728\u7684\u62c5\u5fe7\uff0c\u4f46\u6211\u4e0d\u662f\u6765\u8fd9\u91cc\u8bc4\u5224\u9519\u8bef\u7684\u3002\u6211\u662f\u6765\u5224\u65ad\u4f60\u662f\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u3002\u6211\u5728\u542cKaizen\u7684DevOps\u7ec3\u4e60\u3002\u6539\u5584\u662f\u65e5\u672c\u4eba\u4e0d\u65ad\u5b9e\u8df5\u548c\u6539\u8fdb\u7684\u7406\u5ff5\u3002\u5728DevOps\u4e2d\uff0c\u8fd9\u5c31\u662f\u4ece\u5931\u8d25\u4e2d\u5b66\u4e60\u3002\n\u6bcf\u4e2a\u4eba\u90fd\u505a\u8fc7\u4e00\u4e9b\u5f53\u65f6\u770b\u8d77\u6765\u50cf\u662f\u5927\u95ee\u9898\u7684\u4e8b\u60c5\uff0c\u4e5f\u8bb8\u771f\u7684\u662f\u8fd9\u6837\u3002\u6211\u76f8\u4fe1\u4f60\u4eec\u73b0\u5728\u90fd\u5728\u60f3\u4f60\u4eec\u505a\u8fc7\u7684\u4e8b\u3002\u6211\u8bb0\u5f97\u6709\u4e00\u6b21\u6211\u5bfc\u81f4\u591a\u4e2a\u5dde\u7684DMV\u505c\u673a\uff0c\u6216\u8005\u6709\u4e00\u6b21\u6211\u4e0d\u5c0f\u5fc3\u4e22\u5f03\u4e86\u6574\u4e2a\u751f\u4ea7\u6570\u636e\u5e93\uff0c\u56e0\u4e3a\u6211\u4ee5\u4e3a\u6211\u5728Dev\u4e2d\u3002\u54ce\u5466\u3002\n\u73b0\u5728\uff0c\u5f53\u6211\u95ee\u8fd9\u4e2a\u95ee\u9898\u65f6\uff0c\u6211\u5e0c\u671b\u5f97\u5230\u4e0d\u540c\u7684\u7b54\u6848\uff0c\u8fd9\u53d6\u51b3\u4e8e\u6211\u62db\u8058\u7684\u7ea7\u522b\u3002JR\u6216\u5165\u95e8\u7ea7\u53ef\u80fd\u6ca1\u6709\u4efb\u4f55\u4e13\u4e1a\u77e5\u8bc6\uff0c\u6240\u4ee5\u6211\u4f1a\u8981\u6c42\u4e00\u4e2a\u4e2a\u4eba\u6545\u4e8b\u3002\u518d\u4e00\u6b21\uff0c\u6211\u4e3e\u4e86\u4e00\u4e2a\u4f8b\u5b50\uff0c\u628a\u6574\u7f50\u6cb9\u6f06\u6d12\u5728\u786c\u6728\u5730\u677f\u4e0a\uff0c\u6216\u8005\u91cd\u65b0\u7ec4\u88c5\u5f15\u64ce\uff0c\u7ed3\u679c\u5374\u5f88\u96be\u627e\u5230\u628a\u8fd9\u51e0\u4e2a\u87ba\u6bcd\u548c\u87ba\u6813\u653e\u5728\u4e00\u8fb9\u7684\u7528\u9014\u3002\u90a3\u8f86\u8f66\u5728\u90a3\u4e4b\u540e\u51e0\u5e74\u90fd\u8dd1\u5f97\u5f88\u597d\uff0c\u5982\u679c\u4f60\u62c5\u5fc3\u7684\u8bdd\u3002\n\u73b0\u5728\uff0c\u5982\u679c\u6211\u9762\u8bd5\u7684\u662f\u8d44\u6df1\u6216\u5efa\u7b51\u5e08\u804c\u4f4d\u7684\u4eba\uff0c\u6211\u4f1a\u4ece\u4ed6\u4eec\u7684\u804c\u4e1a\u751f\u6d3b\u4e2d\u671f\u5f85\u4e00\u4e9b\u4e1c\u897f\u3002\u73b0\u5728\u5f53\u4f60\u8bb2\u8fd9\u4e2a\u6545\u4e8b\u7684\u65f6\u5019\uff0c\u6211\u4e0d\u9700\u8981\u7ec6\u8282\uff0c\u9664\u975e\u4f60\u5bf9\u6b64\u611f\u5230\u6ee1\u610f\u3002\u6211\u77e5\u9053\u5728\u6211\u7684\u5de5\u4f5c\u4e2d\uff0c\u6211\u4f1a\u65f6\u4e0d\u65f6\u5730\u7b7e\u7f72\u65b0\u53d1\u5c55\u533a\u3002\u6240\u4ee5\u4ed6\u4eec\u53ef\u80fd\u4e0d\u80fd\u900f\u9732\u4efb\u4f55\u4e8b\u60c5\uff0c\u6240\u4ee5\u6211\u4f1a\u8bd5\u7740\u8ba9\u4ed6\u4eec\u8bb2\u4e00\u4ef6\u4e2a\u4eba\u8da3\u4e8b\u3002\n\u4e0d\u8fc7\uff0c\u8001\u5b9e\u8bf4\uff0c\u5982\u679c\u4ed6\u4eec\u544a\u8bc9\u6211\u4e00\u4e9b\u4e8b\u60c5\uff0c\u8fd9\u4e2a\u6545\u4e8b\u53ea\u662f\u4e00\u4e2a\u989d\u5916\u7684\u5956\u52b1\u3002\u4f46\u6211\u60f3\u77e5\u9053\u7684\u662f\u95ee\u9898\u662f\u5426\u89e3\u51b3\u4e86\u3002\u66f4\u597d\u7684\u662f\uff0c\u4ed6\u4eec\u77e5\u9053\u5b83\u662f\u600e\u4e48\u4fee\u597d\u7684\u5417\u3002\u6211\u4e4b\u6240\u4ee5\u8fd9\u6837\u8bf4\uff0c\u662f\u56e0\u4e3a\u6211\u4e0d\u4ecb\u610f\u4ed6\u4eec\u4e0d\u662f\u4fee\u597d\u5b83\u7684\u4eba\uff0c\u4f46\u6211\u5e0c\u671b\u5982\u679c\u4ed6\u4eec\u5f04\u574f\u4e86\u5b83\uff0c\u4ed6\u4eec\u4f1a\u82b1\u65f6\u95f4\u5f04\u6e05\u695a\u5b83\u662f\u600e\u4e48\u4fee\u597d\u7684\u3002\u8bb0\u4f4f\uff0c\u8fd9\u662f\u5173\u4e8e\u6539\u5584\u7684\uff0c\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u81ea\u5df1\u505a\u4e86\u4ec0\u4e48\uff0c\u4f60\u5c31\u4e0d\u4f1a\u8fdb\u6b65\u3002\u6240\u4ee5\u73b0\u5728\u662f\u4f60\u4eec\u5e94\u8be5\u5f00\u59cb\u505a\u7b14\u8bb0\u7684\u65f6\u5019\u4e86\u3002\n\u73b0\u5728\u518d\u8bf4\u4e00\u904d\uff0c\u6839\u636e\u4f60\u9762\u8bd5\u7684\u7ea7\u522b\u4e0d\u540c\uff0c\u6240\u6709\u8fd9\u4e9b\u95ee\u9898\u7684\u7b54\u6848\u90fd\u53ef\u80fd\u4e0d\u540c\u3002\u4f5c\u4e3a\u5165\u95e8\u7ea7\u6216JR\u9762\u8bd5\uff0c\u6211\u5e0c\u671b\u5176\u4ed6\u4eba\u4f1a\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u6211\u5e0c\u671b\u4ed6\u4eec\u80fd\u544a\u8bc9\u6211\u539f\u56e0\u3002\u9ad8\u7ea7\u6216\u66f4\u9ad8\u7ea7\u522b\u53ef\u80fd\u4fee\u590d\u4e86\u9519\u8bef\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5bf9\u8be5\u95ee\u9898\u6709\u6700\u591a\u7684\u4e86\u89e3\u3002\u6216\u8005\u8ba9\u5176\u4ed6\u90e8\u95e8\u53c2\u4e0e\u8fdb\u6765\u3002\n\u5982\u679c\u4ed6\u4eec\u77e5\u9053\u95ee\u9898\u5df2\u7ecf\u89e3\u51b3\uff0c\u4f46\u4e0d\u80fd\u544a\u8bc9\u4f60\u8fd9\u600e\u4e48\u4f1a\u4ee4\u4eba\u62c5\u5fe7\u3002\u4ed6\u4eec\u662f\u4e0d\u662f\u4e0d\u8bb0\u5f97\u4ed8\u51fa\u4e86\u4ec0\u4e48\u4ee3\u4ef7\uff0c\u8fd9\u662f\u80af\u5b9a\u7684\u3002\u7279\u522b\u662f\u5982\u679c\u8fd9\u662f\u51e0\u5e74\u524d\u7684\u8bdd\uff0c\u4ece\u73b0\u5728\u5230\u90a3\u65f6\uff0c\u6211\u4eec\u90fd\u5fd8\u8bb0\u4e86\u5f88\u591a\u4e1c\u897f\u3002\u4f46\u5982\u679c\u4ed6\u4eec\u8bf4\uff0c\u6211\u4e0d\u77e5\u9053\uff0c\u53e6\u4e00\u4e2a\u4eba\u4fee\u597d\u4e86\uff0c\u6211\u5c31\u79bb\u5f00\u4e86\u3002\u8fd9\u4ee4\u4eba\u62c5\u5fe7\uff0c\u56e0\u4e3a\u8fd9\u8868\u660e\u4ed6\u4eec\u53ef\u80fd\u6ca1\u6709\u4ece\u9519\u8bef\u4e2d\u5438\u53d6\u6559\u8bad\uff0c\u5f88\u53ef\u80fd\u4f1a\u518d\u6b21\u72af\u4e0b\u9519\u8bef\u3002\n\u4f46\u662f\u5982\u679c\u4f60\u5f97\u4e0d\u5230\u4efb\u4f55\u7b54\u6848\u5462\uff1f\u8be5\u4eba\u58f0\u79f0\u4ed6\u4eec\u4ece\u672a\u6253\u788e\u8fc7\u4efb\u4f55\u4e1c\u897f\u3002\u518d\u8bf4\u4e00\u6b21\uff0cJR\u6216\u66f4\u4f4e\u7684\u4ed6\u4eec\u53ef\u80fd\u6ca1\u6709\u6253\u788e\u4efb\u4f55\u4e1c\u897f\u3002\u4ed6\u4eec\u8fd8\u6ca1\u6709\u673a\u4f1a\u6253\u7834\u4efb\u4f55\u4e1c\u897f\u3002\u9ad8\u7ea7\u8fd8\u662f\u66f4\u9ad8\u7ea7\uff1f\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u8d85\u7ea7\u5371\u9669\u4fe1\u53f7\u3002\u5982\u679c\u4ed6\u4eec\u4ec0\u4e48\u90fd\u4e0d\u80fd\u544a\u8bc9\u6211\uff0c\u8981\u4e48\u4ed6\u4eec\u5728\u5bf9\u6211\u6492\u8c0e\uff0c\u8981\u4e48\u4ed6\u4eec\u4ece\u6765\u6ca1\u6709\u88ab\u4fe1\u4efb\u8fc7\u8981\u6253\u7834\u7684\u4e1c\u897f\u3002\u8001\u5b9e\u8bf4\uff0c\u6211\u4e0d\u77e5\u9053\u54ea\u4e2a\u66f4\u7cdf\u3002\u518d\u8bf4\u4e00\u6b21\uff0c\u5982\u679c\u4ed6\u4eec\u544a\u8bc9\u4f60\u4ed6\u4eec\u6709\u6cd5\u5f8b\u539f\u56e0\u4e0d\u80fd\u544a\u8bc9\u4f60\uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u6743\u8861\u8fd9\u4e2a\u7b54\u6848\u3002\n\u6240\u4ee5\u6211\u60f3\u8fd9\u5c31\u8ba9\u6211\u4e3a\u6211\u4e0a\u9762\u7684\u9519\u8bef\u8d1f\u8d23\u4e86\u3002\u4e2d\u65ad\u662f\u7531\u624b\u52a8\u90e8\u7f72\u548c\u6253\u5f00\u7684RDP\u4f1a\u8bdd\u592a\u591a\u9020\u6210\u7684\u3002\u5728\u7a97\u53e3\u4e4b\u95f4\u79fb\u52a8\u5e76\u610f\u5916\u90e8\u7f72\u5230\u9519\u8bef\u7684\u670d\u52a1\u5668\u3002\u8be5\u95ee\u9898\u5df2\u901a\u8fc7\u56de\u6eda\u89e3\u51b3\uff0c\u6211\u4eec\u901a\u8fc7\u4e3a\u5c06\u6765\u81ea\u52a8\u90e8\u7f72\u6765\u963b\u6b62\u8be5\u95ee\u9898\u3002\u81f3\u4e8e\u6570\u636e\u5e93\uff0c\u5728\u5f00\u59cb\u5904\u7406\u7834\u574f\u6027\u7684\u4e1c\u897f\u4e4b\u524d\uff0c\u4e00\u5b9a\u8981\u5907\u4efd\u3002\u5373\u4f7f\u4f60\u8ba4\u4e3a\u662f\u6234\u592b\uff01", "note_en": "It puts people on the spot, makes them have to think for a minute about what I\u2019m looking for. Is this some sort of trap? Is he trying to find a reason to not hire me? Is the statute of limitations up for the thing I\u2019m thinking of? All of those are solid concerns, but I\u2019m not here to judge the mistake. I\u2019m here to judge how you resolved the issue. I\u2019m listening for the DevOps practice of Kaizen. Kaizen is the Japanese concept of practice and continuous improvement. And in DevOps that is learning from failure.\n Everybody has done something that seemed like huge problem at the time, and maybe it really was. I\u2019m sure you\u2019re all thinking of something right now you\u2019ve done. I remember the time I caused an outage to multiple state\u2019s DMVs, or that one time I accidentally dropped an entire production database because I thought I was in Dev. Oops.\n Now when I ask this question, I expect different answers depending on the level that I\u2019m hiring. Jr or entry level might not have anything professionally, so I\u2019ll ask for a personal story. And again, I give an example of spilling an entire can of paint on a hardwood floor or reassembling an engine only to struggle to find a purpose for this handful of nuts and bolts to the side. That car ran great for years after that in case you were worried.\n  Now if I\u2019m interviewing somebody coming in for a Sr or Architect position I expect something from their professional life. Now when you tell this story, I don\u2019t need specifics, unless you\u2019re comfortable with that. I know in my line of work that I sign NDAs from time to time. So they might not be able to disclose anything, so I\u2019ll try and get them to give a personal anecdote.\n  Honestly though, the story is just a bonus if they tell me something. But what I am looking for is if the problem got fixed. And better yet, do they know how it got fixed. I say how because I don\u2019t mind if they weren\u2019t the one who fixed it, but I hope if they broke it they took the time to figure out how it was fixed. Remember, this is about Kaizen and you can\u2019t improve if you don\u2019t know what you did. So this is when you should start taking your notes.\n  Now again, depending on the level you\u2019re interviewing for, the answers to all of these might be different. As an entry level or Jr interview I expect somebody else will have fixed the issue, but I hope that they can tell me why. Sr or higher probably fixed the mistake because they had the most knowledge of the issue. Or the had to pull the  andon cord and get other departments involved.\n If they know that the issue was resolved, but can\u2019t tell you how this can be a cause for concern. Do they not remember what it took, sure that could be. Especially if this was from years ago, we have all forgotten a lot between now and then. But if they say, I don\u2019t know, this other guy fixed it and I moved on. That is concerning, because it shows they probably didn\u2019t learn from their mistake and are likely to commit it again.\n  But what if you\u2019re not given any answer? The person claims they have never broken anything. Once again, Jr or lower they might not have broken anything. They haven\u2019t been given the chance yet to break anything. Sr or higher? This should be a super red flag. If they can\u2019t tell me anything, either they are lying to me or they have never been trusted with something to break. And honestly, I don\u2019t know which is worse. Once again, if they tell you that they have some legal reason they can\u2019t tell you then you have to weigh that answer.\n So I guess that leaves me to answer for my mistakes above. The outage was caused by a manual deployment and having too many RDP sessions open. Moving between windows and accidentally deploying to the wrong servers. The issue was resolved with roll back, and we stopped that issue by automating the deploy for the future. As for the database, always take a backup before you start to work on something destructive. Even if you think it\u2019s dev!", "posttime": "2020-05-05 18:39:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5931\u8d25,biggest,\u9519\u8bef,fixed", "title": "\u4f60\u662f\u4f60\u6700\u5927\u7684\u5931\u8d25", "title_en": "You are your biggest failure", "transed": 1, "url": "https://medium.com/devops-dudes/you-are-your-biggest-failure-48f3f389e97d", "via": "", "real_tags": ["\u5931\u8d25", "biggest", "\u9519\u8bef", "fixed"]}]