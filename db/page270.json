[{"category": "", "categoryclass": "", "imagename": "b6a70d6815292f0a641e9f6ab4ce46b8.jpg", "infoid": 1002477, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u60f3\u8981\u96c6\u88c5\u7bb1\u5417\uff1f\u4e86\u89e3\u5982\u4f55\u4f7f\u7528OKD\u5728\u7b14\u8bb0\u672c\u7535\u8111\u4e0a\u8bbe\u7f6e\u548c\u8fd0\u884cKubernetes\u5bb9\u5668\u96c6\u7fa4\u3002\n\u4f60\u4e00\u76f4\u5728\u7528\u4f60\u6700\u559c\u6b22\u7684\u641c\u7d22\u5f15\u64ce\u641c\u7d22\u4e92\u8054\u7f51\uff0c\u6bd4\u5982DuckDuckGo\uff0c\u4e86\u89e3\u4f60\u80fd\u4e86\u89e3\u5230\u7684\u6240\u6709\u5173\u4e8e\u96c6\u88c5\u7bb1\u7684\u4fe1\u606f-\u8fd9\u79cd\u611f\u89c9\u5728\u8fc7\u53bb\u51e0\u5e74\u91cc\u5e2d\u5377\u4e86\u79d1\u6280\u884c\u4e1a\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u60a8\u5df2\u7ecf\u542c\u8bf4\u8fc7Kubernetes\uff0c\u5b83\u662f\u76ee\u524d\u6700\u6d41\u884c\u7684\u5bb9\u5668\u7ba1\u7406\u5e73\u53f0\u3002\u4e5f\u8bb8\u4f60\u5728\u8270\u96be\u7684\u9053\u8def\u4e0a\u5076\u7136\u9047\u5230\u4e86\u5e93\u4f2f\u5185\u65af\uff0c\u751a\u81f3\u53ef\u80fd\u662f\u4e00\u4e9b\u5e93\u4f2f\u5185\u65af\u7684\u6307\u5bfc\u8bfe\u7a0b\u3002\n\u4e5f\u8bb8\u4f60\u81ea\u5df1\u7ecf\u5386\u4e86\u5f04\u6e05\u695a\u8fd9\u4ef6\u4e8b\u7684\u8fc7\u7a0b\u3002\u5f53\u4f60\u76ef\u7740\u8c37\u6b4c\u3001\u4e9a\u9a6c\u900a\u548c\u5176\u4ed6\u516c\u53f8\u7684\u4ea7\u54c1\u65f6\uff0c\u4f60\u4f1a\u81ea\u8a00\u81ea\u8bed\u5730\u8bf4\uff0c\u80af\u5b9a\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\uff01&#34\uff1b\u5f53\u4f60\u76ef\u7740\u8c37\u6b4c\u3001\u4e9a\u9a6c\u900a\u548c\u5176\u4ed6\u516c\u53f8\u7684\u4ea7\u54c1\u65f6\uff0c\u4f60\u4f1a\u5bf9\u81ea\u5df1\u8bf4\u3002\u60a8\u5df2\u7ecf\u5f88\u597d\u5730\u4e86\u89e3\u4e86\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u5b83\u4eec\uff0c\u751a\u81f3\u53ef\u80fd\u5df2\u7ecf\u90e8\u7f72\u4e86\u4e00\u4e9b\u96c6\u88c5\u7bb1\u5316\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u4e14\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u8fd8\u5728\u8fd0\u884c\u3002\u592a\u68d2\u4e86\uff01\u4e00\u8def\u4e0a\uff0c\u4f60\u5f00\u59cb\u8bfb\u5230\u6216\u542c\u5230\u5173\u4e8e\u5bb9\u5668\u7f16\u6392\u7684\u4e66\uff0c\u7136\u540e\u4f60\u6cbf\u7740\u90a3\u91cc\u7684\u6bcf\u4e2a\u70b9\u51fb\u8bf1\u9975\u94fe\u63a5\u8d70\u8fdb\u4e86\u5154\u5b50\u6d1e\u3002\n\u5982\u679c\u770b\u7740\u8fd9\u4e9b\u63d0\u4f9b\u5546\u4f1a\u8ba9\u4f60\u7684\u94b1\u5305\u53d7\u4f24\uff0c\u6216\u8005\u4f60\u548c\u6211\u4e00\u6837\uff0c\u66f4\u613f\u610f\u8ba9\u4f60\u7684\u6570\u636e\u5728\u4f60\u7684\u63a7\u5236\u4e4b\u4e0b\uff0c\u4e0d\u8981\u5bb3\u6015\uff01OpenShift\u53ef\u4ee5\u63d0\u4f9b\u5e2e\u52a9\uff01\u7ecf\u8fc7\u8fdb\u4e00\u6b65\u641c\u7d22\uff0c\u60a8\u53d1\u73b0\u4e86\u7ea2\u5e3d\u63d0\u4f9b\u7684OpenShift Container Platform\u3002\u867d\u7136\u4ed6\u4eec\u786e\u5b9e\u63d0\u4f9b60\u5929\u7684\u8bd5\u7528\u671f\uff0c\u4f46\u4f60\u5e76\u4e0d\u662f\u771f\u7684\u60f3\u628a\u4fe1\u7528\u5361\u5b58\u6863\u3002\u4e5f\u8bb8\u4f60\u4e0d\u60f3\u548c\u63a8\u9500\u5458\u6253\u4ea4\u9053\u3002\u4e0d\u7ba1\u600e\u6837\uff0c\u6211\u6709\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u7ed9\u4f60\u3002\u4e0eRedHat\u505a\u7684\u51e0\u4e4e\u6240\u6709\u4e8b\u60c5\u4e00\u6837\uff0c\u6709\u4e00\u4e2a\u540d\u4e3aOpenShift OKD\u7684\u5f00\u6e90\u793e\u533a\u9879\u76ee\u3002\n\u6211\u559c\u6b22\u5f00\u6e90\u3002\u5c3d\u7ba1\u6211\u5728\u7ea2\u5e3d\u5de5\u4f5c\u4e86\u5c06\u8fd1\u4e94\u5e74\uff0c\u4f46\u6211\u4ecd\u7136\u8fd0\u884c\u6240\u6709\u4e1c\u897f\u7684\u4e0a\u6e38\u7248\u672c\u3002\u6211\u559c\u6b22\u66f4\u8d34\u8fd1\u793e\u533a\uff0c\u4ece\u6211\u7684\u65e5\u5e38\u5de5\u4f5c\u4e2d\u5f00\u59cb\u4e00\u4e9b\u516c\u53f8\u8054\u7cfb\u3002\u6b64\u5916\uff0c\u6211\u559c\u6b22\u6211\u7684\u5de5\u4f5c\u7684\u4e00\u4e2a\u90e8\u5206\u662f\u5c06\u590d\u6742\u7684\u6d41\u7a0b\u5206\u89e3\u6210\u5bb9\u6613\u7406\u89e3\u548c\u53ef\u91cd\u590d\u7684\u90e8\u5206\u3002\n\u4e3a\u4e86\u5de5\u4f5c\uff0c\u6211\u5468\u800c\u590d\u59cb\u5730\u51fa\u5dee\u3002\u867d\u7136\u6211\u5728\u5bb6\u91cc\u6709\u4e00\u4e2a\u7531\u5404\u79cd\u73b0\u6210\u90e8\u4ef6\u7ec4\u6210\u7684\u575a\u5b9e\u7684\u5b9e\u9a8c\u5ba4\uff0c\u4f46\u6709\u65f6\u5ba2\u6237\u7aef\u7ad9\u70b9\u4e0d\u5141\u8bb8\u6211\u4f7f\u7528VPN\u3002\u5bf9\u4e8e\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u6211\u5fc5\u987b\u60f3\u51fa\u4e00\u79cd\u65b9\u6cd5\u6765\u5728\u6211\u7684\u7b14\u8bb0\u672c\u7535\u8111\u4e0a\u53ef\u9760\u5730\u8fd0\u884c\u73af\u5883\u3002\u6211\u8fd8\u5fc5\u987b\u786e\u4fdd\u8fd9\u4e2a\u73af\u5883\u662fNAT&39\uff1bD\uff0c\u8fd9\u6837\u5bf9\u4e8e\u5916\u754c\u6765\u8bf4\uff0c\u8fde\u63a5\u5230WiFi\u7684\u53ea\u662f\u6211\u7684\u7b14\u8bb0\u672c\u7535\u8111\u3002\n\u672c\u6307\u5357\u5411\u60a8\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528\u8fd0\u884clibvirt\u7684\u5355\u4e2a\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f\u57282+\u8282\u70b9\u7fa4\u96c6\u4e0a\u8fd0\u884cOpenShift\u3002\u6211\u627e\u5230\u7684\u5927\u591a\u6570\u6307\u5357\u53ea\u6709\u4e00\u90e8\u5206\u662f\u5b8c\u6574\u7684\u3002\u65e0\u8bba\u662fOCP\u7248\u672c\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u8fd8\u662f\u4e0d\u540c\u7684\u7528\u4f8b\uff0c\u90fd\u9700\u8981\u53e6\u4e00\u79cd\u5904\u7406\u65b9\u5f0f\u3002\n\u6700\u7ec8\uff0c\u6211\u559c\u6b22\u9009\u62e9\u4e00\u4e2a\u590d\u6742\u7684\u8bdd\u9898\uff0c\u76f4\u622a\u4e86\u5f53\u5730\u8d70\u4e00\u904d\uff0c\u8fb9\u8d70\u8fb9\u89e3\u91ca\u3002\u50cf\u6240\u6709\u5176\u4ed6\u4f5c\u8005\u4e00\u6837\uff0c\u6211\u4e5f\u6709\u7f3a\u9677\uff0c\u56e0\u4e3a\u5f53\u6211\u5bf9\u8fd9\u4e2a\u8fc7\u7a0b\u8fc7\u4e8e\u719f\u6089\u65f6\uff0c\u6211\u6ca1\u6709\u5145\u5206\u8be6\u7ec6\u5730\u89e3\u91ca\u4e8b\u60c5\u3002\u6211\u786e\u5b9e\u52aa\u529b\u6839\u636e\u53cd\u9988\u8fdb\u884c\u66f4\u6b63\uff0c\u4ee5\u4fbf\u7ed9\u4f60\u7559\u4e0b\u4e00\u4e2a\u6e05\u6670\u3001\u7b80\u6d01\u7684\u6307\u5357\uff0c\u89e3\u91ca\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\uff0c\u8fd9\u6837\u5b83\u5c31\u4e0d\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u7334\u5b50\u770b\u5230\u7334\u5b50\u505a\u7684\u6307\u5357\u3002\n\u5982\u679c\u60a8\u5bf9\u672c\u6307\u5357\u7684NAT&D\u90e8\u5206\u4e0d\u611f\u5174\u8da3(\u5373\u60a8\u6709\u6807\u51c6\u7f51\u7edc\u5e03\u5c40)\uff0c\u8bf7\u8df3\u8fc7\u4e0b\u9762\u7684\u6b65\u9aa41\u30012A\u30012B\u3002\n\u5728\u5f3a\u5236\u95e8\u6237(\u5373\u9152\u5e97\u6216\u5176\u4ed6\u5f3a\u5236\u95e8\u6237)\u7684\u9650\u5236\u4e0b\u5de5\u4f5c\uff0c\u8be5\u95e8\u6237\u4e0d\u5141\u8bb8\u6765\u81ea\u6865\u63a5\u865a\u62df\u673a\u7684\u591a\u4e2a\u8fde\u63a5)\u3002\n\u6211\u5047\u8bbe\u60a8\u77e5\u9053\u5982\u4f55\u8bbe\u7f6e\u67d0\u79cd\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f(\u5982\u679c\u8df3\u8fc7NAT-ing\u90e8\u5206)\u3002\n\u6211\u5047\u8bbe\u60a8\u6b63\u5728\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u5c01\u95ed\u7684\u73af\u5883(\u5373\uff0c\u60a8\u6ca1\u6709\u4f7f\u7528\u96c6\u4e2d\u5f0fDNS/DHCP/Web\u670d\u52a1\u5668)\u3002\n\u8981\u8bbe\u7f6e\u4e3b\u673a\uff0c\u8bf7\u4e3a\u6240\u6709\u865a\u62df\u673a\u521b\u5efa\u6865\u63a5\u7f51\u7edc\uff0c\u4ee5\u4fbf\u5728\u4ee5\u4e0b\u4f4d\u7f6e\u4e0e\u5176\u81ea\u8eab\u901a\u4fe1\uff1a\nnmcli con shownmcli con add ifname br0\u7c7b\u578b\u7f51\u6865con-name br0nmcli con add type bridge-lave ifname eno1 master br0nmcli con up br0nmcli con Modify&#34\uff1bbridge-br0&#34\uff1bifname br0 type ethernetIP4 10.120.120.1/24\u3002\n\u8fd9\u5e94\u8be5\u662f\u6865\u63a5\u7f51\u7edc\u6240\u9700\u7684\u5168\u90e8\u5185\u5bb9\uff0c\u4ee5\u4fbf\u8ba9nlibvirt\u6765\u5bbe\u4f7f\u7528\u3002\n\u6b64\u865a\u62df\u673a\u72ec\u7acb\u4e8eOpenShift\u5b89\u88c5\u3002\u5b83\u6258\u7ba1OpenShift\u6240\u9700\u7684\u670d\u52a1\uff0c\u4f46\u4e0d\u53d7\u5b89\u88c5(\u6216\u7f3a\u5c11)OKD4\u7684\u5f71\u54cd\u3002\n\u6b64VM\u5e94\u8be5\u6709\u4e24\u4e2a\u7f51\u5361\uff0c\u4e00\u4e2a\u4f4d\u4e8e\u7f51\u6865\u4e0a\uff0c\u53e6\u4e00\u4e2a\u4f4d\u4e8eNAT\u63a5\u53e3\u4e0a\u3002\u5728\u6211\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u8bbe\u7f6e\u4e86\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\u5728\u6307\u5b9a\u4e3a\u7f51\u5173\u7684\u8bbf\u5ba2\u4e0a\uff0c\u786e\u4fddsysctl\u6253\u5f00\u4ee5\u8fdb\u884c\u6570\u636e\u5305\u8f6c\u53d1\u3002\u6570\u636e\u5305\u8f6c\u53d1\u5141\u8bb8\u7f51\u5173\u5145\u5f53\u8f6c\u53d1\u548c\u8def\u7531\u6d41\u91cf\u7684\u8def\u7531\u5668\u3002\n\u63a5\u4e0b\u6765\uff0c\u7528Firewalld\u521b\u5efa\u4e24\u4e2a\u533a\u57df\u3002\u5916\u90e8\u533a\u57df\u9700\u8981\u7ed1\u5b9a\u5230libvirt NAT\u4e0a\u53ef\u4ee5\u8bbf\u95ee\u4e92\u8054\u7f51\u7684\u63a5\u53e3\u3002\u6b64\u63a5\u53e3/\u533a\u57df\u8fd8\u5e94\u786e\u4fdd\u542f\u7528\u4f2a\u88c5\uff1a\nnmcli con mod${Internal}ipv4.address&#34\uff1b10.120.120.250/24&#34\uff1bnmcli con mod${Internal}ipv4.dns-search&#34\uff1blab-cluster.okd4.lab&#34\uff1bnmcli con mod${Internal}connection.autoconnect yesnmcli con mod${Internal}ipv4\u65b9\u6cd5\u624b\u518c\u3002\n\u6211\u5df2\u51b3\u5b9a\u5141\u8bb8\u5185\u90e8\u533a\u57df\u4e0a\u7684\u5185\u90e8\u6d41\u91cf\uff0c\u800c\u4e0d\u662f\u5f00\u653e\u6240\u6709\u5355\u4e2a\u7aef\u53e3\u3002\u8fd9\u6837\u505a\u98ce\u9669\u81ea\u8d1f\u3002\n\u786e\u4fdd\u7981\u7528systemd\u89e3\u6790\uff0c\u5e76\u4e14\u7f51\u7edc\u7ba1\u7406\u5668\u4f7f\u7528\u9ed8\u8ba4DNS\u8bbe\u7f6e\uff1a\n\u6211\u4eec\u6b63\u5728\u5b89\u88c5\u6b64\u9879\u76ee\u4fdd\u5b58\u4e00\u4e9b\u547d\u4ee4\u6240\u9700\u7684\u6240\u6709\u8f6f\u4ef6\u5305\u3002\n\u56e0\u4e3aHAProxy\u7ed1\u5b9a\u5230\u7aef\u53e380\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06Apache\u79fb\u5230\u4e0d\u540c\u7684\u7aef\u53e3\u30028080\u53f7\u7aef\u53e3\u662f\u4e00\u4e2a\u5408\u7406\u7684\u9009\u62e9\uff1a\n\u5c06Apache\u7aef\u53e3\u6dfb\u52a0\u5230\u5185\u90e8\u9632\u706b\u5899\u3002\u5982\u679c\u5df2\u5c06\u5185\u90e8\u8bbe\u7f6e\u4e3a\u63a5\u53d7\u6240\u6709\u5185\u5bb9\uff0c\u5219\u4e0d\u9700\u8981\u6267\u884c\u6b64\u64cd\u4f5c\uff1a\n\u5bf9\u4e8e\u6b64\u5b89\u88c5\uff0c\u6838\u5fc3\u64cd\u4f5c\u7cfb\u7edf\u6587\u4ef6\u662f\u4ecehttps://getfedora.org/coreos/download/\u4e0b\u8f7d\u7684\uff0c\u6211\u4f7f\u7528\u7684\u662f\u88f8\u673a\u6620\u50cf\u3002\n\u6211\u4eec\u5c06\u4f7f\u7528\u7b26\u53f7\u94fe\u63a5\uff0c\u4ee5\u4fbf\u5728\u66f4\u65b0CoreOS\u6620\u50cf\u65f6\u4e0d\u5fc5\u66f4\u6539\u914d\u7f6e\u6587\u4ef6\u3002\u53e6\u5916\uff0c\u521b\u5efa\u4e00\u4e2a\u6307\u5411\u6700\u65b0\u7248\u672c\u7684\u7b26\u53f7\u94fe\u63a5\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u5fc5\u6bcf\u6b21\u53d1\u5e03\u90fd\u66f4\u65b0PXE\u83dc\u5355\uff1a\ndnsmasq\u7684\u5927\u90e8\u5206\u8bbe\u7f6e\u5728\u5176\u914d\u7f6e\u6587\u4ef6\u4e2d\u5b8c\u6210\u3002\u4f46\u662f\uff0c\u5728\u5355\u4e2a\u4e3bOKD4\u90e8\u7f72\u4e2d\uff0c\u6211\u53d1\u73b0\u8fbe\u5230\u4e86\u5e76\u53d1DNS\u8bf7\u6c42\u7684\u6700\u5927\u6570\u91cf\u3002\u9ed8\u8ba4\u503c\u4e3a150\u3002\u8981\u589e\u52a0\u8fd9\u4e2a\u503c\uff0c\u60a8\u9700\u8981\u7f16\u8f91\u4f4d\u4e8e/etc/systemd/system/multi-user.target.wants/dnsmasq.service\u7684systemd\u5355\u5143\u6587\u4ef6\uff0c\u4f7f\u5176\u5982\u4e0b\u6240\u793a\uff1a\n\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u7f16\u8f91dnsmasq.conf\u6587\u4ef6\u4e86\u3002\u6b64\u6587\u4ef6\u4f4d\u4e8eCentOS 8\u4e0a\u7684/etc/dnsmasq.conf\u3002Dnsmasq\u540c\u65f6\u7528\u4e8eDHCP\u548cDNS\u3002Dnsmasq\u5b9e\u73b0\u5b98\u65b9\u7684DHCP\u9009\u9879\u3002\u67e5\u770b\u6b64\u9875\u9762\uff0c\u56e0\u4e3a\u5b83\u6709\u52a9\u4e8e\u60a8\u7406\u89e3\u6587\u4ef6\u4e2d\u7684dhcp-option=\u8bbe\u7f6e\u3002\u800cdnsmasq\u4e2d\u7684\u4e00\u4e9bDHCP\u9009\u9879\u6709\u6f02\u4eae\u7684\u540d\u79f0\u3002\u4e3a\u4e86\u4fdd\u6301\u4e00\u81f4\u6027\uff0c\u6211\u907f\u514d\u4f7f\u7528\u5b83\u4eec\uff0c\u56e0\u4e3a\u4e0b\u9762\u4f7f\u7528\u7684\u51e0\u4e2a\u9009\u9879\u6ca1\u6709\u6f02\u4eae\u7684\u540d\u79f0\u3002dhcp-option\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a\n\u52a1\u5fc5\u8981\u77e5\u9053\uff0cFedora CoreOS DHCP\u5ba2\u6237\u7aef\u5f53\u524d\u4e0d\u4f7f\u7528\u53d1\u9001\u540d\u79f0\u3002\u8fd9\u610f\u5473\u7740\u5f53\u4e3b\u673a\u4eceDHCP\u670d\u52a1\u5668\u63a5\u6536\u5176\u4e3b\u673a\u540d\u548cIP\u65f6\uff0c\u5b83\u4e0d\u4f1a\u5411dnsmasq\u7684DNS\u90e8\u5206\u6ce8\u518c\u3002\u8fd9\u5bfc\u81f4\u6211\u4f7f\u7528dnsmasq\u9759\u6001\u8bbe\u7f6eIP\u3002\u8fd9\u662f\u4f7f\u7528\u6807\u8bb0\u6765\u5b8c\u6210\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u6807\u8bb0MAC\u5730\u5740\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u6b64\u6807\u8bb0\u5e2e\u52a9\u8bc6\u522b\u4e3b\u673a\u3002\u4ee5\u4e0b\u662f\u53d1\u9001\u5230\u65b0\u865a\u62df\u673a\u7684\u4e3b\u673a\u540d\uff1a\n\u6211\u4e0d\u6253\u7b97\u6df1\u5165\u8ba8\u8bbaOpenShift 4\u7684\u6240\u6709\u8981\u6c42\u3002\u60a8\u53ef\u4ee5\u5728\u5b98\u65b9\u6587\u6863\u4e2d\u627e\u5230\u8fd9\u4e9b\u8981\u6c42\u3002\u5bf9\u4e8eDNS\uff0c\u60a8\u9700\u8981\u5177\u5907\uff1a\n\u6307\u5411\u8def\u7531\u5668\u524d\u9762\u7684\u8d1f\u8f7d\u5e73\u8861\u5668\u7684\u901a\u914d\u7b26\u6761\u76ee(\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u5b83\u662f\u7531HAProxy\u5904\u7406\u7684\u7f51\u5173IP)\u3002\n\u6211\u4eec\u5c06\u5728dnsmasq\u4e2d\u4f7f\u7528host-record\u9009\u9879\u5bf9\u5176\u8fdb\u884c\u914d\u7f6e\u3002\u6b64\u9009\u9879\u4f4d\u4e8e\u4ee5\u4e0b\u6587\u4ef6\u7684\u5e95\u90e8\uff1a\n#\u5728\u6765\u5bbe\u4e0a\u4e3a\u9ed8\u8ba4NAT\u63a5\u53e3\u8bbe\u7f6eDNSMasq#dnsmasq.conf#\u5c06\u6b64\u8bbe\u7f6e\u4e3a\u4fa6\u542c\u5185\u90e8interfacelisten-address=\uff1a\uff1a1,127.0.0.1\uff0c10.120.120.250interface=enp2s0expand-hosts#\u8fd9\u662f\u7fa4\u96c6\u5c06\u4f4d\u4e8e\u7684\u57dfondomain=lab-cluster.okd4.lab#\u4e0a\u6e38DNS\u670d\u52a1\u5668.\u3002\u8fd9\u5e94\u8be5\u662f\u60a8\u7684computer/laptopserver=192.168.122.1local=/okd4.lab/local=/lab-cluster.okd4.lab/#\u4e0a\u7684libvirt NAT#\u63a5\u53e3\u8bbe\u7f6e\u901a\u914d\u7b26DNS\u4ee5\u6307\u5411\u5185\u90e8\u63a5\u53e3#HAProxy\u5c06\u5728\u6b64interfaceaddress=/.apps.lab-cluster.okd4.lab/10.120.120.250dhcp-range=10.120.120.20\uff0c10.120.120.220\uff0c12hdhcp-leasefile=/var/lib/dnsmasq/dnsmasq.leases#\u4e0a\u4fa6\u542c\u6307\u5b9a\u8981\u670d\u52a1\u7684PXE\u4e8c\u8fdb\u5236\u6587\u4ef6\u548c\u5730\u5740#the pxeserver(\u6b64\u4e3b\u673a)dhcp-boot=pxelinux.0\uff0cpxeserver\uff0c10.120.120.250#DHCP\u9009\u98793\u662f\u8def\u7531\u5668DHCP-Option=3\uff0c10.120.120.250#DHCP\u9009\u98796\u662fDNS\u670d\u52a1\u5668DHCP-Option=6\uff0c10.120.120.250#DHCP\u9009\u987928\u662f\u5e7f\u64ad\u5730\u5740DHCP-Option=28\uff0c10.120.120.255#\u6807\u8bb0\u9700\u8981\u8be5\u96c6\u5408\u3002\u8bbe\u7f6e\u5177\u6709\u7279\u5b9atagdhcp-mac=set:bootstrap\uff0c52:54:00:15:30:f2dhcp-mac=set:master\uff0c52:54:00:06:94:85dhcp-mac=set:worker\uff0c52:54:00:82:fc:9e#\u7684mac\u5730\u5740\u5c06\u6807\u8bb0\u4e0e\u7279\u5b9a\u4e3b\u673a\u540d\u5339\u914d#dhcp\u9009\u987912\u662f\u8981\u5206\u53d1\u7ed9\u5ba2\u6237\u7aef\u7684\u4e3b\u673a\u540ddhcp-option=Tag\uff1aBootstrap\uff0c12\uff0cbootstrap.lab-cluster.okd4.labdhcp-option=tag:master\uff0c12\uff0cmaster-0.lab-cluster.okd4.labdhcp-option=tag:worker\uff0c12\uff0cworker-0.lab-cluster.okd4.labdhcp-host=52:54:00:15:30:f2\uff0c10.120.120.99dhcp-host=52:54:00:06:94:85\uff0c10.120.120.50dhcp-host=52:54:00:82:fc:9e\uff0c10.120.120.60#-dhcp\u9009\u9879\u662f\u7528\u4e8e\u8c03\u8bd5\u7684\u8be6\u7ec6\u65e5\u5fd7\u8bb0\u5f55\u65e5\u5fd7-dhcppxe-Prompt=&#34\uff1b\u6309F8\u8fdb\u5165\u83dc\u5355\u3002&#34\uff1b\uff0c10pxe-SERVICE=x86PC\uff0c&#34\uff1bPXE\u542f\u52a8\u670d\u52a1\u5668&#34\uff1b\uff0cpxelinuxenable-tftptftp-root=/var/lib/tftpboot#\u8bbe\u7f6eetcd\u7684\u670d\u52a1\u8bb0\u5f55\u3002\u901a\u5e38\u5728#srv recordsrv-host=_etcd-server-ssl._tcp.lab-cluster.okd4.lab\uff0cetcd-0.lab-cluster.okd4.lab\u30012380\u30010\u300110#\u4e3b\u673a\u8bb0\u5f55\u9009\u9879\u4e2d\u67093\u4e2a\u6216\u66f4\u591a\u6761\u76ee\u94fe\u63a5dnshost-record=52:54:00:dd:5e:07\uff0c10.120.120.250\uff0cbastion.okd4.labhost-record=52:54:00:15:30:f2\uff0c10.120.120.99\uff0cbootstrap.lab-cluster.okd4.labhost-record=52:54:00:06:94:85\uff0c10.120.120.50\uff0c\u7684MAC\u3001IP\u548c\u4e3b\u673a\u540d\u3002master-0.lab-cluster.okd4.labhost-record=52:54:00:06:94:85\uff0c10.120.120.50\uff0cetcd-0.lab-cluster.okd4.labhost-record=52:54:00:82:fc:9e\uff0c10.120.120.60\uff0cWorker-0.lab-cluster.okd4.lab#\u8fd9\u4e9b\u4e3b\u673a\u8bb0\u5f55\u4f9bapi.lab-cluster.okd4.lab\uff0c10.120.120.250,3600host-record=bastion.okd4.lab\uff0c\u548capi-int\u6307\u5411HAProxyhost-Record=bastion.okd4.lab\uff0capi-int.lab-cluster.okd4.lab\uff0c10.120.120.250,3600\u3002\n\u590d\u5236\u4e0a\u8ff0\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u8986\u76d6/etc/dnsmasq.conf\uff0c\u7136\u540e\u91cd\u65b0\u542f\u52a8\u670d\u52a1\uff1asudo systemctl Restart dnsmasq\u3002\n\u6ce8\u610f\uff1a\u4e0d\u8981\u5fd8\u8bb0\u66f4\u6539\u4e0a\u8ff0\u6587\u4ef6\u4e2d\u7684MAC\u5730\u5740\uff0c\u4f7f\u5176\u4e0e\u60a8\u7684\u865a\u62df\u673a\u7684MAC\u5730\u5740\u76f8\u5339\u914d\u3002\n\u7531\u4e8eOKD\u4ee3\u8868\u4f01\u4e1a\u89e3\u51b3\u65b9\u6848\u7684\u793e\u533a\u7248\u672c\uff0c\u56e0\u6b64\u5047\u5b9a\u8d1f\u8f7d\u5e73\u8861\u5668\u5728\u60a8\u7684\u73af\u5883\u4e2d\u8fd0\u884c\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u540d\u4e3aHAProxy\u7684\u8f6f\u4ef6\u8d1f\u8f7d\u5e73\u8861\u5668\u3002\u5b83\u7684\u8bbe\u7f6e\u76f8\u5bf9\u7b80\u5355\u660e\u4e86\u3002\n\u9996\u5148\u8981\u505a\u7684\u662f\u786e\u4fddSELinux\u5141\u8bb8\u6240\u9700\u7684HAProxy\u7aef\u53e3\uff1a\n\u8bed\u4e49\u7aef\u53e3-a-tttp_port_t-ptcp 6443\u8bed\u4e49\u7aef\u53e3-a-tttp_port_t-p tcp 22623\n\u7aef\u53e36443\u662f\u7528\u4e8e\u4e3b\u673a\u5230\u4e3b\u673a\u901a\u4fe1\u3001\u8bbf\u95eeWeb UI\u4ee5\u53ca\u4f7f\u7528oc\u547d\u4ee4\u884c\u5b9e\u7528\u7a0b\u5e8f\u7684API\u7aef\u53e3\u3002\n\u7aef\u53e322623\u4e3a\u52a0\u5165\u7fa4\u96c6\u7684\u65b0\u4e3b\u673a\u63d0\u4f9b\u914d\u7f6e\u6587\u4ef6\u3002\u8fd9\u4e24\u4e2a\u7aef\u53e3\u90fd\u662f\u96c6\u7fa4\u6210\u529f\u8fd0\u884c\u7684\u5fc5\u5907\u7aef\u53e3\uff0c\u5047\u8bbe\u8d1f\u8f7d\u5747\u8861\u4e2d\u90fd\u6709\u591a\u4e2a\u540e\u7aef\u3002\n#HAProxy\u914d\u7f6e\u8282#\u5168\u5c40settings#--globalmaxconn 20000log/dev/log local0 infochroot/var/lib/haproxypidfile/var/run/haproxy.piduser haproxygroup haproxydaemon#\u6253\u5f00stats unixsocketstats\u5957\u63a5\u5b57/var/lib/haproxy/stats#\u3002--#\u7684\u5171\u540c\u9ed8\u8ba4\u503c\u662f\u6240\u6709&#39\uff1b\u76d1\u542c&#39\uff1b\u548c&#39\uff1b\u540e\u7aef&#39\uff1b\u8282\u5c06#Use if not\u5728\u5176block#--defaultsmode\u4e2d\u6307\u5b9ahttplog\u5168\u5c40\u9009\u9879httplog\u9009\u9879dontlognull\u9009\u9879\u8f6c\u53d1\u9664127.0.0.0/8\u9009\u9879\u91cd\u65b0\u8c03\u5ea6\u91cd\u8bd53timeout http-request 10stimeout\u961f\u52171mtimeout\u8fde\u63a510stimeout\u5ba2\u6237\u7aef300 stimeout\u670d\u52a1\u5668300stimeout http-Keep-live 10stimeout check 10smaxconn 20000\u524d\u7aef\u63a7\u5236\u3002-plan-apibind*\uff1a6443 mode tcpdefault_backend control-plan-apioption tcplogbackend control-plan-apiBalance\u6e90\u6a21\u5f0ftcpserver master-0 master-0.lab-cluster.okd4.lab\uff1a6443 checkserver bootstrap bootstrap.lab-cluster.okd4.lab\uff1a6443\u68c0\u67e5\u5907\u4efd\u524d\u7aefcontrol-plan-bootstrapbind*\uff1a22623mode tcpdefault_backend control-Plane-boot23mode\u3002\u5165\u53e3-\u8def\u7531\u5668-httpoption tcplog\u540e\u7aef\u5165\u53e3-\u8def\u7531\u5668-httpBalance\u6e90\u6a21\u5f0ftcpserver worker-0 worker-0.lab-cluster.okd4.lab\uff1a80 check\u524d\u7aef\u5165\u53e3-\u8def\u7531\u5668-httpsbind*\uff1a443\u6a21\u5f0ftcpdefault_backend\u5165\u53e3-\u8def\u7531\u5668-httpsoption tcplogbackend\u5165\u53e3-\u8def\u7531\u5668-httpsBalance\u6e90\u6a21\u5f0ftcpserver worker-0 worker-0.lab-cluster.okd4.lab\uff1a443 check\u3002\n\u6211\u5728\u5355\u4e2a\u5de5\u4f5c\u8282\u70b9\u4e0a\u8fd0\u884c\u5165\u53e3\u8def\u7531\u5668\u3002\u8fd9\u9700\u8981\u5728\u5b89\u88c5\u524d\u540e\u5bf9OpenShift\u8fdb\u884c\u4e00\u4e9b\u8c03\u6574\u3002\u8fd9\u53cd\u6620\u5728\u4e0a\u9762\u7684HAProxy\u914d\u7f6e\u4e2d\uff0c\u6807\u9898\u4e3a\u540e\u7aef\u5165\u53e3-\u8def\u7531\u5668-https\u3002\u5982\u679c\u60a8\u4f7f\u7528\u66f4\u591a\u8282\u70b9\uff0c\u53ea\u9700\u5c06\u8282\u70b9\u5b9a\u4e49\u6dfb\u52a0\u5230HAProxy\u914d\u7f6e\u4e2d\u76f8\u5e94\u7684\u540e\u7aef\u90e8\u5206\u3002\n\u6bcf\u5f53\u60a8\u91cd\u65b0\u542f\u52a8dnsmasq\u65f6\uff0cHAProxy\u90fd\u5bb9\u6613\u5931\u8d25\uff0c\u5e76\u4e14\u5b83\u65e0\u6cd5\u5728\u91cd\u65b0\u542f\u52a8\u671f\u95f4\u89e3\u6790\u4e3b\u673a\uff0c\u65e0\u8bba\u591a\u4e48\u77ed\u6682\u3002\u6b64\u5916\uff0c\u6211\u8fd8\u89c2\u5bdf\u5230\uff0c\u5728\u91cd\u65b0\u542f\u52a8\u65f6\uff0cHAProxy\u6709\u65f6\u4f1a\u56e0\u4e3a\u540c\u6837\u7684\u539f\u56e0\u800c\u65e0\u6cd5\u542f\u52a8\u3002\u89e3\u51b3\u65b9\u6848\u662f\u5728dnsmasq\u8fd0\u884c\u4e4b\u540e\u7b80\u5355\u5730\u91cd\u65b0\u542f\u52a8\u5b83(\u5c3d\u7ba1\u60a8\u53ef\u4ee5\u9009\u62e9\u7f16\u8f91HAProxy\u7684systemd\u670d\u52a1\u5355\u5143\uff0c\u4ee5\u786e\u4fdd\u5b83\u5728dnsmasq\u4e4b\u540e\u542f\u52a8)\u3002\n\u4e0b\u9762\u7684\u6587\u4ef6\u5f15\u7528\u4e86Apache\u6258\u7ba1\u7684\u8d44\u6e90\uff0c\u56e0\u6b64\u6211\u4eec\u5e0c\u671b\u786e\u4fdd\u83dc\u5355\u5177\u6709\u7528\u4e8e\u62c9\u5165\u7684\u7aef\u53e38080\u3002\u7531\u4e8eHAProxy\u6b63\u5728\u76d1\u542c\u4e24\u4e2a\u6807\u51c6Web\u7aef\u53e3(80\u548c443)\uff0c\u56e0\u6b64\u5728\u524d\u9762\u7684\u6b65\u9aa4\u4e2d\uff0c\u6211\u4eec\u544a\u8bc9Apache\u76d1\u542c\u7aef\u53e38080\u3002\n#master PXE fileUI menu.c32DEFAULT fedcosTIMEOUT 100MENU title RedHat CoreOS Node InstallationMENU TABMSG\u6309Enter\u952e\u5f15\u5bfc\uff0c\u6216\u6309Tab\u952e\u7f16\u8f91\u83dc\u5355\u9879LABEL fedcos\u548c\u83dc\u5355\u6807\u7b7einstall fedcos/kernel http://bastion.okd4.lab:8080/fedcos/installer-kernel/INITRD http://bastion.okd4.lab:8080/fedcos/installer-initramfs.img/append console=tty0\u63a7\u5236\u53f0=ttyS0 IP=dhcp rd.nednet=1 coreos.\u3002/IGNING/MASTER.ign coreos.inst.image_url=http://bastion.okd4.lab:8080/fedcos/metal.raw.gz\u6838\u5fc3.inst.install_dev=vdaIPAPPEND 2\u3002\n\u6ce8\u610f\uff1a\u60a8\u5e94\u8be5\u4e3a\u60a8\u62e5\u6709\u7684\u6bcf\u53f0\u4e3b\u673a\u521b\u5efa\u6b64\u6587\u4ef6\u3002\u6587\u4ef6\u540d\u5e94\u8be5\u662f\u5e26\u6709&#39\uff1b-&#39\uff1b\u800c\u4e0d\u662f&#39\uff1b\uff1a&#39\uff1b&gt\uff1b\u768401-&lt\uff1bMac\u5730\u5740\u3002dnsmasq\u79df\u7ea6\u5982\u4e0b\u6240\u793a\uff1a\n\u56e0\u6b64\uff0c\u8bf7\u4f7f\u7528\u7b2c\u4e94\u4e2a\u5b57\u6bb5\u4e0eTFTP\u670d\u52a1\u5668\u5339\u914d\u3002\u7ed9\u5b9aMAC\u5730\u574052\uff1a54\uff1a00\uff1a06\uff1a94\uff1a85\uff0c\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84\u5c06\u4e3a/var/lib/tftpboot/pxelinux.cfg/01-52-54-00-06-94-85\u3002\n\u5728OCP4\u548cOKD\u4e2d\u8bbe\u7f6e\u73af\u5883\u7684\u6b65\u9aa4\u51e0\u4e4e\u76f8\u540c\u3002\u4e3b\u8981\u533a\u522b\u5728\u4e8e\uff1a\n\u5982\u679c\u60a8\u7684\u6bcd\u7248\u5c11\u4e8e\u4e09\u4e2a\uff0c\u5219\u9700\u8981\u624b\u52a8\u7f16\u8f91etcd\u4ef2\u88c1\u4fdd\u62a4\u3002\n\u89e3\u538b\u7f29\u4e8c\u8fdb\u5236\u6587\u4ef6\u5e76\u5c06\u5176\u653e\u5165/bin\u4e2d(\u6216\u66f4\u6539\u8def\u5f84\u4ee5\u4f7f\u4e8c\u8fdb\u5236\u6587\u4ef6\u5b58\u5728)\u3002\n\u76ee\u524d\uff0c\u4f3c\u4e4e\u552f\u4e00\u6709\u6548\u7684\u7248\u672c\u662f2020\u5e7401\u670828\u65e5022517\u3002\u6211\u8fd8\u8bd5\u8fc7\u5176\u4ed6\u51e0\u4e2a\uff0c\u4f46\u90fd\u6ca1\u6709\u6210\u529f\u3002\u901a\u8fc7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u786e\u4fdd\u60a8\u62e5\u6709\u6b63\u786e\u7684\u7248\u672c\uff1a\nPull\u5bc6\u94a5\u5bf9\u4e8eOKD\u662f\u53ef\u9009\u7684\u3002\u4f46\u662f\uff0c\u5b83\u4eec\u5bf9\u6d4b\u8bd5\u7279\u5b9a\u64cd\u4f5c\u7b26\u5f88\u6709\u5e2e\u52a9\u3002\u6211\u5efa\u8bae\u5728\u5b89\u88c5\u4e4b\u524d\u5bf9\u62c9\u5165\u5bc6\u7801\u8fdb\u884c60\u5929\u7684\u8bc4\u4f30\u3002\u4ece\u8fd9\u91cc\u83b7\u53d6\u60a8\u7684\u62c9\u52a8\u79d8\u8bc0\u3002\n\u786e\u4fdd\u6240\u6709\u53d8\u91cf\u90fd\u4e0d\u4e3a\u7a7a\uff01\u672c\u6307\u5357\u7684\u5176\u4f59\u90e8\u5206\u4f9d\u8d56\u4e8e\u73af\u5883\u53d8\u91cf\u6765\u586b\u5145\u914d\u7f6e\u6587\u4ef6\u3002\n\u4e0b\u9762\u7684cat\u547d\u4ee4\u7528\u4e0a\u9762\u521b\u5efa\u7684shell\u53d8\u91cf\u66ff\u6362\u53d8\u91cf\u3002\u8fd9\u662f\u7528\u4e8e\u521b\u5efa\u6e05\u5355\u548c\u70b9\u706b\u6587\u4ef6\u7684\u521d\u59cb\u7fa4\u96c6\u914d\u7f6eYAML\u6587\u4ef6\u3002\nCAT&lt\uff1b&lt\uff1bEOF&GT\uff1binstall-config.yaml.bakapiVersion\uff1av1baseDomain\uff1a${base_domain}COMPUTE\uff1a-HYPERTHREADING\uff1a\u5df2\u542f\u7528\u7fa4\u96c6\u540d\u79f0\uff1aWorker\u7fa4\u96c6\u526f\u672c\uff1a${Number_of_Worker_VMS}\u63a7\u5236\u5e73\u9762\uff1a*Hyperthreading\uff1a\u5df2\u542f\u7528\u7fa4\u96c6\u540d\u79f0\uff1a\u4e3b\u7fa4\u96c6\u526f\u672c\uff1a${Number_of_Master_VMS}\u5143\u6570\u636e\uff1a\u7fa4\u96c6\u540d\u79f0\uff1a${CLUSTER_NAME}\u7f51\u7edc\uff1a${CLUSTER_NAME}\u7fa4\u96c6\u7f51\u7edc\uff1a${CLUSTER_NETWORK}.\u3002{}FIPS\uff1aFALSE PULLSET\uff1a${PULL_SECRET}${sshKey\uff1a${SSH_KEY}FEOF\u3002\n\u6211\u4eec\u521b\u5efa\u5907\u4efd\u7684\u539f\u56e0\u662f\uff0c\u8fd0\u884copenShift-install\u547d\u4ee4\u5c06\u6d88\u8017\u8be5\u6587\u4ef6\uff0c\u5e76\u4e14\u6211\u4eec\u5e0c\u671b\u62e5\u6709\u8be5\u6587\u4ef6\u7684\u526f\u672c\uff0c\u4ee5\u5907\u91cd\u65b0\u5f00\u59cb\u6216\u521b\u5efa\u65b0\u7fa4\u96c6\u65f6\u4f7f\u7528\u3002\n\u6211\u5df2\u7ecf\u4f7f\u7528OKD 4.4.x\u8fd0\u884c\u4e86\u51e0\u4e2a\u6d4b\u8bd5\uff0c\u5c1d\u8bd5\u8c03\u6574\u5165\u53e3\u63a7\u5236\u5668\u548cCVO\u7684\u6e05\u5355\u3002\u8c03\u6574\u8fd9\u4e9b\u6587\u4ef6\u800c\u4e0d\u662f\u4f7f\u7528\u73b0\u6709\u7684IGN\u6587\u4ef6\u4f3c\u4e4e\u4f1a\u5bfc\u81f4\u5f15\u5bfc\u7a0b\u5e8f\u673a\u5668\u5728\u4ece\u670d\u52a1\u5668\u6536\u5230DHCP\u54cd\u5e94\u540e\u6302\u8d77\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u5728\u5b89\u88c5\u540e\u6b65\u9aa4\u4e2d\u8fdb\u884c\u8fd9\u4e9b\u8c03\u6574\u3002\n\u63a5\u4e0b\u6765\uff0c\u751f\u6210\u5c06\u4f7f\u7528\u6e05\u5355\u76ee\u5f55\u7684Ignition\u914d\u7f6e\u3002\u5c06\u8fd9\u4e9bIgnition\u914d\u7f6e\u590d\u5236\u5230\u76f8\u5e94\u7684Apache\u76ee\u5f55\uff1a\n\u6700\u540e\uff0cPXE\u542f\u52a8\u865a\u62df\u673a\u3002\u5982\u679c\u4e00\u5207\u914d\u7f6e\u6b63\u786e\uff0c\u7fa4\u96c6\u5c06\u5f00\u59cb\u81ea\u884c\u914d\u7f6e\u3002\n\u5728\u8d44\u6e90\u6709\u9650\u7684\u8ba1\u7b97\u673a\u4e0a\uff0c\u4ec5\u542f\u52a8\u5f15\u5bfc\u548c\u4e3bVM\u3002\u5f15\u5bfc\u8fc7\u7a0b\u5b8c\u6210\u540e\uff0c\u60a8\u53ef\u4ee5\u542f\u52a8Worker/Infra/Compute\u8282\u70b9\u5e76\u5173\u95ed\u5f15\u5bfc\u8ba1\u7b97\u673a\u3002\u5b8c\u6210\u6b64\u64cd\u4f5c\u53ef\u80fd\u9700\u8981\u76f8\u5f53\u957f\u7684\u65f6\u95f4(30\u5206\u949f\u6216\u66f4\u957f\u65f6\u95f4)\u3002\n\u53ea\u8981\u60a8\u5728\u542f\u52a8\u8fdb\u7a0b\u7684\u540c\u4e00\u5929\u4e0e\u7fa4\u96c6\u4ea4\u4e92\uff0c\u5c31\u53ef\u4ee5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u5bfc\u51fa\u4e0e\u7fa4\u96c6\u4ea4\u4e92\u6240\u9700\u7684KUBECONFIG\u53d8\u91cf\uff1a\n\u8981\u76d1\u89c6\u521d\u59cb\u5b89\u88c5\u8fc7\u7a0b\uff0c\u8bf7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u3002bootstrap-Complete\u547d\u4ee4\u5c06\u544a\u8bc9\u60a8\u4f55\u65f6\u505c\u6b62\u5f15\u5bfc\u8ba1\u7b97\u673a\u662f\u5b89\u5168\u7684\u3002install-Complete\u547d\u4ee4\u53ea\u662f\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u68c0\u67e5\u4e00\u6b21API\uff0c\u4ee5\u786e\u4fdd\u4e00\u5207\u90fd\u5df2\u5b8c\u6210\u3002\n\u5728\u6dfb\u52a0\u5de5\u4f5c\u8282\u70b9\u671f\u95f4\uff0c\u60a8\u53ef\u80fd\u4f1a\u770b\u5230\u5b83\u6ca1\u6709\u51c6\u5907\u597d\uff0c\u751a\u81f3\u6ca1\u6709\u5217\u51fa\u3002\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b\u72b6\u6001\u3002\n\u5f53\u65b0\u670d\u52a1\u5668\u8bd5\u56fe\u52a0\u5165\u96c6\u7fa4\u65f6\uff0c\u901a\u5e38\u5b58\u5728\u7531\u6240\u8ff0\u670d\u52a1\u5668\u53d1\u51fa\u7684\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\uff0c\u4ee5\u4fbf\u96c6\u7fa4\u4fe1\u4efb\u65b0\u8282\u70b9\u3002\u5982\u679c\u60a8\u770b\u4e0d\u5230\u8282\u70b9\uff0c\u5e76\u4e14\u6709\u6302\u8d77\u7684CSR\uff0c\u5219\u9700\u8981\u6279\u51c6\u5b83\u4eec\u3002\n\u4e00\u65e6\u5de5\u4eba\u51fa\u73b0\u5728\u5217\u8868\u4e2d\uff0c\u5c31\u7ed9\u5b83\u8d34\u4e0a\u6807\u7b7e\uff0c\u4ee5\u4fbf\u5165\u53e3\u64cd\u4f5c\u5458\u53ef\u4ee5\u7ee7\u7eed\u64cd\u4f5c\uff1a\n\u6700\u540e\uff0c\u89c2\u5bdf\u96c6\u7fa4\u64cd\u4f5c\u7b26\u3002\u6839\u636e\u7f51\u901f\u548c\u7cfb\u7edf\u8d44\u6e90\u7684\u4e0d\u540c\uff0c\u6b64\u8fc7\u7a0b\u6700\u591a\u53ef\u80fd\u9700\u8981\u51e0\u4e2a\u5c0f\u65f6\u624d\u80fd\u5b8c\u6210\u3002\nOC\u83b7\u53d6\u7fa4\u96c6\u8fd0\u7b97\u7b26NAME\u5e94\u7528\u7a0b\u5e8f\u3001\u4e91\u51ed\u636e\u5e94\u7528\u7a0b\u5e8f\u3001\u5e94\u7528\u7a0b\u5e8f\u7248\u672c\u3001\u53ef\u7528\u7248\u672c\u548c\u6b63\u5728\u964d\u7ea7\u7684SINCE\u8ba4\u8bc1\u7248\u672c\u3001\u5df2\u964d\u7ea7\u7684\u7248\u672c\u3001\u5df2\u964d\u7ea7\u7684SINCE\u8ba4\u8bc1\u7248\u672c\u3001\u5df2\u964d\u7ea7\u7684\u7248\u672c\u3001\u5df2\u964d\u7ea7\u7248\u672c\u3001\u5df2\u964d\u7ea7\u30023.1%TRUE_PRODUCT_FUSE_FUSE_PROFUSE_PROFUSE_FULL_FUSE_FULL_FIRESS_FIRED_FIRESS_FIRED_FIRESS_FIRED 4.3.1_FIRESS_FIRED_FIRESS_FIRESS*4.3.1_FUBLISE_FUSICE_FIRESS_FIRESS*4.3.1_FULL_FULL_FIRESS_FIRESS**4.3.1%_FUBLICE\u30023.1%True\uff1a\u865a\u5047\u4fe1\u606f\uff1b18hingress\uff1b\u865a\u5047\u4fe1\u606f\uff1b\u771f\u4fe1\u606f\uff1b11minsight\uff1b\uff1b\u865a\u5047\u4fe1\u606f\uff1a19hkube-apiserver\uff1b\u865a\u5047\u4fe1\u606f\uff1a4.3.1%\uff1b\u865a\u5047\u4fe1\u606f\uff1a19hkube-apiserver\uff1b\u865a\u5047\u4fe1\u606f\uff1a4.3.1%\uff1b\u865a\u5047\u4fe1\u606f\uff1a19hkube-apiserver\uff1b\u865a\u5047\u4fe1\u606f\uff1b\u865a\u5047\u4fe1\u606f\uff1a4.3.1%\uff1b\u865a\u5047\u4fe1\u606f\uff1a19hkube--\u8702\u7a9d\uff1b\u4fe1\u606f\uff1a4.3.1%\uff1b\u865a\u5047\u4fe1\u606f\uff1a19hkube--\u8702\u7fa4\uff1a33.1%\uff1b\u865a\u5047\u4fe1\u606f\uff1a19hkube--\u8702\u7fa4\uff1a43.1%\u3002*TRUE_FUBE_FUBLE_FALSE_FUBLE_FIRESS_FUBLY_FUBLE_MANAGER_FIRESS_FUBLE_BUBLE_PROFIBE_FULL_FUBLE_FIRESS_FIRESS_FUBLE_FIRESS_FULL_FUBLE_FUBLE_FUBLISE_FUBLE_MUBLE_MANAGER_FUBLICE_FUTERS_FUBLE_FUBLE_\u3002\u9519\u8bef\u4ee3\u7801\uff1a\u9519\u8bef\u4ee3\u7801\uff1a19hMachine-config*4.3.1*\u3002\n..", "note_en": "Want containers? Learn how to set up and run a Kubernetes container cluster on your laptop with OKD.\n You&#39;ve been searching the Internet with your favorite search engine, such as\u00a0 DuckDuckGo, learning all you can learn about containers\u2014this sensation that has swept over the tech industry in the last few years. By now, you have heard about  Kubernetes, by far the most popular platform for managing containers. Maybe you stumbled across  Kubernetes The Hard Way or maybe even some Kubernetes guided courses.\n Maybe you went through the process of figuring this stuff out on your own. &#34;There has to be an easier way!&#34; you say to yourself as you stare at offerings from Google, Amazon, and others. You&#39;ve got a good idea why you want to use them and may have even deployed some containerized applications, and the apps are\u00a0working. Great! Along the way, you started reading or hearing about container orchestration, and you went down the rabbit hole following\u00a0every click-bait link out there.\n If looking at these providers makes your wallet hurt, or you&#39;re like me, and prefer to keep  your data under  your control, have no fear! OpenShift can help! After some more searching, you discover the\u00a0 OpenShift Container Platform, the offering from Red Hat. While they do offer 60-day trials, you don&#39;t really want to put a credit card on file. Maybe you don&#39;t want to deal with salespeople. Either way, I have a solution for you. As with almost everything Red Hat does, there is an open source community project called  OpenShift OKD.\n  I love open source.\u00a0Even though I have been happily working at Red Hat for almost five years now, I still run the upstream versions of everything. I like to be closer to the community and kick off some of the corporate ties from my day job. In addition, one of the parts I love about my job is breaking down complex processes into easily understood and repeatable pieces.\n I travel week in and week out for my job. While I have a substantial lab at home consisting of various off the shelf parts, there are times when a client site does not allow me to VPN out. For\u00a0cases like these, I had to come up with a way to run an environment reliably on my laptop. I also had to make sure that this environment was NAT&#39;d so that, to the outside world, it was just my laptop connecting to the WiFi.\n This guide shows you how to run OpenShift with a 2+ node cluster using\u00a0a single hypervisor running  libvirt. Most of the guides I found were only partially complete. Either difference between OCP versions\u00a0or different use cases necessitated an alternate way of doing things.\n Ultimately, I enjoy taking a complex topic, and making a straight-forward walk-through, explaining things as I go. I, like all other authors, am flawed in that I fail to explain things in sufficient detail when I become overly familiar with the process. I do try hard to make corrections based on feedback to\u00a0leave you with a clear, concise guide that explains what is happening so that it is not a simple monkey-see-monkey-do guide.\n If you are not interested in the NAT&#39;d portion of this guide (i.e., you have standard network layouts), skip steps 1, 2A, 2B below.\n   Work within the constraints of a captive portal (i.e., a hotel or other captive portal\u00a0that does not allow multiple connections from bridged VMs)\n    I assume you know how to set up a hypervisor of some sort (if skipping the NAT-ing section)\n    I assume you are trying to make an enclosed environment (i.e., you are not using a centralized DNS/DHCP/webserver)\n  To set up the host, create a bridge network for all the VMs to communicate with themselves on:\n nmcli con shownmcli con add ifname br0 type bridge con-name br0nmcli con add type bridge-slave ifname eno1 master br0nmcli con up br0nmcli con modify &#34;bridge-br0&#34; ifname br0 type ethernet ip4 10.120.120.1/24\n This should be all that is required for a bridged network for the\u00a0 libvirt guests to use.\n  This VM is independent of the OpenShift install. It hosts services required by OpenShift but is unaffected by the installation (or lack thereof) of OKD4.\n This VM should have two network cards, one that is on the bridge, and one that is on the NAT interface. In my case, I set up the following:\n    On the guest that is designated as the gateway, ensure that the  sysctl is  on for packet-forwarding. Packet-forwarding allows the gateway to act as a router forwarding and routing traffic.\n    Next, make two zones with  firewalld. The external zone should be bound to the interface on the libvirt NAT, which can access the internet. This interface/zone should also make sure that masquerading is enabled:\n         nmcli con mod ${INTERNAL} ipv4.address &#34;10.120.120.250/24&#34;nmcli con mod ${INTERNAL} ipv4.dns-search &#34;lab-cluster.okd4.lab&#34;nmcli con mod ${INTERNAL} connection.autoconnect yesnmcli con mod ${INTERNAL} ipv4.method manual\n I have decided to allow internal traffic on the internal zones instead of opening up all the individual ports.  Do this at your own risk.\n Make sure that  systemd-resolved is disabled and that Network Manager uses the default DNS settings:\n   We are installing all the packages we need for this project to save some commands.\n     Because HAProxy binds to port  80, we need to move Apache to a different port. Port\u00a0 8080 is a reasonable choice:\n    Add the Apache port to the internal firewall. This is not necessary if you have set the internal to accept everything:\n     CoreOS files are downloaded from  https://getfedora.org/coreos/download/ For this installation, I am using the Bare Metal images.\n We are going to use symlinks in order not to have to change configuration files if we update the CoreOS image. Also, create a symlink to the latest version so that we don&#39;t have to update the PXE menu each release:\n   Most of the setup for dnsmasq is done in its configuration file. However, in a single master OKD4 deployment, I found that the maximum number of concurrent DNS requests was being reached. The default is 150. To increase this, you need to edit the  systemd unit file located at  /etc/systemd/system/multi-user.target.wants/dnsmasq.service so that it looks like this:\n    After that is complete, we are ready to start editing the  dnsmasq.conf file. This file is located at\u00a0 /etc/dnsmasq.conf on CentOS 8. Dnsmasq is used for both DHCP and DNS. Dnsmasq implements the official DHCP options. Review  this page, as it helps you make sense of the  dhcp-option= settings in the file. While some of the DHCP options in dnsmasq have &#34;pretty&#34; names. I avoided using them for consistency&#39;s sake as several of the options used below did not have a &#34;pretty&#34; name. The syntax of the  dhcp-option is as follows:\n  It is important to know that the Fedora CoreOS DHCP client does not currently use  send-name. This means that while a host receives its hostname and IP from the DHCP server, it does not register with the DNS portion of dnsmasq. This led me to statically set the IPs with dnsmasq. This is done using tagging, like so:\n  Once you have tagged the MAC address, you can then use this tag to help identify the host. Below is the hostname that is sent to the new VM:\n  I am not going to cover all of the OpenShift 4 requirements in depth. You can find the requirements in the  official documentation. For DNS, you need to have:\n A wildcard entry that points to a load balancer fronting the routers (in our case it is the gateway IP handled by HAProxy)\n We are going to configure these in dnsmasq using the  host-record option. This option is at the bottom of the file below:\n # Setup DNSMasq on Guest For Default NAT interface# dnsmasq.conf# Set this to listen on the internal interfacelisten-address=::1,127.0.0.1,10.120.120.250interface=enp2s0expand-hosts# This is the domain the cluster will be ondomain=lab-cluster.okd4.lab# The &#39;upstream&#39; dns server... This should be the libvirt NAT# interface on your computer/laptopserver=192.168.122.1local=/okd4.lab/local=/lab-cluster.okd4.lab/# Set the wildcard DNS to point to the internal interface# HAProxy will be listening on this interfaceaddress=/.apps.lab-cluster.okd4.lab/10.120.120.250dhcp-range=10.120.120.20,10.120.120.220,12hdhcp-leasefile=/var/lib/dnsmasq/dnsmasq.leases# Specifies the pxe binary to serve and the address of# the pxeserver (this host)dhcp-boot=pxelinux.0,pxeserver,10.120.120.250# dhcp option 3 is the routerdhcp-option=3,10.120.120.250# dhcp option 6 is the DNS serverdhcp-option=6,10.120.120.250# dhcp option 28 is the broadcast addressdhcp-option=28,10.120.120.255# The set is required for tagging. Set a mac address with a specific tagdhcp-mac=set:bootstrap,52:54:00:15:30:f2dhcp-mac=set:master,52:54:00:06:94:85dhcp-mac=set:worker,52:54:00:82:fc:9e# Match the tag with a specific hostname# dhcp option 12 is the hostname to hand out to clientsdhcp-option=tag:bootstrap,12,bootstrap.lab-cluster.okd4.labdhcp-option=tag:master,12,master-0.lab-cluster.okd4.labdhcp-option=tag:worker,12,worker-0.lab-cluster.okd4.labdhcp-host=52:54:00:15:30:f2,10.120.120.99dhcp-host=52:54:00:06:94:85,10.120.120.50dhcp-host=52:54:00:82:fc:9e,10.120.120.60# the log-dhcp option is verbose logging used for debugginglog-dhcppxe-prompt=&#34;Press F8 for menu.&#34;, 10pxe-service=x86PC, &#34;PXEBoot Server&#34;, pxelinuxenable-tftptftp-root=/var/lib/tftpboot# Set the SRV record for etcd. Normally there are 3 or more entries in# SRV recordsrv-host=_etcd-server-ssl._tcp.lab-cluster.okd4.lab,etcd-0.lab-cluster.okd4.lab,2380,0,10# host-record options are linking the mac, ip and hostname for dnshost-record=52:54:00:dd:5e:07,10.120.120.250,bastion.okd4.labhost-record=52:54:00:15:30:f2,10.120.120.99,bootstrap.lab-cluster.okd4.labhost-record=52:54:00:06:94:85,10.120.120.50,master-0.lab-cluster.okd4.labhost-record=52:54:00:06:94:85,10.120.120.50,etcd-0.lab-cluster.okd4.labhost-record=52:54:00:82:fc:9e,10.120.120.60,worker-0.lab-cluster.okd4.lab# These host records are for the api and api-int to point to HAProxyhost-record=bastion.okd4.lab,api.lab-cluster.okd4.lab,10.120.120.250,3600host-record=bastion.okd4.lab,api-int.lab-cluster.okd4.lab,10.120.120.250,3600\n Copy the contents of the above file, overwrite the  /etc/dnsmasq.conf and then restart the service:  sudo systemctl restart dnsmasq\n NOTE:\u00a0Don&#39;t forget to change the MAC addresses in the above file to match your VM&#39;s MAC addresses\n  As OKD represents a community version of an enterprise solution, a load balancer is assumed to be functioning in your environment. To achieve this, we are going to use a software load balancer called HAProxy. It&#39;s relatively straight forward to set up.\n The first thing to do is to make sure that SELinux allows the needed HAProxy ports:\n semanage port -a -t http_port_t -p tcp 6443semanage port -a -t http_port_t -p tcp 22623\n Port 6443 is the API port which is used for\u00a0master-to-master communication and\u00a0the Web UI, as well as using the  oc\u00a0command-line utilities.\n Port 22623 provides configuration files to new hosts joining the cluster. Both ports are required for the successful operation of the cluster, and both are assumed to have multiple backends in the load balancer.\n  # HAProxy Config section# Global settings#---------------------------------------------------------------------globalmaxconn 20000log /dev/log local0 infochroot /var/lib/haproxypidfile /var/run/haproxy.piduser haproxygroup haproxydaemon# turn on stats unix socketstats socket /var/lib/haproxy/stats#---------------------------------------------------------------------# common defaults that all the &#39;listen&#39; and &#39;backend&#39; sections will# use if not designated in their block#---------------------------------------------------------------------defaultsmode httplog globaloption httplogoption dontlognulloption forwardfor except 127.0.0.0/8option redispatchretries 3timeout http-request 10stimeout queue 1mtimeout connect 10stimeout client 300stimeout server 300stimeout http-keep-alive 10stimeout check 10smaxconn 20000frontend control-plane-apibind *:6443mode tcpdefault_backend control-plane-apioption tcplogbackend control-plane-apibalance sourcemode tcpserver master-0 master-0.lab-cluster.okd4.lab:6443 checkserver bootstrap bootstrap.lab-cluster.okd4.lab:6443 check backupfrontend control-plane-bootstrapbind *:22623mode tcpdefault_backend control-plane-bootstrapoption tcplogbackend control-plane-bootstrapbalance sourcemode tcpserver master-0 master-0.lab-cluster.okd4.lab:22623 checkserver bootstrap bootstrap.lab-cluster.okd4.lab:22623 check backupfrontend ingress-router-httpbind *:80mode tcpdefault_backend ingress-router-httpoption tcplogbackend ingress-router-httpbalance sourcemode tcpserver worker-0 worker-0.lab-cluster.okd4.lab:80 checkfrontend ingress-router-httpsbind *:443mode tcpdefault_backend ingress-router-httpsoption tcplogbackend ingress-router-httpsbalance sourcemode tcpserver worker-0 worker-0.lab-cluster.okd4.lab:443 check\n I am running the ingress router on the single worker node. This requires some tweaking of OpenShift before and after the installation. This is reflected in the HAProxy config above by the heading  backend ingress-router-https. If you are using more nodes, simply add node definitions to the appropriate  backend section in the HAProxy configuration.\n HAProxy is prone to failure anytime you restart dnsmasq, and it cannot resolve hosts during the restart, however brief. In addition, I have observed that there are times on reboot that HAProxy will not start for the same reason. The solution is to simply restart it after dnsmasq is running (although you can optionally edit the  systemd service unit for HAProxy to make sure it starts after dnsmasq).\n        The file below references resources hosted by Apache, so we want to make sure the menu has port  8080 for the pull. Because HAProxy is listening on both standard web ports ( 80 and  443), in an earlier step, we told Apache to listen on port  8080.\n # master pxe fileUI menu.c32DEFAULT fedcosTIMEOUT 100MENU TITLE RedHat CoreOS Node InstallationMENU TABMSG Press ENTER to boot or TAB to edit a menu entryLABEL fedcos\u00a0 \u00a0 MENU LABEL Install fedcos\u00a0 \u00a0 KERNEL http://bastion.okd4.lab:8080/fedcos/installer-kernel\u00a0 \u00a0 INITRD http://bastion.okd4.lab:8080/fedcos/installer-initramfs.img\u00a0 \u00a0 APPEND console=tty0 console=ttyS0 ip=dhcp rd.neednet=1 coreos.inst=yes coreos.inst.ignition_url=http://bastion.okd4.lab:8080&gt;/ignition/master.ign coreos.inst.image_url=http://bastion.okd4.lab:8080/fedcos/metal.raw.gz coreos.inst.install_dev=vdaIPAPPEND 2\n NOTE: You should create this file for each host you have. The file name should be  01-&lt;mac addresses with &#39;-&#39; instead of &#39;:&#39;&gt;. The dnsmasq lease looks like this:\n  Therefore, use the fifth field to match with the TFTP server. Given the MAC address of  52:54:00:06:94:85, the full path to the file would be  /var/lib/tftpboot/pxelinux.cfg/01-52-54-00-06-94-85\n    The steps for setting up an environment are almost identical between OCP4 and OKD. The main differences are:\n Need to manually edit the ETCD Quorum guard if you have less than three\u00a0masters\n  Extract and place the binaries in  /bin (or alter your PATH so that the binaries are there).\n  At this time, the only release that appears to be working is 2020-01-28-022517. I have tried several others without success. Make sure you have the correct version by running the following command:\n  The pull secrets are optional for OKD. However, they are helpful for testing specific operators. I recommend getting a 60-day evaluation for the pull secret before installation. Obtain your pull secret from  here.\n       ENSURE THAT ALL VARIABLES ARE NOT EMPTY! The rest of this guide relies on the environment variables to fill in configuration files.\n     The  cat command below replaces the variables with the shell variables created above. This is the initial cluster configuration YAML file that is used to create the manifests and Ignition files.\n cat &lt;&lt; EOF &gt; install-config.yaml.bakapiVersion: v1baseDomain: ${BASE_DOMAIN}compute:- hyperthreading: Enabled \u00a0\u00a0\u00a0 name: worker\u00a0 replicas: ${NUMBER_OF_WORKER_VMS}controlPlane:\u00a0 hyperthreading: Enabled \u00a0\u00a0\u00a0 name: master\u00a0\u00a0 replicas: ${NUMBER_OF_MASTER_VMS}metadata:\u00a0 name: ${CLUSTER_NAME}\u00a0networking:\u00a0 clusterNetwork:\u00a0 - cidr: ${CLUSTER_NETWORK}\u00a0\u00a0 \u00a0 hostPrefix: 23\u00a0\u00a0 networkType: OpenShiftSDN\u00a0 serviceNetwork:\u00a0\u00a0 - ${SERVICE_NETWORK}platform:\u00a0 none: {}\u00a0fips: false\u00a0pullSecret: ${PULL_SECRET}\u00a0sshKey: ${SSH_KEY}\u00a0EOF\n The reason we create the backup is that running the  openshift-install command will consume the file and we want to have a copy of it in case we start over or create a new cluster.\n   I have run several tests with OKD 4.4.x, trying to adjust the manifests for\u00a0the Ingress Controller and the CVO.\u00a0Adjusting these files instead of using the stock IGN files seems to result in the bootstrap machine hanging after receiving the DHCP response from the server, so we will make these adjustments in a post-install step.\n Next, generate the Ignition configurations, which will consume the manifests directory. Copy these Ignition configurations\u00a0to the appropriate Apache directory:\n    Finally, PXEboot the VMs. If everything is configured correctly, the cluster starts to configure itself.\n On a computer with limited resources, only start the bootstrap and master VMs. After the bootstrap process is complete, you can start the worker/infra/compute node and take down the bootstrap machine. It can take quite some time for this to complete (30 minutes or more).\n  As long as you are interacting with the cluster on the same date as you started the process, you can run the following to export the  KUBECONFIG variable that is needed for interacting with the cluster:\n    to monitor the initial installation process. The  bootstrap-complete\u00a0command will tell you when it is safe to stop the bootstrap machine. The  install-complete\u00a0command simply checks the API every so often to ensure everything has completed.\n During the addition of the worker node, you may see it not being ready, or not even listed. Use the following commands to view the status.\n     When a new server attempts to join a cluster, there are often certificate signing requests that are issued by said server so that the cluster trusts the new node. If you do not see nodes, and you have pending CSRs, you need to approve them.\n   Once the worker shows up in the list, label it so that the ingress operator can proceed:\n  Finally, watch the cluster operators. This process can take up to a couple of hours to complete before everything goes &#34;True,&#34;\u00a0depending on Internet speed and system resources:\n oc get clusteroperatorsNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 VERSION \u00a0 AVAILABLE \u00a0 PROGRESSING \u00a0 DEGRADED \u00a0 SINCEauthentication \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 4.3.1 \u00a0 \u00a0 False \u00a0 \u00a0 \u00a0 \u00a0False \u00a0 \u00a0 \u00a0 \u00a0 False \u00a0 \u00a0 \u00a014hcloud-credential \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 4.3.1 \u00a0 \u00a0 True \u00a0 \u00a0 \u00a0 \u00a0False \u00a0 \u00a0 \u00a0 \u00a0 False \u00a0 \u00a0 \u00a020hcluster-autoscaler \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 4.3.1 \u00a0 \u00a0 True \u00a0 \u00a0 \u00a0 \u00a0False \u00a0 \u00a0 \u00a0 \u00a0 False \u00a0 \u00a0 \u00a018hconsole \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a04.3.1 \u00a0 \u00a0 False \u00a0 \u00a0 \u00a0 \u00a0False \u00a0 \u00a0 \u00a0 \u00a0 False \u00a0 \u00a0 \u00a09hdns \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a04.3.1 \u00a0 \u00a0 True \u00a0 \u00a0 \u00a0 \u00a0False \u00a0 \u00a0 \u00a0 \u00a0 False \u00a0 \u00a0 \u00a018mimage-registry \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 4.3.1 \u00a0 \u00a0 True \u00a0 \u00a0 \u00a0 \u00a0False \u00a0 \u00a0 \u00a0 \u00a0 False \u00a0 \u00a0 \u00a018hingress \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a04.3.1 \u00a0 \u00a0 False \u00a0 \u00a0 \u00a0 True \u00a0 \u00a0 \u00a0 \u00a0 \u00a0True \u00a0 \u00a0 \u00a0 11minsights \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 4.3.1 \u00a0 \u00a0 True \u00a0 \u00a0 \u00a0 \u00a0False \u00a0 \u00a0 \u00a0 \u00a0 False \u00a0 \u00a0 \u00a019hkube-apiserver \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 4.3.1 \u00a0 \u00a0 True \u00a0 \u00a0 \u00a0 \u00a0False \u00a0 \u00a0 \u00a0 \u00a0 False \u00a0 \u00a0 \u00a019hkube-controller-manager \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a04.3.1 \u00a0 \u00a0 True \u00a0 \u00a0 \u00a0 \u00a0False \u00a0 \u00a0 \u00a0 \u00a0 False \u00a0 \u00a0 \u00a019hkube-scheduler \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 4.3.1 \u00a0 \u00a0 True \u00a0 \u00a0 \u00a0 \u00a0False \u00a0 \u00a0 \u00a0 \u00a0 False \u00a0 \u00a0 \u00a019hmachine-api \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a04.3.1 \u00a0 \u00a0 True \u00a0 \u00a0 \u00a0 \u00a0False \u00a0 \u00a0 \u00a0 \u00a0 False \u00a0 \u00a0 \u00a019hmachine-config \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 4.3.1 \u00a0\n......", "posttime": "2020-05-17 08:35:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7535\u8111,kubernetes", "title": "\u5982\u4f55\u5728\u7b14\u8bb0\u672c\u7535\u8111\u4e0a\u8fd0\u884cKubernetes\u96c6\u7fa4", "title_en": "How to run a Kubernetes cluster on your laptop", "transed": 1, "url": "https://www.redhat.com/sysadmin/kubernetes-cluster-laptop", "via": "", "real_tags": ["\u7535\u8111"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002474, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u91cf\u5b50\u529b\u5b66\u4e2d\uff0c\u4e00\u4e2a\u91cd\u8981\u7684\u53d1\u73b0\u662f\uff0c\u6211\u4eec\u5e76\u4e0d\u603b\u662f\u6709\u53ef\u80fd\u7cbe\u786e\u6d4b\u91cf\u4e24\u4e2a\u7269\u7406\u89c2\u6d4b\u503c\uff0c\u8fd9\u5c31\u662f\u6d77\u68ee\u5821\u7684\u4e00\u822c\u6d4b\u4e0d\u51c6\u539f\u7406\u3002\n\u6211\u4eec\u53ef\u80fd\u5df2\u7ecf\u4ece\u9ad8\u4e2d\u6216\u5927\u5b66\u7684\u7269\u7406\u8bfe\u7a0b\u4e2d\u5b66\u5230\u4e86\u6d77\u68ee\u5821\u4e00\u822c\u6d4b\u4e0d\u51c6\u539f\u7406\u7684\u4e00\u4e2a\u7279\u4f8b\uff0c\u5373\u67d0\u4e9b\u7c92\u5b50\u7684\u4f4d\u7f6e\u88ab\u786e\u5b9a\u5f97\u8d8a\u7cbe\u786e\uff0c\u5b83\u7684\u52a8\u91cf\u4ece\u521d\u59cb\u6761\u4ef6\u5c31\u8d8a\u4e0d\u80fd\u51c6\u786e\u5730\u9884\u6d4b\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e24\u4e2a\u7269\u7406\u89c2\u5bdf\u91cf\u662f\u4f4d\u7f6e\u548c\u52a8\u91cf\u3002\n\u5f62\u5f0f\u4e0a\uff0c\u6d77\u68ee\u5821\u7684\u4e00\u822c\u6d4b\u4e0d\u51c6\u539f\u7406\u6307\u51fa\uff0c\u4e24\u4e2a\u4efb\u610f\u5384\u7c73\u7b97\u7b26\u5728\u7ed9\u5b9a\u72b6\u6001\u4e0b\u7684\u65b9\u5dee\u7684\u4e58\u79ef\u603b\u662f\u5927\u4e8e\u6216\u7b49\u4e8e\u5176\u4ea4\u6362\u5668\u671f\u671b\u503c\u7684\u5e73\u65b9\u3002\u5728\u516c\u5f0f\u4e2d\uff1a\n\u5176\u4e2d$\\mathbb{V}_{\\psi}(\\Omega_1)$\u548c$\\mathbb{V}_{\\psi}(\\Omega_2)$\u4f7f\u7528\u6211\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4e2d\u7684\u7b26\u53f7\uff0c$[\\Omega_1\uff0c\\Omega_2]$\u79f0\u4e3a$\\Omega_1$\u548c$\\Omega_2$\u7684\u6362\u4f4d\u5668\uff0c$[\\Omega_1\uff0c\\Omega_2]=\u3002\n\u5728\u8fd9\u7bc7\u535a\u6587\u4e2d\uff0c\u6211\u60f3\u7ed9\u51fa\u6d77\u68ee\u5821\u4e00\u822c\u6d4b\u4e0d\u51c6\u539f\u7406\u7684\u4e00\u4e2a\u6570\u5b66\u8bc1\u660e\u3002\n\u6211\u4eec\u5c06\u4f7f\u7528\u4ee5\u4e0b\u56db\u4e2a\u5b9a\u7406\u548c\u6027\u8d28\u6765\u8bc1\u660e\u6d77\u68ee\u5821\u7684\u4e00\u822c\u6d4b\u4e0d\u51c6\u539f\u7406\u3002\n\u67ef\u897f-\u65bd\u74e6\u8328\u4e0d\u7b49\u5f0f\u6307\u51fa\uff0c\u5bf9\u4e8e\u5185\u79ef\u7a7a\u95f4\u7684\u6240\u6709\u5411\u91cf$u$\u548c$v$\uff0c\u786e\u5b9e\u3002\n\u6240\u6709\u5411\u91cf$u$\u548c$v$\u7684\u5185\u79ef\u7684\u865a\u90e8\uff0c$\\text{Im}\\BIG(\\Langu\uff0cv\\Rangle\\BIG)$\u53ef\u4ee5\u8ba1\u7b97\u4e3a\n\u5047\u8bbe$u=a1+b1i$\u548c$v=a2+b2i$\uff0c\u5176\u4e2d$a1$\u3001$a2$\u3001$b1$\u548c$b2$\u662f\u5b9e(\u5217)\u5411\u91cf\u3002\n\u5bf9\u4e8e\u719f\u6089\u4e09\u89d2\u5f62\u5e76\u77e5\u9053\u590d\u6570\u7684\u6781\u5750\u6807\u8868\u8fbe\u5f0f\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u5e94\u8be5\u662f\u975e\u5e38\u7b80\u5355\u7684\u3002\u6211\u4eec\u5c06\u8df3\u8fc7\u8fd9\u91cc\u7684\u6b63\u5f0f\u8bc1\u660e\u3002\n\u5982\u679cA\u662fHermitian$n$x$n$\u77e9\u9635\uff0c\u5219\u5bf9\u6240\u6709$u\uff0cv^{\\\u7d20\u6570}\\in\\mathbb{C}$\u3002\u6211\u4eec\u6709\u3002\n\u7531\u4e8e$\\Delta_{\\psi}(\\ommega)=\\omega-\\langle\\omegga\\rangle_{\\psi}i$\u548c$\\omegga$\u662f\u5384\u7c73\u7b97\u5b50\uff0c\u56e0\u6b64$\\Delta_{\\psi}(\\ommega)$\u4e5f\u662f\u5384\u7c73\u7b97\u5b50\u3002\u57fa\u4e8e\u65b9\u5dee\u7684\u5b9a\u4e49\uff0c\u5229\u7528\u5384\u7c73\u7279\u6027\u8d28\uff0c\u6211\u4eec\u8fdb\u4e00\u6b65\u5f97\u5230\u3002\n\u6211\u4eec\u5c06\u67ef\u897f-\u65bd\u74e6\u8328\u4e0d\u7b49\u5f0f\u5e94\u7528\u4e8e\u6d77\u68ee\u5821\u4e00\u822c\u6d4b\u4e0d\u51c6\u539f\u7406\u7684\u5de6\u4fa7\uff0c\n\u5728\u6d77\u68ee\u5821\u7684\u4e00\u822c\u6d4b\u4e0d\u51c6\u539f\u7406\u4e2d\uff0c\u6362\u4f4d\u5b50$[\\Omega_1\uff0c\\Omega_2]=0$\u8868\u793a\u4e3a$\\Omega_1\\Omega_2=\\Omega_2\\Omega_1$\u548c$\\Omega_1\\Omega_2|\\psi\\Rangle=\\Omega_2\\Omega_1|\\psi\\Rangle$\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c$[\\Omega_1\uff0c\\Omega_2]=0$\uff0c\u5219\u4e24\u4e2a\u8fde\u7eed\u6d4b\u91cf$\\Omega_1\\Omega_2$\u548c$\\Omega_1\\Omega_2$\u4e4b\u540e\u7684\u7cfb\u7edf\u72b6\u6001\u76f8\u540c\u3002\u5426\u5219\uff0c\u5982\u679c$[\\Omega_1\uff0c\\Omega_2]\\NEQ 0$\uff0c\u5219\u7cfb\u7edf\u5728\u4e24\u4e2a\u8fde\u7eed\u5ea6\u91cf$\\Omega_1\\Omega_2$\u548c$\\Omega_1\\Omega_2$\u4e0d\u76f8\u540c\u540e\u5904\u4e8e\u72b6\u6001\u3002\u5982\u679c\u6362\u5411\u5668$[\\\u6b27\u7c73\u8304_1\uff0c\\\u6b27\u7c73\u8304_2]=0$\uff0c\u6d77\u68ee\u5821\u7684\u4e00\u822c\u6d4b\u4e0d\u51c6\u539f\u7406\u8868\u660e\uff0c$\\\u6b27\u7c73\u8304_1$\u548c$\\\u6b27\u7c73\u8304_2$\u6240\u6d4b\u91cf\u7684\u4e24\u4e2a\u7269\u7406\u89c2\u6d4b\u503c\u5728\u7cbe\u5ea6\u4e0a\u662f\u6ca1\u6709\u6781\u9650\u7684\u3002\n\u5728\u6d77\u68ee\u5821\u4e00\u822c\u6d4b\u4e0d\u51c6\u539f\u7406\u7684\u5176\u4ed6\u8868\u8ff0\u4e2d\uff0c\u6709\u65f6\u6211\u4eec\u4f1a\u770b\u5230\u201c\u540c\u65f6\u6027\u201d\u8fd9\u4e2a\u8bcd\u3002\u5982\u4f55\u7406\u89e3\u6d77\u68ee\u5821\u4e00\u822c\u6d4b\u4e0d\u51c6\u539f\u7406\u4e2d\u7684\u540c\u65f6\u6027\uff1f\u7ed9\u5b9a\u7684\u6d4b\u91cf\u4f1a\u6539\u53d8\u7cfb\u7edf\u7684\u72b6\u6001\uff0c\u5728\u65f6\u57df\u4e0a\u51e0\u4e4e\u4e0d\u53ef\u80fd\u8fbe\u5230\u7edd\u5bf9\u7684\u540c\u65f6\u6027\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u540c\u65f6\u6027\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u8fd9\u91cc\u7684\u540c\u65f6\u662f\u6307\u6d4b\u91cf\u987a\u5e8f$\\Omega_1$\u548c$\\Omega_2$\u4e0d\u4f1a\u6539\u53d8\u6700\u7ec8\u7684\u89c2\u6d4b\u7ed3\u679c\uff0c\u56e0\u4e3a\u6211\u4eec\u52aa\u529b\u4f7f\u5b83\u4eec\u540c\u65f6\u8fdb\u884c\uff0c\u800c\u4e14\u4e0d\u53ef\u80fd\u63a7\u5236\u8fd9\u4e24\u4e2a\u6d4b\u91cf\u7684\u786e\u5207\u987a\u5e8f\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u540c\u65f6\u53ea\u610f\u5473\u7740$[\\\u6b27\u7c73\u8304_1\uff0c\\\u6b27\u7c73\u8304_2]=0$\u3002\n\u5982\u6d77\u68ee\u5821\u4e00\u822c\u6d4b\u4e0d\u51c6\u539f\u7406\u4e0d\u7b49\u5f0f\u5de6\u4fa7\u6240\u793a\uff0c\u5982\u4f55\u6d4b\u91cf\u7cfb\u7edf\u72b6\u6001\u7684\u7269\u7406\u53ef\u89c2\u6d4b\u503c\u7684\u65b9\u5dee\uff1f\u5728\u91cf\u5b50\u529b\u5b66\u4e2d\uff0c\u6d4b\u91cf\u6539\u53d8\u4e86\u7cfb\u7edf\u7684\u72b6\u6001\u3002\u6211\u4eec\u5c06\u9700\u8981\u521b\u5efa\u5927\u91cf\u7cfb\u7edf\u72b6\u6001\u7684\u514b\u9686\u3002\u4e00\u65e6\u6d4b\u91cf\u4e86\u7cfb\u7edf\u72b6\u6001\uff0c\u5c31\u5e94\u8be5\u5c06\u5176\u4e22\u5f03\uff0c\u5e76\u4e14\u4e0d\u518d\u7528\u4e8e\u6d4b\u91cf\u7269\u7406\u53ef\u89c2\u6d4b\u5bf9\u8c61\u3002\u5bf9\u540c\u4e00\u7cfb\u7edf\u72b6\u6001\u7684\u6d4b\u91cf\u610f\u5473\u7740\u5bf9\u7cfb\u7edf\u72b6\u6001\u514b\u9686\u7684\u6d4b\u91cf\uff0c\u800c\u4e0d\u662f\u5bf9\u786e\u5207\u7684\u7cfb\u7edf\u72b6\u6001\u7684\u6d4b\u91cf\u3002\n\u6d77\u68ee\u5821\u7684\u4e00\u822c\u6d4b\u4e0d\u51c6\u539f\u7406\u80fd\u4ee5\u5982\u6b64\u7b80\u5355\u7684\u65b9\u5f0f\u63a8\u5bfc\u51fa\u6765\uff0c\u8fd9\u662f\u76f8\u5f53\u4ee4\u4eba\u60ca\u8bb6\u7684\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u7684\u5927\u5b66\u7269\u7406\u8bfe\u7a0b\u8001\u5e08\u4ece\u6765\u6ca1\u6709\u62ff\u51fa\u8bc1\u636e\u6765\u8bc1\u660e\u8fd9\u4e00\u91cd\u8981\u539f\u5219\u3002", "note_en": "In quantum mechanics, one of the key discoveries is that it is not always possible that we could measure two physical observables precisely, which is the Heisenberg\u2019s general uncertainty principle.\n  We might have learned a special case of the Heisenberg\u2019s general uncertainty principle from high school or college physics courses that the more precisely the position of some particle is determined, the less precisely its momentum can be predicted from initial conditions, and vice versa. In this case, the two physical observables are position and momentum.\n  Formally, the Heisenberg\u2019s general uncertainty principle states that the product of the variances of two arbitrary hermitian operators on a given state is always greater than or equal to one-fourth the square of the expected value of their commutator. In formulas:\n where $\\mathbb{V}_{\\psi}(\\Omega_1)$ and $\\mathbb{V}_{\\psi}(\\Omega_2)$ are using the notations from my previous  post, $[\\Omega_1, \\Omega_2]$ is called the commutator of $\\Omega_1$ and $\\Omega_2$, and $[\\Omega_1, \\Omega_2] = \\Omega_1 \\Omega_2 - \\Omega_2 \\Omega_1$.\n  In this blog post, I would like to show a mathematical proof to Heisenberg\u2019s general uncertainty principle.\n  We would use the following four theorems and properties to prove Heisenberg\u2019s general uncertainty principle.\n  The Cauchy\u2013Schwarz inequality states that for all vectors $u$ and $v$ of an inner product space it is true that\n   The imaginary part of the inner product of all vectors $u$ and $v$, $\\text{Im}\\big(\\langle u, v \\rangle\\big)$, could be computed as\n Assuming $u = a_1 + b_1 i$ and $v = a_2 + b_2 i$, where $a_1$, $a_2$, $b_1$, and $b_2$ are real (column) vectors.\n     This should be very straightforward to the people who are familiar with triangles and know the polar coordinate expression of complex numbers. We will skip the formal proof here.\n  If A is a hermitian $n$-by-$n$ matrix, then for all $u, v^{\\prime} \\in \\mathbb{C}$. we have\n    Because $\\Delta_{\\psi}(\\Omega) = \\Omega - \\langle \\Omega \\rangle_{\\psi} I$ and $\\Omega$ is a hermitian operator, therefore $\\Delta_{\\psi}(\\Omega)$ is also a hermitian operator. Based on  the definition of variance, using the hermitian property, we further have\n We apply the Cauchy\u2013Schwarz inequality to the left side of the Heisenberg\u2019s general uncertainty principle,\n      In Heisenberg\u2019s general uncertainty principle, the commutator $[\\Omega_1, \\Omega_2] = 0$ suggests $\\Omega_1 \\Omega_2 = \\Omega_2 \\Omega_1$ and $\\Omega_1 \\Omega_2 | \\psi \\rangle = \\Omega_2 \\Omega_1 | \\psi \\rangle$. This means that the system states after the two sequential measures $\\Omega_1 \\Omega_2$ and $\\Omega_1 \\Omega_2$ are the same if $[\\Omega_1, \\Omega_2] = 0$. Otherwise, if $[\\Omega_1, \\Omega_2] \\neq 0$ the system states after the two sequential measures $\\Omega_1 \\Omega_2$ and $\\Omega_1 \\Omega_2$ are not the same. If the commutator $[\\Omega_1, \\Omega_2] = 0$, Heisenberg\u2019s general uncertainty principle suggests that the two physical observables that $\\Omega_1$ and $\\Omega_2$ are measuring would have not limit in precision.\n  In other expressions of Heisenberg\u2019s general uncertainty principle, sometimes we would see the word \u201csimultaneity\u201d. How to understand the simultaneity in Heisenberg\u2019s general uncertainty principle? Given measurement would change the system state, and it is almost impossible to achieve the absolute simultaneity in the time domain, what does the simultaneity mean in this case? Here simultaneity means that the order of measurement $\\Omega_1$ and $\\Omega_2$ do not change the final observation, as we tried hard to make them simultaneous and it is impossible to control the exact order of these two measurements. In short, simultaneity just means $[\\Omega_1, \\Omega_2] = 0$.\n  How to measure the variance of physical observable for a system state, as is shown at the left side of the inequality of Heisenberg\u2019s general uncertainty principle? Measurement changes system state in quantum mechanics. We would need to create lots of clones of the system state. Once a system state is measured, it should be discarded and not be used for the measurement for the physical observable anymore. Measurement on the same system state means measurement on system state clones and not the exact system state.\n  It is quite amazing that the Heisenberg\u2019s general uncertainty principle could be derived in a such simple way. Unfortunately, the my college physics course instructor never showed a proof to this important principle.", "posttime": "2020-05-17 08:17:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u539f\u7406,uncertainty,omega", "title": "\u6d77\u68ee\u5821\u6d4b\u4e0d\u51c6\u539f\u7406\u8bc1\u660e", "title_en": "Heisenberg's Uncertainty Principle Proof", "transed": 1, "url": "https://leimao.github.io/blog/Heisenberg-Uncertainty-Principle/", "via": "", "real_tags": ["\u539f\u7406", "omega"]}, {"category": "", "categoryclass": "", "imagename": "545bbe2f1723dc132fce2293ab51a6c0.jpg", "infoid": 1002473, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u5173\u4e8e\u968f\u673a\u7532\u9aa8\u6587\u6a21\u578b\u7684\u4e00\u7cfb\u5217\u5e16\u5b50\u4e2d\u7684\u7b2c\u4e00\u7bc7\u3002*\u5bf9\u4e8e\u4e00\u4e9b\u4eba\u7684\u54c1\u5473\u6765\u8bf4\uff0c\u8fd9\u53ef\u80fd\u4f1a\u6709\u70b9\u4e0d\u7a33\u5b9a\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u5bf9\u53ef\u8bc1\u660e\u7684\u5b89\u5168\u4e0d\u611f\u5174\u8da3\uff0c\u6ca1\u95ee\u9898\u3002\u201c\u4e00\u65e6\u6211\u628a\u8fd9\u4ef6\u4e8b\u4ece\u6211\u7684\u7cfb\u7edf\u4e2d\u62ff\u51fa\u6765\uff0c\u6211\u4f1a\u5e26\u56de\u66f4\u591a\u5173\u4e8e\u8f6f\u4ef6\u548c\u7269\u7406\u5b89\u5168\u7684\u4fe1\u606f\u3002\n\u78b0\u5de7\u4eca\u5929\u6211\u8ba1\u5212\u8bb2\u6388\u4e00\u95e8\u5173\u4e8e\u53ef\u8bc1\u660e\u5b89\u5168\u548c\u201c\u968f\u673aOracle\u6a21\u578b\u201d\u7684\u8bfe\u7a0b\u3002\u201c\u5728\u6574\u7406\u6211\u7684\u60f3\u6cd5\u65f6\uff0c\u6211\u7a81\u7136\u60f3\u5230\uff0ca)\u8fd9\u95e8\u8bfe\u53ef\u80fd\u4f1a\u8ba9\u4e0d\u662f\u6211\u7814\u7a76\u751f\u7684\u4eba\u611f\u5174\u8da3\uff0cb)\u4f3c\u4e4e\u6ca1\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u201d\u95e8\u5916\u6c49\u201c\u4ecb\u7ecd\u5b83\u3002\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\uff0c\u6211\u559c\u6b22\u8c08\u8bba\u5bc6\u7801\u5b66\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u4ece\u4e0d\u5b89\u5168\u7684\u539f\u8bed\u5f00\u59cb\uff0c\u5b9e\u73b0\u5e76\u4e0d\u91cd\u8981\u3002\n\u56e0\u6b64\uff0c\u5192\u7740\u758f\u8fdc\u6211\u5c0f\u5c0f\u7684\u8bfb\u8005\u7684\u98ce\u9669\uff0c\u6211\u5c06\u4ece\u6211\u4eec\u5b9a\u671f\u5b89\u6392\u7684\u201c\u5bc6\u7801\u7cfb\u7edf\u5982\u4f55\u53d8\u574f\u201d\u8282\u76ee\u4e2d\u62bd\u51fa\u65f6\u95f4\u6765\u8c08\u8c08\u8fd9\u4e2a\u4e66\u5446\u5b50\u7684\u8bdd\u9898-\u6b63\u5982\u6211\u4eec\u7a0d\u540e\u5c06\u770b\u5230\u7684\uff0c\u8fd9\u672c\u8eab\u5c31\u662f\u5bc6\u7801\u5982\u4f55\u51fa\u9519\u7684\u53e6\u4e00\u79cd\u5473\u9053\u3002\n\u5728\u8ba8\u8bba\u968f\u673a\u9884\u8a00\u4e4b\u524d\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u8ba8\u8bba\u6563\u5217\u51fd\u6570\u3002\u8fd9\u4e9b\u51fd\u6570\u63a5\u53d7(\u6f5c\u5728\u7684)\u957f\u8f93\u5165\uff0c\u5e76\u5c06\u5176\u2018\u6563\u5217\u2019\u6210\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u503c\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6d88\u606f\u6458\u8981\u3002\n\u6211\u4eec\u5728\u5bc6\u7801\u5b66\u4e2d\u7ecf\u5e38\u4f7f\u7528\u54c8\u5e0c\u51fd\u6570\u3002\u867d\u7136\u4ed6\u4eec\u56e0\u51fa\u73b0\u5728\u6570\u5b57\u7b7e\u540d\u65b9\u6848\u4e2d\u800c\u53d7\u5230\u6700\u591a\u7684\u5173\u6ce8\uff0c\u4f46\u4ed6\u4eec\u4e5f\u51fa\u73b0\u5728\u8bb8\u591a\u52a0\u5bc6\u65b9\u6848\u4e2d\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5728\u6574\u4e2a\u7403\u573a\u4e0a\uff0c\u6254\u4e00\u5757\u77f3\u5934\u800c\u4e0d\u51fb\u4e2d\u4e00\u5757\u662f\u76f8\u5f53\u56f0\u96be\u7684\u3002\n\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\uff0c\u5bc6\u7801\u5b66\u6563\u5217\u51fd\u6570\u5fc5\u987b\u81f3\u5c11\u6ee1\u8db3\u4ee5\u4e0b\u5c5e\u6027\u4e2d\u7684\u4e00\u90e8\u5206\u3002\u9996\u5148\uff0c\u6211\u4eec\u9884\u8ba1\u5b83\u662f\u201c\u5355\u5411\u7684\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f88\u96be\u201c\u53cd\u8f6c\u201d\u51fd\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u53ea\u7ed9\u51fa\u4e00\u4e2a\u6d88\u606f\u6458\u8981\uff0c\u5c31\u5f88\u96be\u627e\u5230\u539f\u6765\u7684\u6d88\u606f\u3002\n\u5176\u6b21\uff0c\u6563\u5217\u51fd\u6570\u5e94\u8be5\u662f\u201c\u6297\u51b2\u7a81\u7684\u201d\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5e94\u8be5\u5f88\u96be\u627e\u5230\u4e24\u4e2a\u4e0d\u540c\u7684\u6d88\u606f(M\uff0cM\u2018)\uff0c\u4f7f\u5f97Hash(M)==Hash(M\u2019)\u3002\u6b64\u5c5e\u6027\u5bf9\u4e8e\u6570\u5b57\u7b7e\u540d\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u6211\u4eec\u901a\u5e38\u4e0d\u76f4\u63a5\u5bf9\u6d88\u606f\u8fdb\u884c\u7b7e\u540d\uff0c\u56e0\u6b64\u6211\u4eec\u4f1a\u5bf9\u6d88\u606f\u8fdb\u884c\u54c8\u5e0c\u7b7e\u540d\u3002*\u5982\u679c\u5bf9\u624b\u53ef\u4ee5\u627e\u5230\u4e24\u6761\u6563\u5217\u4e3a\u76f8\u540c\u503c\u7684\u6d88\u606f\uff0c\u90a3\u4e48\u4e00\u6761\u6d88\u606f\u4e0a\u7684\u7b7e\u540d(\u6563\u5217)\u4e5f\u662f\u53e6\u4e00\u6761\u6d88\u606f\u4e0a\u7684\u7b7e\u540d\u3002\u4f46\u5728\u5b9e\u8df5\u4e2d\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u66f4\u7cdf\u7cd5\u7684\u793e\u4f1a\u540e\u679c\u3002\n\u6709\u65f6\uff0c\u6211\u4eec\u5bf9\u6563\u5217\u51fd\u6570\u7684\u8981\u6c42\u751a\u81f3\u66f4\u9ad8\u3002\u4f46\u68d8\u624b\u7684\u90e8\u5206\u662f\u77e5\u9053\u6211\u4eec\u53ef\u4ee5\u518d\u8981\u6c42\u591a\u5c11\u3002\u4e3a\u4e86\u8bf4\u660e\u8fd9\u4e00\u70b9\uff0c\u8ba9\u6211\u4e3e\u4e00\u4e2a\u4f8b\u5b50\u3002\n\u60f3\u8c61\u4e00\u4e0b\uff0c\u60a8\u751f\u6d3b\u5728Delphia\uff0c\u4e00\u4e2a\u7981\u6b62\u6240\u6709\u52a0\u5bc6\u7b97\u6cd5\u7684\u56fd\u5bb6\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u4f60\u8fd8\u662f\u6709\u79d8\u5bc6\u8981\u4fdd\u5b88\u3002\u5982\u679c\u60a8\u6ce8\u610f\u5230\u60a8\u7684\u653f\u5e9c\u5e76\u6ca1\u6709\u7981\u6b62\u54c8\u5e0c\u51fd\u6570\u3002\u8fd9\u7ed9\u4e86\u4f60\u4e00\u4e2a\u60f3\u6cd5\uff1a\u4e5f\u8bb8\u4f60\u53ef\u4ee5\u4ece\u6563\u5217\u51fd\u6570\u4e2d\u2018\u7834\u89e3\u2019\u51fa\u4e00\u4e2a\u52a0\u5bc6\u65b9\u6848\u3002\n\u8fd9\u4e0d\u662f\u75af\u4e86\u3002\u8bb8\u591a\u6563\u5217\u7b97\u6cd5\u7684\u8f93\u51fa\u770b\u8d77\u6765\u76f8\u5f53\u968f\u673a\u3002\u4e5f\u8bb8\u4f60\u53ef\u4ee5\u4f7f\u7528\u6563\u5217\u51fd\u6570\u6765\u6784\u5efa\u6d41\u5bc6\u7801\u3002\u57fa\u672c\u4e0a\uff0c\u4f60\u53ea\u9700\u8981\u4f7f\u7528\u6563\u5217\u51fd\u6570\u6765\u6563\u5217\u4e00\u4e2a\u5bc6\u94a5(\u4ee5\u53ca\u67d0\u79cd\u8ba1\u6570\u5668\u503c)\uff1b\u8fd9\u5c06\u4ea7\u751f\u4e00\u4e32\u201c\u968f\u673a\u5bfb\u627e\u201d\u7684\u6bd4\u7279\u6d41\uff0c\u7136\u540e\u4f60\u53ef\u4ee5\u7528\u4f60\u7684\u660e\u6587\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\u3002\n\u95ee\u9898\u662f\uff1a\u4e00\u4e2a\u201c\u5355\u5411\u201d\u548c\u201c\u9632\u78b0\u649e\u201d\u7684\u6563\u5217\u51fd\u6570\u662f\u5426\u8db3\u4ee5\u786e\u4fdd\u8fd9\u4e2a\u65b9\u6848\u7684\u5b89\u5168\uff1f\u6211\u7ed9\u4f60\u4e00\u4e2a\u76f4\u622a\u4e86\u5f53\u7684\u63d0\u793a\uff1a\u4e0d\u662f\u3002\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u8fd9\u4e24\u4e2a\u5c5e\u6027\u90fd\u4e0d\u610f\u5473\u7740\u6563\u5217\u51fd\u6570\u7684\u8f93\u51fa\u662f\u201c\u968f\u673a\u770b\u201d\u7684\u3002\u60a8\u53ef\u4ee5\u8bbe\u60f3\u6ee1\u8db3\u8fd9\u4e9b\u4fdd\u8bc1\u7684\u6563\u5217\u51fd\u6570\uff0c\u4f46\u4ea7\u751f\u7684\u8f93\u51fa\u5bf9\u4e8e\u6784\u5efa\u6d41\u5bc6\u7801\u662f\u65e0\u7528\u7684(\u6bd4\u5982\u8bf4\uff0c\u5b83\u4eec\u53ef\u80fd\u5305\u542b\u53ef\u9884\u6d4b\u503c\u7684\u957f\u5b57\u7b26\u4e32)\u3002\u201c\u5982\u679c\u4f60\u7528\u8fd9\u4e9b\u6765\u6784\u5efa\u4f60\u7684\u5bc6\u7801\uff0c\u4f60\u4f1a\u975e\u5e38\u5931\u671b\u7684\u3002\n\u5f53\u5bc6\u7801\u5b66\u5bb6\u7b2c\u4e00\u6b21\u5f00\u59cb\u601d\u8003\u7c7b\u4f3c\u4e8e\u4e0a\u8ff0\u95ee\u9898\u65f6\uff0c\u4ed6\u4eec\u7684\u95ee\u9898\u662f\uff0c\u4ed6\u4eec\u60f3\u4ece\u4e00\u4e2a\u201c\u7406\u60f3\u201d\u7684\u6563\u5217\u51fd\u6570\u4e2d\u5f97\u5230\u4ec0\u4e48\u3002\u5bf9\u4e8e\u4e00\u4f4d\u6570\u5b66\u5bb6\u6765\u8bf4\uff0c\u7b54\u6848\u88ab\u8bc1\u660e\u662f\u663e\u800c\u6613\u89c1\u7684\u3002\u4ed6\u4eec\u5e0c\u671b\u5b83\u7684\u884c\u4e3a\u50cf\u4e00\u4e2a\u968f\u673a\u51fd\u6570\u3002\u8fd9\u4e2a\u672f\u8bed\u6709\u4e00\u4e2a\u975e\u5e38\u5177\u4f53\u7684\u6570\u5b66\u5b9a\u4e49\uff1b\u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e2a\u8ba8\u8bba\u7684\u76ee\u7684\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u7b49\u6548\u7684\u66f4\u5bb9\u6613\u8c08\u8bba\u7684\u5b9a\u4e49\u3002\n\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u5b9e\u73b0\u4e00\u4e2a\u7406\u60f3\u7684\u6563\u5217\u51fd\u6570\u3002\u6211\u4eec\u53ef\u80fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u5927\u7684\u786c\u7f16\u7801\u8868\uff0c\u800c\u4e0d\u662f\u8bbe\u8ba1\u4e00\u4e2a\u4f7f\u7528\u6df7\u6dc6\u548c\u6269\u6563\u7684\u5c0f\u7b97\u6cd5(\u5c31\u50cf\u6211\u4eec\u5bf9\u5927\u591a\u6570\u771f\u6b63\u7684\u6563\u5217\u51fd\u6570\u6240\u505a\u7684\u90a3\u6837)\u3002\u8be5\u8868\u5c06\u8f93\u5165\u6d88\u606f\u653e\u5728\u4e00\u680f\u4e2d\uff0c\u76f8\u5e94\u7684\u8f93\u51fa\u653e\u5728\u53e6\u4e00\u680f\u4e2d\u3002\n\u8fd9\u4e2a\u8868\u7684\u91cd\u8981\u4e4b\u5904\u5728\u4e8e\uff0c\u6bcf\u4e2a\u5355\u4e2a\u8f93\u51fa\u503c\u90fd\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u968f\u673a\u5b57\u7b26\u4e32\u3002\n\u8f93\u5165(\u4e8c\u8fdb\u5236)\u4f4d\u4e32\uff1a\u8f93\u5165(\u4e8c\u8fdb\u5236)\u4f4d\u4e32\uff1b\u8f93\u51fa\u4f4d\u4e32\uff1b\u8f93\u51fa\u4f4d\u4e32\uff1b\u5b8c\u5168\u968f\u673a\u4f4d\u4e32\uff1b\u5b8c\u5168\u968f\u673a\u4f4d\u4e32\uff1b0\u4f4d\u5b8c\u5168\u968f\u673a\u4f4d\u4e32\uff1b1\u4f4d\u5b8c\u5168\u968f\u673a\u4f4d\u4e32\uff1b2\u4f4d\u5b8c\u5168\u968f\u673a\u4f4d\u4e32\uff1b00\u4f4d\u5b8c\u5168\u968f\u673a\u4f4d\u4e32\uff1b3\u4f4d\u5b8c\u5168\u968f\u673a\u4f4d\u4e32\uff1b01\u4f4d\u5b8c\u5168\u968f\u673a\u4f4d\u4e32\uff1b4\u4f4d\u5b8c\u5168\u968f\u673a\u4f4d\u4e32\uff1b10\u4f4d\u5b8c\u5168\u968f\u673a\u4f4d\u4e32\uff1b5\u4f4d\u5b8c\u5168\u968f\u673a\u4f4d\u4e32\uff1b11\u4f4d\u5b8c\u5168\u968f\u673a\u4f4d\u4e32\uff1b6\u4f4d\u968f\u673a\u4f4d\u4e32\uff1b\u4ee5\u6b64\u7c7b\u63a8\u2026\u2026\u3002\n\u663e\u7136\uff0c\u4e00\u4e2a\u6709\u7528\u7684\u6563\u5217\u51fd\u6570\u7684\u6574\u4e2a\u8868\u4f1a\u76f8\u5f53\u5927\u3002\u591a\u5927?\u3002\u55ef\uff0cSHA1\u53ef\u4ee5\u63a5\u53d7\u6700\u5927\u957f\u5ea6\u4e3a2^64\u5b57\u8282\u7684\u6d88\u606f\u3002\u6240\u4ee5\u7b54\u6848\u662f\uff1a\u592a\u5927\u4e86\uff0c\u653e\u4e0d\u8fdb\u8fd9\u4e2a\u535a\u5ba2\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6574\u4e2a\u8868\u683c\u4e2d\u7684\u6761\u76ee\u4f1a\u6bd4\u5b87\u5b99\u4e2d\u7684\u539f\u5b50\u8fd8\u591a\u3002\n\u5373\u4f7f\u6211\u4eec\u6709\u7a7a\u95f4\u5b58\u50a8\u8fd9\u6837\u7684\u8868\uff0c\u6563\u5217\u8fc7\u7a0b-\u67e5\u627e\u8f93\u5165\u5e76\u627e\u5230\u8f93\u51fa-\u4e5f\u4f1a\u975e\u5e38\u8017\u65f6\u3002*\u5982\u679c\u6211\u4eec\u5c06\u54c8\u5e0c\u8868\u5b58\u50a8\u5728\u56fe\u7075\u673a(\u4e94\u5206\u8ba1\u7b97\u673a)\u7684\u78c1\u5e26\u4e0a\uff0c\u4ec5\u5c06\u78c1\u5934\u79fb\u52a8\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u5c31\u4f1a(\u5e73\u5747)\u82b1\u8d39\u5927\u91cf\u7684\u65f6\u95f4\u6b65\u957f\uff0c\u8fd9\u662f\u8f93\u5165\u5927\u5c0f\u7684\u6307\u6570\u500d\u3002\n\u65f6\u4e0d\u65f6\u5730\uff0c\u5f53\u6211\u5728\u5165\u95e8\u8bfe\u7a0b\u4e2d\u63d0\u5230\u6240\u6709\u8fd9\u4e9b\u65f6\uff0c\u4e00\u4e9b\u96c4\u5fc3\u52c3\u52c3\u7684\u5b66\u751f\u8bd5\u56fe\u60f3\u51fa\u4e00\u4e2a\u806a\u660e\u7684\u65b9\u6cd5\uff0c\u628a\u684c\u5b50\u7f29\u5c0f\u5230\u6211\u4eec\u53ef\u4ee5\u968f\u8eab\u643a\u5e26\u7684\u4e1c\u897f\u3002\u4f46\u95ee\u9898\u662f\uff1a\u8fd9\u7ec4\u8f93\u51fa\u5b57\u7b26\u4e32\u5e76\u4e0d\u662f\u5b8c\u5168\u968f\u673a\u7684\u3002\u627e\u5230\u4e00\u79cd\u7528\u7d27\u51d1\u6563\u5217\u8868\u793a\u5b83\u4eec\u7684\u65b9\u6cd5\u7b49\u540c\u4e8e\u538b\u7f29\u968f\u673a\u6570\u636e\u3002\u201c\u4e0d\u5e78\u7684\u662f\uff0c\u4fe1\u606f\u8bba\u544a\u8bc9\u6211\u4eec\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u7981\u5fcc\u3002\n\u8ba9\u6211\u4eec\u76d8\u70b9\u4e00\u4e0b\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u5e0c\u671b\u6211\u81f3\u5c11\u8bf4\u670d\u4e86\u4f60\u4e24\u4ef6\u4e8b\u3002\u9996\u5148\uff0c\u5bc6\u7801\u5b66\u5bb6\u786e\u5b9e\u5e0c\u671b\u4ed6\u4eec\u7684\u6563\u5217\u51fd\u6570\u7684\u884c\u4e3a\u7c7b\u4f3c\u4e8e\u968f\u673a\u51fd\u6570\u3002\n\u5176\u6b21\uff0c\u201c\u771f\u6b63\u7684\u201d\u6563\u5217\u51fd\u6570\u4e0d\u80fd\u662f\u968f\u673a\u51fd\u6570\uff0c\u56e0\u4e3a\u8fd9\u662f\u5b8c\u5168\u4e0d\u53ef\u884c\u548c\u4e0d\u5207\u5b9e\u9645\u7684\u3002*\u5982\u679c\u4f60\u770b\u770b\u50cfSHA1\u3001SHA512\u548cRIPEMD160\u8fd9\u6837\u7684\u5b9e\u7528\u6563\u5217\u51fd\u6570-\u6240\u6709\u8fd9\u4e9b\u51fd\u6570\u90fd\u6709\u5f88\u597d\u7684\u3001\u7531\u51e0KB\u4ee3\u7801\u7ec4\u6210\u7684\u7b80\u77ed\u5b9e\u73b0-\u5e94\u8be5\u5f88\u660e\u663e\uff0c\u8fd9\u4e9b\u90fd\u4e0d\u662f\u968f\u673a\u51fd\u6570\uff0c\u65e0\u8bba\u8f93\u51fa\u770b\u8d77\u6765\u6709\u591a\u201c\u968f\u673a\u201d\u3002\n\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u5728\u5b9e\u8df5\u4e2d\u4e0d\u80fd\u4f7f\u7528\u968f\u673a\u51fd\u6570\uff0c\u90a3\u4e48\u53e6\u4e00\u79cd\u65b9\u6cd5\u5462\uff1f\u4e5f\u8bb8\u6211\u4eec\u53ef\u4ee5\u5c06\u6211\u4eec\u7684\u6563\u5217\u51fd\u6570\u5efa\u6a21\u4e3a\u968f\u673a\u51fd\u6570\uff0c\u53ea\u662f\u4e3a\u4e86\u5b89\u5168\u8bc1\u660e\u7684\u76ee\u7684\u3002\u7136\u540e\u5728\u73b0\u5b9e\u751f\u6d3b\u4e2d\uff0c\u6211\u4eec\u4f1a\u7528SHA\u6216RIPEMD\u6216\u4e00\u4e9b\u5b9e\u7528\u7684\u6563\u5217\u51fd\u6570\u4ee3\u66ff\u3002*\u76ee\u524d\u8fd8\u4e0d\u5b8c\u5168\u6e05\u695a\u5b89\u5168\u8bc1\u660e\u662f\u5426\u4ecd\u7136\u610f\u5473\u7740\u4ec0\u4e48\uff0c\u4f46\u81f3\u5c11\u6211\u4eec\u4f1a\u505a\u4e00\u4e9b\u4e8b\u60c5\u3002\n\u6211\u5c06\u63cf\u8ff0\u4e00\u4e2a\u597d\u83b1\u575e\u5c06\u5448\u73b0\u7684\u573a\u666f\uff1a\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u4e00\u95f4\u5149\u7ebf\u660e\u4eae\u7684\u4e0d\u5207\u5b9e\u9645\u7684\u529e\u516c\u5ba4\u3002\u53f2\u8482\u592b\u00b7\u5e03\u585e\u7c73(Steve Buscemi)\u626e\u6f14\u7684\u4e00\u4f4d\u8457\u540d\u5bc6\u7801\u5b66\u5bb6\u521a\u521a\u63d0\u51fa\u5c06\u54c8\u5e0c\u51fd\u6570\u5efa\u6a21\u4e3a\u968f\u673a\u51fd\u6570\u3002\u4ed6\u7684\u540c\u4e8b\uff0c\u7531\u51ef\u7279\u00b7\u6e29\u65af\u83b1\u7279\u626e\u6f14\uff0c\u7ea0\u6b63\u4e86\u4ed6\u7684\u9519\u8bef\u3002\n\u201c\u6211\u505a\u4e0d\u5230\uff0c\u201d\u5979\u4f24\u5fc3\u5730\u6447\u6447\u5934\u89e3\u91ca\u9053\uff0c\u201c\u8ba1\u7b97\u4e00\u4e2a\u968f\u673a\u51fd\u6570\u9700\u8981\u6307\u6570\u7ea7\u7684\u65f6\u95f4\uff0c\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u4e0d\u65b9\u4fbf\u3002\u201c\u5982\u679c\u6211\u4eec\u5728\u5b89\u5168\u8bc1\u660e\u4e2d\u5141\u8bb8\u8fd9\u79cd\u6563\u5217\uff0c\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u8ba9\u5404\u65b9-\u5305\u62ec\u5bf9\u624b-\u8fd0\u884c\u6307\u6570\u7ea7\u7684\u65f6\u95f4\u6b65\u957f\u3002\u4f46\u6211\u4eec\u4e0d\u80fd\u53ea\u8fd9\u6837\u505a\u3002\u6211\u4eec\u7684\u6574\u4e2a\u5b89\u5168\u8bc1\u660e\u90fd\u662f\u57fa\u4e8e\u8fd9\u6837\u4e00\u79cd\u60f3\u6cd5\uff0c\u5373\u5f53\u4e8b\u4eba\u53ea\u80fd\u8fdb\u884c\u6709\u9650\u7684\u8ba1\u7b97\uff0c\u7279\u522b\u662f\u90a3\u4e9b\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u8fdb\u884c\u7684\u8ba1\u7b97\u3002\u201c\u5982\u679c\u8ba9\u53cc\u65b9\u8fdb\u884c\u4efb\u610f\u7684\u6307\u6570\u65f6\u95f4\u8ba1\u7b97\uff0c\u90a3\u4e48\u5bf9\u624b\u53ef\u4ee5\u505a\u4efb\u4f55\u4e8b\u60c5\uff1a\u4ed6\u751a\u81f3\u53ef\u4ee5\u66b4\u529b\u7834\u89e3\u5bc6\u94a5\u3002\u201d\n\u7a81\u7834\u6765\u81ea\u4e00\u4f4d\u8def\u8fc7\u7684\u770b\u95e8\u4eba(\u9a6c\u7279\u00b7\u8fbe\u8499\uff0c\u91cd\u65b0\u626e\u6f14\u4ed6\u5728\u201c\u5584\u610f\u730e\u6740\u201d\u4e2d\u7684\u89d2\u8272)\uff1a\u201c\u5982\u679c\u4f60\u53ea\u662f\u521b\u9020\u4e00\u4e2a\u865a\u6784\u7684\u4e16\u754c\uff0c\u6bcf\u4e2a\u4eba\u90fd\u88ab\u9650\u5236\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u8ba1\u7b97\uff0c\u4f46\u54c8\u5e0c\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u4f8b\u5916\u3002\u6563\u5217\uff0c\u5355\u72ec\u6563\u5217\uff0c\u6839\u672c\u4e0d\u9700\u8981\u4efb\u4f55\u65f6\u95f4\u3002\u201c\u5f53\u4f60\u8bd5\u56fe\u6563\u5217\u4e00\u4e9b\u4e1c\u897f\u65f6\uff0c\u65f6\u949f\u5c31\u4f1a\u505c\u6b62\u3002\u201d\n\u8fd9\u5c31\u662f\u6211\u4eec\u73b0\u5728\u7684\u5904\u5883\u3002\u90a3\u4e48\u5b8c\u7f8e\u7684\u6563\u5217\u51fd\u6570\u5e94\u8be5\u662f\u968f\u673a\u51fd\u6570\u3002\u4f46\u662f\u968f\u673a\u51fd\u6570\u662f\u4e0d\u5207\u5b9e\u9645\u7684-\u6211\u4eec\u4e0d\u80fd\u5728\u73b0\u5b9e\u751f\u6d3b\u4e2d\u4f7f\u7528\u5b83\u4eec\uff0c\u751a\u81f3\u5728\u6211\u4eec\u7684\u5b89\u5168\u8bc1\u660e\u4e2d\u90fd\u4e0d\u80fd\u4e0d\u6253\u7834\u5b83\u4eec\u3002\n\u5bc6\u7801\u5b66\u5bb6\u662f\u56fa\u6267\u7684\u4eba\uff0c\u6211\u4eec\u6709\u5f88\u597d\u7684\u60f3\u8c61\u529b\u3002\u6240\u4ee5\u6211\u4eec\u60f3\u51fa\u4e86\u4e00\u4e2a\u767d\u65e5\u68a6\uff0c\u4e00\u79cd\u5047\u88c5\u968f\u673a\u51fd\u6570\u662f\u5b9e\u7528\u7684\u65b9\u6cd5-\u53ea\u662f\u4e3a\u4e86\u6211\u4eec\u7684\u5b89\u5168\u8bc1\u660e\u3002\n\u8fd9\u4e2a\u767d\u65e5\u68a6\u7684\u5f71\u54cd\u7ed3\u679c\u662f\u65e2\u7f8e\u597d\u53c8\u53ef\u6015\u3002\u4e00\u65b9\u9762\uff0c\u5b83\u8ba9\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\u90a3\u4e9b\u65e0\u6cd5\u7528\u5176\u4ed6\u65b9\u5f0f\u8bc1\u660e\u7684\u8ba1\u5212\u7684\u5b89\u5168\u6027\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u975e\u5e38\u6709\u6548\u5730\u505a\u8fd9\u4ef6\u4e8b\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5b83\u5bfc\u81f4\u7684\u5b89\u5168\u8bc1\u636e\u5728\u6280\u672f\u610f\u4e49\u4e0a\u662f\u5b8c\u5168\u6ca1\u6709\u610f\u4e49\u7684\u3002\n\u6bd5\u7adf\uff0c\u6211\u4eec\u6700\u7ec8\u5c06\u4e0d\u5f97\u4e0d\u4f7f\u7528\u50cfSHA\u8fd9\u6837\u7684\u771f\u6b63\u7684\u6563\u5217\u51fd\u6570\u6765\u5b9e\u65bd\u8be5\u65b9\u6848\uff0c\u8fd9\u80af\u5b9a\u4e0d\u662f\u968f\u673a\u7684\u3002\u90a3\u4e48\u968f\u673a\u7684\u7532\u9aa8\u6587\u5b89\u5168\u8bc1\u660e\u80fd\u7ed9\u6211\u4eec\u5e26\u6765\u4ec0\u4e48\u5462\uff1f\u8fd9\u662f\u81ea\u8fd9\u4e2a\u60f3\u6cd5\u4ea7\u751f\u4ee5\u6765\u4e00\u76f4\u56f0\u6270\u7740\u5bc6\u7801\u5b66\u5bb6\u7684\u5927\u95ee\u9898\u4e4b\u4e00\u3002\n\u5982\u679c\u4f60\u8ba4\u4e3a\u8fd9\u4e00\u5207\u90fd\u662f\u5b66\u672f\u6027\u7684\uff0c\u90a3\u4f60\u5c31\u5927\u9519\u7279\u9519\u4e86\u3002*\u4e00\u4e9b\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u5bc6\u7801\u539f\u8bed\u7684\u5b89\u5168\u8bc1\u660e\u8bbe\u7f6e\u5728\u6b64\u6a21\u578b\u4e2d\uff1a\u8fd9\u5305\u62ec\u5927\u591a\u6570RSA\u7b7e\u540d\u548c\u52a0\u5bc6\uff0c\u4ee5\u53caDSA\u6240\u57fa\u4e8e\u7684ElGamal\u7b7e\u540d\u65b9\u6848\u3002\n\u5982\u679c\u4f60\u6ca1\u6709\u4ece\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u62ff\u8d70\u5176\u4ed6\u4e1c\u897f\uff0c\u4f60\u5e94\u8be5\u6ce8\u610f\u5230\u4e0a\u9762\u5217\u51fa\u7684\u8ba1\u5212\u5f88\u91cd\u8981\u3002\u5982\u679c\u6211\u4eec\u5728\u5b89\u5168\u8bc1\u660e\u4e2d\u505a\u4e86\u4e00\u4e9b\u6709\u8da3\u7684\u4e8b\u60c5\uff0c\u4eba\u4eec\u5e94\u8be5\u7406\u89e3\u8fd9\u662f\u4ec0\u4e48\u3002\n\u5728\u6211\u7684\u4e0b\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u5b9e\u9645\u89e3\u91ca\u4ec0\u4e48\u662f\u201c\u968f\u673a\u9884\u8a00\u201d\uff0c\u4ee5\u53ca\u5b83\u4e0e\u6211\u4eec\u4e0a\u9762\u6240\u505a\u7684\u75af\u72c2\u5047\u8bbe\u6709\u4f55\u5173\u7cfb\u3002\u6211\u8fd8\u5c06\u89e3\u91ca\u6211\u4eec\u5982\u4f55\u5728\u8fd9\u4e2a\u6a21\u578b\u4e2d\u8bc1\u660e\u4e8b\u60c5\uff0c\u5e76\u8c08\u8bba\u4e3a\u4ec0\u4e48\u5bc6\u7801\u5b66\u5bb6\u5982\u6b64\u8ba8\u538c\u5b83\u3002", "note_en": "This is the first in a  series of posts on the Random Oracle Model. \u00a0This might get a little wonky for some people\u2019s tastes, so if \u00a0you\u2019re not interested in provable security, no problem. \u00a0I\u2019ll be back with more on software and physical security once I get this out of my system.\n It happens that I\u2019m scheduled to teach a class today on provable security, and something called the \u201cRandom Oracle Model\u201d. \u00a0While getting my thoughts together, it occurred to me that a) this subject might be of interest to people who aren\u2019t my grad students, and b) there doesn\u2019t seem to be a good \u201clayperson\u2019s\u201d introduction to it.For the most part I like to talk about how cryptography gets  implemented. \u00a0But implementation doesn\u2019t matter a lick if you\u2019re starting with insecure primitives.\n So at the risk of alienating my tiny readership, I\u2019m going\u00a0to take a break from our regularly scheduled \u201chow cryptographic systems go bad\u201d programming to talk about this wonkish subject \u2014 which, as we\u2019ll see in a bit, is itself just another flavor of how crypto goes wrong.\n  Before we talk about Random Oracles, we first need to discuss  hash functions. \u00a0These are functions that take a (potentially) long input, and \u2018hash\u2019 it down into a fixed-size value that we refer to as a  Message Digest.\n We use hash functions a lot in  cryptography. \u00a0They get the most press for turning up in\u00a0 digital signature schemes, but they also make an appearance in many encryption schemes. \u00a0In fact, throughout the field, it\u2019s pretty hard to throw a stone without hitting one.\n For the most part, a  cryptographic\u00a0hash function has to satisfy at least some of the following properties. \u00a0First of all, we expect it to be \u201cone way\u201d, meaning that it\u2019s hard to \u2018invert\u2019 the function,  i.e., to\u00a0find the original message given only a Message Digest.\n Secondly, a hash function should be \u201ccollision resistant\u201d. \u00a0In other words, it should be hard to find two different messages (M, M\u2019) such that Hash(M) == Hash(M\u2019). \u00a0This property is  very important for digital signatures, since we typically don\u2019t sign the message directly, we sign a  hash\u00a0of the message. \u00a0If an adversary can find two messages that hash to the same value, then a signature on (the hash of) one message is also a signature on the other. \u00a0In practice this can lead to\u00a0 bad\u00a0consequences.\n Sometimes we demand even more from our hash functions. \u00a0The tricky part is knowing  how much\u00a0more we can ask. \u00a0To illustrate, let me give an example.\n  Imagine that you live in Delphia, a nation that bans all encryption algorithms. \u00a0Despite this, you have secrets to keep. \u00a0You notice that your government has  not banned hash functions. \u00a0This gives you an idea: perhaps you can \u2018hack\u2019 an encryption scheme out of a hash function.\n This isn\u2019t crazy. \u00a0The outputs of many\u00a0 hash algorithms  look pretty random. \u00a0Maybe you could use a hash function to build a  stream cipher. \u00a0Basically, you\u2019ll \u00a0use a hash function to hash a secret key (along with some kind of counter value); this will result in a stream\u00a0of \u2018random looking\u2019 bits which you can then  XOR with your plaintext.\n The question is: would a \u201cone-way\u201d and \u201ccollision-resistant\u201d hash function be sufficient to ensure that this scheme is secure? \u00a0I\u2019ll give you a blunt hint:  no. \u00a0Technically neither of these properties implies that the output of a hash function be \u2018random looking\u2019. \u00a0You can conceive of hash functions that meet those guarantees, and yet produce outputs that would be useless for building a stream cipher (they might, say, contain long strings of predictable values). \u00a0If you use these to build your cipher, you\u2019ll be terribly disappointed.\n  When cryptographers first started  pondering\u00a0problems like the above, their question was what they wanted from an \u201cideal\u201d hash function. \u00a0To a mathematician, the answer turned out to be obvious. \u00a0They wanted it to behave like a  random function. \u00a0That term has a very specific mathematical\u00a0 definition; for\u00a0the purposes of this discussion we\u2019ll use an equivalent one that\u2019s easier to talk about.\n Imagine that we wanted to implement an ideal hash function. \u00a0Instead of designing a small algorithm that uses  confusion and diffusion (as we do with most real hash functions), we might instead create a big hard-coded table. \u00a0The table would have the input messages in one column, and the corresponding outputs on the other.\n The important thing about this table is that  every single output value\u00a0is an independent, random string.\n Input (binary) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Output \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0 \u00a0 \u00a0 \u00a00  Totally random bitstring 1\u00a0 \u00a0 \u00a0 \u00a01  Totally random bitstring 2\u00a0 \u00a0 \u00a0 \u00a000 \u00a0  Totally random bitstring 3\u00a0 \u00a0 \u00a0 \u00a001  Totally random bitstring 4\u00a0 \u00a0 \u00a0 \u00a010  Totally random bitstring 5\u00a0 \u00a0 \u00a0 \u00a011  Totally random bitstring 6 \u00a0 \u00a0 \u00a0 \u00a0and so on...\n Obviously the full table for a useful hash function would be pretty big. \u00a0How big? Well,\u00a0 SHA1\u00a0accepts messages up to 2^64  bytes in length. \u00a0So the answer is: too big to fit in this blog. \u00a0In fact, there would be more entries in the full table than there are  atoms in the universe.\n Even if we had room to store such a table, the process of hashing \u2014 looking up an input and finding the output \u2014 would be awfully time consuming. \u00a0If we stored our hash table on the tape of a Turing machine (the quintissential computer), just moving the tape head to the right place would take (on average) a\u00a0number of time steps that\u2019s  exponential\u00a0in the size of the input.\n From time to time when I mention all of this in my  intro course, some ambitious student tries to come up with a clever way to shrink the table down into something that we can carry around. \u00a0But here\u2019s the problem: the set of output strings are\u00a0 perfectly random. Finding a way to represent them in a compact hash would be equivalent to compressing random data. \u00a0Unfortunately, information theory tells us that this is a big\u00a0 no-no.\n  Let\u2019s take stock for a moment. \u00a0So far I hope that I\u2019ve convinced you of at least two things. First, cryptographers would really like their hash functions to  behave\u00a0like random functions.\n Second, \u201creal\u201d hash functions  can\u2019t\u00a0be random functions, because that would be totally unworkable and impractical. \u00a0If you look at practical hash functions like\u00a0SHA1, SHA512 and RIPEMD160 \u2014 all of which have nice, short implementations consisting of a few KB of code \u2014 it should be obvious that these are not random functions, no matter how \u2018random\u2019 the outputs look.\n  So if we can\u2019t use random functions in practice, what about an alternative approach? Perhaps we could  model\u00a0our hash functions as random functions, just for the purposes of the security proof. \u00a0Then in real life we\u2019d substitute in SHA or RIPEMD or some practical hash function. \u00a0It\u2019s not totally clear that the security proof would still mean anything, but at least we\u2019d be doing  something.\n I\u2019ll describe a scene as Hollywood would present it: an unrealistically well-lit office at MIT. A noted cryptographer, played by Steve Buscemi, has just proposed to model hash functions as random functions. \u00a0His colleague, played by Kate Winslet, sets him straight.\n \u201cCan\u2019t do it,\u201d she explains, shaking her head sadly, \u201cit\u2019s not just\u00a0 inconvenient that it takes exponential time to evaluate a random function. \u00a0If we allowed this sort of hashing in our security proof, we would have to let the parties \u2014 including the Adversary \u2014 run for an exponential number of time steps. \u00a0But we  can\u2019t\u00a0do that. \u00a0Our entire security proof is based on the idea that the parties can only perform  limited\u00a0computations, specifically\u00a0those that can be conducted in polynomial-time. \u00a0If let the parties peform arbitrary exponential-time computations, then adversary could do anything: he could even\u00a0 brute-force the key.\u201d\n  The breakthrough comes from a passing janitor (Matt Damon, reprising his role from Good Will Hunting): \u201cWhat if you just create an imaginary world where everyone is limited to polynomial time computations, but there\u2019s a special exception for hashing. \u00a0Hashing, and hashing alone, doesn\u2019t take any time at all. \u00a0When you try to hash something, the clock stops.\u201d\n  And so this is where we are. \u00a0The perfect hash function would be a  random function. \u00a0But random functions are impractical \u2014 we can\u2019t use them in real life, or even in our security proofs without breaking them.\n Cryptographers are stubborn people, and we have good imaginations. \u00a0So we\u2019ve come up with a daydream, a way to  pretend\u00a0that random functions are practical \u2014 just for the purposes of our security proof.\n The implications of this daydream turn out to be both wonderful and terrible. \u00a0On the one hand, it allows us to prove the security of schemes that  can\u2019t\u00a0be proven in other ways. Furthermore, we can do it very efficiently. \u00a0On the other hand, it leads to security proofs that are, in a technical sense,  totally meaningless.\n After all, we will ultimately have to implement the scheme with a real\u00a0hash function like SHA, which is decidedly not random. \u00a0What does a random oracle security proof buy us then?\u00a0 This is one of the big questions that has plagued cryptographers since this idea came about.\n And if you think that this is all academic, you\u2019d be wrong. \u00a0The security proofs for some of the most widely-used cryptographic primitives are set in this model: this includes most\u00a0 RSA signing and encryption, as well as the Elgamal signature scheme upon which\u00a0 DSA is based.\n If you take nothing else away from this post, you should notice that the schemes listed above are  important. \u00a0If we\u2019re doing something funny in the security proofs, people should understand what it is.\n In my  next post I\u2019ll actually explain what a \u201crandom oracle\u201d is, and how it relates to the crazy assumptions we made above. \u00a0I\u2019ll also explain how we can prove things in this model, and talk about why cryptographers love to hate it so much.", "posttime": "2020-05-17 08:17:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "oracle,\u6a21\u578b,\u51fd\u6570", "title": "\u4ec0\u4e48\u662f\u968f\u673aOracle\u6a21\u578b\uff0c\u60a8\u4e3a\u4ec0\u4e48\u8981\u5173\u5fc3\u5b83\uff1f", "title_en": "What is the Random Oracle Model and why should you care?", "transed": 1, "url": "https://blog.cryptographyengineering.com/2011/09/29/what-is-random-oracle-model-and-why-3/", "via": "", "real_tags": ["oracle", "\u6a21\u578b", "\u51fd\u6570"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002472, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u7684\u5b9e\u7528\u6559\u7a0b\u7cfb\u5217\u73b0\u5728\u662f\u4e00\u95e8\u5173\u4e8e\u6559\u80b2\u7684\u4e92\u52a8\u8bfe\u7a0b\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b\u8bfe\u7a0b\u516c\u544a\u5e16\u5b50\u3002\n\u6709\u5173Reaction\u6e32\u67d3\u884c\u4e3a\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u4ee5\u53ca\u4e0a\u4e0b\u6587\u548cReaction-Redux\u7684\u4f7f\u7528\u5982\u4f55\u5f71\u54cd\u6e32\u67d3\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\n\u6211\u5df2\u7ecf\u770b\u5230\u5f88\u591a\u5173\u4e8eReaction\u4f55\u65f6\u3001\u4e3a\u4ec0\u4e48\u4ee5\u53ca\u5982\u4f55\u91cd\u65b0\u5448\u73b0\u7ec4\u4ef6\u7684\u6301\u7eed\u56f0\u60d1\uff0c\u4ee5\u53ca\u4e0a\u4e0b\u6587\u548cReaction-Redux\u7684\u4f7f\u7528\u5c06\u5982\u4f55\u5f71\u54cd\u8fd9\u4e9b\u91cd\u65b0\u5448\u73b0\u7684\u65f6\u95f4\u548c\u8303\u56f4\u3002\u5728\u6253\u4e86\u51e0\u5341\u6b21\u8fd9\u4e2a\u89e3\u91ca\u7684\u53d8\u4f53\u4e4b\u540e\uff0c\u4f3c\u4e4e\u503c\u5f97\u8bd5\u7740\u5199\u4e00\u4efd\u7efc\u5408\u7684\u89e3\u91ca\uff0c\u6211\u53ef\u4ee5\u8ba9\u4eba\u4eec\u53c2\u8003\u4e00\u4e0b\u3002\u8bf7\u6ce8\u610f\uff0c\u6240\u6709\u8fd9\u4e9b\u4fe1\u606f\u90fd\u5df2\u7ecf\u5728\u7f51\u4e0a\u63d0\u4f9b\uff0c\u5e76\u5728\u8bb8\u591a\u5176\u4ed6\u4f18\u79c0\u7684\u535a\u5ba2\u5e16\u5b50\u548c\u6587\u7ae0\u4e2d\u8fdb\u884c\u4e86\u89e3\u91ca\uff0c\u5176\u4e2d\u51e0\u7bc7\u6211\u5728\u66f4\u591a\u4fe1\u606f\u90e8\u5206\u7684\u672b\u5c3e\u94fe\u63a5\u4ee5\u4f9b\u53c2\u8003\u3002\u4f46\u662f\uff0c\u4eba\u4eec\u4f3c\u4e4e\u5f88\u96be\u628a\u8fd9\u4e9b\u788e\u7247\u62fc\u51d1\u5728\u4e00\u8d77\uff0c\u4ee5\u4fbf\u5b8c\u5168\u7406\u89e3\uff0c\u6240\u4ee5\u5e0c\u671b\u8fd9\u80fd\u5e2e\u52a9\u67d0\u4eba\u6f84\u6e05\u4e00\u4e9b\u4e8b\u60c5\u3002\n\u5448\u73b0\u662f\u6839\u636e\u5f53\u524d\u9053\u5177\u548c\u72b6\u6001\u7684\u7ec4\u5408\uff0c\u8981\u6c42\u60a8\u7684\u7ec4\u4ef6\u63cf\u8ff0\u4ed6\u4eec\u60f3\u8981\u7684UI\u90e8\u5206\u73b0\u5728\u770b\u8d77\u6765\u662f\u4ec0\u4e48\u6837\u5b50\u7684\u8fc7\u7a0b\u3002\n\u5728\u5448\u73b0\u8fc7\u7a0b\u4e2d\uff0cReaction\u5c06\u4ece\u7ec4\u4ef6\u6811\u7684\u6839\u5f00\u59cb\u5411\u4e0b\u5faa\u73af\uff0c\u4ee5\u67e5\u627e\u5df2\u6807\u8bb0\u4e3a\u9700\u8981\u66f4\u65b0\u7684\u6240\u6709\u7ec4\u4ef6\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u6807\u8bb0\u7684\u7ec4\u4ef6\uff0cReaction\u5c06\u8c03\u7528classComponentInstance.Render()(\u5bf9\u4e8e\u7c7b\u7ec4\u4ef6)\u6216FunctionComponent()(\u5bf9\u4e8e\u51fd\u6570\u7ec4\u4ef6)\uff0c\u5e76\u4fdd\u5b58\u5448\u73b0\u8f93\u51fa\u3002\n\u7ec4\u4ef6\u7684\u5448\u73b0\u8f93\u51fa\u901a\u5e38\u4ee5JSX\u8bed\u6cd5\u7f16\u5199\uff0c\u7136\u540e\u5728\u7f16\u8bd1\u548c\u51c6\u5907\u90e8\u7f72JS\u65f6\u5c06\u5176\u8f6c\u6362\u4e3aReact.createElement()\u8c03\u7528\u3002createElement\u8fd4\u56deReaction\u5143\u7d20\uff0c\u8fd9\u4e9b\u5143\u7d20\u662f\u63cf\u8ff0UI\u9884\u671f\u7ed3\u6784\u7684\u7eafJS\u5bf9\u8c61\u3002\u793a\u4f8b\uff1a\n//\u6b64JSX\u8bed\u6cd5\uff1areturn&lt\uff1bSomeComponent a={42}b=&#34\uff1bTesting&#34\uff1b&gt\uff1bText here&lt\uff1b/SomeComponent&gt\uff1b//\u8f6c\u6362\u4e3a\u6b64\u8c03\u7528\uff1areturn React.createElement(SomeComponent\uff0c{a\uff1a42\uff0cb\uff1a&#34\uff1bTesting&#34\uff1b}\uff0c&#34\uff1bText here&#34\uff1b)//\u8fd9\u5c06\u6210\u4e3a\u6b64\u5143\u7d20\u5bf9\u8c61\uff1a{type\uff1aSome34\uff1b\u6b64\u5904\u6587\u5b57&#34\uff1b]}\u3002\n\u5728\u4ece\u6574\u4e2a\u7ec4\u4ef6\u6811\u6536\u96c6\u5448\u73b0\u8f93\u51fa\u4e4b\u540e\uff0cReact\u5c06\u533a\u5206\u65b0\u7684\u5bf9\u8c61\u6811(\u901a\u5e38\u79f0\u4e3a\u865a\u62dfDOM)\uff0c\u5e76\u6536\u96c6\u9700\u8981\u5e94\u7528\u7684\u6240\u6709\u66f4\u6539\u7684\u5217\u8868\uff0c\u4ee5\u4f7f\u5b9e\u9645DOM\u770b\u8d77\u6765\u50cf\u5f53\u524d\u6240\u9700\u7684\u8f93\u51fa\u3002\u5dee\u989d\u548c\u8ba1\u7b97\u8fc7\u7a0b\u79f0\u4e3a\u5bf9\u8d26\u3002\nReact\u5728\u63d0\u4ea4\u9636\u6bb5\u66f4\u65b0\u4e86DOM\u4e4b\u540e\uff0c\u5b83\u5c06\u540c\u6b65\u8fd0\u884cComponentDidMount\u548cComponentDidUpdate\u7c7b\u751f\u547d\u5468\u671f\u65b9\u6cd5\uff0c\u4ee5\u53causeLayoutEffect\u6302\u94a9\u3002\n\u7136\u540e\uff0cReaction\u8bbe\u7f6e\u4e00\u4e2a\u77ed\u6682\u7684\u8d85\u65f6\uff0c\u5f53\u8d85\u65f6\u5230\u671f\u65f6\uff0c\u8fd0\u884c\u6240\u6709\u7684useEffect\u6302\u94a9\u3002\n\u60a8\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fa\u8272\u7684Reaction\u751f\u547d\u5468\u671f\u65b9\u6cd5\u56fe\u4e2d\u770b\u5230\u7c7b\u751f\u547d\u5468\u671f\u65b9\u6cd5\u7684\u53ef\u89c6\u5316\u3002(\u5b83\u76ee\u524d\u6ca1\u6709\u663e\u793a\u6548\u679c\u6302\u94a9\u7684\u65f6\u95f4\uff0c\u8fd9\u662f\u6211\u5e0c\u671b\u6dfb\u52a0\u7684\u5185\u5bb9\u3002)\u3002\n\u5728React\u5373\u5c06\u63a8\u51fa\u7684\u5e76\u53d1\u6a21\u5f0f\u4e2d\uff0c\u5b83\u80fd\u591f\u5728\u5448\u73b0\u9636\u6bb5\u6682\u505c\u5de5\u4f5c\uff0c\u4ee5\u5141\u8bb8\u6d4f\u89c8\u5668\u5904\u7406\u4e8b\u4ef6\u3002Reaction\u7a0d\u540e\u5c06\u6839\u636e\u9700\u8981\u6062\u590d\u3001\u4e22\u5f03\u6216\u91cd\u65b0\u8ba1\u7b97\u8be5\u5de5\u4f5c\u3002\u6e32\u67d3\u8fc7\u7a0b\u5b8c\u6210\u540e\uff0cReaction\u4ecd\u5c06\u5728\u4e00\u4e2a\u6b65\u9aa4\u4e2d\u540c\u6b65\u8fd0\u884c\u63d0\u4ea4\u9636\u6bb5\u3002\n\u8981\u7406\u89e3\u8fd9\u4e00\u70b9\u7684\u4e00\u4e2a\u5173\u952e\u90e8\u5206\u662f\uff0c\u5448\u73b0\u4e0e\u66f4\u65b0DOM\u4e0d\u662f\u4e00\u56de\u4e8b\uff0c\u5448\u73b0\u7ec4\u4ef6\u65f6\u53ef\u80fd\u4e0d\u4f1a\u53d1\u751f\u4efb\u4f55\u53ef\u89c1\u7684\u66f4\u6539\u3002React\u6e32\u67d3\u7ec4\u4ef6\u65f6\uff1a\n\u8be5\u7ec4\u4ef6\u53ef\u80fd\u4f1a\u8fd4\u56de\u4e0e\u4e0a\u6b21\u76f8\u540c\u7684\u6e32\u67d3\u8f93\u51fa\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u66f4\u6539\u3002\n\u5728\u5e76\u53d1\u6a21\u5f0f\u4e0b\uff0cReaction\u53ef\u80fd\u4f1a\u591a\u6b21\u5448\u73b0\u4e00\u4e2a\u7ec4\u4ef6\uff0c\u4f46\u5982\u679c\u5176\u4ed6\u66f4\u65b0\u4f7f\u5f53\u524d\u6b63\u5728\u8fdb\u884c\u7684\u5de5\u4f5c\u65e0\u6548\uff0c\u5219\u6bcf\u6b21\u90fd\u4f1a\u4e22\u5f03\u5448\u73b0\u8f93\u51fa\u3002\n\u521d\u59cb\u6e32\u67d3\u5b8c\u6210\u540e\uff0c\u6709\u51e0\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u544a\u8bc9Reaction\u5c06\u91cd\u65b0\u6e32\u67d3\u6392\u961f\uff1a\nReaction\u7684\u9ed8\u8ba4\u884c\u4e3a\u662f\uff0c\u5f53\u7236\u7ec4\u4ef6\u5448\u73b0\u65f6\uff0cReaction\u5c06\u9012\u5f52\u5448\u73b0\u5176\u5185\u90e8\u7684\u6240\u6709\u5b50\u7ec4\u4ef6\uff01\n\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2aA&gt\uff1bB&gt\uff1bC&gt\uff1bD\u7684\u7ec4\u4ef6\u6811\uff0c\u5e76\u4e14\u6211\u4eec\u5df2\u7ecf\u5728\u9875\u9762\u4e0a\u663e\u793a\u4e86\u5b83\u4eec\u3002\u7528\u6237\u5355\u51fbB\u4e2d\u9012\u589e\u8ba1\u6570\u5668\u7684\u6309\u94ae\uff1a\nReaction\u53d1\u73b0A\u6ca1\u6709\u88ab\u6807\u8bb0\u4e3a\u9700\u8981\u66f4\u65b0\uff0c\u5e76\u8df3\u8fc7\u5b83\u3002\nReaction\u53d1\u73b0B\u88ab\u6807\u8bb0\u4e3a\u9700\u8981\u66f4\u65b0\uff0c\u5e76\u5448\u73b0\u5b83\u3002B\u50cf\u4e0a\u6b21\u4e00\u6837\u9000\u8fd8&lt\uff1bC/&gt\uff1b\u3002\nC\u6700\u521d\u6ca1\u6709\u88ab\u6807\u8bb0\u4e3a\u9700\u8981\u66f4\u65b0\u3002\u4f46\u662f\uff0c\u56e0\u4e3a\u5176\u7236B\u5df2\u6e32\u67d3\uff0c\u6240\u4ee5Reaction\u73b0\u5728\u5411\u4e0b\u79fb\u52a8\u5e76\u6e32\u67d3C\u3002C\u518d\u6b21\u8fd4\u56de&lt\uff1bD/&gt\uff1b\u3002\nD\u4e5f\u672a\u6807\u8bb0\u4e3a\u6e32\u67d3\uff0c\u4f46\u7531\u4e8e\u5176\u7236C\u5df2\u6e32\u67d3\uff0c\u6240\u4ee5Reaction\u4e5f\u4f1a\u5411\u4e0b\u79fb\u52a8\u5e76\u6e32\u67d3D\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5448\u73b0\u7ec4\u4ef6\u5c06\u5bfc\u81f4\u5176\u5185\u90e8\u7684\u6240\u6709\u7ec4\u4ef6\u4e5f\u88ab\u5448\u73b0\uff01\n\u5728\u6b63\u5e38\u6e32\u67d3\u4e2d\uff0cReaction\u4e0d\u5173\u5fc3\u9053\u5177\u662f\u5426\u66f4\u6539-\u5b83\u4f1a\u56e0\u4e3a\u7236\u7ec4\u4ef6\u6e32\u67d3\u800c\u65e0\u6761\u4ef6\u6e32\u67d3\u5b50\u7ec4\u4ef6\uff01\n\u8fd9\u610f\u5473\u7740\u5728\u60a8\u7684\u6839&lt\uff1bApp&gt\uff1b\u7ec4\u4ef6\u4e2d\u8c03\u7528setState()(\u6ca1\u6709\u4efb\u4f55\u5176\u4ed6\u66f4\u6539\u6539\u53d8\u884c\u4e3a)\u5c06\u5bfc\u81f4Reaction\u91cd\u65b0\u5448\u73b0\u7ec4\u4ef6\u6811\u4e2d\u7684\u6bcf\u4e2a\u7ec4\u4ef6\u3002\u6bd5\u7adf\uff0cReact\u6700\u521d\u7684\u9500\u552e\u5ba3\u4f20\u4e4b\u4e00\u662f\uff0c\u8868\u73b0\u5f97\u50cf\u6211\u4eec\u5728\u6bcf\u6b21\u66f4\u65b0\u65f6\u90fd\u4f1a\u91cd\u65b0\u7ed8\u5236\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002\n\u73b0\u5728\uff0c\u6811\u4e2d\u7684\u5927\u591a\u6570\u7ec4\u4ef6\u5f88\u53ef\u80fd\u4f1a\u8fd4\u56de\u4e0e\u4e0a\u6b21\u5b8c\u5168\u76f8\u540c\u7684\u5448\u73b0\u8f93\u51fa\uff0c\u56e0\u6b64Reaction\u4e0d\u9700\u8981\u5bf9DOM\u8fdb\u884c\u4efb\u4f55\u66f4\u6539\u3002\u4f46\u662f\uff0cReaction\u4ecd\u7136\u9700\u8981\u8981\u6c42\u7ec4\u4ef6\u5448\u73b0\u81ea\u8eab\uff0c\u5e76\u5bf9\u5448\u73b0\u8f93\u51fa\u8fdb\u884c\u5dee\u5f02\u5316\u5904\u7406\u3002\u8fd9\u4e24\u4ef6\u4e8b\u90fd\u9700\u8981\u65f6\u95f4\u548c\u7cbe\u529b\u3002\n\u8bf7\u8bb0\u4f4f\uff0c\u5448\u73b0\u5e76\u4e0d\u662f\u4e00\u4ef6\u574f\u4e8b-\u5b83\u7684\u53cd\u5e94\u65b9\u5f0f\u77e5\u9053\u5b83\u662f\u5426\u9700\u8981\u771f\u6b63\u5bf9DOM\u8fdb\u884c\u4efb\u4f55\u66f4\u6539\uff01\n\u8bdd\u867d\u5982\u6b64\uff0c\u6e32\u67d3\u5de5\u4f5c\u6709\u65f6\u4e5f\u4f1a\u767d\u8d39\u529b\u6c14\uff0c\u8fd9\u4e5f\u662f\u4e8b\u5b9e\u3002\u5982\u679c\u7ec4\u4ef6\u5448\u73b0\u8f93\u51fa\u6ca1\u6709\u66f4\u6539\uff0c\u4e14DOM\u7684\u8be5\u90e8\u5206\u4e0d\u9700\u8981\u66f4\u65b0\uff0c\u90a3\u4e48\u5448\u73b0\u8be5\u7ec4\u4ef6\u7684\u5de5\u4f5c\u786e\u5b9e\u6709\u70b9\u6d6a\u8d39\u65f6\u95f4\u3002\nReaction\u7ec4\u4ef6\u6e32\u67d3\u8f93\u51fa\u5e94\u59cb\u7ec8\u5b8c\u5168\u57fa\u4e8e\u5f53\u524d\u9053\u5177\u548c\u5f53\u524d\u7ec4\u4ef6\u72b6\u6001\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u63d0\u524d\u77e5\u9053\u7ec4\u4ef6\u7684\u9053\u5177\u548c\u72b6\u6001\u6ca1\u6709\u6539\u53d8\uff0c\u6211\u4eec\u4e5f\u5e94\u8be5\u77e5\u9053\u5448\u73b0\u8f93\u51fa\u662f\u76f8\u540c\u7684\uff0c\u8be5\u7ec4\u4ef6\u4e0d\u9700\u8981\u6539\u53d8\uff0c\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u5b89\u5168\u5730\u8df3\u8fc7\u5448\u73b0\u5b83\u7684\u5de5\u4f5c\u3002\n\u901a\u5e38\uff0c\u5f53\u8bd5\u56fe\u63d0\u9ad8\u8f6f\u4ef6\u6027\u80fd\u65f6\uff0c\u6709\u4e24\u79cd\u57fa\u672c\u65b9\u6cd5\uff1a1)\u66f4\u5feb\u5730\u5b8c\u6210\u76f8\u540c\u7684\u5de5\u4f5c\uff0c2)\u51cf\u5c11\u5de5\u4f5c\u3002\u4f18\u5316Reaction\u6e32\u67d3\u4e3b\u8981\u662f\u901a\u8fc7\u5728\u9002\u5f53\u7684\u65f6\u5019\u8df3\u8fc7\u6e32\u67d3\u7ec4\u4ef6\u6765\u51cf\u5c11\u5de5\u4f5c\u3002\nReact.Component.shouldComponentUpdate\uff1a\u4e00\u4e2a\u53ef\u9009\u7684\u7c7b\u7ec4\u4ef6\u751f\u547d\u5468\u671f\u65b9\u6cd5\uff0c\u5c06\u5728\u5448\u73b0\u8fc7\u7a0b\u7684\u65e9\u671f\u8c03\u7528\u3002\u5982\u679c\u8fd4\u56deFalse\uff0cReaction\u5c06\u8df3\u8fc7\u5448\u73b0\u7ec4\u4ef6\u3002\u5b83\u53ef\u80fd\u5305\u542b\u8981\u7528\u4e8e\u8ba1\u7b97\u5e03\u5c14\u7ed3\u679c\u4efb\u4f55\u903b\u8f91\uff0c\u4f46\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u68c0\u67e5\u7ec4\u4ef6\u7684\u5c5e\u6027\u548c\u72b6\u6001\u81ea\u4e0a\u6b21\u4ee5\u6765\u662f\u5426\u5df2\u66f4\u6539\uff0c\u5982\u679c\u5b83\u4eec\u672a\u66f4\u6539\uff0c\u5219\u8fd4\u56deFalse\u3002\nReact.PureComponent\uff1a\u7531\u4e8e\u5c5e\u6027\u548c\u72b6\u6001\u6bd4\u8f83\u662f\u5b9e\u73b0shouldComponentUpdate\u7684\u6700\u5e38\u89c1\u65b9\u5f0f\uff0c\u56e0\u6b64PureComponent\u57fa\u7c7b\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5b9e\u73b0\u8be5\u884c\u4e3a\uff0c\u4e14\u53ef\u4ee5\u7528\u6765\u4ee3\u66ffComponent+shouldComponentUpdate\u3002\nReact.memo()\uff1a\u5185\u7f6e\u7684\u9ad8\u9636\u7ec4\u4ef6\u7c7b\u578b\u3002\u5b83\u63a5\u53d7\u60a8\u81ea\u5df1\u7684\u7ec4\u4ef6\u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5305\u88c5\u7ec4\u4ef6\u3002\u5305\u88c5\u5668\u7ec4\u4ef6\u7684\u9ed8\u8ba4\u884c\u4e3a\u662f\u68c0\u67e5\u662f\u5426\u6709\u4efb\u4f55\u9053\u5177\u5df2\u66f4\u6539\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219\u963b\u6b62\u91cd\u65b0\u6e32\u67d3\u3002\u51fd\u6570\u7ec4\u4ef6\u548c\u7c7b\u7ec4\u4ef6\u90fd\u53ef\u4ee5\u4f7f\u7528React.memo()\u5305\u88c5\u3002(\u53ef\u80fd\u4f1a\u4f20\u5165\u81ea\u5b9a\u4e49\u6bd4\u8f83\u56de\u8c03\uff0c\u4f46\u5b83\u5b9e\u9645\u4e0a\u53ea\u80fd\u6bd4\u8f83\u65e7\u9053\u5177\u548c\u65b0\u9053\u5177\uff0c\u56e0\u6b64\u81ea\u5b9a\u4e49\u6bd4\u8f83\u56de\u8c03\u7684\u4e3b\u8981\u7528\u4f8b\u5c06\u4ec5\u6bd4\u8f83\u7279\u5b9a\u9053\u5177\u5b57\u6bb5\uff0c\u800c\u4e0d\u662f\u6240\u6709\u9053\u5177\u5b57\u6bb5\u3002)\u3002\n\u6240\u6709\u8fd9\u4e9b\u65b9\u6cd5\u90fd\u4f7f\u7528\u4e00\u79cd\u79f0\u4e3a\u201c\u6d45\u7b49\u5f0f\u201d\u7684\u6bd4\u8f83\u6280\u672f\u3002\u8fd9\u610f\u5473\u7740\u68c0\u67e5\u4e24\u4e2a\u4e0d\u540c\u5bf9\u8c61\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bb5\uff0c\u5e76\u67e5\u770b\u5bf9\u8c61\u7684\u4efb\u4f55\u5185\u5bb9\u662f\u5426\u5177\u6709\u4e0d\u540c\u7684\u503c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0cobj1.a=obj2.a&amp\uff1b&amp\uff1bobj1.b=obj2.b&amp\uff1b&amp\uff1b.\u3002\u8fd9\u901a\u5e38\u662f\u4e00\u4e2a\u5feb\u901f\u7684\u8fc7\u7a0b\uff0c\u56e0\u4e3a=\u6bd4\u8f83\u5bf9\u4e8eJS\u5f15\u64ce\u6765\u8bf4\u975e\u5e38\u7b80\u5355\u3002\u56e0\u6b64\uff0c\u8fd9\u4e09\u79cd\u65b9\u6cd5\u7b49\u540c\u4e8eConst shouldRender=\uff01shallowEquity(newProps\uff0cprevProps)\u3002\n\u8fd8\u6709\u4e00\u79cd\u4e0d\u592a\u4e3a\u4eba\u6240\u77e5\u7684\u6280\u672f\uff1a\u5982\u679cReaction\u7ec4\u4ef6\u5728\u5176\u5448\u73b0\u8f93\u51fa\u4e2d\u8fd4\u56de\u4e0e\u4e0a\u6b21\u5b8c\u5168\u76f8\u540c\u7684\u5143\u7d20\u5f15\u7528\uff0cReaction\u5c06\u8df3\u8fc7\u91cd\u65b0\u5448\u73b0\u8be5\u7279\u5b9a\u7684\u5b50\u7ea7\u3002\n\u5bf9\u4e8e\u6240\u6709\u8fd9\u4e9b\u6280\u672f\uff0c\u8df3\u8fc7\u5448\u73b0\u7ec4\u4ef6\u610f\u5473\u7740Reaction\u4e5f\u4f1a\u8df3\u8fc7\u5448\u73b0\u6574\u4e2a\u5b50\u6811\uff0c\u56e0\u4e3a\u5b83\u5b9e\u9645\u4e0a\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u505c\u6b62\u6807\u5fd7\u6765\u505c\u6b62\u9ed8\u8ba4\u7684\u5b50\u7ea7\u9012\u5f52\u6e32\u67d3\u5b50\u884c\u4e3a\u3002\n\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cReaction\u4f1a\u91cd\u65b0\u5448\u73b0\u6240\u6709\u5d4c\u5957\u7684\u7ec4\u4ef6\uff0c\u5373\u4f7f\u5b83\u4eec\u7684\u9053\u5177\u6ca1\u6709\u66f4\u6539\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u5c06\u65b0\u5f15\u7528\u4f5c\u4e3a\u9053\u5177\u4f20\u9012\u7ed9\u5b50\u7ec4\u4ef6\u5e76\u4e0d\u91cd\u8981\uff0c\u56e0\u4e3a\u65e0\u8bba\u60a8\u662f\u5426\u4f20\u9012\u76f8\u540c\u7684\u9053\u5177\uff0c\u5b83\u90fd\u4f1a\u5448\u73b0\u51fa\u6765\u3002\u6240\u4ee5\uff0c\u50cf\u8fd9\u6837\u7684\u4e8b\u60c5\u662f\u5b8c\u5168\u53ef\u4ee5\u7684\uff1a\n\u51fd\u6570ParentComponent(){const onclick=()=&gt\uff1b{console.log(&#34\uff1bButton click&#34\uff1b)}const data={a\uff1a1\uff0cb\uff1a2}return&lt\uff1bNormalChildComponclick={onclick}data={data}/&gt\uff1b}\u3002\n\u6bcf\u6b21\u5448\u73b0ParentComponent\u65f6\uff0c\u5b83\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684onClick\u51fd\u6570\u5f15\u7528\u548c\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u5bf9\u8c61\u5f15\u7528\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4f5c\u4e3a\u9053\u5177\u4f20\u9012\u7ed9NormalChildComponent\u3002(\u8bf7\u6ce8\u610f\uff0c\u65e0\u8bba\u6211\u4eec\u662f\u4f7f\u7528function\u5173\u952e\u5b57\u91cd\u65b0\u5b9a\u4e49onclick\u8fd8\u662f\u5c06\u5176\u5b9a\u4e49\u4e3a\u7bad\u5934\u51fd\u6570\uff0c\u8fd9\u90fd\u65e0\u5173\u7d27\u8981-\u65e0\u8bba\u54ea\u79cd\u65b9\u5f0f\uff0c\u5b83\u90fd\u662f\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u5f15\u7528\u3002)\u3002\n\u8fd9\u4e5f\u610f\u5473\u7740\uff0c\u8bd5\u56fe\u901a\u8fc7\u5c06\u4e3b\u673a\u7ec4\u4ef6(\u5982&lt\uff1bdiv&gt\uff1b\u6216&lt\uff1bbutton&gt\uff1b)\u5305\u88c5\u5728React.memo()\u4e2d\u6765\u4f18\u5316\u5b83\u4eec\u7684\u5448\u73b0\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\u5728\u8fd9\u4e9b\u57fa\u672c\u7ec4\u4ef6\u4e0b\u9762\u6ca1\u6709\u5b50\u7ec4\u4ef6\uff0c\u6240\u4ee5\u6e32\u67d3\u8fc7\u7a0b\u65e0\u8bba\u5982\u4f55\u90fd\u4f1a\u5728\u90a3\u91cc\u505c\u6b62\u3002\n\u4f46\u662f\uff0c\u5982\u679c\u5b50\u7ec4\u4ef6\u8bd5\u56fe\u901a\u8fc7\u68c0\u67e5\u9053\u5177\u662f\u5426\u5df2\u66f4\u6539\u6765\u4f18\u5316\u6e32\u67d3\uff0c\u5219\u5c06\u65b0\u5f15\u7528\u4f5c\u4e3a\u9053\u5177\u4f20\u9012\u5c06\u4f7f\u5b50\u7ec4\u4ef6\u6e32\u67d3\u3002\u5982\u679c\u65b0\u7684\u9053\u5177\u5f15\u7528\u5b9e\u9645\u4e0a\u662f\u65b0\u6570\u636e\uff0c\u8fd9\u5f88\u597d\u3002\u4f46\u662f\uff0c\u5982\u679c\u7236\u7ec4\u4ef6\u53ea\u662f\u5411\u4e0b\u4f20\u9012\u56de\u8c03\u51fd\u6570\u600e\u4e48\u529e\uff1f\nconst MemoizedChildComponent=React.memo(ChildComponent)\u51fd\u6570ParentComponent(){const onclick=()=&gt\uff1b{console.log(&#34\uff1bButton click&#34\uff1b)}const data={a\uff1a1\uff0cb\uff1a2}return&lt\uff1bMemoizedChildComponent onclick={onclick}data={data}/&gt\uff1b}\u3002\n\u73b0\u5728\uff0c\u6bcf\u6b21ParentComponent\u5448\u73b0\u65f6\uff0c\u8fd9\u4e9b\u65b0\u5f15\u7528\u5c06\u5bfc\u81f4MemoizedChildComponent\u770b\u5230\u5176\u9053\u5177\u503c\u5df2\u66f4\u6539\u4e3a\u65b0\u5f15\u7528\uff0c\u5e76\u4e14\u5b83\u5c06\u7ee7\u7eed\u5e76\u91cd\u65b0\u5448\u73b0.\u3002\u5c3d\u7ba1\u6bcf\u6b21onClick\u51fd\u6570\u548c\u6570\u636e\u5bf9\u8c61\u5e94\u8be5\u57fa\u672c\u4e0a\u662f\u76f8\u540c\u7684\uff01\nMemoizedChildComponent\u5c06\u59cb\u7ec8\u91cd\u65b0\u5448\u73b0\uff0c\u5373\u4f7f\u6211\u4eec\u60f3\u8981\u8df3\u8fc7\u5927\u90e8\u5206\u65f6\u95f4\u7684\u5448\u73b0\u3002\n\u5b83\u6240\u505a\u7684\u6bd4\u8f83\u65b0\u65e7\u9053\u5177\u7684\u5de5\u4f5c\u662f\u5f92\u52b3\u7684\u3002\n\u540c\u6837\uff0c\u8bf7\u6ce8\u610f\uff0c\u5448\u73b0&lt\uff1bMemoizedChild&&gt;&lt\uff1bOtherComponent/&gt\uff1b&lt\uff1b/MemoizedChild&&gt;\u4e5f\u4f1a\u5f3a\u5236\u5b50\u9879\u59cb\u7ec8\u5448\u73b0\uff0c\u56e0\u4e3apros.Children\u59cb\u7ec8\u662f\u65b0\u5f15\u7528\u3002\n\u7c7b\u7ec4\u4ef6\u4e0d\u5fc5\u62c5\u5fc3\u610f\u5916\u521b\u5efa\u65b0\u7684\u56de\u8c03\u51fd\u6570\u5f15\u7528\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u4ee5\u62e5\u6709\u603b\u662f\u76f8\u540c\u5f15\u7528\u7684\u5b9e\u4f8b\u65b9\u6cd5\u3002\u4f46\u662f\uff0c\u5b83\u4eec\u53ef\u80fd\u9700\u8981\u4e3a\u5355\u72ec\u7684\u5b50\u5217\u8868\u9879\u751f\u6210\u552f\u4e00\u7684\u56de\u8c03\uff0c\u6216\u8005\u6355\u83b7\u533f\u540d\u51fd\u6570\u4e2d\u7684\u503c\u5e76\u5c06\u5176\u4f20\u9012\u7ed9\u5b50\u51fd\u6570\u3002\u8fd9\u4e9b\u5c06\u4ea7\u751f\u65b0\u7684\u5f15\u7528\uff0c\u56e0\u6b64\u5728\u6e32\u67d3\u65f6\u5c06\u521b\u5efa\u65b0\u7684\u5bf9\u8c61\u4f5c\u4e3a\u5b50\u9053\u5177\u3002Reaction\u6ca1\u6709\u4efb\u4f55\u5185\u7f6e\u529f\u80fd\u6765\u5e2e\u52a9\u4f18\u5316\u8fd9\u4e9b\u6848\u4f8b\u3002\n\u5bf9\u4e8e\u51fd\u6570\u7ec4\u4ef6\uff0cReaction\u786e\u5b9e\u63d0\u4f9b\u4e86\u4e24\u4e2a\u94a9\u5b50\u6765\u5e2e\u52a9\u60a8\u91cd\u7528\u76f8\u540c\u7684\u5f15\u7528\uff1auseMemo\u7528\u4e8e\u4efb\u4f55\u7c7b\u578b\u7684\u5e38\u89c4\u6570\u636e\uff0c\u5982\u521b\u5efa\u5bf9\u8c61\u6216\u6267\u884c\u590d\u6742\u8ba1\u7b97\uff0c\u4ee5\u53causeCallback\u4e13\u95e8\u7528\u4e8e\u521b\u5efa\u56de\u8c03\u51fd\u6570\u3002\n\u5982\u4e0a\u6240\u8ff0\uff0c\u60a8\u4e0d\u5fc5\u5c06useMemo\u548cUse Callback\u629b\u7ed9\u60a8\u4f5c\u4e3a\u9053\u5177\u4f20\u9012\u4e0b\u6765\u7684\u6bcf\u4e2a\u5355\u72ec\u7684\u51fd\u6570\u6216\u5bf9\u8c61-\u53ea\u6709\u5f53\u5b83\u5c06\u5bf9\u5b69\u5b50\u7684\u884c\u4e3a\u4ea7\u751f\u5f71\u54cd\u65f6\u624d\u4f1a\u629b\u51fauseMemo\u548cUse Callback\u3002(\u4e5f\u5c31\u662f\u8bf4\uff0cuseEffect\u7684\u4f9d\u8d56\u9879\u6570\u7ec4\u6bd4\u8f83\u786e\u5b9e\u6dfb\u52a0\u4e86\u53e6\u4e00\u4e2a\u7528\u4f8b\uff0c\u5176\u4e2d\u5b50\u7ea7\u53ef\u80fd\u5e0c\u671b\u63a5\u6536\u4e00\u81f4\u7684\u9053\u5177\u5f15\u7528\uff0c\u8fd9\u786e\u5b9e\u4f1a\u4f7f\u4e8b\u60c5\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u3002)\u3002\n\u53e6\u4e00\u4e2a\u7ecf\u5e38\u51fa\u73b0\u7684\u95ee\u9898\u662f\uff0c\u4e3a\u4ec0\u4e48\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6ca1\u6709\u53cd\u5e94\u5c06\u6240\u6709\u5185\u5bb9\u5305\u88c5\u5728React.memo()\u4e2d\uff1f\n\u4e39\u00b7\u963f\u5e03\u62c9\u83ab\u592b\u66fe\u591a\u6b21\u6307\u51fa\uff0c\u56de\u5fc6\u5f55\u4ecd\u7136\u4f1a\u62db\u81f4\u6bd4\u8f83\u9053\u5177\u7684\u8d39\u7528\uff0c\u800c\u4e14\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u56de\u5fc6\u5f55\u68c0\u67e5\u6c38\u8fdc\u4e0d\u80fd\u963b\u6b62\u91cd\u65b0\u6e32\u67d3\uff0c\u56e0\u4e3a\u7ec4\u4ef6\u603b\u662f\u4f1a\u6536\u5230\u65b0\u7684\u9053\u5177\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u770b\u770b\u8fd9\u6761\u6765\u81ea\u4e39\u7684\u63a8\u7279\u5e16\u5b50\uff1a\n\u4e3a\u4ec0\u4e48\u9ed8\u8ba4\u60c5\u51b5\u4e0bReaction\u4e0d\u5c06memo()\u653e\u5728\u6bcf\u4e2a\u7ec4\u4ef6\u5468\u56f4\uff1f\u662f\u4e0d\u662f\u66f4\u5feb\u4e86\uff1f\u6211\u4eec\u662f\u5426\u5e94\u8be5\u5236\u5b9a\u4e00\u4e2a\u57fa\u51c6\u6765\u68c0\u67e5\uff1f\n\u4e3a\u4ec0\u4e48\u4e0d\u5728\u6bcf\u4e2a\u51fd\u6570\u5468\u56f4\u4f7f\u7528Lodash memoize()\u5462\uff1f\u90a3\u4e0d\u662f\u4f1a\u8ba9\u6240\u6709\u529f\u80fd\u90fd\u66f4\u5feb\u5417\uff1f\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u57fa\u51c6\u5417\uff1f\u4e3a\u4ec0\u4e48\u4e0d\u884c\uff1f\n\u6b64\u5916\uff0c\u867d\u7136\u6211\u6ca1\u6709\u5173\u4e8e\u5b83\u7684\u7279\u5b9a\u94fe\u63a5\uff0c\u4f46\u7531\u4e8e\u4eba\u4eec\u5728\u6539\u53d8\u6570\u636e\u800c\u4e0d\u662f\u4e00\u6210\u4e0d\u53d8\u5730\u66f4\u65b0\u6570\u636e\u7684\u60c5\u51b5\u4e0b\uff0c\u5c1d\u8bd5\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u5176\u5e94\u7528\u4e8e\u6240\u6709\u7ec4\u4ef6\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef\u3002\n\u6211\u5df2\u7ecf\u5728\u63a8\u7279\u4e0a\u4e0e\u4e39\u5c31\u6b64\u4e8b\u8fdb\u884c\u4e86\u4e00\u4e9b\u516c\u5f00\u8ba8\u8bba\u3002\u6211\u4e2a\u4eba\u8ba4\u4e3a\uff0c\u5728\u5e7f\u6cdb\u7684\u57fa\u7840\u4e0a\u4f7f\u7528React.memo()\u5f88\u53ef\u80fd\u4f1a\u5728\u6574\u4f53\u5e94\u7528\u7a0b\u5e8f\u6e32\u67d3\u6027\u80fd\u4e0a\u5e26\u6765\u51c0\u6536\u76ca\u3002\u6b63\u5982\u6211\u53bb\u5e74\u5728Twitter\u4e0a\u7684\u4e00\u7bc7\u957f\u7bc7\u5e16\u5b50\u4e2d\u6240\u8bf4\u7684\u90a3\u6837\uff1a\n\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\uff0cReaction\u793e\u533a\u4f3c\u4e4e\u8fc7\u4e8e\u75f4\u8ff7\u4e8ePerf&34\uff1bPerf&34\uff1b\uff0c\u7136\u800c\uff0c\u5927\u90e8\u5206\u8ba8\u8bba\u90fd\u662f\u56f4\u7ed5\u7740\u901a\u8fc7\u4e2d\u7b49\u5e16\u5b50\u548cTwitter\u8bc4\u8bba\u6d41\u4f20\u4e0b\u6765\u7684\u8fc7\u65f6\u7684\u90e8\u843d\u667a\u6167\uff0c\u800c\u4e0d\u662f\u57fa\u4e8e\u5177\u4f53\u7684\u4f7f\u7528\u60c5\u51b5\u3002\n\u5bf9\u4e8e\u6e32\u67d3\u7684\u6982\u5ff5\u548c\u6027\u80fd\u7684\u5f71\u54cd\uff0c\u80af\u5b9a\u6709\u96c6\u4f53\u7684\u8bef\u89e3\u3002\u662f\u7684\uff0cReaction\u5b8c\u5168\u57fa\u4e8e\u6e32\u67d3-\u5fc5\u987b\u6e32\u67d3\u624d\u80fd\u505a\u4efb\u4f55\u4e8b\u60c5\u3002\u4e0d\uff0c\u5927\u591a\u6570\u6e32\u67d3\u5e76\u4e0d\u592a\u8d35\u3002\n\u865a\u5ea6\u5149\u9634\u7684\u590d\u5236\u8005\u5f53\u7136\u4e0d\u662f\u4e16\u754c\u672b\u65e5\u3002\u4e5f\u4e0d\u662f\u4ece\u6839\u91cd\u65b0\u6e32\u67d3\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6d6a\u8d39\u6389\u7684\u6ca1\u6709DOM\u66f4\u65b0\u7684\u91cd\u65b0\u6e32\u67d3\u5668\u662f\u4e0d\u9700\u8981\u70e7\u6bc1\u7684CPU\u5468\u671f\uff0c\u8fd9\u4e5f\u662f\u4e8b\u5b9e\u3002\u8fd9\u5bf9\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\u662f\u4e2a\u95ee\u9898\u5417\uff1f\u5927\u6982\u4e0d\u4f1a\u5427\u3002\u6709\u6ca1\u6709\u53ef\u4ee5\u6539\u8fdb\u7684\u5730\u65b9\uff1f\u53ef\u80fd\u5427\u3002\n\u6709\u6ca1\u6709\u9ed8\u8ba4\u7684\u5168\u90e8\u91cd\u65b0\u5448\u73b0\u65b9\u6cd5\u4e0d\u591f\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\uff1f\u5f53\u7136\uff0c\u8fd9\u5c31\u662fSCU\u3001PureComponent\u548cmemo()\u5b58\u5728\u7684\u539f\u56e0\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u662f\u5426\u5e94\u8be5\u5c06\u6240\u6709\u5185\u5bb9\u90fd\u5305\u88c5\u5728memo()\u4e2d\uff1f\u53ef\u80fd\u4e0d\u4f1a\uff0c\u5982\u679c\u4ec5\u4ec5\u662f\u56e0\u4e3a\u4f60\u5e94\u8be5\u8003\u8651\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd\u9700\u6c42\u3002\u5982\u679c\u4f60\u8fd9\u6837\u505a\u7684\u8bdd\u771f\u7684\u4f1a\u75bc\u5417\uff1f\u4e0d\uff0c\u73b0\u5b9e\u5730\u8bf4\uff0c\u6211\u9884\u8ba1\u5b83\u786e\u5b9e\u6709\u51c0\u6536\u76ca(\u5c3d\u7ba1\u4e39\u5173\u4e8e\u6d6a\u8d39\u6bd4\u8f83\u7684\u89c2\u70b9)\u3002\n\u57fa\u51c6\u6d4b\u8bd5\u662f\u5426\u6709\u7f3a\u9677\uff0c\u7ed3\u679c\u662f\u5426\u56e0\u573a\u666f\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u4e0d\u540c\u800c\u6709\u5f88\u5927\u5dee\u5f02\uff1f\u5f53\u7136\u4e86\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4eba\u4eec\u53ef\u4ee5\u5f00\u59cb\u6307\u51fa\u8fd9\u4e9b\u8ba8\u8bba\u7684\u786c\u6570\u5b57\uff0c\u800c\u4e0d\u662f\u73a9\u7535\u8bdd\u6e38\u620f#34\uff1b\u6211\u6709\u4e00\u6b21\u770b\u5230\u4e00\u6761\u8bc4\u8bba.&#34\uff1b\u8fd9\u771f\u7684\u662f\u5f88\u6709\u5e2e\u52a9\u7684\u3002\n\u6211\u5e0c\u671b\u770b\u5230\u6765\u81eaReaction\u56e2\u961f\u548c\u66f4\u5927\u7684\u793e\u533a\u7684\u4e00\u5806\u57fa\u51c6\u6d4b\u8bd5\u5957\u4ef6\u6765\u8861\u91cf\u4e00\u7cfb\u5217\u573a\u666f\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u4e00\u52b3\u6c38\u9038\u5730\u505c\u6b62\u5bf9\u5927\u591a\u6570\u8fd9\u4e9b\u4e1c\u897f\u7684\u4e89\u8bba\u3002\u51fd\u6570\u521b\u5efa\u3001\u6e32\u67d3\u6210\u672c\u3001\u4f18\u5316.\u3002\u8bf7\u7ed9\u6211\u786e\u51ff\u7684\u8bc1\u636e\uff01\n\u4e39\u7684\u6807\u51c6\u7b54\u6848\u662f\uff0c\u5e94\u7528\u7a0b\u5e8f\u7684\u7ed3\u6784\u548c\u66f4\u65b0\u6a21\u5f0f\u5343\u5dee\u4e07\u522b\uff0c\u6240\u4ee5\u5f88\u96be\u505a\u51fa\u4e00\u4e2a\u6709\u4ee3\u8868\u6027\u7684\u57fa\u51c6\u3002\n\u8fd8\u6709\u4e00\u4e2a\u5173\u4e8e\u4ec0\u4e48\u65f6\u5019\u4e0d\u5e94\u8be5\u4f7f\u7528React.Memo\u7684\u6269\u5c55\u95ee\u9898\u8ba8\u8bba\uff1f\u5728\u53cd\u5e94\u95ee\u9898\u4e0a\u3002\n(\u662f\u7684\uff0c\u8fd9\u7bc7\u535a\u6587\u57fa\u672c\u4e0a\u662f\u90a3\u6761\u63a8\u6587\u7684\u5ef6\u8fdf\u5f88\u4e45\u3001\u6269\u5c55\u4e86\u5f88\u591a\u7684\u7248\u672c\uff0c\u5c3d\u7ba1\u6211\u5b9e\u9645\u4e0a\u628a\u6240\u6709\u8fd9\u4e9b\u90fd\u5fd8\u4e86\uff0c\u76f4\u5230\u6211\u521a\u521a\u5728\u7814\u7a76\u8fd9\u7bc7\u5e16\u5b50\u7684\u65f6\u5019\u5076\u7136\u53d1\u73b0\u4e86\u8fd9\u6761\u63a8\u6587\u3002)\u3002\n\u4f7f\u7528Reaction DevTools Profiler\u67e5\u770b\u6bcf\u4e2a\u63d0\u4ea4\u4e2d\u5448\u73b0\u7684\u7ec4\u4ef6\u3002\u627e\u5230\u610f\u5916\u5448\u73b0\u7684\u7ec4\u4ef6\uff0c\u4f7f\u7528DevTools\u627e\u51fa\u5b83\u4eec\u5448\u73b0\u7684\u539f\u56e0\uff0c\u7136\u540e\u4fee\u590d\u95ee\u9898(\u53ef\u80fd\u662f\u901a\u8fc7\u5c06\u5b83\u4eec\u5305\u88c5\u5728React.memo()\u4e2d\uff0c\u6216\u8005\u8ba9\u7236\u7ec4\u4ef6\u8bb0\u4e0b\u5b83\u4f20\u9012\u7684\u9053\u5177)\u3002\n\u53e6\u5916\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u5728dev\u6784\u5efa\u4e2d\uff0cReaction\u7684\u8fd0\u884c\u901f\u5ea6\u8981\u6162\u5f97\u591a\u3002\u60a8\u53ef\u4ee5\u5728\u5f00\u53d1\u6a21\u5f0f\u4e0b\u5206\u6790\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ee5\u4e86\u89e3\u54ea\u4e9b\u7ec4\u4ef6\u6b63\u5728\u5448\u73b0\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u5448\u73b0\uff0c\u5e76\u5c06\u5448\u73b0\u7ec4\u4ef6\u6240\u9700\u7684\u76f8\u5bf9\u65f6\u95f4\u4e0e\u5176\u4ed6\u7ec4\u4ef6\u8fdb\u884c\u6bd4\u8f83(\u7ec4\u4ef6B\u5728\u6b64\u63d0\u4ea4\u4e2d\u5448\u73b0\u6240\u9700\u7684\u65f6\u95f4\u662f\u7ec4\u4ef6A\u76843\u500d)\u3002\u4f46\u662f\uff0c\u5343\u4e07\u4e0d\u8981\u4f7f\u7528Reaction\u5f00\u53d1\u6784\u5efa-Only\u5ea6\u91cf\u7edd\u5bf9\u5448\u73b0\u65f6\u95f4\uff0c\u800c\u4f7f\u7528\u751f\u4ea7\u6784\u5efa\u6765\u5ea6\u91cf\u7edd\u5bf9\u5448\u73b0\u65f6\u95f4\uff01(\u5426\u5219\u4e39\u00b7\u963f\u5e03\u62c9\u83ab\u592b\u5c06\u4e0d\u5f97\u4e0d\u56e0\u4e3a\u4f60\u4f7f\u7528\u7684\u6570\u5b57\u4e0d\u51c6\u786e\u800c\u5bf9\u4f60\u5927\u558a\u5927\u53eb)\u3002\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u60a8\u5e0c\u671b\u5b9e\u9645\u4f7f\u7528\u63a2\u67e5\u5668\u4ece\u7c7b\u4f3cProd\u7684\u6784\u5efa\u6355\u83b7\u8ba1\u65f6\u6570\u636e\uff0c\u5219\u9700\u8981\u4f7f\u7528React\u7684\u7279\u6b8a\u5206\u6790\u6784\u5efa\u3002\nReact\u7684\u4e0a\u4e0b\u6587API\u662f\u4e00\u79cd\u673a\u5236\uff0c\u7528\u4e8e\u4f7f\u5355\u4e2a\u7528\u6237\u63d0\u4f9b\u7684\u503c\u53ef\u7528\u4e8e\u7ec4\u4ef6\u7684\u5b50\u6811\uff0c\u7ed9\u5b9a&lt\uff1bMyContext.Provider&&gt;\u5185\u7684\u4efb\u4f55\u7ec4\u4ef6\u90fd\u53ef\u4ee5\u4ece\u8be5\u4e0a\u4e0b\u6587\u5b9e\u4f8b\u4e2d\u8bfb\u53d6\u503c\uff0c\u800c\u4e0d\u5fc5\u663e\u5f0f\u5730\u5c06\u8be5\u503c\u4f5c\u4e3a\u9053\u5177\u4f20\u9012\u7ed9\u6bcf\u4e2a\u4e2d\u95f4\u7684\u7ec4\u4ef6\u3002(=&gt;\u3002\n\u4e0a\u4e0b\u6587\u4e0d\u662f\u72b6\u6001\u7ba1\u7406\u5de5\u5177\u3002\u60a8\u5fc5\u987b\u81ea\u5df1\u7ba1\u7406\u4f20\u9012\u5230\u4e0a\u4e0b\u6587\u4e2d\u7684\u503c\u3002\u8fd9\u901a\u5e38\u662f\u901a\u8fc7\u5c06\u6570\u636e\u4fdd\u6301\u5728\u53cd\u5e94\u7ec4\u4ef6\u72b6\u6001\uff0c\u5e76\u57fa\u4e8e\u8be5\u6570\u636e\u6784\u9020\u4e0a\u4e0b\u6587\u503c\u6765\u5b9e\u73b0\u7684\u3002\n\u4e0a\u4e0b\u6587\u63d0\u4f9b\u7a0b\u5e8f\u63a5\u6536\u5355\u4e2a\u503c\u5c5e\u6027\uff0c\u5982&lt\uff1bMyContext.Provider value={42}&gt\uff1b\u3002\u5b50\u7ec4\u4ef6\u53ef\u4ee5\u901a\u8fc7\u5448\u73b0\u4e0a\u4e0b\u6587\u6d88\u8d39\u8005\u7ec4\u4ef6\u5e76\u63d0\u4f9b\u5448\u73b0\u9053\u5177\u6765\u6d88\u8d39\u4e0a\u4e0b\u6587\uff0c\u4f8b\u5982\uff1a\nReaction\u68c0\u67e5\u4e0a\u4e0b\u6587\u63d0\u4f9b\u7a0b\u5e8f\u5728\u5468\u56f4\u7ec4\u4ef6\u5448\u73b0\u8be5\u63d0\u4f9b\u7a0b\u5e8f\u65f6\u662f\u5426\u5df2\u88ab\u8d4b\u4e88\u65b0\u503c\u3002\u5982\u679c\u63d0\u4f9b\u7a0b\u5e8f\u7684\u503c\u662f\u4e00\u4e2a\u65b0\u7684\u5f15\u7528\uff0c\u90a3\u4e48Reaction\u77e5\u9053\u8be5\u503c\u5df2\u7ecf\u66f4\u6539\uff0c\u5e76\u4e14\u9700\u8981\u66f4\u65b0\u4f7f\u7528\u8be5\u4e0a\u4e0b\u6587\u7684\u7ec4\u4ef6\u3002\n\u8bf7\u6ce8\u610f\uff0c\u5c06\u65b0\u5bf9\u8c61\u4f20\u9012\u7ed9\u4e0a\u4e0b\u6587\u63d0\u4f9b\u7a0b\u5e8f\u5c06\u5bfc\u81f4\u5176\u66f4\u65b0\uff1a\n\u51fd\u6570GrandChild Component(){constvalue=useContext(MyContext)\uff1breturn&lt\uff1bdiv&gt\uff1b{value.A}&lt\uff1b/div&gt\uff1b}\u51fd\u6570ChildComponent(){return&lt\uff1bGrandChild Component/&gt\uff1b}\u51fd\u6570ParentComponent(){const[a\uff0cseta]=useState(0)\uff1bconst[b\uff0csetB]=useState(&#34\uff1btext&#\u3002/MyContext.Provider&gt\uff1b)}\u3002\n\u5728\u672c\u4f8b\u4e2d\uff0c\u6bcf\u6b21\u5448\u73b0ParentComponent\u65f6\uff0cReaction\u90fd\u4f1a\u6ce8\u610f\u5230MyContext.Provider\u5df2\u88ab\u8d4b\u4e88\u65b0\u503c\uff0c\u5e76\u5728MyContext\u7ee7\u7eed\u5411\u4e0b\u5faa\u73af\u65f6\u67e5\u627e\u4f7f\u7528MyContext\u7684\u7ec4\u4ef6\u3002\u5f53\u4e0a\u4e0b\u6587\u63d0\u4f9b\u7a0b\u5e8f\u5177\u6709\u65b0\u503c\u65f6\uff0c\u6bcf\u4e2a\u4f7f\u7528\u8be5\u4e0a\u4e0b\u6587\u7684\u5d4c\u5957\u7ec4\u4ef6\u90fd\u5c06\u88ab\u5f3a\u5236\u91cd\u65b0\u5448\u73b0\u3002\n\u8bf7\u6ce8\u610f\uff0c\u4eceReact\u89d2\u5ea6\u6765\u770b\uff0c\u6bcf\u4e2a\u4e0a\u4e0b\u6587\u63d0\u4f9b\u7a0b\u5e8f\u53ea\u6709\u4e00\u4e2a\u503c-\u65e0\u8bba\u662f\u5bf9\u8c61\u3001\u6570\u7ec4\u8fd8\u662f\u57fa\u5143\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u4e0a\u4e0b\u6587\u503c\u3002\u76ee\u524d\uff0c\u4f7f\u7528\u4e0a\u4e0b\u6587\u7684\u7ec4\u4ef6\u65e0\u6cd5\u8df3\u8fc7\u7531\u65b0\u4e0a\u4e0b\u6587\u503c\u5f15\u8d77\u7684\u66f4\u65b0\uff0c\u5373\u4f7f\u5b83\u53ea\u5173\u5fc3\u65b0\u503c\u7684\u4e00\u90e8\u5206\u3002\n\u8fd9\u610f\u5473\u7740\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5448\u73b0\u4e0a\u4e0b\u6587\u63d0\u4f9b\u7a0b\u5e8f\u7684\u7236\u7ec4\u4ef6\u7684\u4efb\u4f55\u72b6\u6001\u66f4\u65b0\u90fd\u5c06\u5bfc\u81f4\u5176\u6240\u6709\u540e\u4ee3\u91cd\u65b0\u5448\u73b0\uff0c\u800c\u4e0d\u7ba1\u5b83\u4eec\u662f\u5426\u8bfb\u53d6\u4e0a\u4e0b\u6587\u503c\uff01\n\u5982\u679c\u6211\u4eec\u56de\u987e\u4e0a\u9762\u7684\u7236/\u5b50/\u5b59\u793a\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230GrandChild Component\u5c06\u91cd\u65b0\u5448\u73b0\uff0c\u4f46\u4e0d\u662f\u56e0\u4e3a\u4e0a\u4e0b\u6587\u66f4\u65b0-\u5b83\u5c06\u91cd\u65b0\u5448\u73b0\uff0c\u56e0\u4e3aChildComponent\u5448\u73b0\u4e86\uff01\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\u8bd5\u56fe\u4f18\u5316\u4ee5\u6d88\u9664\u4e0d\u5fc5\u8981\u7684\u5448\u73b0\uff0c\u56e0\u6b64Reaction\u5728\u4efb\u4f55\u65f6\u5019ParentComponent\u5448\u73b0\u65f6\u90fd\u9ed8\u8ba4\u5448\u73b0ChildComponent\u548cGrandChild Component\u3002\u5982\u679c\u7236\u7ea7\u5c06n\u3002\n..", "note_en": "My &#34;Practical Redux&#34; tutorial series is now    an interactive course on Educative.io! \r\t\t\tCheck out  the course announcement post for more details.\n    Details on how React rendering behaves, and how use of Context and React-Redux affect rendering\n  I&#39;ve seen a lot of ongoing confusion over when, why, and how React will re-render components, and how use of Context and React-Redux will affect the timing and scope of those re-renders. After having typed up variations of this explanation dozens of times, it seems it&#39;s worth trying to write up a consolidated explanation that I can refer people to. Note that all this information is available online already, and has been explained in numerous other excellent blog posts and articles, several of which I&#39;m linking at the end in the  &#34;Further Information&#34; section for reference. But, people seem to be struggling to put the pieces together for a full understanding, so hopefully this will help clarify things for someone.\n    Rendering is the process of React asking your components to describe what they want their section of the UI to look like, now, based on the current combination of props and state.\n  During the rendering process, React will start at the root of the component tree and loop downwards to find all components that have been flagged as needing updates. For each flagged component, React will call either  classComponentInstance.render() (for class components) or  FunctionComponent() (for function components), and save the render output.\n A component&#39;s render output is normally written in JSX syntax, which is then converted to  React.createElement() calls as the JS is compiled and prepared for deployment.  createElement returns React  elements, which are plain JS objects that describe the intended structure of the UI. Example:\n // This JSX syntax:return &lt;SomeComponent a={42} b=&#34;testing&#34;&gt;Text here&lt;/SomeComponent&gt;// is converted to this call:return React.createElement(SomeComponent, {a: 42, b: &#34;testing&#34;}, &#34;Text Here&#34;)// and that becomes this element object:{type: SomeComponent, props: {a: 42, b: &#34;testing&#34;}, children: [&#34;Text Here&#34;]}\n After it has collected the render output from the entire component tree, React will diff the new tree of objects (frequently referred to as the &#34;virtual DOM&#34;), and collects a list of all the changes that need to be applied to make the real DOM look like the current desired output. The diffing and calculation process is known as  &#34;reconciliation&#34;.\n     After React has updated the DOM in the commit phase, it then synchronously runs the  componentDidMount and  componentDidUpdate class lifecycle methods, and the  useLayoutEffect hooks.\n React then sets a short timeout, and when it expires, runs all the  useEffect hooks.\n You can see a visualization of the class lifecycle methods in  this excellent React lifecycle methods diagram. (It does not currently show the timing of effect hooks, which is something I&#39;d like to see added.)\n In  React&#39;s upcoming &#34;Concurrent Mode&#34;, it is able to pause the work in the rendering phase to allow the browser to process events. React will either resume, throw away, or recalculate that work later as appropriate. Once the render pass has been completed, React will still run the commit phase synchronously in one step.\n A key part of this to understand is that  &#34;rendering&#34; is not the same thing as &#34;updating the DOM&#34;, and a component may be rendered without any visible changes happening as a result. When React renders a component:\n The component might return the same render output as last time, so no changes are needed\n In Concurrent Mode, React might end up rendering a component multiple times, but throw away the render output each time if other updates invalidate the current work being done\n   After the initial render has completed, there are a few different ways to tell React to queue a re-render:\n    React&#39;s default behavior is that when a parent component renders, React will recursively render  all child components inside of it!\n As an example, say we have a component tree of  A &gt; B &gt; C &gt; D, and we&#39;ve already shown them on the page. The user clicks a button in  B that increments a counter:\n React sees that  A is not marked as needing an update, and moves past it\n React sees that  B is marked as needing an update, and renders it.  B returns  &lt;C /&gt; as it did last time.\n C was  not originally marked as needing an update. However, because its parent  B rendered, React now moves downwards and renders  C as well. C returns  &lt;D /&gt; again.\n D was also not marked for rendering, but since its parent  C rendered, React moves downwaard and renders  D too.\n  Rendering a component will, by default, cause  all components inside of it to be rendered too!\n  In normal rendering, React does  not care whether &#34;props changed&#34; - it will render child components unconditionally just because the parent rendered!\n This means that calling  setState() in your root  &lt;App&gt; component, with no other changes altering the behavior,  will cause React to re-render every single component in the component tree. After all, one of the original sales pitches for React was  &#34;act like we&#39;re redrawing the entire app on every update&#34;.\n Now, it&#39;s very likely that most of the components in the tree will return the exact same render output as last time, and therefore React won&#39;t need to make any changes to the DOM.  But, React will still have to do the work of asking components to render themselves and diffing the render output. Both of those take time and effort.\n Remember,  rendering is not a  bad thing - it&#39;s how React knows whether it needs to actually make any changes to the DOM!\n  Having said that, it&#39;s also true that that render work can be &#34;wasted&#34; effort at times. If a component&#39;s render output didn&#39;t change, and that part of the DOM didn&#39;t need to be updated, then the work of rendering that component was really kind of a waste of time.\n React component render output  should always be entirely based on current props and current component state. Therefore, if we  know ahead of time that a component&#39;s props and state haven&#39;t changed, we  should also know that the render output would be the same, that no changes are necessary for this component, and that we can safely skip the work of rendering it.\n When trying to improve software performance in general, there are two basic approaches: 1) do the same work faster, and 2) do less work. Optimizing React rendering is primarily about doing less work by skipping rendering components when appropriate.\n   React.Component.shouldComponentUpdate: an optional class component lifecycle method that will be called early in the render process. If it returns  false, React will skip rendering the component. It may contain any logic you want to use to calculate that boolean result, but the most common approach is to check if the component&#39;s props and state have changed since last time, and return  false if they&#39;re unchanged.\n React.PureComponent: since that comparison of props and state is the most common way to implement  shouldComponentUpdate, the  PureComponent base class implements that behavior by default, and may be used instead of  Component +  shouldComponentUpdate.\n React.memo(): a built-in  &#34;higher order component&#34; type. It accepts your own component type as an argument, and returns a new wrapper component. The wrapper component&#39;s default behavior is to check to see if any of the props have changed, and if not, prevent a re-render. Both function components and class components can be wrapped using  React.memo(). (A custom comparison callback may be passed in, but it really can only compare the old and new props anyway, so the main use case for a custom compare callback would be only comparing specific props fields instead of all of them.)\n All of these approaches use a comparison technique called  &#34;shallow equality&#34;. This means checking every individual field in two different objects, and seeing if any of the  contents of the objects are a different value. In other words,  obj1.a === obj2.a &amp;&amp; obj1.b === obj2.b &amp;&amp; ......... This is typically a fast process, because  === comparisons are very simple for the JS engine to do. So, these three approaches do the equivalent of  const shouldRender = !shallowEqual(newProps, prevProps).\n There&#39;s also a lesser-known technique as well: if a React component returns the exact same element reference in its render output as it did the last time, React will skip re-rendering that particular child.\n For all of these techniques, skipping rendering a component means React will also skip rendering that entire subtree, because it&#39;s effectively putting a stop sign up to halt the default &#34;render children recursively&#34; behavior.\n  We&#39;ve already seen that  by default, React re-renders all nested components even if their props haven&#39;t changed. That also means that passing new references as props to a child component doesn&#39;t matter, because it will render whether or not you pass the same props. So, something like this is totally fine:\n function ParentComponent() { const onClick = () =&gt; { console.log(&#34;Button clicked&#34;) } const data = {a: 1, b: 2} return &lt;NormalChildComponent onClick={onClick} data={data} /&gt;}\n Every time  ParentComponent renders, it will create a new  onClick function reference and a new  data object reference, then pass them as props to  NormalChildComponent. (Note that it doesn&#39;t matter whether we&#39;re defining  onClick using the  function keyword or as an arrow function - it&#39;s a new function reference either way.)\n That also means there&#39;s no point in trying to optimize renders for &#34;host components&#34;, like a  &lt;div&gt; or a  &lt;button&gt;, by wrapping them up in a  React.memo(). There&#39;s no child component underneath those basic components, so the rendering process would stop there anyway.\n However,   if the child component is trying to optimize renders by checking to see whether props have changed,  then passing new references as props will cause the child to render. If the new prop references are actually new data, this is good. However, what if the parent component is just passing down a callback function?\n const MemoizedChildComponent = React.memo(ChildComponent)function ParentComponent() { const onClick = () =&gt; { console.log(&#34;Button clicked&#34;) } const data = {a: 1, b: 2} return &lt;MemoizedChildComponent onClick={onClick} data={data} /&gt;}\n Now, every time  ParentComponent renders, these new references are going to cause  MemoizedChildComponent to see that its props values have changed to new references, and it will go ahead and re-render... even though the  onClick function and the  data object  should be basically the same thing every time!\n  MemoizedChildComponent will always re-render even though we wanted to skip rendering most of the time\n The work that it&#39;s doing to compare its old and new props is wasted effort\n Similarly, note that rendering  &lt;MemoizedChild&gt;&lt;OtherComponent /&gt;&lt;/MemoizedChild&gt; will  also force the child to always render, because  props.children is always a new reference.\n  Class components don&#39;t have to worry about accidentally creating new callback function references as much, because they can have instance methods that are always the same reference. However, they may need to generate unique callbacks for separate child list items, or capture a value in an anonymous function and pass that to a child. Those will result in new references, and so will creating new objects as child props while rendering. React doesn&#39;t have anything built-in to help optimize those cases.\n For function components, React does provide two hooks to help you reuse the same references:  useMemo for any kind of general data like creating objects or doing complex calculations, and  useCallback specifically for creating callback functions.\n  As mentioned above, you don&#39;t have throw  useMemo and  useCallback at every single function or object you pass down as a prop - only if it&#39;s going to make a difference in behavior for the child. (That said, the dependency array comparisons for  useEffect  do add another use case where the child might want to receive consistent props references, which does make things more complicated.)\n The other question that comes up all the time is &#34;Why doesn&#39;t React wrap  everything in  React.memo() by default?&#34;.\n Dan Abramov has  repeatedly pointed out that memoization  does still incur the cost of comparing props, and that there are many cases where the memoization check can never prevent re-renders because the component always receives new props. As an example,  see this Twitter thread from Dan:\n Why doesn\u2019t React put memo() around every component by default? Isn\u2019t it faster? Should we make a benchmark to check?\n  Why don\u2019t you put Lodash memoize() around every function? Wouldn\u2019t that make all functions faster? Do we need a benchmark for this? Why not?\n Also, while I don&#39;t have a specific link on it, it&#39;s possible that trying to apply this to all components by default might result in bugs due to cases where people are mutating data rather than updating it immutably.\n I&#39;ve had some public discussion with Dan about this on Twitter. I personally think it&#39;s likely that using  React.memo() on a widespread basis would likely be a net gain in overall app rendering perf. As I said in  an extended Twitter thread last year:\n The React community as a whole seems to be over obsessed with &#34;perf&#34;, yet much of the discussion revolves around outdated &#34;tribal wisdom&#34; passed down via Medium posts and Twitter comments rather than based on concrete usage.\n There&#39;s definitely collective misunderstanding about the idea of a &#34;render&#34; and the perf impact. Yes, React is totally based around rendering - gotta render to do anything at all. No, most renders aren&#39;t overly expensive.\n &#34;Wasted&#34; rerenders certainly aren&#39;t the end of the world. Neither is rerendering the whole app from the root.That said, it&#39;s also true that a &#34;wasted&#34; rerender with no DOM update is CPU cycles that didn&#39;t need to be burned. Is that a problem for most apps? Probably not. Is it something that can be improved? Probably.\n Are there apps where default &#34;rerender it all&#34; approaches aren&#39;t sufficient? Of course, that&#39;s why sCU, PureComponent, and memo() exist.\n Should users wrap  everything in memo() by default? Probably not, if only because you should  think about your app&#39;s perf needs. Will it actually hurt if you do? No, and realistically I expect it does have a net benefit (despite Dan&#39;s points about wasted comparisons)\n Are benchmarks flawed, and results highly variable based on scenarios and apps? Of course. That said, it would be REALLY REALLY HELPFUL if folks could start pointing at hard numbers for these discussions instead of playing the telephone game of &#34;I saw a comment once...&#34;\n I&#39;d love to see a bunch of benchmark suites from the React team and the larger community to measure a bunch of scenarios so we could stop arguing about most of this stuff once and for all. Function creation, render cost, optimization... CONCRETE EVIDENCE, PLEASE!\n  Dan&#39;s standard answer is that app structure and update patterns vary drastically, so it&#39;s hard to make a representative benchmark.\n There&#39;s also an extended issue discussion on  &#34;When should you NOT use React.memo? in the React issues.\n (And yes, this blog post is basically a long-delayed and much-expanded version of that tweet thread, although I&#39;d actually forgotten I&#39;d tweeted all that until I ran across it just now while researching the post.)\n  Use the  React DevTools Profiler to see what components are rendering in each commit. Find components that are rendering unexpectedly, use the DevTools to figure out  why they rendered, and fix things (perhaps by wrapping them in  React.memo(), or having the parent component memoize the props it&#39;s passing down.)\n Also, remember that React runs way slower in dev builds. You can profile your app in development mode to see  which components are rendering and why, and do some comparisons of  relative time needed to render components in comparison to each other (&#34;Component B took 3 times as long to render in this commit than component A&#34; did). But,  never measure absolute render times using a React development build - only measure absolute times using production builds! (or else Dan Abramov will have to come yell at you for using numbers that aren&#39;t accurate). Note that you&#39;ll need to use  a special &#34;profiling&#34; build of React if you want to actually use the profiler to capture timing data from a prod-like build.\n  React&#39;s Context API is a mechanism for making a single user-provided value available to a subtree of components, Any component inside of a given  &lt;MyContext.Provider&gt; can read the value from that context instance, without having to explicitly pass that value as a prop through every intervening component.\n Context is not a &#34;state management&#34; tool. You have to manage the values that are passed into context yourself. This is typically done by keeping data in React component state, and constructing context values based on that data.\n  A context provider receives a single  value prop, like  &lt;MyContext.Provider value={42}&gt;. Child components may consume the context by rendering the context consumer component and providing a render prop, like:\n     React checks to see if a context provider has been given a new value when the surrounding component renders the provider. If the provider&#39;s value is a new reference, then React knows the value has changed, and that the components consuming that context need to be updated.\n Note that  passing a new object to a context provider  will cause it to update:\n function GrandchildComponent() { const value = useContext(MyContext); return &lt;div&gt;{value.a}&lt;/div&gt;}function ChildComponent() { return &lt;GrandchildComponent /&gt;}function ParentComponent() { const [a, setA] = useState(0); const [b, setB] = useState(&#34;text&#34;); const contextValue = {a, b}; return ( &lt;MyContext.Provider value={contextValue}&gt; &lt;ChildComponent /&gt; &lt;/MyContext.Provider&gt; )}\n In this example, every time  ParentComponent renders, React will take note that  MyContext.Provider has been given a new value, and look for components that consume  MyContext as it continues looping downwards.  When a context provider has a new value,  every nested component that consumes that context will be forced to re-render.\n Note that from React&#39;s perspective, each context provider only has a single value - doesn&#39;t matter whether that&#39;s an object, array, or a primitive, it&#39;s just one context value. Currently,  there is no way for a component that consumes a context to skip updates caused by new context values, even if it only cares about  part of a new value.\n    This means that  by default, any state update to a parent component that renders a context provider will cause all of its descendants to re-render anyway, regardless of whether they read the context value or not!.\n If we look back at the  Parent/Child/Grandchild example just above, we can see that  the  GrandchildComponent  will re-render, but not because of a context update - it will re-render because  ChildComponent rendered!. In this example, there&#39;s nothing trying to optimize away &#34;unnecessary&#34; renders, so React renders  ChildComponent and  GrandchildComponent by default any time  ParentComponent renders. If the parent puts a n\n......", "posttime": "2020-05-17 08:15:49", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u884c\u4e3a,guide,\u7ec4\u4ef6", "title": "(\u5927\u90e8\u5206)\u5b8c\u6574\u7684\u6e32\u67d3\u884c\u4e3a\u53cd\u5e94\u6307\u5357", "title_en": "A (Mostly) Complete Guide to React Rendering Behavior", "transed": 1, "url": "https://blog.isquaredsoftware.com/2020/05/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior/", "via": "", "real_tags": ["\u884c\u4e3a", "guide", "\u7ec4\u4ef6"]}, {"category": "", "categoryclass": "", "imagename": "09c794038f3094a47aca6f14b982f3e2.jpg", "infoid": 1002471, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u516c\u5e73\u5e02\u573a\u7b2c\u4e8c\u6b21\u5c1d\u8bd5\u7834\u4ea7\u7684\u6d88\u606f\uff0c\u8fd9\u4e00\u6b21\u5a01\u80c1\u8bf4\uff0c\u5546\u5e97\u53ef\u80fd\u4f1a\u88ab\u6e05\u7b97\uff0c\u4ee5\u507f\u8fd8\u7b3c\u7f69\u5728\u8fd9\u5bb6\u98df\u54c1\u6742\u8d27\u8fde\u9501\u5e97\u7684\u4e0d\u53ef\u6301\u7eed\u7684\u503a\u52a1\uff0c\u8fd9\u8ba9\u5b83\u7684\u66fc\u54c8\u987f\u5fe0\u5b9e\u987e\u5ba2\u519b\u56e2\u611f\u5230\u6cae\u4e27\u3002Floway\u5728\u7ebd\u7ea6\u5e02\u7684\u5546\u5e97\u5438\u5f15\u4e86\u4e0d\u62d8\u4e00\u683c\u7684\u8d2d\u7269\u8005\uff1a\u4ece\u7ebd\u7ea6\u5e02\u7acb\u5927\u5b66\u5230\u54e5\u4f26\u6bd4\u4e9a\u5927\u5b66\u7684\u5f53\u5730\u5c45\u6c11\u3001\u6559\u6388\u548c\u5b66\u751f\uff0c\u4ee5\u53ca\u5176\u4ed6\u5bfb\u6c42\u5176\u65b0\u9c9c\u51fa\u7089\u7684\u9762\u5305\u3001\u4e0d\u540c\u5bfb\u5e38\u7684\u5976\u916a\u548c\u79cd\u7c7b\u7e41\u591a\u7684\u56fd\u9645\u98df\u54c1\u7684\u4eba\u3002\u9ad8\u6863\u548c\u72ec\u7279\uff0c\u5176\u5351\u5fae\u7684\u6839\u57fa\u4ecd\u7136\u660e\u663e\uff0cFairal\u662f\u8fd9\u4e2a\u57ce\u5e02\u7684\u8c61\u5f81\uff0c\u5728\u90a3\u91cc\u5b83\u5df2\u7ecf\u6210\u4e3a\u4e00\u4e2a\u5177\u6709\u4f20\u5947\u8272\u5f69\u7684\u673a\u6784\u3002\u4f46\u662f\uff0c\u81f4\u547d\u7684\u662f\uff0c\u5b83\u4e5f\u8c61\u5f81\u7740\u79c1\u52df\u80a1\u6743\u6295\u8d44\u8005-\u5305\u62ec\u6cd5\u822a\u7684\u524d\u6240\u6709\u8005\u65af\u7279\u6797\u6295\u8d44\u4f19\u4f34\u516c\u53f8(Sterling Investment Partners)-\u52a0\u901f\u4e86\u9677\u5165\u6240\u8c13\u96f6\u552e\u672b\u65e5\u7684\u5b9e\u4f53\u5e97\u7684\u5012\u95ed\u3002\n\u8fd9\u4e2a\u6545\u4e8b\u662f\u8033\u719f\u80fd\u8be6\u7684\uff0c\u5373\u4f7f\u5bf9\u4e8e\u8ddd\u79bb\u6700\u8fd1\u7684\u6cd5\u4f0a\u5c14\u6570\u767e\u82f1\u91cc\u7684\u8d2d\u7269\u8005\u6765\u8bf4\u4e5f\u662f\u5982\u6b64\u3002\u5927\u591a\u6570\u6d88\u8d39\u8005\u90fd\u770b\u5230\u8fc7\u4ed6\u4eec\u6700\u559c\u6b22\u7684\u8fde\u9501\u5e97--\u73a9\u5177\u53cd\u6597\u57ce(Toys\u201cR\u201dUs)\u3001Shopko\u3001Claire\u2018s\u3001Payless ShoeSource\u3001Nine West\u3001\u91d1\u5b9d\u8d1d(Gymboree)\u3001\u53f2\u6cf0\u535a(Staples)\u548cA&P\u7b49\u7b49--\u9762\u4e34\u8d22\u52a1\u56f0\u5883\uff0c\u5173\u95ed\u4e86\u90e8\u5206\u6216\u5168\u90e8\u95e8\u5e97\u3002\u4e0e\u516c\u5e73\u822a\u7a7a\u4e00\u6837\uff0c\u8fd9\u4e9b\u4e1a\u52a1\u4e5f\u7531\u79c1\u52df\u80a1\u6743\u516c\u53f8\u6240\u6709\uff0c\u8fd9\u662f\u4e00\u79cd\u6295\u8d44\u8005\u4e70\u5165\u3001\u5f7b\u5e95\u6539\u9769\u7136\u540e\u51fa\u552e\u516c\u53f8\u7684\u878d\u8d44\u5f62\u5f0f\u3002\u4e0e\u516c\u5e73\u822a\u7a7a\u4e00\u6837\uff0c\u5176\u4ed6\u96f6\u552e\u8fde\u9501\u5e97\u5728\u88ab\u6536\u8d2d\u65f6\u4e5f\u662f\u76c8\u5229\u7684\u3002\u5728\u8fd9\u4e9b\u6536\u8d2d\u4e4b\u524d\uff0c\u8fd9\u4e9b\u4f01\u4e1a\u7684\u503a\u52a1\u6c34\u5e73\u8f83\u4f4e\uff0c\u5e76\u62e5\u6709\u623f\u5730\u4ea7-\u5bf9\u4e8e\u7a81\u7136\u9762\u4e34\u66f4\u591a\u7ade\u4e89\u6216\u51fa\u73b0\u5e7f\u6cdb\u53d8\u5316\u7684\u884c\u4e1a\u6765\u8bf4\uff0c\u8fd9\u662f\u5fc5\u8981\u7684\u9884\u9632\u63aa\u65bd\u3002\n\u5927\u591a\u6570\u516c\u53f8\u90fd\u6253\u7b97\u957f\u671f\u7ecf\u8425\uff0c\u90a3\u4e9b\u5728\u5546\u4e1a\u5468\u671f\u4e2d\u98ce\u9669\u655e\u53e3\u6700\u5927\u7684\u884c\u4e1a\u7684\u4eba\u77e5\u9053\uff0c\u4f4e\u8d1f\u503a\u548c\u514d\u79df\u91d1\u662f\u5ea6\u8fc7\u8270\u96be\u65f6\u671f\u5e76\u5728\u666f\u6c14\u56de\u5347\u65f6\u5b9e\u73b0\u7e41\u8363\u7684\u5173\u952e\u3002\u5bf9\u4e8e\u79c1\u52df\u80a1\u6743\u6240\u6709\u8005\u6765\u8bf4\uff0c\u52a8\u673a\u975e\u5e38\u4e0d\u540c\uff0c\u4ed6\u4eec\u5728\u8f83\u77ed\u7684\u65f6\u95f4\u6846\u67b6\u5185\u8fd0\u8425\uff0c\u901a\u5e38\u53ea\u6709\u4e09\u5230\u4e94\u5e74\uff0c\u7136\u540e\u624d\u4f1a\u79bb\u5f00\u3002\u5bf9\u4ed6\u4eec\u6765\u8bf4\uff0c\u4f4e\u6c34\u5e73\u7684\u503a\u52a1\u548c\u9ad8\u6c34\u5e73\u7684\u623f\u5730\u4ea7\u6240\u6709\u6743\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5feb\u901f\u81f4\u5bcc\u7684\u673a\u4f1a\u3002\n\u4f4e\u8d1f\u503a\u610f\u5473\u7740\u79c1\u52df\u80a1\u6743\u516c\u53f8\u53ef\u4ee5\u7528\u5f88\u5c11\u7684\u81ea\u6709\u8d44\u91d1\u6536\u8d2d\u96f6\u552e\u8fde\u9501\u5e97\uff0c\u5e76\u53ef\u4ee5\u627f\u62c5\u9ad8\u6c34\u5e73\u7684\u503a\u52a1\uff0c\u800c\u8fd9\u4e9b\u503a\u52a1\u6700\u7ec8\u5fc5\u987b\u7531\u516c\u53f8\u507f\u8fd8\uff0c\u800c\u4e0d\u662f\u62e5\u6709\u5b83\u7684\u6295\u8d44\u8005\u3002\u623f\u5730\u4ea7\u8ba9\u6295\u8d44\u8005\u6709\u673a\u4f1a\u51fa\u552e\u90e8\u5206\u623f\u4ea7\u5e76\u5c06\u6536\u76ca\u6536\u5165\u56ca\u4e2d\uff0c\u8ba9\u5546\u5e97\u4e3a\u4ed6\u4eec\u66fe\u7ecf\u62e5\u6709\u7684\u623f\u4ea7\u652f\u4ed8\u79df\u91d1\u3002\u5bf9\u79c1\u52df\u80a1\u6743\u6240\u6709\u8005\u7279\u522b\u6709\u5438\u5f15\u529b\u7684\u662f\u96f6\u552e\u4e1a\u52a1\u7684\u9ad8\u73b0\u91d1\u6d41\u3002\u79c1\u52df\u80a1\u6743\u6240\u6709\u8005\u5e76\u4e0d\u7f9e\u4e8e\u628a\u624b\u653e\u8fdb\u6536\u94f6\u53f0\uff0c\u4e3a\u81ea\u5df1\u652f\u4ed8\u8fc7\u9ad8\u7684\u7ea2\u5229\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u79c1\u52df\u80a1\u6743\u6240\u6709\u8005\u66f4\u4e60\u60ef\u4e8e\u4ece\u96f6\u552e\u5546\u90a3\u91cc\u62ff\u94b1\uff0c\u800c\u4e0d\u662f\u628a\u94b1\u6295\u5165\u5230\u4ed6\u4eec\u8eab\u4e0a\uff0c\u800c\u4e14\u4ed6\u4eec\u62e5\u6709\u7684\u7a7a\u5fc3\u5316\u7684\u8fde\u9501\u5e97\u4e5f\u6ca1\u6709\u80fd\u529b\u5e94\u5bf9\u4eca\u5929\u7684\u7ade\u4e89\u6311\u6218\u3002\u5b9e\u4f53\u5e97\u9700\u8981\u6295\u8d44\u4e8e\u7535\u5b50\u5546\u52a1\u3001\u5f53\u5929\u9001\u8d27\uff0c\u4ee5\u53ca\u73b0\u5728\u96f6\u552e\u4e1a\u6210\u529f\u6240\u9700\u7684\u6280\u672f\u548c\u7269\u6d41\u3002\u5c3d\u7ba1\u6240\u6709\u4f20\u7edf\u96f6\u552e\u4e1a\u90fd\u9762\u4e34\u8fd9\u4e9b\u6311\u6218\uff0c\u4f46\u5728\u5012\u95ed\u7684\u4f01\u4e1a\u4e2d\uff0c\u79c1\u4eba\u80a1\u672c\u62e5\u6709\u7684\u8fde\u9501\u5e97\u5360\u4e86\u4e0d\u6210\u6bd4\u4f8b\u7684\u4efd\u989d\u3002\u8fd9\u4e00\u8bb0\u5f55\u4e0d\u4ec5\u662f\u5e02\u573a\u7684\u4ea7\u7269\uff0c\u4e5f\u662f\u9053\u5fb7\u95ee\u9898\u3002\u79c1\u52df\u80a1\u6743\u516c\u53f8\u5728\u5176\u62e5\u6709\u7684\u516c\u53f8\u9677\u5165\u7834\u4ea7\u65f6\u83b7\u5229\u3002\n\u8d39\u5c14\u97e6\u7684\u95ee\u9898\u59cb\u4e8e2007\u5e74\uff0c\u5f53\u65f6\u8be5\u5e02\u573a\u7684\u4e00\u4f4d\u521b\u59cb\u4eba\u51b3\u5b9a\u9000\u4f11\u5e76\u51fa\u552e\u4ed6\u7684\u6743\u76ca\u3002\u8be5\u516c\u53f8\u5f15\u8d77\u4e86Sterling Investment Partners\u7684\u6ce8\u610f\uff0c\u540e\u8005\u4ee51.37\u4ebf\u7f8e\u5143\u6536\u8d2d\u4e86\u8fd9\u5bb6\u6742\u8d27\u5546\u7684\u591a\u6570\u80a1\u6743\u3002\u82f1\u9551\u540c\u610f\u4e3a\u6b64\u6b21\u6536\u8d2d\u63d0\u4f9b5000\u4e07\u7f8e\u5143\u7684\u80a1\u6743\uff0c\u540c\u65f6\u5411CapitalSource\u5bfb\u6c428700\u4e07\u7f8e\u5143\u7684\u503a\u52a1\u878d\u8d44\u3002CapitalSource\u662f\u7ea6\u7ff0\u00b7\u5fb7\u83b1\u5c3c(John Delaney)\u8054\u5408\u521b\u7acb\u7684\u4e00\u5bb6\u8d37\u6b3e\u673a\u6784\uff0c\u5fb7\u83b1\u5c3c\u540e\u6765\u4e3a2020\u5e74\u6c11\u4e3b\u515a\u603b\u7edf\u5019\u9009\u4eba\u63d0\u540d\u53d1\u8d77\u4e86\u4e00\u6b21\u5931\u8d25\u7684\u7ade\u6807\u3002\u867d\u7136\u9ed1\u77f3\u96c6\u56e2(Blackstone Group)\u3001KKR\u548c\u51ef\u96f7\u96c6\u56e2(Carlyle Group)\u7b49\u5927\u578b\u77e5\u540d\u79c1\u52df\u80a1\u6743\u516c\u53f8\u901a\u5e38\u4e13\u6ce8\u4e8e\u76f8\u5bf9\u8f83\u5927\u7684\u6536\u8d2d\u76ee\u6807\uff0c\u4f46Sterling\u662f\u6570\u767e\u5bb6\u4e0d\u592a\u77e5\u540d\u7684\u79c1\u52df\u80a1\u6743\u516c\u53f8\u4e4b\u4e00\uff0c\u5b83\u4eec\u6536\u8d2d\u7684\u662f\u89c4\u6a21\u8f83\u5c0f\u7684\u6216\u5bb6\u65cf\u6240\u6709\u7684\u516c\u53f8\u3002\u9664\u4e86\u6700\u521d\u7684\u503a\u52a1\uff0c\u8be5\u516c\u53f8\u53ef\u80fd\u8fd8\u4f1a\u627f\u62c5\u989d\u5916\u7684\u503a\u52a1\uff0c\u4ee5\u6269\u5927\u516c\u53f8\u89c4\u6a21\u3002\u6b63\u5982\u6cd5\u822a2016\u5e74\u7684\u7834\u4ea7\u7533\u8bf7\u4e2d\u6240\u63cf\u8ff0\u7684\u90a3\u6837\uff0c\u4ece2009\u5e74\u52302012\u5e74\uff0c\u82f1\u9551\u4e00\u76f4\u4ee3\u8868\u8fd9\u5bb6\u98df\u54c1\u6742\u8d27\u8fde\u9501\u5e97\u501f\u94b1\u3002\n\u5728\u6536\u8d2d\u4e00\u5bb6\u516c\u53f8\u540e\uff0c\u79c1\u52df\u80a1\u6743\u6295\u8d44\u8005\u901a\u5e38\u4f1a\u6536\u8d2d\u5176\u4ed6\u4e1a\u52a1\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u6700\u521d\u7684\u6536\u8d2d\u4e2d\u3002\u82f1\u9551\u79ef\u6781\u5229\u7528\u8fd9\u4e00\u7b56\u7565\u3002\u4e00\u7b14\u590d\u6742\u7684\u4ea4\u6613\u4e3a\u8d2d\u4e70\u66f4\u591a\u7684\u6742\u8d27\u5e97\u63d0\u4f9b\u4e86\u8d44\u91d1\u3002Floway\u4e4b\u524d\u53ea\u6709\u5c11\u6570\u51e0\u5bb6\uff0c\u57282016\u5e74\u88ab\u8feb\u5173\u95ed\u4e86\u7ebd\u7ea6\u5dde\u83b1\u514b\u683c\u7f57\u592b(Lake Grove)\u4e00\u5bb6\u5f00\u4e1a\u4ec5\u4e24\u5e74\u7684\u95e8\u5e97\u4e4b\u524d\uff0c\u5df2\u7ecf\u53d1\u5c55\u5230\u7ebd\u7ea6\u5e02\u5730\u533a\u768415\u5bb6\u95e8\u5e97\u3002\n\u7531\u4e8e\u4e1a\u52a1\u5206\u6563\uff0c\u8d1f\u503a\u7d2f\u7d2f\uff0c\u516c\u5e73\u822a\u7a7a\u6ca1\u6709\u505a\u597d\u5145\u5206\u51c6\u5907\uff0c\u65e0\u6cd5\u5e94\u5bf9\u6765\u81ea\u5728\u7ebf\u6742\u8d27\u5546FreshDirect(FONN)\u7684\u66f4\u6fc0\u70c8\u7ade\u4e89\u7684\u6311\u6218\n\u7136\u800c\uff0c\u5c31\u5728Trader Joe\u2018s\u5f00\u59cb\u4ee5\u81ea\u5df1\u7684\u4e00\u5957\u7279\u8272\u98df\u54c1\u4fb5\u5360\u6cd5\u4f0a\u5c14\u7684\u9886\u571f\u65f6\uff0c\u6cd5\u4f0a\u5c14\u7ee7\u7eed\u5438\u5f15\u7740\u975e\u5e38\u559c\u6b22\u8fd9\u5bb6\u5546\u5e97\u7684\u987e\u5ba2\uff0c\u8fd9\u5bb6\u5546\u5e97\u4ecd\u7136\u50cf\u5bb6\u65cf\u4f01\u4e1a\u4e00\u6837\u8fd0\u8425\uff0c\u4e3a\u51b3\u5b9a\u5728\u8d27\u67b6\u4e0a\u50a8\u5b58\u54ea\u4e9b\u5546\u54c1\u5e26\u6765\u4e86\u4e2a\u4eba\u8272\u5f69\uff0c\u5e76\u4e3a\u987e\u5ba2\u63d0\u4f9b\u4e86\u9ad8\u6c34\u5e73\u7684\u670d\u52a1\u3002\u8fd9\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u8981\u5f52\u529f\u4e8e\u516c\u53f8\u7684\u5458\u5de5\u3002\u7f8e\u56fd\u98df\u54c1\u548c\u5546\u4e1a\u5de5\u4eba\u8054\u5408\u4f1a\u5f53\u57301500\u4e3b\u5e2d\u7f57\u4f2f\u7279\u00b7\u7ebd\u5a01\u5c14(Robert Newell)\u544a\u8bc9\u6211\u4eec\uff1a\u201c\u5546\u5e97\u91cc\u603b\u662f\u6709\u516d\u4e2a\u4eba\u80fd\u591f\u80dc\u4efb\u90a3\u91cc\u7684\u6bcf\u4e00\u9879\u5de5\u4f5c\u3002\u201d\u6b63\u5982\u6cd5\u822a\u9996\u5e2d\u6267\u884c\u5b98\u963f\u8d1d\u5c14\u00b7\u6ce2\u7279(Abel Porter)\u5728\u5e02\u573a\u6700\u8fd1\u7684\u7834\u4ea7\u7533\u8bf7\u4e2d\u5ba3\u5e03\u7684\u90a3\u6837\uff0c\u6cd5\u822a3000\u540d\u5de5\u4eba\u4e2d\u7ea6\u670983%\u662f\u52a0\u5165\u5de5\u4f1a\u7684\u3002\u7ebd\u5a01\u5c14\u7b80\u660e\u627c\u8981\u5730\u603b\u7ed3\u4e86\u5de5\u4f1a\u5bf9\u98df\u54c1\u8fde\u9501\u5e97\u548c\u5de5\u4eba\u7684\u4f18\u52bf\u3002\u65b0\u5458\u5de5\u9762\u4e34\u7740\u8270\u96be\u7684\u516d\u4e2a\u6708\u8bd5\u7528\u671f\uff0c\u5728\u6b64\u4e4b\u540e\uff0c\u90a3\u4e9b\u8bc1\u660e\u4e86\u81ea\u5df1\u52c7\u6c14\u7684\u4eba\u4f1a\u53d1\u73b0\u81ea\u5df1\u662f\u201c\u5bb6\u5ead\u7684\u4e00\u90e8\u5206\u201d\u3002\u6742\u8d27\u5546\u5f97\u5230\u4fdd\u8bc1\uff0c\u65b0\u5458\u5de5\u53ef\u4ee5\u505a\u8fd9\u9879\u5de5\u4f5c\uff0c\u800c\u901a\u8fc7\u524a\u51cf\u7684\u5de5\u4eba\u83b7\u5f97\u4e86\u5168\u989d\u533b\u7597\u798f\u5229\u548c\u517b\u8001\u91d1-\u8fd9\u5728\u96f6\u552e\u4e1a\u51e0\u4e4e\u662f\u95fb\u6240\u672a\u95fb\u7684\u3002\n\u8d39\u5c14\u97e6\u7684\u503a\u52a1\u7ed9\u516c\u53f8\u5e26\u6765\u4e86\u635f\u5931\u3002\u6839\u636e2013\u5e74\u63d0\u4ea4\u7684\u516c\u5f00\u6587\u4ef6\uff0c\u8be5\u516c\u53f8\u4e0a\u4e00\u6b21\u76c8\u5229\u662f\u57282010\u5e74\uff0c\u5f53\u65f6\u5b83\u57284\u4ebf\u7f8e\u5143\u7684\u9500\u552e\u989d\u4e2d\u6324\u51fa\u4e86500\u4e07\u7f8e\u5143\u7684\u5fae\u5f31\u6536\u76ca\uff0c\u56e0\u4e3a\u5b83\u652f\u4ed8\u4e86\u8fd11400\u4e07\u7f8e\u5143\u7684\u503a\u52a1\u5229\u606f\u3002\u5230\u4e862011\u5e74\uff0c\u6cd5\u822a\u7684\u98df\u54c1\u6742\u8d27\u4e1a\u52a1\u9677\u5165\u4e86\u56f0\u5883\u3002\u5c3d\u7ba1\u5176\u6536\u5165\u589e\u957f\u52304.86\u4ebf\u7f8e\u5143\uff0c\u4f46\u5f00\u8bbe\u65b0\u5e97\u548c\u8fd0\u8425\u65e7\u5e97\u7684\u6210\u672c\u589e\u52a0\uff0c\u800c\u5229\u606f\u652f\u4ed8\u589e\u957f\u52301900\u4e07\u7f8e\u5143\u3002\n\u6cd5\u822a\u7684\u5458\u5de5\u5f00\u59cb\u53d1\u73b0\u81ea\u5df1\u4e0e\u65af\u7279\u6797\u610f\u89c1\u76f8\u5de6\uff0c\u4ed6\u4eec\u8ba4\u4e3a\u65af\u7279\u6797\u7684\u51b3\u7b56\u5df2\u7ecf\u53d8\u5f97\u8fc7\u4e8e\u72ed\u9698\u5730\u5173\u6ce8\u5e95\u7ebf\uff0c\u5e76\u6b63\u5728\u5371\u53ca\u516c\u53f8\u4e0e\u5ba2\u6237\u7684\u5173\u7cfb\u3002\u65af\u7279\u6797\u7684\u505a\u6cd5\u4e5f\u8ba9\u5b83\u4e0e\u6cd5\u822a\u7684\u521b\u59cb\u5bb6\u65cf\u53d1\u751f\u4e86\u51b2\u7a81\u3002\u5f53Sterling\u89e3\u96c7\u4e86\u5170\u8fea\u00b7\u683c\u5229\u514b\u4f2f\u683c(Randi Glickberg)\u65f6\uff0c\u5458\u5de5\u4eec\u611f\u5230\u9707\u60ca\u3002\u5170\u8fea\u00b7\u683c\u5229\u514b\u4f2f\u683c\u662fFairal\u521b\u59cb\u4eba\u4e4b\u4e00\u7684\u5b59\u5973\uff0c\u4e5f\u662f\u8d1f\u8d23\u5ba2\u6237\u548c\u793e\u533a\u5173\u7cfb\u7684\u526f\u603b\u88c1\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u4e8f\u635f\u7ee7\u7eed\u589e\u52a0\u3002\n2013\u5e74\uff0c\u5f53Sterling\u63d0\u4ea4\u9996\u6b21\u516c\u5f00\u52df\u80a1(IPO)\u7684\u6587\u4ef6\u65f6\uff0c\u5b83\u4ecd\u5728\u8bc1\u660e\uff0c\u516c\u5e73\u822a\u7a7a\u6709\u4e00\u5929\u53ef\u80fd\u4f1a\u53d1\u5c55\u5230\u5168\u56fd\u591a\u8fbe300\u4e2a\u5730\u70b9\u3002\u80a1\u5e02\u6295\u8d44\u8005\u5e76\u6ca1\u6709\u5bf9\u8fd9\u5bb6\u6df1\u53d7\u559c\u7231\u7684\u6742\u8d27\u5546\u65e5\u76ca\u6076\u5316\u7684\u8d22\u52a1\u72b6\u51b5\u611f\u5230\u4e0d\u5b89\u3002Fairway\u4ee5\u6bcf\u80a113\u7f8e\u5143\u7684\u4ef7\u683c\u4e0a\u5e02\uff0c\u8868\u9762\u4e0a\u4e3a\u8fd9\u5bb6\u98df\u54c1\u6742\u8d27\u8fde\u9501\u5e97\u5e26\u6765\u4e86\u7ea61.77\u4ebf\u7f8e\u5143\u7684\u6536\u5165\u3002\n\u4e0d\u8fc7\uff0cIPO\u7533\u62a5\u6587\u4ef6\u4e2d\u6709\u4e00\u6bb5\u8be6\u7ec6\u8bf4\u660e\u4e86Sterling\u5c06\u5982\u4f55\u5229\u7528\u6240\u5f97\u8d44\u91d1\u652f\u4ed8\u8fd18,000\u4e07\u7f8e\u5143\u7684\u80a1\u606f\u3002PitchBook\u662f\u4e00\u5bb6\u5907\u53d7\u63a8\u5d07\u7684\u79c1\u52df\u80a1\u6743\u6570\u636e\u6765\u6e90\uff0c\u8be5\u516c\u53f8\u62a5\u544a\u79f0\uff0c\u82f1\u9551\u6295\u8d44\u8005\u8fd8\u4ece\u6cd5\u822a\u7684\u57fa\u91d1\u4e2d\u989d\u5916\u652f\u4ed8\u4e861700\u4e07\u7f8e\u5143\u7ed9\u81ea\u5df1\u548c\u4ed6\u4eec\u7684\u7ba1\u7406\u56e2\u961f\u3002\n\u50cf\u8fd9\u6837\u7684\u505a\u6cd5\u662f\u7eaf\u7cb9\u7684\u91d1\u878d\u5de5\u7a0b-\u4e00\u79cd\u6240\u6709\u8005\u4ece\u4f01\u4e1a\u4e2d\u69a8\u53d6\u66f4\u591a\u8d44\u91d1\u7684\u65b9\u5f0f\uff0c\u800c\u4e0d\u662f\u6309\u6bd4\u4f8b\u63d0\u9ad8\u5176\u521b\u9020\u65b0\u6536\u5165\u7684\u80fd\u529b\u3002\u867d\u7136\u79c1\u52df\u80a1\u6743\u516c\u53f8\u5f53\u7136\u6709\u6743\u51b3\u5b9a\u5411\u81ea\u5df1\u53ca\u5176\u6709\u9650\u5408\u4f19\u4eba\u652f\u4ed8\u80a1\u606f\uff0c\u4f46\u652f\u4ed8\u80a1\u606f\u7684\u516c\u53f8\u5c06\u80cc\u8d1f\u66f4\u591a\u503a\u52a1\u9700\u8981\u507f\u8fd8\uff0c\u5e76\u88ab\u5265\u593a\u4e86\u6295\u8d44\u81ea\u8eab\u4ee5\u4fdd\u6301\u7ade\u4e89\u529b\u7684\u8d44\u6e90\u3002\n\u5728Fairair\uff0c\u4e0d\u65ad\u589e\u957f\u7684\u503a\u52a1\u8d1f\u62c5-\u52302016\u5e74\u63a5\u8fd12.8\u4ebf\u7f8e\u5143-\u4e0d\u4ec5\u9650\u5236\u4e86\u8fd9\u5bb6\u98df\u54c1\u6742\u8d27\u8fde\u9501\u5e97\u4e0e\u5168\u98df\u8d85\u5e02(Whole Foods)\u548cTrader Joe\u2018s\u7684\u7ade\u4e89\u80fd\u529b\uff0c\u4e5f\u9650\u5236\u4e86\u5b83\u4e0e\u4e9a\u9a6c\u900a(Amazon)\u548c\u5176\u4ed6\u5927\u516c\u53f8\u6295\u5165\u5728\u7ebf\u98df\u54c1\u6742\u8d27\u4e1a\u52a1\u7684\u770b\u4f3c\u65e0\u9650\u7684\u8d44\u6e90\u7684\u7ade\u4e89\u80fd\u529b\u3002(\u4e5f\u8bb8\u5e76\u4e0d\u4ee4\u4eba\u610f\u5916\u7684\u662f\uff0cFairway\u7684\u524d\u79c1\u52df\u80a1\u6743\u6240\u6709\u8005\u5c06\u8be5\u8fde\u9501\u5e97\u7684\u56f0\u5883\u5f52\u56e0\u4e8e\u4e0d\u65ad\u53d8\u5316\u7684\u5e02\u573a\uff0c\u800c\u4e0d\u662f\u4ed6\u4eec\u81ea\u5df1\u7684\u91d1\u878d\u5e72\u9884\u3002Sterling\u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u575a\u6301\u8ba4\u4e3a\uff0c\u6765\u81ea\u5168\u98df\u8d85\u5e02(Whole Foods)\u548c\u8d38\u6613\u5546\u4e54(Joe)\u4ee5\u53ca\u5728\u7ebf\u6742\u8d27\u5e97\u7684\u7ade\u4e89\u4e3b\u8981\u662f\u4ef7\u683c\u538b\u529b\u589e\u52a0\u548c\u6cd5\u4f0a\u5c14\u95e8\u5e97\u5ba2\u6d41\u91cf\u51cf\u5c11\u7684\u4e3b\u8981\u539f\u56e0\u3002)\u3002\n\u65e0\u8bba\u5982\u4f55\uff0c\u91d1\u878d\u9634\u8c0b\u4ecd\u5728\u7ee7\u7eed\u30022016\u5e746\u6708\uff0c\u6cd5\u822a\u6839\u636e\u7834\u4ea7\u6cd5\u7b2c11\u7ae0\u8fdb\u884c\u4e86\u7834\u4ea7\u91cd\u7ec4\uff0c\u5728\u6b64\u671f\u95f4\uff0c\u516c\u53f8\u7684\u9ad8\u7ea7\u8d37\u6b3e\u4eba\u5c06\u90e8\u5206\u503a\u52a1\u8f6c\u6362\u4e3a\u80a1\u6743\uff0c\u5c06\u6cd5\u822a\u7684\u503a\u52a1\u51cf\u5c11\u52301.4\u4ebf\u7f8e\u5143\uff0c\u6bcf\u5e74\u7684\u507f\u503a\u91d1\u989d\u51cf\u5c11800\u4e07\u7f8e\u5143\u3002\u9ed1\u77f3\u96c6\u56e2(Blackstone Group)\u7684\u503a\u52a1\u6295\u8d44\u90e8\u95e8GSO Capital Partners\u662f\u8be5\u96c6\u56e2\u7684\u4e00\u90e8\u5206\uff0c\u8be5\u96c6\u56e2\u4e3aFairal\u5728\u7834\u4ea7\u65f6\u8fd0\u8425\u63d0\u4f9b\u4e86\u521d\u59cb\u8d44\u91d1\uff0c\u6700\u7ec8\u83b7\u5f97\u4e86\u8be5\u8fde\u9501\u5e9745%\u7684\u80a1\u4efd\u3002\u4e24\u5e74\u540e\uff0c\u4e5f\u5c31\u662f2018\u5e748\u6708\uff0c\u9ed1\u77f3\u96c6\u56e2\u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u8bc1\u5b9e\uff0cGSO Capital\u901a\u8fc7\u5c06\u6240\u6301\u80a1\u4efd\u51fa\u552e\u7ed9\u9ad8\u76db(Goldman Sachs)\uff0c\u5b8c\u5168\u5904\u7f6e\u4e86\u6240\u6301\u80a1\u4efd\u3002\n\u5c3d\u7ba1\u5728\u7834\u4ea7\u8fc7\u7a0b\u4e2d\u6446\u8131\u4e861.4\u4ebf\u7f8e\u5143\u7684\u8d37\u6b3e\uff0c\u6cd5\u822a\u5f88\u5feb\u53d1\u73b0\u81ea\u5df1\u518d\u6b21\u8d1f\u503a\u7d2f\u7d2f\uff0c\u96be\u4ee5\u7ef4\u6301\u4e0b\u53bb\u3002\u52302019\u5e74\uff0c\u5b83\u7684\u9500\u552e\u989d\u5df2\u7ecf\u589e\u957f\u52306.43\u4ebf\u7f8e\u5143\uff0c\u4f46\u95e8\u5e97\u79df\u8d41\u548c\u503a\u52a1\u5229\u606f\u7684\u8d1f\u62c5\u5bfc\u81f4\u8fd9\u5bb6\u6742\u8d27\u5546\u635f\u5931\u4e866880\u4e07\u7f8e\u5143\u3002\u4e0a\u6708\u5e95\uff0c\u6cd5\u822a\u80cc\u8d1f\u77402.27\u4ebf\u7f8e\u5143\u7684\u503a\u52a1\u548c\u53e6\u59166700\u4e07\u7f8e\u5143\u7684\u65e0\u8d44\u91d1\u652f\u6301\u7684\u517b\u8001\u91d1\u8d1f\u503a\uff0c\u518d\u6b21\u7533\u8bf7\u7834\u4ea7\u3002\nShopRite\u548cGourmet Garage\u7684\u6240\u6709\u8005\u4e61\u6751\u8d85\u7ea7\u5e02\u573a(Village Super Market)\u51fa\u4ef77000\u4e07\u7f8e\u5143\u6536\u8d2d\u6cd5\u822a\u5728\u66fc\u54c8\u987f\u7684\u4e94\u5bb6\u95e8\u5e97\uff0c\u5176\u4e2d\u5305\u62ec\u4e0a\u897f\u533a\u7684\u65d7\u8230\u95e8\u5e97\u53ca\u5176\u914d\u9001\u4e2d\u5fc3\u3002\u4e61\u6751\u8d85\u5e02\u7684\u9996\u5e2d\u6267\u884c\u5b98\u7f57\u4f2f\u7279\u00b7\u82cf\u9a6c\u65af(Robert Sumas)\u8868\u793a\uff0c\u8fd9\u4e9b\u5546\u5e97\u5c06\u7ee7\u7eed\u4ee5\u4f20\u8bf4\u4e2d\u7684Fairair\u540d\u79f0\u8fd0\u8425\u3002\u5de5\u4eba\u4eec\u53ef\u80fd\u4e0d\u4f1a\u8fc7\u5f97\u90a3\u4e48\u597d\u3002\u4e61\u6751\u8d85\u5e02\u5df2\u7ecf\u8868\u793a\uff0c\u5b83\u6ca1\u6709\u5174\u8da3\u627f\u62c5\u517b\u8001\u91d1\u503a\u52a1\uff0c\u4f5c\u4e3a\u5176\u8981\u7ea6\u7684\u4e00\u90e8\u5206\u3002\u5269\u4e0b\u7684\u4e5d\u5bb6\u95e8\u5e97\u548c\u4ed6\u4eec\u96c7\u4f63\u7684\u8bb8\u591a\u5de5\u4eba\u7684\u547d\u8fd0\u5c1a\u4e0d\u660e\u6717\u3002\u8fd9\u4e9b\u6742\u8d27\u5e97\u4ecd\u7136\u6709\u53ef\u80fd\u5173\u95e8\u3002\nFairway\u548c\u91d1\u5b9d\u8d1d\u3001\u73a9\u5177\u53cd\u6597\u57ce(Toys\u201cR\u201dUs)\u4ee5\u53ca\u4e4b\u524d\u7684\u8bb8\u591a\u5176\u4ed6\u96f6\u552e\u5546\u4e00\u6837\uff0c\u56e0\u4e3a\u80cc\u8d1f\u7740\u503a\u52a1\uff0c\u65e0\u6cd5\u9002\u5e94\u65b0\u7684\u7ade\u4e89\u538b\u529b\u800c\u5012\u95ed\u3002\u800c\u4e14\uff0c\u4e0e\u516c\u5e73\u822a\u7a7a\u516c\u53f8\u7684\u60c5\u51b5\u4e00\u6837\uff0c\u62e5\u6709\u8fd9\u4e9b\u5176\u4ed6\u7834\u4ea7\u516c\u53f8\u7684\u79c1\u52df\u80a1\u6743\u516c\u53f8\u4ecd\u7136\u8bbe\u6cd5\u6536\u56de\u4e86\u6295\u8d44\u5e76\u5b9e\u73b0\u4e86\u76c8\u5229\u3002\u4ed6\u4eec\u901a\u8fc7\u6536\u53d6\u54a8\u8be2\u8d39\u3001\u7ed9\u81ea\u5df1\u652f\u4ed8\u80a1\u606f\u6216\u5265\u79bb\u516c\u53f8\u8d44\u4ea7\u6765\u83b7\u53d6\u4ef7\u503c\u3002\u5f53\u79c1\u52df\u80a1\u6743\u516c\u53f8\u83b7\u5229\u65f6\uff0c\u7834\u4ea7\u516c\u53f8\u7684\u5de5\u4eba\u4ed8\u51fa\u4e86\u4ee3\u4ef7\u30022018\u5e74\u73a9\u5177\u53cd\u6597\u57ce\u5173\u95ed\u65f6\uff0c3.1\u4e07\u540d\u5de5\u4eba\u5931\u4e1a\u30022016\u5e74A&P\u5012\u95ed\u65f6\uff0c2.1\u4e07\u540d\u5458\u5de5\u5931\u53bb\u4e86\u5de5\u4f5c\u548c\u517b\u8001\u91d1\u798f\u5229\u3002\n\u7f3a\u4e4f\u900f\u660e\u5ea6\u63a9\u76d6\u4e86\u79c1\u52df\u80a1\u6743\u5728\u96f6\u552e\u4e1a\u672b\u65e5\u4e2d\u626e\u6f14\u7684\u89d2\u8272\u30022018\u5e7411\u6708\uff0c\u5f53\u901a\u7528\u6c7d\u8f66(General Motors)\u51b3\u5b9a\u505c\u4ea7\u5317\u7f8e\u4e94\u5bb6\u5de5\u5382\u5e76\u88c1\u54581.5\u4e07\u4eba\u65f6\uff0c\u56fd\u4f1a\u4f20\u5524\u8be5\u516c\u53f8\u9996\u5e2d\u6267\u884c\u5b98\u739b\u4e3d\u00b7\u5df4\u62c9(Mary Barra)\u5bf9\u5176\u51b3\u5b9a\u8d1f\u8d23\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u91d1\u878d\u4ee5\u5916\u7684\u4eba\u5f88\u5c11\u77e5\u9053\u82f1\u9551\u3001KKR\u6216\u9ed1\u77f3\u662f\u4ec0\u4e48\u3002\u5373\u4f7f\u5728\u79c1\u52df\u80a1\u6743\u516c\u53f8\u62e5\u6709\u7684\u516c\u53f8\u7834\u4ea7\u540e\uff0c\u6295\u8d44\u8005\u4e5f\u6ca1\u6709\u53d7\u5230\u516c\u4f17\u7684\u8ba4\u53ef\uff0c\u4ed6\u4eec\u7684\u804c\u4e1a\u58f0\u8a89\u4e5f\u6ca1\u6709\u53d7\u5230\u635f\u5bb3\u3002\u4ed6\u4eec\u4ecd\u7136\u53ef\u4ee5\u6253\u7740\u62ef\u6551\u5176\u4ed6\u516c\u53f8\u7684\u5e4c\u5b50\uff0c\u4ece\u517b\u8001\u57fa\u91d1\u548c\u5176\u4ed6\u673a\u6784\u6295\u8d44\u8005\u90a3\u91cc\u7b79\u96c6\u8d44\u91d1\uff0c\u6536\u8d2d\u5176\u4ed6\u516c\u53f8\u7684\u80a1\u4efd\u3002\n\u7ebd\u5a01\u5c14\u662fUFCW Local 1500\u7684\u8d1f\u8d23\u4eba\uff0c\u4ed6\u62c5\u5fc3\u822a\u9053\u5de5\u4eba\u5c06\u4e3a\u65af\u7279\u6797\u548c\u8be5\u8fde\u9501\u5e97\u5176\u4ed6\u534e\u5c14\u8857\u6240\u6709\u8005\u7684\u81ea\u79c1\u51b3\u5b9a\u4ed8\u51fa\u4ee3\u4ef7\u3002Newell\u8bf4\uff0c\u5de5\u4f1a\u5de5\u4eba\u5728A&P\u7834\u4ea7\u671f\u95f4\u5df2\u7ecf\u635f\u5931\u4e86\u8fd18000\u4e07\u7f8e\u5143\u7684\u517b\u8001\u91d1\u798f\u5229\uff0c\u4ed6\u8ba4\u4e3a\u8fd9\u4e0eFairer\u7834\u4ea7\u6709\u76f8\u4f3c\u4e4b\u5904\u3002\n\u5982\u679c\u79c1\u52df\u80a1\u6743\u516c\u53f8\u4e0d\u80fd\u6210\u4e3a\u5bf9\u793e\u4f1a\u8d1f\u8d23\u4efb\u7684\u8d44\u672c\u7ba1\u7406\u8005\uff0c\u90a3\u4e48\u56fd\u4f1a\u5c06\u9700\u8981\u91c7\u53d6\u884c\u52a8\u3002\u4e00\u9879\u53ef\u80fd\u7684\u6539\u9769\u5c06\u5305\u62ec\u5bf9\u79c1\u52df\u80a1\u6743\u6295\u8d44\u8005\u4ece\u4ed6\u4eec\u62e5\u6709\u7684\u516c\u53f8\u4e2d\u63d0\u53d6\u7684\u54a8\u8be2\u8d39\u548c\u5176\u4ed6\u8d39\u7528\u5168\u989d\u5f81\u7a0e\u3002\u53e6\u4e00\u9879\u6f5c\u5728\u7684\u6539\u9769\u5c06\u5bf9\u6536\u8d2d\u540e\u4e24\u5e74\u5185\u652f\u4ed8\u7684\u80a1\u606f\u65bd\u52a0\u9650\u5236\u3002\u7531\u4e8e\u76ee\u524d\u7684\u5236\u5ea6\u5141\u8bb8\u79c1\u52df\u80a1\u6743\u516c\u53f8\u4ece\u6210\u529f\u7684\u6536\u8d2d\u4e2d\u83b7\u5f97\u5927\u90e8\u5206\u79ef\u6781\u6536\u76ca\uff0c\u5f53\u6536\u8d2d\u4ee5\u7834\u4ea7\u544a\u7ec8\u65f6\uff0c\u5b83\u4eec\u4e5f\u53ef\u80fd\u88ab\u8981\u6c42\u627f\u62c5\u516c\u53f8\u503a\u52a1\u7684\u90e8\u5206\u8d23\u4efb\u3002\n\u79c1\u52df\u80a1\u6743\u516c\u53f8\u58f0\u79f0\uff0c\u4ed6\u4eec\u901a\u8fc7\u8ba9\u9677\u5165\u56f0\u5883\u7684\u516c\u53f8\u626d\u4e8f\u4e3a\u76c8\u8d5a\u94b1\uff0c\u4e00\u4e9b\u516c\u53f8\u786e\u5b9e\u505a\u5230\u4e86\u3002\u4f46\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u6295\u8d44\u8005\u8d2d\u4e70\u5065\u5eb7\u7684\u516c\u53f8\uff0c\u5e76\u5229\u7528\u4ed6\u4eec\u83b7\u5f97\u501f\u6b3e\u7684\u4f18\u8d8a\u6e20\u9053\uff0c\u4f5c\u4e3a\u4ece\u4ed6\u4eec\u6536\u8d2d\u7684\u516c\u53f8\u83b7\u5f97\u6295\u8d44\u5229\u6da6\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u8d5a\u4e86\u94b1\u540e\uff0c\u4ed6\u4eec\u5c31\u7ee7\u7eed\u524d\u8fdb\uff0c\u7a7a\u6d1e\u5316\u516c\u53f8\u7684\u5458\u5de5\u7684\u547d\u8fd0\u4e0e\u4ed6\u4eec\u65e0\u5173\u3002\n\u6211\u4eec\u60f3\u542c\u542c\u60a8\u5bf9\u8fd9\u7bc7\u6587\u7ae0\u7684\u770b\u6cd5\u3002\u5411\u7f16\u8f91\u63d0\u4ea4\u4e00\u5c01\u4fe1\uff0c\u6216\u5199\u4fe1\u7ed9letters@theatlantic.com\u3002", "note_en": "The news of Fairway Market\u2019s second foray into bankruptcy, this time with the threat that stores could be liquidated to pay off the unsustainable debt hanging over the grocery chain, dismayed its legions of loyal Manhattan customers. Fairway\u2019s New York City stores draw an eclectic crowd of shoppers: local residents, professors and students at schools from the City University of New York to Columbia University, and others seeking its fresh-baked breads, unusual cheeses, and wide range of international foods. Upscale and idiosyncratic, with its humble roots still evident, Fairway is emblematic of the city in which it has become a storied institution. But, fatefully, it is also emblematic of the way private-equity investors\u2014including Fairway\u2019s former owner Sterling Investment Partners\u2014have hastened the fall of brick-and-mortar stores caught in the so-called retail apocalypse.\n   The story is a familiar one, even for shoppers hundreds of miles from the nearest Fairway. Most consumers have seen some of their favorite chains\u2014Toys \u201cR\u201d Us, Shopko, Claire\u2019s, Payless ShoeSource, Nine West, Gymboree, Staples, and A&amp;P, among many others\u2014face financial distress and shutter some or all of their stores. Like Fairway, these businesses were owned by private equity, a form of finance in which investors buy, overhaul, and then sell companies. Also like Fairway, the other retail chains were profitable at the time they were taken over. Before those buyouts, these businesses had low debt levels and owned their real estate\u2014a necessary precaution for companies suddenly facing more competition or industries seeing widespread changes.\n    Most companies mean to stay in business for the long term, and those in the industries most exposed to the business cycle know that low debt and no rent are the keys to surviving hard times and then prospering when the good times return. The motivation is very different for private-equity owners, who operate under a shorter time frame, often just three to five years, before moving on. For them, low levels of debt and high levels of real-estate ownership present a get-rich-quick opportunity.\n  The low debt means that private-equity firms can acquire retail chains by putting up very little of their own money and can take on high levels of debt that the company, not the investors who own it, must ultimately repay. The real estate gives investors an opportunity to sell off some of it and pocket the proceeds, leaving the stores to pay rent on properties they once owned. Especially attractive to private-equity owners is the high cash flow in retail operations. Private-equity owners have not been shy about putting their hands in the till to pay themselves exorbitant dividends.\n  Unfortunately, private-equity owners are far more accustomed to taking money out of retailers than to putting money into them, and the hollowed-out chains they own are ill-equipped to meet today\u2019s competitive challenges. Brick-and-mortar stores need to invest in e-commerce, same-day delivery, and the technologies and logistics that success in retail now requires. While all traditional retail faces these challenges, chains owned by private equity make up a disproportionate share of businesses that have failed. This record is not just a product of markets; it\u2019s a matter of morality as well. Private-equity firms profit as the companies they own tumble into bankruptcy.\n  Fairway\u2019s problems began in 2007, when one of the market\u2019s founders decided to retire and sell his interest. The company caught the eye of Sterling Investment Partners, which acquired a majority stake in the grocer for $137 million. Sterling agreed to put up $50 million in equity for the purchase while turning to CapitalSource\u2014a lender co-founded by John Delaney, who later went on to mount an abortive bid for the 2020 Democratic presidential nomination\u2014for $87 million in debt financing. While large, well-known private-equity firms such as the Blackstone Group, KKR, and the Carlyle Group generally focus on relatively large acquisition targets, Sterling is one of hundreds of lesser-known private-equity firms that buy smaller or family-owned companies. In addition to the initial debt, the company may take on additional debt to expand the company. As described in  Fairway\u2019s 2016 bankruptcy filing, Sterling kept borrowing money on the grocery chain\u2019s behalf from 2009 to 2012.\n    After purchasing a company, private-equity investors often scoop up other businesses and add them to the initial acquisition. Sterling made aggressive use of this strategy. One complex transaction financed the purchase of more grocery stores. Fairway, which previously had only a handful, grew to 15 locations in the New York City area before being forced in 2016 to shutter a Lake Grove, New York, store that had been open for only two years.\n Spread thin and loaded with debt, Fairway was not well equipped to respond to the challenge of steeper competition from the online grocer FreshDirect (founded by a former Fairway executive) and a Trader Joe\u2019s that opened not far from Fairway\u2019s flagship Upper West Side location.\n Yet even as Trader Joe\u2019s started to encroach on Fairway\u2019s territory with its own set of specialty foods, Fairway continued to attract customers who were very much drawn to a store that still operated like a family business, brought a personal touch to decisions about which items to stock on its shelves, and offered customers a high level of service. This was due in no small measure to the company\u2019s staff. \u201cThere were always six people in the store capable of doing every job in there,\u201d United Food and Commercial Workers Local 1500 President Robert Newell told us. About 83 percent of Fairway\u2019s 3,000 workers are unionized, as Fairway\u2019s CEO, Abel Porter, declared in the market\u2019s most recent bankruptcy filing. The union advantage for both the grocery chain and the workers was summed up succinctly by Newell. New employees faced a tough six-month probationary period after which those who proved their mettle found themselves \u201cpart of the family.\u201d The grocer was assured that new employees could do the job, while workers who made the cut got full health-care benefits and a pension\u2014largely unheard of in the retail industry.\n  Fairway\u2019s debt took a toll on the company. It last made a profit in 2010, when it squeezed out a narrow $5 million gain on $400 million in sales as it paid out almost $14 million in interest payments on its debt, according to public documents filed in 2013. By 2011, Fairway\u2019s grocery business was in trouble. Even as its revenues grew to $486 million, its costs to open new stores and run old ones increased, while its interest payments grew to $19 million.\n  Workers at Fairway began to find themselves at odds with Sterling, whose decision making, they believed, had become too narrowly focused on the bottom line and was jeopardizing the business\u2019s relationship with customers. Sterling\u2019s approach also brought it into conflict with Fairway\u2019s founding family. Employees were aghast when Sterling fired Randi Glickberg, the vice president of customer and community relations and the granddaughter of one of Fairway\u2019s creators. Meanwhile, losses continued to grow.\n    In 2013, when Sterling filed the paperwork for an initial public offering, it was still making the case that Fairway could one day grow to as many as 300 locations nationwide. Stock-market investors weren\u2019t fazed by the beloved grocer\u2019s deteriorating financial situation. Fairway went public at $13 a share, bringing in about $177 million ostensibly to the benefit of the grocery chain.\n Tucked away in the IPO filing, though, was a paragraph detailing how Sterling would be able to use the proceeds to pay itself a dividend of nearly $80 million. PitchBook, a highly regarded source of data on private equity, reports that Sterling investors also paid themselves and their management team an additional $17 million from Fairway\u2019s funds.\n Practices like these are pure financial engineering\u2014a way for owners to squeeze more money out of a business without proportionately improving its ability to generate new revenue. While a private-equity firm certainly has the power to make the decision to pay itself and its limited partners a dividend, the companies paying this dividend are left with more debt to repay and are deprived of resources to invest in themselves to remain competitive.\n  At Fairway, the growing weight of its debt load\u2014almost $280 million by 2016\u2014limited the grocery chain\u2019s ability to compete not only against Whole Foods and Trader Joe\u2019s, but also against the seemingly unlimited resources that Amazon and other large corporations have poured into their online grocery businesses. (Fairway\u2019s former private-equity owners, perhaps not surprisingly, attribute the chain\u2019s woes to a changing market rather than their own financial interventions. A spokesperson for Sterling maintained that competition from Whole Foods and Trader Joe&#39;s as well as online grocers was primarily responsible for increased price pressures\u00a0 and reduced foot traffic at Fairway\u2019s stores.)\n Regardless, the financial machinations continued. In June 2016, Fairway underwent Chapter 11 bankruptcy reorganization, during which the company\u2019s senior lenders exchanged some of the debt for equity, reducing Fairway\u2019s debt to $140 million and its annual debt service by $8 million a year. The Blackstone Group\u2019s debt-investing arm, GSO Capital Partners, part of the group that provided the initial funds to allow Fairway to operate while in bankruptcy, ended up taking a 45 percent stake in the chain. Two years later, in August 2018, GSO Capital completely disposed of its stake by selling it to Goldman Sachs, a spokesperson for Blackstone confirmed.\n  Despite ridding itself of $140 million of its loans in the bankruptcy process, Fairway soon found itself again loaded with debt and struggling to stay afloat. By 2019, its sales had grown to $643 million, but the burden of the leases on its stores and the interest payments on its debt led the grocer to lose a whopping $68.8 million. Late last month, with $227 million in debt and another $67 million in unfunded pension liabilities, Fairway again filed for bankruptcy.\n    Village Super Market, the owner of ShopRite and Gourmet Garage, has put in a $70 million offer for five of Fairway\u2019s Manhattan stores, including the flagship Upper West Side location, and its distribution center. Village Super Market\u2019s CEO, Robert Sumas, has indicated that those stores would continue to operate under the fabled Fairway name. Workers may not fare as well. Village Super Market has indicated that it is not interested in taking on the pension liabilities as part of its offer. The fate of the remaining nine stores and the many workers they employ is unclear. The shuttering of these grocery stores remains a possibility.\n  Fairway, like Gymboree, Toys \u201cR\u201d Us, and so many other retailers before it, failed because it was saddled with debt and could not adapt to meet new competitive pressures. And, as in the case of Fairway, the private-equity firms that owned these other failing companies still managed to recoup their investments and make a profit. They extracted value by collecting advisory fees, paying themselves dividends, or stripping away a company\u2019s assets. While the private-equity firms profited, the bankrupt company\u2019s workers paid the price. When Toys \u201cR\u201d Us closed in 2018, 31,000 workers lost their job. When A&amp;P went out of business in 2016, 21,000 workers lost their job and pension benefits.\n A lack of transparency disguises private equity\u2019s role in the retail apocalypse. When General Motors in November 2018 decided to halt production at five North American plants and cut up to 15,000 jobs, Congress summoned the company\u2019s CEO, Mary Barra, to answer for its decision. In contrast, few people outside finance know what Sterling or KKR or Blackstone is. Even after companies owned by private-equity firms go bankrupt, the investors suffer no public approbation or damage to their professional reputation. They can still raise money from pension funds and other institutional investors to buy out other companies under the guise of saving them.\n   Newell, the head of UFCW Local 1500, is concerned that Fairway workers will pay the price for the self-serving decisions of Sterling and the chain\u2019s other Wall Street owners. Newell said that union workers already lost nearly $80 million in pension benefits during the A&amp;P bankruptcy, and he sees a parallel with the Fairway bankruptcy.\n If private-equity firms cannot be socially responsible stewards of capital, then Congress will need to act. One possible reform would involve fully taxing the advisory and other fees that private-equity investors extract from the companies they own. Another potential reform would impose restrictions on dividends paid out in the two years following a buyout. Since the current system allows private-equity firms to reap much of the positive gains from successful acquisitions, they could also be required to bear some of the liability for a company\u2019s debt when the buyout ends in bankruptcy.\n Private-equity firms claim that they make their money turning troubled companies around, and some do. But all too often, these investors buy healthy companies and use their superior access to borrowed money as a method of harvesting profits on their investments from the companies they acquire. Having made their money, they then move on, and the fate of employees in hollowed-out companies is no concern of theirs.\n  We want to hear what you think about this article.  Submit a letter to the editor or write to letters@theatlantic.com.", "posttime": "2020-05-17 08:15:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u559c\u7231,equity", "title": "\u79c1\u52df\u80a1\u6743\u6bc1\u4e86\u4e00\u5bb6\u5907\u53d7\u559c\u7231\u7684\u98df\u54c1\u6742\u8d27\u8fde\u9501\u5e97", "title_en": "Private Equity Ruined a Beloved Grocery Chain", "transed": 1, "url": "https://www.theatlantic.com/ideas/archive/2020/02/how-private-equity-ruined-fairway/606625/", "via": "", "real_tags": ["\u559c\u7231", "equity"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002470, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4e4b\u524d\u5199\u8fc7\u5982\u4f55\u914d\u7f6eMinicom\u4ee5\u901a\u8fc7\u4e32\u884cUART\u8fde\u63a5\u5230\u8bbe\u5907\u3002\u5728\u90a3\u7bc7\u5e16\u5b50\u4e2d\uff0c\u6211\u63d0\u5230Minicom\u53ef\u80fd\u4e0d\u662f\u8fd9\u9879\u5de5\u4f5c\u7684\u6700\u4f73\u5de5\u5177\u3002\u8003\u8651\u5230Minicom\u6b63\u5728\u589e\u52a0\u8bb8\u591a\u4e0d\u5fc5\u8981\u7684\u590d\u6742\u6027\u3002\u5982\u679c\u60a8\u60f3\u4e00\u60f3\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u662f\u4e00\u4e2a\u7528\u4e8e\u4e0e\u8c03\u5236\u89e3\u8c03\u5668\u901a\u4fe1\u7684\u547d\u4ee4\u884c\u5b9e\u7528\u7a0b\u5e8f\uff0c\u53bb\u6389\u4e86\u6240\u6709\u8fd9\u4e9b\u529f\u80fd\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ea\u5269\u4e0b\u4e00\u4e2a\u77e5\u9053\u5982\u4f55\u8fde\u63a5\u5230\u5916\u6765TTY\u7684\u7ec8\u7aef\u4eff\u771f\u5668\u4e86\u3002\u7136\u800c\uff0c\u6211\u4eec\u53ef\u80fd\u662f\u5728\u4e00\u4e2a\u529f\u80fd\u5b8c\u5584\u7684\u7ec8\u7aef\u4eff\u771f\u5668(\u5982xterm)\u4e0a\u8fd0\u884cMinicom\u3002\u6211\u4eec\u6240\u9700\u8981\u7684\u53ea\u662f\u4e00\u79cd\u5728RAW\u6a21\u5f0f\u4e0b\u5c06\u7ec8\u7aef\u4eff\u771f\u5668\u8fde\u63a5\u5230\u76ee\u6807\u4e32\u884c\u7aef\u53e3\u7684\u65b9\u6cd5\u3002\u53ea\u8981\u8bbe\u5907\u7aef\u5728\u63a5\u6536\u7aef\u8fd0\u884c\u767b\u5f55\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7b80\u5355\u5730\u8ba9\u6211\u4eec\u7684\u7ec8\u7aef\u4eff\u771f\u5668\u6267\u884c\u5176\u8bbe\u8ba1\u76ee\u7684\u3002\n\u4f7f\u7528Socket CAT(\u53c2\u89c1Socket(1))\uff0c\u6211\u4eec\u53ef\u4ee5\u5728RAW\u6a21\u5f0f\u4e0b\u5c06\u4e32\u884c\u7aef\u53e3\u8fde\u63a5\u5230\u7ec8\u7aef\u4eff\u771f\u5668\u3002\nSocket Cat\u5728\u7ed9\u5b9a\u5730\u5740\u89c4\u8303\u7684\u60c5\u51b5\u4e0b\u4e2d\u7ee7\u4e24\u4e2a\u53cc\u5411\u5b57\u8282\u6d41\u3002\u5730\u5740\u89c4\u8303\u7684\u987a\u5e8f\u65e0\u5173\u7d27\u8981\u3002\u4ee5\u4e0b\u547d\u4ee4\u7b49\u6548\uff1a\n\u5f00\u5934\u7684\u8fde\u5b57\u7b26\u5b9e\u9645\u4e0a\u662f\u5730\u5740\u7c7b\u578bstdio\u7684\u522b\u540d\u3002\u67d0\u4e9b\u5730\u5740\u7c7b\u578b\u91c7\u7528\u7531\uff1a\u5206\u9694\u7684\u53c2\u6570\u3002\u540e\u9762\u7684\u9017\u53f7\u5206\u9694\u5217\u8868\u662f\u5730\u5740\u9009\u9879\u3002\u5730\u5740\u9009\u9879\u5728\u9009\u9879\u7ec4\u4e2d\u5b9a\u4e49\u3002STDIO\u63a5\u53d7\u6765\u81eaFD\u3001TERMIOS\u3001REG\u3001Socket\u9009\u9879\u7ec4\u7684\u9009\u9879\u3002RAWER\u5730\u5740\u9009\u9879\u5728TERMIOS\u9009\u9879\u7ec4\u4e2d\u5b9a\u4e49\u3002\u5b83\u5728RAW\u6a21\u5f0f\u4e0b\u521d\u59cb\u5316\u7ebf\u8def\u89c4\u7a0b\uff0c\u5e76\u9690\u5f0f\u5173\u95ed\u56de\u663e\u3002\n\u6709\u4e00\u6761\u89c4\u5219\u662f\uff0c\u5982\u679c\u5728\u5730\u5740\u89c4\u8303\u7684\u7b2c\u4e00\u4e2a\u5192\u53f7\u6216\u9017\u53f7\u4e4b\u524d\u627e\u5230\u6b63\u659c\u6760\uff0c\u5219\u5730\u5740\u7c7b\u578b\u9690\u5f0f\u9ed8\u8ba4\u4e3aGOPEN(\u901a\u7528\u6587\u4ef6\u6253\u5f00)\uff0c\u5e76\u63a5\u53d7(FD\u3001REG\u3001SOCKET\u3001NAMED\u548cOPEN)\u9009\u9879\u7ec4\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c/dev/ttyUSB0\u662fGopen\u7684\u5730\u5740\u53c2\u6570\u3002\u4e4b\u540e\uff0c\u5730\u5740\u9009\u9879\u5217\u8868\u5f00\u59cb\u3002\u7b2c\u4e00\u4e2a\u5730\u5740\u9009\u9879b115200/\u5c06\u6ce2\u7279\u7387\u8bbe\u7f6e\u4e3a115200\u3002\u6211\u4eec\u5df2\u7ecf\u719f\u6089\u7684\u7b2c\u4e8c\u4e2a\u5730\u5740\u9009\u9879\u4f1a\u5bfc\u81f4/dev/ttyUSB0/\u5728RAW\u6a21\u5f0f\u4e0b\u521d\u59cb\u5316\uff0c\u5e76\u9690\u5f0f\u5173\u95edECHO\u3002\n\u60a8\u53ef\u80fd\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48RAWER\u662f\u6709\u6548\u7684\u9009\u9879\uff0c\u56e0\u4e3a\u5b83\u662f\u5728TERMIOS\u9009\u9879\u7ec4\u4e2d\u5b9a\u4e49\u7684\uff0c\u800cTERMIOS\u6ca1\u6709\u88ab\u5217\u4e3aGOPEN\u53ef\u7528\u7684\u9009\u9879\u7ec4\u4e4b\u4e00\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6ce2\u7279\u7387\u9009\u9879\u4e5f\u6765\u81eaTERMIOS\u3002\u5957\u63a5\u5b57CAT\u901a\u8fc7\u4f7fTERMIOS\u9009\u9879\u7ec4\u53ef\u7528\u6765\u4e3a\u5728TTY\u4e0a\u5de5\u4f5c\u7684\u5730\u5740\u63d0\u4f9b\u4f8b\u5916\u3002\n\u5982\u679c\u60a8\u5e0c\u671b\u907f\u514d\u522b\u540d\u548c\u9690\u5f0f\u5730\u5740\u7c7b\u578b\uff0c\u5219\u4ee5\u4e0b\u547d\u4ee4\u7b49\u6548\u3002\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u4fdd\u7559\u5957\u63a5\u5b57CAT\u4e2d\u7ee7\u4e32\u884c\u8fde\u63a5\u3002\u60a8\u53ef\u4ee5\u5c1d\u8bd5^C\uff0c\u8fd9\u662f\u4e2d\u65ad\u524d\u53f0\u4f5c\u4e1a\u7684\u9ed8\u8ba4\u65b9\u5f0f\u3002\u4f46\u662f\uff0c\u8be5\u5b57\u8282\u4e0d\u4f1a\u88ab\u5ba2\u6237\u7aef\u7684\u7ec8\u7aef\u4eff\u771f\u89e3\u91ca\uff0c\u800c\u662f\u901a\u8fc7\u4e2d\u65ad\u8bbe\u5907\u7aef\u7684\u524d\u53f0\u8fdb\u7a0b\u6765\u4f20\u9012\u3002\u6709\u8bb8\u591a\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u6240\u9700\u7684\u884c\u4e3a\u3002\u5957\u63a5\u5b57CAT\u624b\u518c\u9875(\u8bf7\u53c2\u89c1Socat(1))\u5efa\u8bae\u4f7f\u7528\u5e94\u7528\u7a0b\u5e8f\u9009\u9879\u7ec4\u4e2d\u7684\u8f6c\u4e49\u5730\u5740\u9009\u9879\u3002ESCAPE\u9009\u9879\u63a5\u53d7\u6807\u8bc6\u67d0\u4e2a\u952e\u7684keysym\u5341\u516d\u8fdb\u5236\u4ee3\u7801\uff0c\u5f53\u6309\u4e0b\u8be5\u952e\u65f6\uff0c\u5c06\u5411\u8f93\u5165\u6d41\u53d1\u9001EOF\uff0c\u4ece\u800c\u7ed3\u675f\u4e2d\u7ee7\u3002\n\u75310x0f\u6807\u8bc6\u7684\u5bc6\u94a5\u662fC-O\u3002\u8981\u83b7\u5f97loadkey(1)\u5df2\u77e5\u7684\u952e\u7b26\u7684\u5b8c\u6574\u5217\u8868\uff0c\u8bf7\u8fd0\u884cdumpkey-l\u3002\u5982\u679c\u60a8\u66fe\u7ecf\u5fd8\u8bb0\u5305\u62ec\u9000\u51fa\u9009\u9879\uff0c\u90a3\u4e48\u60a8\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u7ed9\u5b9aPID(\u8fdb\u7a0bID)\u901a\u8fc7KILL(1)\u53d1\u9001SIGINT(\u53c2\u89c1\u4fe1\u53f7(7))\u6765\u4ece\u53e6\u4e00\u4e2a\u7ec8\u7aef\u4e2d\u65ad\u5957\u63a5\u5b57\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528pidof(1)\u83b7\u5f97PID\u3002\n\u5728\u4e00\u4e2a\u7ec8\u7aef\u4e0a\u8fd0\u884cSocat\u7684\u60c5\u51b5\u4e0b\uff0c\u6253\u5f00\u7b2c\u4e8c\u4e2a\u7ec8\u7aef\u5e76\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5411SIGINT\u53d1\u9001Socat\u4fe1\u53f7\u3002\n\u6211\u60f3\u786e\u8ba4\u4e00\u4e0b\uff0c\u4f7f\u7528Socat\u4f5c\u4e3a\u4e32\u884c\u5b57\u8282\u6d41\u548cStdio\u5b57\u8282\u6d41\u4e4b\u95f4\u7684\u7c98\u5408\u5242\uff0c\u5b9e\u9645\u4e0a\u5c06\u5141\u8bb8\u6211\u8fd0\u884cncurses\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u4e0d\u4f1a\u635f\u574f\u663e\u793a\u3002\u4e3a\u4e86\u6d4b\u8bd5\u8fd9\u4e00\u70b9\uff0c\u6211\u5c06\u6211\u7684PinePhone\u8fde\u63a5\u5230/dev/ttyUSB0\uff0c\u6253\u5f00\u4e00\u4e2axterm\u4f1a\u8bdd\uff0c\u7136\u540e\u8fd0\u884c\u524d\u9762\u63d0\u5230\u7684socket\u547d\u4ee4\u3002\n\u7531\u4e8e\u6211\u7684PinePhone\u5728\u8fde\u63a5\u65f6\u5df2\u7ecf\u542f\u52a8\uff0c\u6240\u4ee5\u6ca1\u6709\u767b\u5f55\u63d0\u793a\u7b26\u7b49\u5f85\u95ee\u5019\u6211\u3002\u6211\u53ea\u9700\u5728\u7a7a\u767d\u5904\u952e\u5165\u6211\u7684\u7528\u6237\u540d\uff0c\u7136\u540e\u70b9\u51fb&lt\uff1bret&gt\uff1b\u3002\u6b64\u65f6\uff0c\u5bc6\u7801\u63d0\u793a\u663e\u793a\u4e3a\u7531\u5957\u63a5\u5b57CAT\u63a5\u6536\u7684\u5b57\u8282\uff0c\u5e76\u901a\u8fc7\u6211\u7684xterm\u4f1a\u8bdd\u7684\u6807\u51c6\u8f93\u51fa\u8fdb\u884c\u4e2d\u7ee7\u3002\u5728\u6211\u6210\u529f\u767b\u5f55\u5230\u6211\u7684shell\u5e10\u6237\u4e4b\u540e\uff0c\u6211\u8fd0\u884c\u4e86nmtui\uff0c\u5b83\u663e\u793a\u5728\u6211\u7684\u5c4f\u5e55\u4e0a\uff0c\u6ca1\u6709\u4efb\u4f55\u4e0d\u9700\u8981\u7684\u4e1c\u897f\u3002\n\u6211\u7684PinePhone\u8fd0\u884c\u7684\u662fpostmarket OS\uff0c\u767b\u5f55shell\u4e3aash\u3002\u6211\u5c06PinePhone\u7684\u4e32\u884c\u7aef\u53e3\u914d\u7f6e\u4e3a\u4f7f\u7528Linux\u7ec8\u7aef\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u8fd0\u884c\u5f69\u8272\u663e\u793a\u5668\u3002\n\u6211\u4f7f\u7528Minicom\u901a\u8fc7\u4e32\u884c\u8fde\u63a5\u6211\u7684PinePhone\u7684\u52a8\u673a\u662f\u56e0\u4e3a\u6211\u65e0\u8bba\u5982\u4f55\u90fd\u8981\u7528\u5b83\u6765\u914d\u7f6ePinePhone\u7684\u8c03\u5236\u89e3\u8c03\u5668\u3002\u6211\u60f3\u4f7f\u7528\u8fd9\u4e00\u4e2a\u5de5\u5177\u8fde\u63a5\u5230PinePhone\u5e76\u914d\u7f6e\u8c03\u5236\u89e3\u8c03\u5668\u4f1a\u5f88\u65b9\u4fbf\u3002\u4f46\u662f\uff0cSocket cat\u4f7f\u5f97\u901a\u8fc7\u4e32\u884cUART\u8fdb\u884c\u8fde\u63a5\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\uff0c\u9664\u975e\u60a8\u6709\u5f88\u597d\u7684\u7406\u7531\u4f7f\u7528\u5176\u4ed6\u4e1c\u897f\uff0c\u5426\u5219\u6211\u8ba4\u4e3a\u60a8\u5e94\u8be5\u8003\u8651\u8ba9Socket CAT\u6210\u4e3a\u60a8\u7684\u9ed8\u8ba4\u7c98\u5408\u5242\u3002\n\u63a5\u4e0b\u6765\uff0c\u6211\u5c06\u53d1\u5e03\u5173\u4e8e\u4f7f\u7528\u7b49\u79bb\u5b50\u79fb\u52a8\u8bbe\u5907\u8bbe\u7f6e\u552e\u540e\u5e02\u573a\u64cd\u4f5c\u7cfb\u7edf\u4ee5\u53ca\u4e3a\u6211\u7684SIM\u5361\u624b\u52a8\u914d\u7f6eOfono\u7684\u4fe1\u606f\u3002", "note_en": "I previously wrote  how to configure minicom to connect to a device over serial UART. In that post I mentioned that  minicom might not be the best tool for the job. Consider that  minicom is adding a lot of unnecessary complexity. If you think about it, we are taking a command line utility intended for communicating with modems, stripping all that functionality away so that we are left with nothing more than a terminal emulator that knows how to connect to a foreign  TTY. Yet, we are probably running  minicom from a perfectly capable terminal emulator such as  xterm. All we need is a way of connecting our terminal emulator to the target serial port in raw mode. As long as the device side is running a login on the receiving end, we can simply let our terminal emulator do what it was designed for.\n  With SOcket CAT (see  socat(1)) we can connect a serial port to a terminal emulator in raw mode.\n  SOcket Cat relays two bidirectional byte streams given their  address specifications. The order of the address specifications is irrelevant. The following command is equivalent:\n    The hyphen at the beginning is actually an alias for the address type  STDIO. Some address types take  parameters delimited by a  :. The comma separated list that follows are the address  options. Address options are defined in  option groups.  STDIO accepts options from the  FD, TERMIOS, REG, SOCKET option groups. The  rawer address option is defined in the  TERMIOS option group. It initializes the line discipline in raw mode and implicitly turns off  echo.\n   There is a rule that if a forward slash is found before the first colon or comma of an address specification, then the address type implicitly defaults to  GOPEN (Generic file Open) and accepts the (FD, REG, SOCKET, NAMED and OPEN) option groups. In other words,  /dev/ttyUSB0 is an address parameter to  GOPEN. After that the address option list begins. The first address option,  b115200/, sets the  baud rate to 115200. The second address option, which we are already familiar with, causes the  /dev/ttyUSB0/ to be initialized in raw mode and implicitly turns off  echo.\n You might be wondering how  rawer is a valid option since it is defined in the TERMIOS option group and TERMIOS was not listed as one of the option groups available to  GOPEN. In fact, the  baud rate option is also from TERMIOS. SOcket CAT makes an exception for addresses that work on a  TTY by making the  TERMIOS option group available.\n If you prefer to avoid aliases and implicit address types, then the following command is equivalent.\n   At some point you will want to leave your SOcket CAT relayed serial connection. You might try  ^C which is the default way to interrupt the foreground job. However, the byte will not be interpreted by terminal emulation on the client side, but instead will be passed through interrupting the foreground process on the device side. There are many ways to achieve the desired behaviour. The SOcket CAT man page (see  socat(1)) recommends using the  escape address option from the  APPLICATION option group. The  escape option accepts a keysym hex code identifying a key that, when pressed, will send an  EOF to the input stream thus ending the relay.\n  The key identified by  0x0f is  C-o. To get a complete list of keysyms known by  loadkeys(1) run  dumpkeys -l. If you ever forget to include the escape option, then you can still interrupt  socket from another terminal by sending  SIGINT (see  signal(7)) via  kill(1) given the  pid (Process ID). You can get the pid using  pidof(1).\n With  socat running in one terminal, open a second terminal and run the following command to signal  socat with  SIGINT.\n   I wanted to confirm that using  socat as the glue between serial and  STDIO byte streams would in fact allow me to run ncurses applications without garbling the display. To test this out, I connected my PinePhone to  /dev/ttyUSB0, opened an  xterm session and then ran the aforementioned  socat command.\n  Since my PinePhone was already booted at the time of connection, there was no login prompt waiting to greet me. I simply typed my username into the blank space and hit  &lt;RET&gt;. At that point the password prompt was displayed as bytes were received by SOcket CAT and relayed through standard output of my  xterm session. After I successfully signed into my shell account, I ran  nmtui and it displayed on my screen without any undesirable artifacts.\n  My PinePhone is running postmarketOS with  ash as the login shell. I configured the serial port of the PinePhone to use  linux  terminfo so that I can run colour displays.\n  My motivation to use  minicom to connect with my PinePhone over serial was stemed by the fact that I was using it anyway to configure the PinePhone\u2019s modem. I thought that it would be convenient to use this one tool to connect to the PinePhone and configure the modem. However,  SOcket CAT makes it so easy to connect over serial UART that unless you have a good reason to use something else, I think you should consider letting SOcket CAT be your default glue.\n Next I will be posting about setting up  postmarketOS with  Plasma Mobile and manually configuring  oFono for my SIM.", "posttime": "2020-05-17 08:14:43", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e32\u53e3,cat,\u8fd0\u884c", "title": "\u8ba9\u63d2\u5ea7\u732b\u6210\u4e3a\u4f60\u7684\u4e32\u53e3\u7c98\u5408\u5242", "title_en": "Let SOcket CAT Be Thy Glue over Serial", "transed": 1, "url": "https://bloggerbust.ca/post/let-socket-cat-be-thy-glue-over-serial/", "via": "", "real_tags": ["\u4e32\u53e3", "cat", "\u8fd0\u884c"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002469, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6709\u4e00\u53e5\u8457\u540d\u7684\u745c\u4f3d\u58eb\u00b7\u8d1d\u62c9\u7684\u540d\u8a00\u662f\u8fd9\u6837\u8bf4\u7684\uff1a\u6211\u7684\u8eab\u4f53\u72b6\u51b5\u5f88\u4e25\u91cd\u3002\u6211\u4e0d\u50cf\u4ee5\u524d\u90a3\u6837\u7ecf\u5e38\u4f7f\u7528\u5b83\u7684\u771f\u5b9e\u540d\u79f0\u4e86\u3002\u5f53\u6211\u8bf4\u51fa\u540d\u5b57\u65f6\uff0c\u4eba\u4eec\u7684\u53cd\u5e94\u4f1a\u5f88\u5947\u602a\uff1b\u5f53\u6211\u4e0d\u8bf4\u7684\u65f6\u5019\uff0c\u4eba\u4eec\u53c8\u4f1a\u8868\u73b0\u5f97\u597d\u50cf\u6211\u5728\u4fdd\u5b88\u79d8\u5bc6\u6216\u4ec0\u4e48\u3002\u4f46\u662f\uff0c\u603b\u4f53\u6765\u8bf4\uff0c\u793c\u8c8c\u5730\u5927\u58f0\u75be\u547c\u8bf4\u81ea\u5df1\u6709\u547c\u5438\u7cfb\u7edf\u95ee\u9898\uff0c\u6216\u8005\u58f0\u79f0\u81ea\u5df1\u5bf9\u7eb8\u5f20\u8fc7\u654f--\u6211\u8ba4\u4e3a\u81ea\u5df1\u5e76\u4e0d\u662f\u771f\u7684\u8fc7\u654f--\u6bd4\u8d77\u8bf4\u51fa\u6211\u7684\u75c5\u60c5\u7684\u771f\u5b9e\u540d\u79f0\u8981\u597d\u5f97\u591a\uff0c\u56e0\u4e3a\u4eba\u4eec\u4e0d\u7406\u89e3\u8fd9\u79cd\u60c5\u51b5\uff0c\u4e5f\u4e0d\u4f1a\u5bf9\u6b64\u505a\u51fa\u5f3a\u70c8\u53cd\u5e94\u3002\u4ec5\u4ec5\u7ed9\u5b83\u8d77\u4e2a\u540d\u5b57\u5c31\u4f1a\u8ba9\u4eba\u89c9\u5f97\u6211\u662f\u67d0\u79cd\u620f\u5267\u6027\u7684\u5973\u738b\u3002\u6211\u4e0d\u662f\uff0c\u6240\u4ee5\u6211\u57fa\u672c\u4e0a\u4e0d\u518d\u4f7f\u7528\u8fd9\u4e2a\u540d\u5b57\uff0c\u53ef\u80fd\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u4ee5\u771f\u76f8\u4e3a\u4ee3\u4ef7\u7684\uff0c\u4f46\u8fd9\u5728\u793e\u4f1a\u4e0a\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u80dc\u5229\u3002\u6240\u4ee5\u6211\u82b1\u4e86\u5f88\u591a\u5e74\u7684\u65f6\u95f4\u6765\u5c1d\u8bd5\u56f4\u7ed5\u7ec6\u83cc\u63a7\u5236\u6765\u5b89\u6392\u6211\u7684\u751f\u6d3b\u3002\u5728\u5176\u4ed6\u4e8b\u60c5\u4e2d\uff0c\u6211\u505a\u8fdc\u7a0b\u5de5\u4f5c--\u5305\u62ec\u5199\u535a\u5ba2--\u4ee5\u907f\u514d\u4e0d\u5f97\u4e0d\u5f97\u5230\u4e00\u4efd\u771f\u6b63\u7684\u5de5\u4f5c\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u771f\u6b63\u7684\u5de5\u4f5c\u5bf9\u6211\u7684\u5065\u5eb7\u90fd\u662f\u6709\u5bb3\u7684\u3002\u8003\u8651\u5230\u6211\u548c\u6211\u7684\u5927\u513f\u5b50\u6709\u76f8\u540c\u7684\u8bca\u65ad--\u9057\u4f20\u75be\u75c5\u5f80\u5f80\u662f\u8fd9\u6837\u5728\u5bb6\u65cf\u4e2d\u6d41\u4f20--\u6bcf\u4e2a\u75c5\u4eba\u6bcf\u5e74\u7684\u82b1\u8d39\u53ef\u80fd\u9ad8\u8fbe25\u4e07\u7f8e\u5143\uff0c\u505a\u96f6\u5de5\u3001\u52c9\u5f3a\u7cca\u53e3\u548c\u6781\u5ea6\u8d2b\u7a77\u662f\u6211\u4eec\u5728\u8fc7\u53bb19\u5e74\u91cc\u907f\u514d\u4e86\u4f30\u8ba1950\u4e07\u7f8e\u5143\u7684\u533b\u7597\u8d39\u7528\u7684\u539f\u56e0\uff0c\u81ea\u4ece\u6211\u88ab\u8bca\u65ad\u51fa\u6765\u4e4b\u540e\uff0c\u6211\u53d8\u5f97\u66f4\u5065\u5eb7\u4e86\uff0c\u8fd9\u662f\u4e16\u754c\u4e0a\u8bf4\u4e0d\u53ef\u80fd\u505a\u7684\u4e8b\u60c5\u3002\u5728\u8fc7\u53bb\u768419\u5e74\u91cc\uff0c\u6211\u4eec\u907f\u514d\u4e86\u5927\u7ea6950\u4e07\u7f8e\u5143\u7684\u533b\u7597\u8d39\u7528\uff0c\u800c\u4e16\u754c\u90fd\u8bf4\u8fd9\u662f\u4e0d\u53ef\u80fd\u505a\u5230\u7684\u3002\u56e0\u6b64\uff0c\u5f53\u5927\u6d41\u884c\u5f00\u59cb\u65f6\uff0c\u5b83\u51e0\u4e4e\u6ca1\u6709\u5f71\u54cd\u6211\u7684\u751f\u6d3b\u3002\u7ec6\u83cc\u63a7\u5236\u5df2\u7ecf\u662f\u6211\u7684\u751f\u6d3b\u4e86\u3002\u8981\u8fbe\u5230\u8fd9\u4e00\u70b9\uff0c\u5168\u7403\u5927\u6d41\u884c\u662f\u6211\u751f\u547d\u4e2d\u4ee4\u4eba\u607c\u706b\u7684\u77ed\u6682\u65f6\u523b\uff0c\u8fd9\u662f\u4e00\u6bb5\u6f2b\u957f\u800c\u964c\u751f\u7684\u65c5\u7a0b\u3002\u5176\u4e2d\u5305\u62ec\u8fd1\u516d\u5e74\u7684\u65e0\u5bb6\u53ef\u5f52\u73b0\u8c61\u3002\u65e0\u5bb6\u53ef\u5f52\u65f6\uff0c\u6211\u548c\u513f\u5b50\u4eec\u7ecf\u5e38\u8bd5\u56fe\u627e\u5230\u504f\u50fb\u7684\u516c\u5171\u9910\u684c\u3002\u51fa\u4e8e\u7ec6\u83cc\u63a7\u5236\u7684\u76ee\u7684\uff0c\u6211\u4eec\u4e0d\u60f3\u5728\u9910\u5385\u7528\u9910\uff0c\u800c\u4e14\u65e0\u5bb6\u53ef\u5f52\u7684\u4eba\u5728\u9910\u5385\u4e5f\u4e0d\u53d7\u6b22\u8fce\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u53eb\u5916\u5356\uff0c\u7136\u540e\u5728\u6237\u5916\u627e\u5f20\u684c\u5b50\u3002\u4ee4\u6211\u4eec\u975e\u5e38\u607c\u706b\u7684\u662f\uff0c\u8fd9\u8ba9\u6211\u4eec\u6700\u559c\u6b22\u7684\u4e00\u4e9b\u504f\u50fb\u7684\u9910\u5385\u53d8\u5f97\u6d41\u884c\u8d77\u6765\u3002\u6211\u4eec\u5fc5\u987b\u627e\u4e2a\u65b0\u7684\u5730\u65b9\u5403\u4e1c\u897f\uff0c\u800c\u4e0d\u4f1a\u88ab\u54b3\u55fd\u3001\u6253\u55b7\u568f\u3001\u5e26\u83cc\u7684\u3001\u70e6\u4eba\u7684\u4eba\u5305\u56f4\u3002\u6211\u4eec\u5f00\u59cb\u4f8b\u884c\u516c\u4e8b\u5730\u8bf4\uff0c\u518d\u4e5f\u6ca1\u6709\u4eba\u53bb\u90a3\u91cc\u4e86\u3002\u8fd9\u91cc\u592a\u62e5\u6324\u4e86\u3002\u5728\u67d0\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u8c08\u5230\u4e86\u745c\u4f3d\u58eb\u00b7\u8d1d\u62c9(Yogi Berra)\u6240\u8bf4\u7684\u8bdd\uff0c\u4ee5\u53ca\u4ed6\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u4e48\u8bf4\uff0c\u4e3a\u4ec0\u4e48\u5b83\u5f88\u597d\u7b11\uff0c\u4e3a\u4ec0\u4e48\u5b83\u53ef\u80fd\u5305\u542b\u4e00\u4e01\u70b9\u771f\u7406\u6216\u667a\u6167\u3002\u4ed6\u5f88\u51fa\u540d\u3002\u4e5f\u8bb8\u4ed6\u6709\u6211\u4eec\u65e0\u5bb6\u53ef\u5f52\u65f6\u540c\u6837\u7684\u95ee\u9898\uff1a\u65e0\u8bba\u4ed6\u53bb\u54ea\u91cc\u9003\u907f\uff0c\u5f88\u5feb\u5c31\u4f1a\u6210\u4e3a\u65b0\u7684\u70ed\u70b9\u3002\u7136\u540e\u4e5f\u8bb8\u4ed6\u4e0d\u5f97\u4e0d\u627e\u522b\u7684\u5730\u65b9\u53bb\u8eb2\u907f\u4eba\u7fa4\u3002\u4e5f\u8bb8\u5f53\u4e00\u4e2a\u540d\u4eba\u8bf4\u51fa\u8fd9\u6837\u7684\u8bdd\u65f6\uff0c\u6f5c\u53f0\u8bcd\u662f\u6ca1\u6709\u4eba\u518d\u53bb\u90a3\u91cc\u4e86\u3002\u5b83\u5df2\u7ecf\u88ab\u6ca1\u6d17\u8fc7\u7684\u7fa4\u4f17\u63a5\u7ba1\u4e86\u3002\u5b83\u4e0d\u518d\u6ee1\u8db3\u6211\u7684\u9700\u8981\u4e86\u3002\u6211\u548c\u6211\u90a3\u4e9b\u6709\u94b1\u53c8\u6709\u540d\u6c14\u7684\u670b\u53cb\u4e0d\u518d\u5728\u90a3\u91cc\u95f2\u901b\u4e86\u3002&#34\uff1b\u6211\u77e5\u9053\u5f88\u591a\u5173\u4e8e\u7ec6\u83cc\u63a7\u5236\u7684\u77e5\u8bc6\u3002\u7ec6\u83cc\u63a7\u5236\u5c31\u662f\u6211\u7684\u751f\u547d\u3002\u6ca1\u6709\u4eba\u60f3\u542c\uff0c\u56e0\u4e3a\u62ef\u6551\u6211\u751f\u547d\u6240\u5fc5\u9700\u7684\u8fc7\u7a0b\u8ba9\u6211\u5728\u793e\u4f1a\u4e0a\u53d8\u5f97\u5982\u6b64\u5b64\u7acb\uff0c\u4ee5\u81f3\u4e8e\u4eba\u4eec\u8ba4\u4e3a\u6211\u5e76\u4e0d\u771f\u6b63\u5b58\u5728\u6216\u4ec0\u4e48\u7684\u3002\u6211\u628a\u6240\u6709\u7684\u65f6\u95f4\u90fd\u82b1\u5728\u4e92\u8054\u7f51\u4e0a\u3002\u8fd9\u5c31\u662f\u6211\u7684\u793e\u4ea4\u65b9\u5f0f\uff0c\u4e5f\u662f\u6211\u8d5a\u94b1\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3a\u6211\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u800c\u4e0d\u4f1a\u6709\u4eba\u5bf9\u6211\u54b3\u55fd\u4e4b\u7c7b\u7684\u3002\u8fd9\u5c31\u662f\u6211\u5982\u4f55\u505a\u7814\u7a76\u6765\u5e2e\u52a9\u6211\u7684\u6e38\u620f\uff0c\u8fd9\u6837\u6211\u5c31\u53ef\u4ee5\u66f4\u597d\u5730\u7167\u987e\u81ea\u5df1\u3002\u8fd9\u5c31\u662f\u6211\u5728\u751f\u6d3b\u4e2d\u505a\u5927\u591a\u6570\u4e8b\u60c5\u7684\u65b9\u5f0f\u3002\u4eba\u4eec\u8ba4\u4e3a\u6211\u662f\u673a\u5668\u91cc\u7684\u5e7d\u7075\uff0c\u662f\u4ed6\u4eec\u60f3\u8c61\u4e2d\u7684\u865a\u6784\u4eba\u7269\uff0c\u4e00\u4e9b\u9752\u5c11\u5e74\u4f4f\u5728\u4ed6\u4eec\u7236\u6bcd\u7684\u5730\u4e0b\u5ba4\u91cc\uff0c\u8bb2\u4e00\u4e9b\u80e1\u8bf4\u516b\u9053\u548c\u54a7\u5634\u7b11\u7684\u6545\u4e8b\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u4ed6\u4eec\u8ba4\u4e3a\u6211\u662f\u4e2a\u5de8\u9b54\u3002\u7136\u540e\u6211\u5f00\u59cb\u5199\u535a\u5ba2\uff0c\u540d\u5b57\u53ebWhile the World Burns\uff0c\u505c\u6b62\u89e6\u6478\u4f60\u7684\u8138\uff0c\u56e0\u4e3a\u5728\u89d2\u843d\u91cc\u7a83\u7b11\u6211\u662f\u5982\u4f55\u5f04\u660e\u767d\u8fd9\u4e00\u70b9\u7684\uff0c\u8fd9\u4e0d\u662f\u5176\u4ed6\u4eba\u60f3\u8981\u542c\u5230\u7684\uff0c\u4e5f\u4e0d\u4f1a\u8ba9\u4f60\u8bf4\u51fa\u8fd9\u4e2a\u8bcd\u3002\u4f3c\u4e4e\u6ca1\u6709\u529e\u6cd5\u628a\u8fd9\u4e2a\u8bcd\u4f20\u51fa\u53bb\u3002\u5728\u4e00\u4e2a\u4efb\u4f55\u767d\u75f4\u90fd\u53ef\u4ee5\u5f00\u8bbe\u514d\u8d39\u535a\u5ba2\u7684\u4e16\u754c\u91cc\uff0c\u4f60\u4ecd\u7136\u4e0d\u80fd\u8bf4\u51fa\u8fd9\u4e2a\u8bcd\uff0c\u56e0\u4e3a\u6700\u5927\u7684\u969c\u788d\u4e0d\u662f\u4f20\u64ad\u4fe1\u606f\u7684\u6280\u672f\u624b\u6bb5\uff0c\u800c\u662f\u5b83\u7684\u601d\u60f3\u5171\u4eab\u3002\u5b83\u6b63\u5728\u8d85\u8d8a\u4eba\u4eec\u7684\u504f\u89c1\u3002\u6709\u4eba\u8bf4\uff0c\u53ea\u6709\u5f53\u8001\u4fdd\u5b88\u6d3e\u6b7b\u4e86\uff0c\u60c5\u51b5\u624d\u4f1a\u6539\u53d8\u3002\u6211\u538c\u5026\u4e86\u7b49\u5f85\u6bcf\u4e2a\u4eba\u90fd\u6b7b\u53bb\uff0c\u8fd9\u6837\u6211\u5c31\u53ef\u4ee5\u53d1\u51fa\u81ea\u5df1\u7684\u58f0\u97f3\uff0c\u5206\u4eab\u6211\u7684\u6545\u4e8b\uff0c\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5e2e\u52a9\u4eba\u4eec\u3002\u6211\u662f3027\u6b21\u5c1d\u8bd5\u627e\u5230\u6211\u7684\u58f0\u97f3\u3002", "note_en": "There&#39;s a famous Yogi Berra quote that goes: I have a serious medical condition. I don&#39;t use the actual name of it as often as I used to. People react weirdly when I name it, then act like I&#39;m keeping secrets or something when I don&#39;t.  But, overall, it&#39;s less drama to make polite noises about having respiratory problems or claiming to have a paper allergy that I don&#39;t think I actually have, though papers do make me quite sick these days, than to use the actual name of my condition, which people don&#39;t understand and also react strongly to.   Just naming it makes people think I&#39;m some kind of drama queen. I&#39;m not, so I mostly stopped using the name for it, possibly at the cost of the truth to some degree, but it&#39;s been a big win socially.  So I&#39;ve spent a lot of years trying to arrange my life around germ control. Among other things, I do remote work -- including blogging -- to avoid having to get &#34;a real job&#34; because most &#34;real jobs&#34; would be detrimental to my health.  Given that me and my oldest son have the same diagnosis -- genetic disorders tend to run in the family like that -- and it can cost up to a quarter million dollars per patient per year, doing gig work and living hand to mouth and being dirt poor is how we have avoided an estimated $9.5 million in medical expenses in the last 19 years since I was diagnosed while getting healthier, something the world says cannot be done.  So when the pandemic began, it barely impacted my life. Germ control is already my life.   Getting to that point, where a global pandemic was kind of an annoying blip in my life, was a long strange journey. It included nearly six years of homelessness.  While homeless, my sons and I routinely tried to find out-of-the-way public tables. For purposes of germ control, we didn&#39;t want to eat in restaurants and homeless people aren&#39;t welcome in restaurants anyway. So we would get takeout and go find a table somewhere outdoors.   Much to our annoyance, this popularized some of our favorite out-of-the-way eating places. We would have to find some new spot to take our food and eat without being surrounded by coughing, sneezing, germy, annoying people.   We began routinely saying &#34;No one goes there anymore. It&#39;s too crowded.&#34;  At some point, we talked about the Yogi Berra saying and why he might say it, why it&#39;s funny and why it may contain a grain of truth or wisdom.  He was famous. Maybe he had the same problem we had while homeless: Wherever he went to get away from it all soon became the new hot spot. Then maybe he had to find someplace else to go to avoid the crowds.  Maybe when a famous person says something like that, the subtext is &#34;No one who is anyone goes there anymore. It&#39;s been taken over by the unwashed masses. It doesn&#39;t serve my needs anymore. Me and my rich and famous friends no longer hang out there.&#34;  I know a lot about germ control. Germ control is my life.  And no one wants to hear it because the very process that was necessary to save my life has left me so socially isolated that people think I don&#39;t really exist or something. I spend all my time on the internet.   That&#39;s how I socialize and that&#39;s how I make money because I can do that without people coughing on me and stuff like that. That&#39;s how I do research to help up my game so I can better care for myself. That&#39;s how I do most things in life.  And people think I&#39;m a ghost in the machine, a figment of their imagination, some teenager living in their parent&#39;s basement telling tall tales for shits and grins. In short, they think I&#39;m a troll.  And then I start blogs with names like While the World Burns and Stop Touching Your Face that never get developed because snickering in the corner about how I have this figured out isn&#39;t something other people want to hear and it won&#39;t get the word out.  There seems to be no way to get the word out. In a world where any idiot can start a free blog, you still can&#39;t get the word out because the biggest barrier is not technical means to disseminate information, it&#39;s mindshare. It&#39;s getting past people&#39;s prejudices.  It&#39;s been said that things only change when the old guard dies. I&#39;m tired of waiting for everyone to die so I can find my voice and share my story and help people in some way.  This is attempt number 3027 to find my voice.", "posttime": "2020-05-17 07:59:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "anymore,\u4eba\u4eec", "title": "\u518d\u4e5f\u6ca1\u6709\u4eba\u53bb\u90a3\u91cc\u4e86", "title_en": "No One Goes There Anymore", "transed": 1, "url": "https://noonegoesthereanymore.blogspot.com/2020/05/no-one-goes-there-anymore.html", "via": "", "real_tags": ["anymore", "\u4eba\u4eec"]}, {"category": "", "categoryclass": "", "imagename": "43486d01b4f8e52b6962b0e7fa63e5a0.jpg", "infoid": 1002468, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u201c\u6070\u5230\u597d\u5904\u201d\u5c9b\uff0c\u4e5f\u88ab\u79f0\u4e3a\u67a2\u7ebd\u5c9b\uff0c[1]\u662f\u4e00\u4e2a\u4f4d\u4e8e\u5343\u5c9b\u94fe\u4e0a\u7684\u5c9b\u5c7f\uff0c\u5c5e\u4e8e\u7f8e\u56fd\u7ebd\u7ea6\u5dde\u3002\u8be5\u5c9b\u4ee5\u6700\u5c0f\u7684\u6709\u4eba\u5c45\u4f4f\u5c9b\u5c7f\u800c\u95fb\u540d\uff0c\u9762\u79ef\u7ea6\u4e3a3300\u5e73\u65b9\u82f1\u5c3a(310\u5e73\u65b9\u7c73)\uff0c\u7ea6\u540813\u82f1\u4ea9\u3002\u897f\u5179\u5170\u5bb6\u65cf\u572820\u4e16\u7eaa50\u5e74\u4ee3\u8d2d\u4e70\u4e86\u8fd9\u4e2a\u5c9b\uff0c\u5c9b\u4e0a\u6709\u4e00\u5ea7\u623f\u5b50\uff0c\u4e00\u68f5\u6811\uff0c\u704c\u6728\u548c\u4e00\u4e2a\u5c0f\u6d77\u6ee9\u3002[2]\u3002\n\u8fd9\u4e2a\u5c9b\u662f\u572820\u4e16\u7eaa50\u5e74\u4ee3\u88ab\u897f\u5179\u5170\u5bb6\u65cf\u4e70\u4e0b\u7684\uff0c\u4ed6\u4eec\u60f3\u8981\u4e00\u4e2a\u5ea6\u5047\u80dc\u5730\uff0c\u5e76\u5728\u90a3\u91cc\u5efa\u4e86\u4e00\u5ea7\u623f\u5b50\u3002[2]2010\u5e74\uff0c\u201c\u534e\u76db\u987f\u90ae\u62a5\u201d\u79f0\uff0c\u7531\u4e8e\u8fd9\u4e2a\u5c9b\u7684\u9762\u79ef\u5f88\u5c0f\uff0c\u5982\u679c\u4f60\u8d70\u9519\u4e00\u6b65\uff0c\u4f60\u5c31\u4f1a\u518d\u6b21\u6e38\u6765\u6e38\u53bb\u3002[3]\u3002\n\u6070\u597d\u8db3\u591f\u7684\u7a7a\u95f4\u4f4d\u4e8e\u5fc3\u5c9b\u548c\u5e1d\u56fd\u5c9b\u4e4b\u95f4\u7684\u5723\u52b3\u4f26\u65af\u6cb3\u4e0a\uff0c\u9760\u8fd1\u7f8e\u56fd\u4e0e\u52a0\u62ff\u5927\u7684\u8fb9\u5883\u3002\u8be5\u5c9b\u5c5e\u4e8e\u4e9a\u5386\u5c71\u5927\u6e7e\uff0c\u662f\u7ebd\u7ea6\u5dde\u6770\u6590\u900a\u53bf\u4e9a\u5386\u5c71\u5927\u9547\u7684\u4e00\u4e2a\u6751\u5e84\u3002", "note_en": "Just Room Enough Island, also known as  Hub Island,  [1] is an island located in the  Thousand Islands chain, belonging to  New York,  United States. The island is known for being the smallest inhabited island, which appears to be around 3,300 square feet (310\u00a0m 2), or about one-thirteenth of an acre. Purchased by the Sizeland family in the 1950s, the island has a house, a tree, shrubs, and a small beach.  [2]\n   The island was bought in the 1950s by the Sizeland family, who wanted a holiday getaway and built a house there.  [2] Because of the island&#39;s small size, in 2010, the   Washington Post stated, &#34;One misstep and you&#39;re swimming&#34;.  [3]\n  Just Room Enough lies on the  Saint Lawrence River between  Heart Island and  Imperial Isle, close to  the US border with  Canada. The island belongs to  Alexandria Bay,  [1] a village part of the town of  Alexandria,  Jefferson County,  New York.", "posttime": "2020-05-17 07:59:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a7a\u95f4,room,\u7f8e\u56fd", "title": "\u521a\u597d\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u5c9b", "title_en": "Just Room Enough Island", "transed": 1, "url": "https://en.wikipedia.org/wiki/Just_Room_Enough_Island", "via": "", "real_tags": ["\u7a7a\u95f4", "room", "\u7f8e\u56fd"]}, {"category": "", "categoryclass": "", "imagename": "db4197e44ad601340fef39b1bf4eabf6.jpg", "infoid": 1002467, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51a0\u72b6\u75c5\u6bd2\u6a21\u578b\u5bfc\u81f4\u82f1\u56fd\u9677\u5165\u5c01\u9501\uff0c\u7ecf\u6d4e\u5173\u95ed\uff0c\u6570\u767e\u4e07\u4eba\u5931\u4e1a\uff0c\u906d\u5230\u4e86\u4e00\u7cfb\u5217\u4e13\u5bb6\u7684\u731b\u70c8\u62a8\u51fb\u3002\n\u9886\u5bfc\u4eba\u7269\u5632\u7b11\u5c3c\u5c14\u00b7\u5f17\u683c\u68ee\u6559\u6388\u7684\u8ba1\u7b97\u673a\u4ee3\u7801\u201c\u5b8c\u5168\u4e0d\u53ef\u9760\u201d\uff0c\u4ed6\u4eec\u8b66\u544a\u8bf4\uff0c\u8fd9\u662f\u201c\u4f60\u4e0d\u4f1a\u62ff\u751f\u547d\u53bb\u5192\u9669\u7684\u4e1c\u897f\u201d\u3002\n\u82f1\u56fd\u6570\u636e\u6280\u672f\u516c\u53f8WANdiso\u7684\u8054\u5408\u521b\u59cb\u4eba\u5927\u536b\u00b7\u7406\u67e5\u5179(David Richards)\u8868\u793a\uff0c\u8fd9\u79cd\u6a21\u5f0f\u88ab\u8a89\u4e3a\u8feb\u4f7f\u653f\u5e9c\u505a\u51fa180\u5ea6\u5927\u8f6c\u5f2f\uff0c\u5e76\u5728\u5168\u56fd\u8303\u56f4\u5185\u5b9e\u65bd\u5c01\u9501\u3002\u8fd9\u79cd\u6a21\u5f0f\u662f\u201c\u4e00\u56e2\u4e71\u4e03\u516b\u7cdf\u7684\u4e1c\u897f\uff0c\u770b\u8d77\u6765\u66f4\u50cf\u4e00\u7897\u5929\u4f7f\u5934\u53d1\u7684\u610f\u5927\u5229\u9762\uff0c\u800c\u4e0d\u662f\u4e00\u6bb5\u7cbe\u5fc3\u8c03\u6574\u7684\u7a0b\u5e8f\u201d\u3002\n\u201c\u5728\u6211\u4eec\u7684\u5546\u4e1a\u73b0\u5b9e\u4e2d\uff0c\u6211\u4eec\u4f1a\u56e0\u4e3a\u5f00\u53d1\u8fd9\u6837\u7684\u4ee3\u7801\u800c\u89e3\u96c7\u4efb\u4f55\u4eba\uff0c\u4efb\u4f55\u4f9d\u8d56\u5b83\u6765\u751f\u4ea7\u8f6f\u4ef6\u4ee5\u4f9b\u9500\u552e\u7684\u4f01\u4e1a\u90fd\u53ef\u80fd\u7834\u4ea7\u3002\u201d\n\u8fd9\u4e9b\u8a00\u8bba\u53ef\u80fd\u4f1a\u91cd\u65b0\u5f15\u53d1\u5173\u4e8e\u82f1\u56fd\u5c06\u516c\u4f17\u7f6e\u4e8e\u5c01\u9501\u72b6\u6001\u662f\u5426\u6b63\u786e\u7684\u4e89\u8bba\uff0c\u76f8\u4e92\u77db\u76fe\u7684\u79d1\u5b66\u6a21\u578b\u8868\u660e\uff0c\u4eba\u4eec\u53ef\u80fd\u5df2\u7ecf\u83b7\u5f97\u4e86\u5b9e\u8d28\u6027\u7684\u7fa4\u4f53\u514d\u75ab\u529b\uff0c\u51a0\u72b6\u75c5\u6bd2\u53ef\u80fd\u6bd4\u6700\u521d\u8ba4\u4e3a\u7684\u66f4\u65e9\u88ad\u51fb\u82f1\u56fd\u3002\u79d1\u5b66\u5bb6\u4eec\u5bf9\u51a0\u72b6\u75c5\u6bd2\u7684\u81f4\u6b7b\u7387\u4e5f\u5b58\u5728\u5206\u6b67\uff0c\u8fd9\u5bfc\u81f4\u4e86\u622a\u7136\u4e0d\u540c\u7684\u6a21\u578b\u3002\n\u7136\u800c\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5e1d\u56fd\u7406\u5de5\u5b66\u9662\u7684\u6a21\u578b\u53d7\u5230\u4e86\u5f88\u5927\u7684\u91cd\u89c6\uff0c\u8be5\u6a21\u578b\u7684\u6b7b\u4ea1\u7387\u6bd4\u5176\u4ed6\u6a21\u578b\u9ad8\uff0c\u5e76\u9884\u6d4b\u5982\u679c\u4e0d\u5b9e\u884c\u5c01\u9501\uff0c\u82f1\u56fd\u53ef\u80fd\u4f1a\u670951\u4e07\u4eba\u6b7b\u4ea1\u3002\n\u636e\u8bf4\uff0c\u8fd9\u4fc3\u4f7f\u653f\u5e9c\u5728\u653f\u7b56\u4e0a\u505a\u51fa\u4e86\u620f\u5267\u6027\u7684\u6539\u53d8\uff0c\u5bfc\u81f4\u5546\u4e1a\u3001\u5b66\u6821\u548c\u9910\u9986\u57283\u6708\u4efd\u7acb\u5373\u5173\u95ed\u3002\u82f1\u56fd\u592e\u884c(Bank Of England)\u9884\u6d4b\uff0c\u5728\u9762\u4e34\u4e09\u4e2a\u591a\u4e16\u7eaa\u4ee5\u6765\u6700\u4e25\u91cd\u7684\u8870\u9000\u540e\uff0c\u7ecf\u6d4e\u53ef\u80fd\u9700\u8981\u4e00\u5e74\u65f6\u95f4\u624d\u80fd\u6062\u590d\u6b63\u5e38\u3002\n\u5e1d\u56fd\u6a21\u578b\u7684\u5de5\u4f5c\u539f\u7406\u662f\u4f7f\u7528\u4ee3\u7801\u6a21\u62df\u4ea4\u901a\u8fde\u63a5\u3001\u4eba\u53e3\u89c4\u6a21\u3001\u793e\u4ea4\u7f51\u7edc\u548c\u533b\u7597\u4fdd\u5065\u4f9b\u5e94\uff0c\u4ee5\u9884\u6d4b\u51a0\u72b6\u75c5\u6bd2\u5c06\u5982\u4f55\u4f20\u64ad\u3002\u7136\u800c\uff0c\u5728\u7814\u7a76\u4eba\u5458\u516c\u5e03\u4e86\u8be5\u6a21\u578b\u80cc\u540e\u7684\u4ee3\u7801\u540e\uff0c\u4eba\u4eec\u5f00\u59cb\u8d28\u7591\u8be5\u6a21\u578b\u662f\u5426\u51c6\u786e\u3002\u4ee3\u7801\u6700\u521d\u7684\u5f62\u5f0f\u662f\u7ecf\u8fc713\u5e74\u591a\u7684\u65f6\u95f4\u5f00\u53d1\u7684\u201c\u6570\u5343\u884c\u201d\u3002\n\u636e\u7f8e\u56fd\u5f00\u53d1\u4eba\u5458\u7ea6\u7ff0\u00b7\u5361\u9a6c\u514b(John Carmack)\u8bf4\uff0c\u5728\u4ee3\u7801\u6700\u521d\u7684\u5f62\u5f0f\u4e0b\uff0c\u5f00\u53d1\u4eba\u5458\u58f0\u79f0\u4ee3\u7801\u662f\u4e0d\u53ef\u8bfb\u7684\uff0c\u6709\u4e9b\u90e8\u5206\u770b\u8d77\u6765\u201c\u5c31\u50cf\u662f\u4eceFortran(\u4e00\u79cd\u65e7\u7684\u7f16\u7801\u8bed\u8a00)\u201d\u673a\u5668\u7ffb\u8bd1\u8fc7\u6765\u7684\u3002\u5728\u4ee3\u7801\u53d1\u5e03\u5230\u7f51\u4e0a\u4e4b\u524d\uff0c\u4ed6\u5e2e\u52a9\u6e05\u7406\u4e86\u4ee3\u7801\u3002\u7136\u800c\uff0c\u95ee\u9898\u4f3c\u4e4e\u6bd4\u6742\u4e71\u65e0\u7ae0\u7684\u7f16\u7801\u8981\u6df1\u5f97\u591a\u3002\n\u8bb8\u591a\u4eba\u58f0\u79f0\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u4ee3\u7801\u4ece\u76f8\u540c\u7684\u6570\u636e\u4e2d\u91cd\u73b0\u76f8\u540c\u7684\u7ed3\u679c\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u7231\u4e01\u5821\u5927\u5b66\u7684\u79d1\u5b66\u5bb6\u62a5\u544a\u4e86\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff0c\u4ed6\u4eec\u8bf4\uff0c\u5f53\u4ed6\u4eec\u4f7f\u7528\u4e0d\u540c\u7684\u673a\u5668\u65f6\uff0c\u751a\u81f3\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5f53\u4ed6\u4eec\u4f7f\u7528\u76f8\u540c\u7684\u673a\u5668\u65f6\uff0c\u4ed6\u4eec\u4f1a\u5f97\u5230\u4e0d\u540c\u7684\u7ed3\u679c\u3002\n\u201c\u7f51\u7edc\u6587\u4ef6\u7684\u521b\u5efa\u6216\u91cd\u65b0\u4f7f\u7528\u4f3c\u4e4e\u5b58\u5728\u9519\u8bef\u3002\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u4e24\u6b21\u5b8c\u5168\u76f8\u540c\u7684\u8fd0\u884c\uff0c\u53ea\u662f\u7b2c\u4e8c\u6b21\u4f7f\u7528\u7b2c\u4e00\u6b21\u4ea7\u751f\u7684\u7f51\u7edc\u6587\u4ef6\u6709\u6240\u4e0d\u540c\uff0c\u7ed3\u679c\u5c31\u5927\u76f8\u5f84\u5ead\u4e86\uff0c\u201c\u7231\u4e01\u5821\u7684\u7814\u7a76\u4eba\u5458\u5728Github\u6587\u4ef6\u4e0a\u5199\u9053\u3002\n\u5728\u4e0e\u5176\u4e2d\u4e00\u4f4dGithub\u5f00\u53d1\u4eba\u5458\u8ba8\u8bba\u540e\uff0c\u540e\u6765\u63d0\u4f9b\u4e86\u4fee\u590d\u3002\u636e\u8bf4\u8fd9\u662f\u5728\u7cfb\u7edf\u4e2d\u53d1\u73b0\u7684\u8bb8\u591a\u9519\u8bef\u4e4b\u4e00\u3002Github\u7684\u5f00\u53d1\u4eba\u5458\u89e3\u91ca\u8bf4\uff0c\u8fd9\u4e2a\u6a21\u578b\u662f\u201c\u968f\u673a\u7684\u201d\uff0c\u201c\u5e94\u8be5\u7528\u4e0d\u540c\u7684\u79cd\u5b50\u8fdb\u884c\u591a\u6b21\u8fd0\u884c\uff0c\u624d\u80fd\u770b\u5230\u5e73\u5747\u884c\u4e3a\u201d\u3002\n\u7136\u800c\uff0c\u8fd9\u4e5f\u5f15\u53d1\u4e86\u4e13\u5bb6\u7684\u8d28\u7591\uff0c\u4ed6\u4eec\u8bf4\uff0c\u201c\u6a21\u578b\u5fc5\u987b\u80fd\u591f\u901a\u8fc7\u57fa\u672c\u7684\u79d1\u5b66\u6d4b\u8bd5\uff0c\u5728\u7ed9\u5b9a\u76f8\u540c\u7684\u521d\u59cb\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u4ea7\u751f\u76f8\u540c\u7684\u7ed3\u679c\u2026\u2026\u5426\u5219\uff0c\u6839\u672c\u6ca1\u6709\u529e\u6cd5\u77e5\u9053\u5b83\u4eec\u662f\u5426\u53ef\u9760\u3002\u201d\n\u4e0e\u6b64\u540c\u65f6\uff0c\u4eba\u4eec\u6b63\u5728\u5c31\u653f\u5e9c\u662f\u5426\u5e94\u8be5\u5728\u5236\u5b9a\u653f\u7b56\u4e4b\u524d\u66f4\u591a\u5730\u4f9d\u8d56\u4f17\u591a\u6a21\u5f0f\u5c55\u5f00\u66f4\u5e7f\u6cdb\u7684\u8fa9\u8bba\u3002\n\u8036\u7a23\u5b66\u9662(Jesse College)\u6821\u957f\u5948\u6770\u5c14\u00b7\u6c99\u5fb7\u535a\u5c14\u7279\u7235\u58eb(Sir Nigel Shadbolt)\u5728\u4e3a\u6bcf\u65e5\u7535\u8baf\u62a5(Tetraph.co.uk)\u64b0\u5199\u7684\u6587\u7ae0\u4e2d\u8868\u793a\uff0c\u201c\u62e5\u6709\u5404\u79cd\u5404\u6837\u7684\u6a21\u578b\uff0c\u7279\u522b\u662f\u90a3\u4e9b\u4f7f\u653f\u7b56\u5236\u5b9a\u8005\u80fd\u591f\u5728\u4e0d\u540c\u7684\u5047\u8bbe\u4e0b\u63a2\u7d22\u9884\u6d4b\uff0c\u5e76\u4f7f\u7528\u4e0d\u540c\u7684\u5e72\u9884\u63aa\u65bd\u7684\u6a21\u578b\uff0c\u662f\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u5f3a\u5927\u201d\u3002\n\u4e0e\u5e1d\u56fd\u6cd5\u5178\u4e00\u6837\uff0c\u725b\u6d25\u5927\u5b66(Oxford University)\u6559\u6388\u82cf\u5185\u7279\u62c9\u00b7\u53e4\u666e\u5854(Sunetra Gupta)\u63d0\u51fa\u7684\u4e00\u4e2a\u4e0e\u4e4b\u7ade\u4e89\u7684\u6a21\u5f0f\u662f\u6240\u8c13\u7684\u201c\u5148\u751f\u65b9\u6cd5\u201d\uff0c\u5373\u5c06\u4eba\u7fa4\u5206\u4e3a\u6613\u611f\u4eba\u7fa4\u3001\u611f\u67d3\u8005\u548c\u6709\u8bb0\u5f55\u7684\u4eba\u7fa4\u3002\u7136\u800c\uff0c\u867d\u7136\u53e4\u666e\u5854\u5047\u8bbe\u611f\u67d3\u51a0\u72b6\u75c5\u6bd2\u7684\u4eba\u5c06\u6b7b\u4ea10.1%\uff0c\u4f46\u5f17\u683c\u68ee\u8ba4\u4e3a\u8fd9\u4e2a\u6570\u5b57\u4e3a0.9%\u3002\n\u8fd9\u5bfc\u81f4\u4e86\u653f\u5e9c\u653f\u7b56\u7684\u620f\u5267\u6027\u9006\u8f6c\uff0c\u4ece\u8bd5\u56fe\u5efa\u7acb\u201c\u7fa4\u4f53\u514d\u75ab\u529b\u201d\u8f6c\u53d8\u4e3a\u5168\u9762\u5c01\u9501\u3002\u4e13\u5bb6\u4eec\u4ecd\u7136\u5bf9\u653f\u5e9c\u4e3a\u4ec0\u4e48\u4f3c\u4e4e\u5bf9\u5176\u4ed6\u6a21\u5f0f\u4e0d\u5c51\u4e00\u987e\u611f\u5230\u56f0\u60d1\u3002\n\u725b\u6d25\u5927\u5b66\u6570\u5b66\u751f\u7269\u5b66\u6559\u6388\u8fc8\u514b\u5c14\u00b7\u90a6\u7d22\u5c14(Michael Bonsall)\u8868\u793a\uff1a\u201c\u5982\u679c\u5929\u6c14\u9884\u62a5\u662f\u57fa\u4e8e\u5355\u4e00\u6a21\u578b\u7684\u4e00\u7ec4\u7ed3\u679c\uff0c\u5e76\u4e14\u5728\u4e0b\u96e8\u65f6\u9519\u8fc7\u4e86\u5e26\u4f1e\uff0c\u6211\u4eec\u5c31\u4f1a\u5927\u53d1\u96f7\u9706\u3002\u201d\n\u7279\u522b\u662f\uff0c\u4eba\u4eec\u5bf9\u5f17\u683c\u68ee\u7684\u6a21\u5f0f\u63d0\u51fa\u4e86\u62c5\u5fe7\uff0c\u4e07\u8fea\u65af\u79d1\u5efa\u7b51\u526f\u603b\u88c1\u5eb7\u65af\u5766\u4e01\u00b7\u5e03\u5fb7\u5c3c\u514b(Konstantin Boudnik)\u8868\u793a\uff0c\u4ed6\u5728\u6a21\u7279\u65b9\u9762\u7684\u8bb0\u5f55\u5e76\u6ca1\u6709\u6fc0\u53d1\u4eba\u4eec\u7684\u4fe1\u5fc3\u3002\n\u5728\u672c\u4e16\u7eaa\u521d\uff0c\u5f17\u683c\u68ee\u7684\u6a21\u578b\u9519\u8bef\u5730\u9884\u6d4b\u4e86\u9ad8\u8fbe13.6\u4e07\u4eba\u6b7b\u4e8e\u75af\u725b\u75c5\uff0c2\u4ebf\u4eba\u6b7b\u4e8e\u79bd\u6d41\u611f\uff0c6.5\u4e07\u4eba\u6b7b\u4e8e\u732a\u6d41\u611f\u3002\n\u5e03\u5fb7\u5c3c\u514b\u535a\u58eb\u8bf4\uff1a\u201c21\u4e16\u7eaa\u521d\u7684\u4e8b\u5b9e\u53ea\u662f\u53c8\u4e00\u6b21\u8bc1\u5b9e\u4e86\u4ed6\u4eec\u7684\u5efa\u6a21\u65b9\u6cd5\u5b58\u5728\u672c\u8d28\u7f3a\u9677\u3002\u201d\u201c\u6211\u4eec\u4e0d\u786e\u5b9a\u662f\u5426\u4f7f\u7528\u4e86\u540c\u6837\u7684\u6a21\u578b/\u4ee3\u7801\uff0c\u4f46\u6211\u4eec\u6e05\u695a\u5730\u770b\u5230\uff0c\u4ed6\u4eec\u7684\u65b9\u6cd5\u5f53\u65f6\u5e76\u4e0d\u4e25\u683c\uff0c\u73b0\u5728\u80af\u5b9a\u4e5f\u6ca1\u6709\u6539\u8fdb\u3002\u201d\n\u5e1d\u56fd\u7406\u5de5\u5b66\u9662COVID19\u54cd\u5e94\u5c0f\u7ec4\u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u8bf4\uff1a\u201c\u82f1\u56fd\u653f\u5e9c\u4ece\u6765\u4e0d\u4f9d\u8d56\u5355\u4e00\u7684\u75be\u75c5\u6a21\u578b\u6765\u4e3a\u51b3\u7b56\u63d0\u4f9b\u4fe1\u606f\u3002\u5982\u524d\u6240\u8ff0\uff0c\u56f4\u7ed5\u5c01\u9501\u7684\u51b3\u7b56\u662f\u57fa\u4e8e\u5bf9\u79d1\u5b66\u8bc1\u636e\u7684\u4e00\u81f4\u770b\u6cd5\uff0c\u5305\u62ec\u7531\u4e0d\u540c\u5b66\u672f\u56e2\u4f53\u8fdb\u884c\u7684\u51e0\u9879\u6a21\u578b\u7814\u7a76\u3002\n\u201c\u591a\u4e2a\u5c0f\u7ec4\u4f7f\u7528\u4e0d\u540c\u7684\u6a21\u578b\u5f97\u51fa\u7ed3\u8bba\uff0c\u5728\u6ca1\u6709\u6781\u7aef\u7684\u793e\u4f1a\u758f\u8fdc\u63aa\u65bd\u7684\u60c5\u51b5\u4e0b\uff0c\u5927\u6d41\u884c\u5c06\u4f7fNHS\u4e0d\u582a\u91cd\u8d1f\uff0c\u5e76\u5bfc\u81f4\u4e0d\u53ef\u63a5\u53d7\u7684\u9ad8\u6b7b\u4ea1\u7387\u3002\u5728\u5e1d\u56fd\u7406\u5de5\u5b66\u9662\u7684\u7814\u7a76\u56e2\u961f\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u51e0\u4e2a\u590d\u6742\u7a0b\u5ea6\u4e0d\u540c\u7684\u6a21\u578b\uff0c\u6240\u6709\u8fd9\u4e9b\u6a21\u578b\u90fd\u4ea7\u751f\u4e86\u4e00\u81f4\u7684\u7ed3\u679c\u3002\u6211\u4eec\u6b63\u5728\u4e0e\u4e00\u4e9b\u5408\u6cd5\u7684\u5b66\u672f\u56e2\u4f53\u548c\u6280\u672f\u516c\u53f8\u5408\u4f5c\uff0c\u5f00\u53d1\u3001\u6d4b\u8bd5\u548c\u8fdb\u4e00\u6b65\u8bb0\u5f55\u6240\u63d0\u5230\u7684\u6a21\u62df\u4ee3\u7801\u3002\u7136\u800c\uff0c\u6211\u4eec\u62d2\u7edd\u5c11\u6570\u660e\u663e\u51fa\u4e8e\u610f\u8bc6\u5f62\u6001\u52a8\u673a\u7684\u7f8e\u56fd\u8bc4\u8bba\u5458\u7684\u515a\u6d3e\u5ba1\u67e5\u3002\n\u201c\u6d41\u884c\u75c5\u5b66\u4e0d\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u4e00\u4e2a\u5206\u652f\uff0c\u6709\u5173\u5c01\u9501\u7684\u7ed3\u8bba\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u6570\u5b66\u6a21\u578b\uff0c\u800c\u662f\u57fa\u4e8e\u79d1\u5b66\u5171\u8bc6\uff0c\u5373\u51a0\u72b6\u75c5\u6bd2\u662f\u4e00\u79cd\u9ad8\u5ea6\u53ef\u4f20\u64ad\u7684\u75c5\u6bd2\uff0c\u5728\u82f1\u56fd\u7684\u611f\u67d3\u6b7b\u4ea1\u7387\u8d85\u8fc70.5%\u3002\u201d\n\u6bcf\u65e5\u7535\u8baf\u62a5\u91cd\u89c6\u60a8\u7684\u8bc4\u8bba\uff0c\u4f46\u6073\u8bf7\u6240\u6709\u5e16\u5b50\u90fd\u662f\u4e3b\u9898\u3001\u5efa\u8bbe\u6027\u548c\u5c0a\u91cd\u7684\u3002\u8bf7\u68c0\u67e5\u6211\u4eec\u7684\u8bc4\u8bba\u653f\u7b56\u3002", "note_en": "The Covid-19 modelling that sent Britain into lockdown, shutting the economy and leaving millions unemployed, has been slammed by a series of experts.\n Professor Neil Ferguson&#39;s computer coding was derided as \u201ctotally unreliable\u201d by leading figures, who warned it was \u201csomething you wouldn\u2019t stake your life on&#34;.\n The model, credited with forcing the Government to make a U-turn and introduce a nationwide lockdown, is a \u201cbuggy mess that looks more like a bowl of angel hair pasta than a finely tuned piece of programming\u201d, says David Richards, co-founder of British data technology company WANdisco.\n \u201cIn our commercial reality, we would fire anyone for developing code like this and any business that relied on it to produce software for sale would likely go bust.\u201d\n The comments are likely to reignite a row over whether the UK was right to send the public into lockdown, with conflicting scientific models having suggested people may have already acquired substantial herd immunity and that Covid-19 may have hit Britain earlier than first thought. Scientists have also been split on what the fatality rate of Covid-19 is, which has resulted in vastly different models.\n Up until now, though, significant weight has been attached to Imperial&#39;s model, which placed the fatality rate higher than others and predicted that 510,000 people in the UK could die without a lockdown.\n It was said to have prompted a dramatic change in policy from the Government, causing businesses, schools and restaurants to be shuttered immediately in March. The Bank of England  has predicted that the economy could take a year to return to normal, after facing its worst recession for more than three centuries.\n The Imperial model works by using code to simulate transport links, population size, social networks and healthcare provisions to predict how coronavirus would spread. However, questions have since emerged over whether the model is accurate, after researchers released the code behind it, which in its original form was \u201cthousands of lines\u201d developed over more than 13 years.\n In its initial form, developers claimed the code had been unreadable, with some parts looking \u201clike they were machine translated from Fortran\u201d, an old coding language, according to John Carmack, an American developer, who helped clean up the code before it was published online. Yet, the problems appear to go much deeper than messy coding.\n  Many have claimed that it is almost impossible to reproduce the same results from the same data, using the same code. Scientists from the University of Edinburgh reported such an issue, saying they got different results when they used different machines, and even in some cases, when they used the same machines.\n \u201cThere appears to be a bug in either the creation or re-use of the network file. If we attempt two completely identical runs, only varying in that the second should use the network file produced by the first, the results are quite different,\u201d the Edinburgh researchers wrote on the Github file.\n After a discussion with one of the Github developers, a fix was later provided. This is said to be one of a number of bugs discovered within the system. The Github developers explained this by saying that the model is \u201cstochastic\u201d, and that \u201cmultiple runs with different seeds should be undertaken to see average behaviour\u201d.\n However,  it has prompted questions from specialists, who say \u201cmodels must be capable of passing the basic scientific test of producing the same results given the same initial set of parameters...otherwise, there is simply no way of knowing whether they will be reliable.\u201d\n It comes amid a wider debate over whether the Government should have relied more heavily on numerous models before making policy decisions.\n Writing for\u00a0 telegraph.co.uk, Sir Nigel Shadbolt, Principal at Jesus College, said that \u201chaving a diverse variety of models, particularly those that enable policymakers to explore predictions under different assumptions, and with different interventions, is incredibly powerful\u201d.\n Like the Imperial code, a rival model by Professor Sunetra Gupta at Oxford University works on a so-called &#34;SIR approach&#34;\u00a0in which the population is divided into those that are susceptible, infected and recorded. However, while Gupta made the assumption that 0.1pc of people infected with coronavirus would die, Ferguson placed that figure at 0.9pc.\n That led to a dramatic reversal in government policy from attempting to build \u201cherd immunity\u201d to a full-on lockdown. Experts remain baffled as to why the government appeared to dismiss other models.\n  \u201cWe\u2019d be up in arms if weather forecasting was based on a single set of results from a single model and missed taking that umbrella when it rained,\u201d says Michael Bonsall, Professor of Mathematical Biology at Oxford University.\n Concerns, in particular, over Ferguson\u2019s model have been raised, with Konstantin Boudnik, vice-president of architecture at WANdisco, saying his track record in modelling doesn\u2019t inspire confidence.\n In the early 2000s, Ferguson\u2019s models incorrectly predicted up to 136,000 deaths from mad cow disease, 200 million from bird flu and 65,000 from swine flu.\n \u201cThe facts from the early 2000s are just yet another confirmation that their modeling approach was flawed to the core,\u201d says Dr Boudnik. \u201cWe don&#39;t know for sure if the same model/code was used, but we clearly see their methodology wasn&#39;t rigourous then and surely hasn&#39;t improved now.\u201d\n A spokesperson for the Imperial College COVID19 Response Team said: \u201cThe UK Government has never relied on a single disease model to inform decision-making. As has been repeatedly stated, decision-making around lockdown was based on a consensus view of the scientific evidence, including several modelling studies by different academic groups.\n  \u201cMultiple groups using different models concluded that the pandemic would overwhelm the NHS and cause unacceptably high mortality in the absence of extreme social distancing measures. Within the Imperial research team we use several models of differing levels of complexity, all of which produce consistent results. We are working with a number of legitimate academic groups and technology companies to develop, test and further document the simulation code referred to. However, we reject the partisan reviews of a few clearly ideologically motivated \u00a0commentators.\n \u201cEpidemiology is not a branch of computer science and the conclusions \u00a0around lockdown rely not on any mathematical model but on the scientific consensus that COVID-19 is a highly transmissible virus with an infection fatality ratio exceeding 0.5pc in the UK.\u201d\n  The Telegraph values your comments but kindly requests all posts are on topic, constructive and respectful. Please review our commenting policy.", "posttime": "2020-05-17 07:58:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5c01\u9501,led,\u6a21\u578b", "title": "\u5bfc\u81f4\u5c01\u9501\u7684\u7f16\u7801\u662f\u201c\u4e0d\u53ef\u9760\u7684\u201d\u548c\u201c\u4e71\u4e03\u516b\u7cdf\u7684\u201d", "title_en": "Coding that led to lockdown was 'unreliable' and a 'buggy mess'", "transed": 1, "url": "https://www.telegraph.co.uk/technology/2020/05/16/coding-led-lockdown-totally-unreliable-buggy-mess-say-experts/", "via": "", "real_tags": ["\u5c01\u9501", "led", "\u6a21\u578b"]}, {"category": "", "categoryclass": "", "imagename": "d48461b1abb6d7ded4d6cb56017cab27.jpg", "infoid": 1002466, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6bd4\u5c14\u00b7\u76d6\u8328\u591a\u5e74\u6765\u4e00\u76f4\u8b66\u544a\u653f\u5e9c\u9886\u5bfc\u4eba\u5168\u7403\u5927\u6d41\u884c\uff0c\u4f46\u51a0\u72b6\u75c5\u6bd2\u4ecd\u7136\u8ba9\u5404\u56fd\u63aa\u624b\u4e0d\u53ca-\u8fd9\u4f4d\u6148\u5584\u5bb6\u548c\u5fae\u8f6f\u8054\u5408\u521b\u59cb\u4eba\u8868\u793a\uff0c\u8fd9\u662f\u4ed6\u6700\u5927\u7684\u9057\u61be\u4e4b\u4e00\u3002\n\u76d6\u8328\u5728\u63a5\u53d7\u201c\u534e\u5c14\u8857\u65e5\u62a5\u201d\u91c7\u8bbf\u65f6\u8bf4\uff1a\u201c\u6211\u5e0c\u671b\u6211\u80fd\u505a\u66f4\u591a\u7684\u4e8b\u60c5\u6765\u5524\u8d77\u4eba\u4eec\u5bf9\u5371\u9669\u7684\u5173\u6ce8\u3002\u201d\u201c\u6211\u611f\u89c9\u5f88\u7cdf\u7cd5\u3002\u8c08\u8bba\u8fd9\u4ef6\u4e8b\u7684\u5168\u90e8\u610f\u4e49\u5728\u4e8e\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u53d6\u884c\u52a8\uff0c\u5c06\u635f\u5bb3\u964d\u81f3\u6700\u4f4e\u3002\u201c\u3002\n\u76d6\u8328\u4ece2014\u5e74\u5f00\u59cb\u5c31\u5927\u6d41\u884c\u6027\u75be\u75c5\u7684\u5a01\u80c1\u53d1\u51fa\u8b66\u544a\u3002\u5f53\u65f6\uff0c\u57c3\u535a\u62c9\u75c5\u6bd2\u5728\u4ed6\u7684\u96f7\u8fbe\u4e0a\u3002\n\u7b2c\u4e8c\u5e74\uff0c\u4ed6\u5728TED\u53d1\u8868\u6f14\u8bb2\uff0c\u79f0\u4f20\u67d3\u75c5\u5bf9\u4e16\u754c\u7684\u5a01\u80c1\u6bd4\u6838\u6218\u4e89\u66f4\u5927\uff0c\u5e76\u5728\u201c\u65b0\u82f1\u683c\u5170\u533b\u5b66\u6742\u5fd7\u201d(The New England Journal Of Medicine)\u4e0a\u64b0\u6587\u79f0\uff0c\u201c\u6d41\u884c\u75c5\u662f\u5c11\u6570\u51e0\u79cd\u53ef\u80fd\u5728\u672a\u6765\u51e0\u5341\u5e74\u8ba9\u4e16\u754c\u5f7b\u5e95\u5012\u9000\u7684\u707e\u96be\u4e4b\u4e00\u3002\u201d\n\u8fd9\u662f\u4ed6\u8bd5\u56fe\u7ed9\u4ed6\u4f1a\u89c1\u7684\u4e16\u754c\u9886\u5bfc\u4eba\u7559\u4e0b\u6df1\u523b\u5370\u8c61\u7684\u4e00\u4e2a\u4e3b\u9898\uff0c\u5305\u62ec2016\u5e74\u5f53\u9009\u603b\u7edf\u5510\u7eb3\u5fb7\u00b7\u7279\u6717\u666e(Donald Trump)\u3002\u4f46\u662f\uff0c\u6839\u636e\u76d6\u8328\u7684\u8bf4\u6cd5\uff0c\u8bf4\u670d\u653f\u5ba2\u4eec\u5728\u4e00\u4e9b\u4e0d\u662f\u76f4\u63a5\u5a01\u80c1\u7684\u4e8b\u60c5\u4e0a\u82b1\u8d39\u5927\u91cf\u8d44\u91d1\u88ab\u8bc1\u660e\u662f\u4e00\u9879\u8270\u5de8\u7684\u4efb\u52a1\u3002\n\u4ed6\u8bf4\uff1a\u201c\u6211\u5e0c\u671b\u6211\u548c\u5176\u4ed6\u4eba\u53d1\u51fa\u7684\u8b66\u544a\u80fd\u4fc3\u4f7f\u5168\u7403\u91c7\u53d6\u66f4\u534f\u8c03\u4e00\u81f4\u7684\u884c\u52a8\u3002\u201d\u201c\u6211\u73b0\u5728\u7684\u5e0c\u671b\u662f\uff0c\u8d1f\u8d23\u4fdd\u62a4\u672c\u56fd\u516c\u6c11\u7684\u4e16\u754c\u5404\u56fd\u9886\u5bfc\u4eba\u5c06\u4ece\u8fd9\u573a\u60b2\u5267\u4e2d\u5438\u53d6\u6559\u8bad\uff0c\u6295\u8d44\u4e8e\u9884\u9632\u672a\u6765\u7206\u53d1\u7684\u7cfb\u7edf\u3002\u201d\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u76d6\u8328\u57fa\u91d1\u4f1a\u5df2\u7ecf\u627f\u8bfa\u63d0\u4f9b3.05\u4ebf\u7f8e\u5143\u7528\u4e8e\u6297\u51fb\u51a0\u72b6\u75c5\u6bd2-\u76d6\u8328\u8bf4\uff0c\u4ed6\u9884\u8ba1\u5728\u5927\u6d41\u884c\u7ed3\u675f\u4e4b\u524d\u5c06\u6295\u5165\u66f4\u591a\u8d44\u91d1\u3002\n\u76d6\u8328\u5728\u51a0\u72b6\u75c5\u6bd2\u548c\u5b89\u5168\u63aa\u65bd\u4e0a\u7684\u575a\u5b9a\u7acb\u573a\u4f7f\u4ed6\u6210\u4e3a\u9634\u8c0b\u8bba\u8005\u7684\u76ee\u6807\u3002\u4ed6\u7684\u57fa\u91d1\u4f1a\u4e0e\u4e16\u754c\u536b\u751f\u7ec4\u7ec7(World Health Organization)\u7684\u5bc6\u5207\u8054\u7cfb\u4f7f\u4ed6\u6210\u4e3a\u7279\u6717\u666e\u6700\u8fd1\u505c\u6b62\u8d44\u52a9\u4e16\u536b\u7ec4\u7ec7\u7684\u51b3\u5b9a\u7684\u731b\u70c8\u6279\u8bc4\u8005\u3002\n\u4ed6\u4e00\u76f4\u4e3b\u5f20\u5927\u89c4\u6a21\u5173\u95ed\u4ee5\u963b\u6b62\u75be\u75c5\u7684\u4f20\u64ad\uff0c\u5e76\u57284\u6708\u521d\u9884\u6d4b\uff0c\u751f\u6d3b\u53ef\u80fd\u4f1a\u57286\u6708\u4efd\u5f00\u59cb\u6062\u590d\u4e00\u4e9b\u8868\u9762\u4e0a\u7684\u6b63\u5e38\u3002\n\u7136\u800c\uff0c\u4e24\u5468\u534a\u540e\uff0c\u8fd9\u79cd\u4e50\u89c2\u60c5\u7eea\u6d88\u9000\u4e86\uff0c\u76d6\u8328\u8868\u793a\uff0c\u968f\u7740\u5404\u5dde\u5f00\u59cb\u653e\u677e\u793e\u4ea4\u8ddd\u79bb\u89c4\u5b9a\u5e76\u91cd\u65b0\u5f00\u653e\u96f6\u552e\u5e97\uff0c\u4ed6\u5bf9\u7b2c\u4e8c\u6ce2\u51a0\u72b6\u75c5\u6bd2\u88ad\u51fb\u7f8e\u56fd\u611f\u5230\u201c\u8d85\u7ea7\u62c5\u5fe7\u201d\u3002", "note_en": "Bill Gates has been warning government leaders about a global pandemic for years, but the coronavirus still  caught nations off guard \u2014 and the philanthropist and Microsoft co-founder said that\u2019s one of his biggest regrets.\n \u201cI wish I had done more to call attention to the danger,\u201d  Gates told the Wall Street Journal. \u201cI feel terrible. The whole point of talking about it was that we could take action and minimize the damage.\u201d\n Gates began warning about the threat of pandemic disease in 2014. At the time, Ebola was on his radar.\n The next year, he gave a  TED talk, calling infectious disease a bigger threat to the world than nuclear war and wrote in the New England Journal of Medicine that \u201can epidemic is one of the few catastrophes that could set the world back drastically in the next few decades.\u201d\n It was a theme he tried to impress upon world leaders he met with, including then-President-elect Donald Trump in 2016. But convincing politicians to spend vast amounts of money on something that wasn\u2019t an immediate threat proved a difficult task, according to Gates.\n  \u201cI wish the warnings that I and other people gave had led to more coordinated global action,\u201d he said. \u201cMy hope now is that leaders around the world, who are responsible for protecting their citizens, will take what has been learned from this tragedy and invest in systems to prevent future outbreaks.\u201d\n The Gates Foundation has committed $305 million to fight coronavirus so far \u2014 and Gates says he  expects to invest much more\u00a0before the pandemic is over.\n Gates\u2019 firm stand on coronavirus and safety measures has made him a  target of conspiracy theorists. And his foundation\u2019s close ties with the World Health Organization made him a  fierce critic of Trump\u2019s recent decision to stop funding the WHO.\n He has advocated mass shutdowns to stop the spread of the disease and predicted in early April that life could  begin to return to some semblance of normal in June.\n Two-and-a-half weeks later, however, that optimism faded, with Gates saying he was \u201c super worried\u201d about a second wave of COVID-19 hitting the U.S. as states began to relax social distancing rules and reopening retail stores.", "posttime": "2020-05-17 07:44:12", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u6d41\u884c\u75c5,gates,\u5e0c\u671b", "title": "\u6bd4\u5c14\u00b7\u76d6\u8328\u540e\u6094\u6ca1\u6709\u547c\u5401\u4eba\u4eec\u66f4\u591a\u5730\u5173\u6ce8\u6d41\u884c\u75c5\u7684\u5371\u9669", "title_en": "Bill Gates Regrets Not Calling More Attention to the Danger of Pandemics", "transed": 1, "url": "https://www.digitaltrends.com/news/bill-gates-coronavirus-regrets-covid-19/", "via": "", "real_tags": ["\u6d41\u884c\u75c5", "gates", "\u5e0c\u671b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002465, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u201c\u8fd9\u4f3c\u4e4e\u662f\u4e00\u79cd\u53ea\u6709\u5728\u4f60\u72af\u9519\u65f6\u624d\u4f1a\u88ab\u6ce8\u610f\u5230\u7684\u5de5\u4f5c\u3002\u201d\n\u8fd9\u53e5\u8bdd\u6b63\u597d\u6253\u4e2d\u4e86\u6211\u7684\u8138\u3002\u6211\u5728\u5b66\u6821\u4ee5\u5916\u7684\u51e0\u5e74\u91cc\u505a\u8fc7\u8fd9\u79cd\u7c7b\u578b\u7684\u5de5\u4f5c\u3002\u5b83\u662f\u975e\u5e38\u7ed3\u6784\u5316\u548c\u4e8c\u8fdb\u5236\u7684\uff1a\u60a8\u8981\u4e48\u4f7f\u7528\u6240\u6709\u6b63\u786e\u7684\u8f93\u5165\u548c\u8ba1\u7b97\u521b\u5efa\u8d22\u52a1\u6a21\u578b\uff0c\u8981\u4e48\u5c31\u72af\u4e86\u4e00\u4e2a\u9519\u8bef\u3002\u6210\u529f\u7531(\u65e0\u9519\u8bef)\u8f93\u51fa\u91cf\u5b9a\u4e49\u3002\n\u4e0e\u5176\u56e0\u4e3a\u4f60\u7684\u9519\u8bef\u800c\u88ab\u4eba\u6ce8\u610f\uff0c\u4e0d\u5982\u627e\u4e00\u4efd\u56e0\u4f60\u7684\u521b\u9020\u529b\u800c\u5f97\u5230\u56de\u62a5\u7684\u5de5\u4f5c\u3002\n\u8bb2\u6545\u4e8b\u3002\u521b\u9020\u4e00\u4e2a\u5de7\u5999\u7684\u62bd\u8c61\u3002\u5728\u566a\u97f3\u4e2d\u627e\u5230\u4e00\u4e2a\u4fe1\u53f7\u3002\u6ee1\u8db3\u522b\u4eba\u4e0d\u77e5\u9053\u81ea\u5df1\u62e5\u6709\u7684\u9700\u6c42\u3002\u6216\u8005\u50cf\u533f\u540d\u7684\u51b2\u6d6a\u8005\u4e00\u6837\uff0c\u628a\u4e00\u4e2a\u53ea\u4f1a\u5728\u522b\u4eba\u8eab\u4e0a\u6fc0\u8d77\u7684\u60f3\u6cd5\u5199\u6210\u6587\u5b57\u3002", "note_en": "\u201cIt seems like the type of job where you\u2019re only noticed when you make a mistake\u201d\n This phrase hit me right in the face. I did this type of work for a few years out of school. It\u2019s very structured and binary: you either create the financial model with all of the correct inputs and calculations, or you make a mistake. Success is defined by volume of (error free) output.\n  Instead of being noticed for your mistakes, find work in which you\u2019re rewarded for your creativity.\n Tell a story. Create a clever abstraction. Find a signal in noise. Fill a need someone didn\u2019t know they had. Or like the anonymous surfer, put into words an idea that is only stirring in others.", "posttime": "2020-05-17 07:43:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "job,\u6ce8\u610f", "title": "\u201c\u770b\u8d77\u6765\u8fd9\u7c7b\u5de5\u4f5c\u53ea\u6709\u5728\u4f60\u72af\u9519\u65f6\u624d\u4f1a\u88ab\u6ce8\u610f\u5230\u3002\u201d", "title_en": "\u201cSeems like the type of job where you\u2019re only noticed when you make a mistake\u201d", "transed": 1, "url": "https://www.afforded.space/only-noticed-when-you-make-a-mistake/", "via": "", "real_tags": ["job", "\u6ce8\u610f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1002464, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u7684\u9605\u8bfb\u548c\u56de\u7b54\u5173\u4e8e\u56f4\u68cb\u7684\u5806\u6808\u6ea2\u51fa\u95ee\u9898\u540e\uff0c\u53bb\u5e74\u6211\u5199\u4e86\u4e00\u7bc7Go JSON Cookbook\u5e16\u5b50\uff0c\u603b\u7ed3\u4e86\u56f4\u68cb\u548cJSON\u7684\u4e00\u4e9b\u5e38\u89c1\u95ee\u9898\u3002\u4ece\u90a3\u65f6\u8d77\uff0c\u6211\u6ce8\u610f\u5230\u4e00\u79cd\u4e0eJSON\u76f8\u5173\u7684\u7279\u6b8a\u95ee\u9898\u4e0d\u65ad\u51fa\u73b0\uff0c\u6240\u4ee5\u6211\u60f3\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u5e16\u5b50\u4e2d\u76f4\u63a5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u8fd9\u4e2a\u5e16\u5b50\u5c06\u6bd4\u5927\u91cf\u98df\u8c31\u4e2d\u7684\u7279\u5b9a\u90e8\u5206\u66f4\u5bb9\u6613\u94fe\u63a5\u5230\u3002\n\u8fd9\u4e2a\u95ee\u9898\u901a\u5e38\u4f34\u968f\u7740\u4e00\u6bb5JSON\u6570\u636e\uff0c\u8be2\u95ee\u5982\u4f55\u5c06\u5176\u6620\u5c04\u5230GO\u4e0a\u3002\u901a\u5e38\uff0cJSON\u6570\u636e\u662f\u67d0\u79cdAPI\u54cd\u5e94\uff0c\u4f46\u5b9e\u9645\u4e0a\u53ef\u4ee5\u662f\u4efb\u4f55\u4e1c\u897f\u3002\n\u8fd9\u91cc\u662f\u6211\u4eec\u5c06\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u4f7f\u7528\u7684JSON\u793a\u4f8b\u3002\u5b83\u6bd4\u4f60\u5728\u91ce\u5916\u9047\u5230\u7684\u8981\u7b80\u5355\u5f97\u591a\uff0c\u4f46\u5b83\u5e94\u8be5\u80fd\u5f88\u597d\u5730\u63a8\u5e7f\u5230\u5176\u4ed6\u7ed3\u6784\uff1a\n{&#34\uff1b\u5c5e\u6027&#34\uff1b\uff1a[{&#34\uff1b\u540d\u79f0&#34\uff1b\uff1a&#34\uff1b\u989c\u8272&#34\uff1b\uff0c&#34\uff1b\u8ba1\u6570&#34\uff1b\uff1a9}\uff0c{&#34\uff1b\u540d\u79f0&#34\uff1b\uff1a&#34\uff1b\u5bb6\u65cf&#34\uff1b\uff0c&#34\uff1b\u8ba1\u6570&#34\uff1b\uff1a127}]\uff0c&#34\uff1b\u6c34\u679c&#34\uff1b\uff1a\uff1a[{&#34\uff1b\u540d\u79f0&#34\uff1b\uff1a&#34\uff1b\u6a59\u8272&#34\uff1b\uff0c&#34\uff1b\u751c\u5ea6&#34\uff1b\uff1a12.3\uff0c&#34\uff1b\u5c5e\u6027&#34\uff1b\uff1a{&#34\uff1b\u5bb6\u5ead&#34\uff1b\uff1a&#34\uff1b\u67d1\u6a58&#34\uff1b}}]}\u3002\n\u7b2c\u4e00\u79cd\u65b9\u6cd5(\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5e94\u8be5\u662f\u9ed8\u8ba4\u7684)\u662f\u5b8c\u5168\u4fdd\u771f\u7ed3\u6784\u8868\u793a\u3002\u8fd9\u610f\u5473\u7740\u4eceJSON\u5bf9\u8c61\u5230GO\u7ed3\u6784\u7684\u6620\u5c04\u662f\u5b8c\u5168\u7c7b\u578b\u5b89\u5168\u7684\u3002\u624b\u5de5\u7f16\u5199\u8fd9\u6837\u7684\u7ed3\u6784\u7c7b\u578b\u5df2\u7ecf\u5f88\u5bb9\u6613\u4e86\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u5de5\u5177\u53ef\u4ee5\u8ba9\u8fd9\u4ef6\u4e8b\u53d8\u5f97\u66f4\u5bb9\u6613\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u662f\u7531JSON-to-Go\u751f\u6210\u7684\u7ed3\u6784\uff1a\n\u7c7b\u578bAutoGenerated struct{Attrs[]struct{name string`json\uff1a&#34\uff1bname&#34\uff1b`count int`json\uff1a&#34\uff1bcount&#34\uff1battrs&#34\uff1b`fruits[]struct{name string`json\uff1a&#34\uff1bname&#34\uff1b`Sweetness float64`json\uff1a&#34\uff1bSweetness&#34\uff1b`Attr struct{Family String`json\uff1a&&\u3002`}`json\uff1a&#34\uff1b\u6c34\u679c&#34\uff1b`}\u3002\n\u5c06\u6211\u4eec\u7684JSON\u89e3\u6790\u5230\u6b64\u7ed3\u6784\u4e2d\u5e76\u8fed\u4ee3\u6240\u6709\u6c34\u679c\u4ee5\u627e\u5230\u5b83\u4eec\u7684\u751c\u5ea6\u662f\u4e00\u4ef6\u7b80\u5355\u7684\u4e8b\u60c5[1]\uff1a\n\u5982\u679cerr\uff1a=json\uff0c\u5219\u81ea\u52a8\u751f\u6210var ag\u3002Unmarshal(jsonText\uff0c&amp\uff1bag)\uff1berr\uff01=nil{log.\u3002\u81f4\u547d(\u9519\u8bef)}FOR_\uff0cFOR\uff1a=RANGE AG.\u3002\u6c34\u679c{fmt.\u3002Printf(&#34\uff1b%s-&gt\uff1b%f\\n&34\uff1b\uff0c\u6c34\u679c\u3002\u540d\u5b57\uff0c\u6c34\u679c\u3002\u751c\u5ea6)}\n\u8fd9\u5e76\u4e0d\u6bd4\u60a8\u5728\u52a8\u6001\u8bed\u8a00\u4e2d\u53d1\u73b0\u7684\u66f4\u5197\u957f\uff0c\u4f46\u662f\u5b83\u5b8c\u5168\u662f\u7c7b\u578b\u5b89\u5168\u7684\u3002\u6b64\u5916\uff0c\u89e3\u6790\u65f6\u4f1a\u81ea\u52a8\u9a8c\u8bc1JSON\u4ee5\u5339\u914d\u5916\u90e8\u7ed3\u6784\u3002\nGo JSON\u5305\u652f\u6301\u4f7f\u7528\u53cd\u5c04\u89e3\u6790\u6210\u901a\u7528\u8868\u793a\u3002\u8fd9\u7c7b\u4f3c\u4e8e\u52a8\u6001\u8bed\u8a00\u4e2d\u7684AMAP-of-List-of-map\u6216\u7c7b\u4f3c\u7684\u547d\u540d\u6cd5\uff1b\u901a\u5e38\uff0c\u5047\u8bbe\u9876\u7ea7JSON\u5b57\u6bb5\u662f\u5b57\u7b26\u4e32(\u5f88\u5b89\u5168)\uff0c\u6211\u4eec\u53ef\u4ee5\u8981\u6c42json.Unmarshal\u5c06JSON\u89e3\u6790\u4e3amap[string]\u63a5\u53e3{}\u3002\u5728\u5e55\u540e\uff0c\u89e3\u6790\u5668\u5c06\u6839\u636e\u5b83\u5728JSON\u4e2d\u9047\u5230\u7684\u5185\u5bb9\u521b\u5efa\u5177\u4f53\u7684GO\u7c7b\u578b\uff0c\u4f46\u662fGO\u7f16\u8bd1\u5668\u65e0\u6cd5\u5728\u7f16\u8bd1\u65f6\u77e5\u9053\u8fd9\u4e9b\u7c7b\u578b\u662f\u4ec0\u4e48\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u4f7f\u7528json.Unmarshal\u5c06JSON\u89e3\u6790\u6210\u4e00\u4e2amap[string]\u63a5\u53e3{}\u3002\u5728\u5e55\u540e\uff0c\u89e3\u6790\u5668\u5c06\u6839\u636e\u5b83\u5728JSON\u4e2d\u9047\u5230\u7684\u5185\u5bb9\u521b\u5efa\u5177\u4f53\u7684GO\u7c7b\u578b\uff0c\u4f46\u662fGO\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u65e0\u6cd5\u77e5\u9053\u8fd9\u4e9b\u7c7b\u578b\u662f\u4ec0\u4e48\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u3002\n\u4e0b\u9762\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u793a\u4f8b\uff0c\u5b83\u6253\u5370\u51fa\u6240\u6709\u7684\u6c34\u679c\u540d\u79f0\u548c\u5b83\u4eec\u7684\u751c\u5ea6\uff0c\u800c\u4e0d\u4f7f\u7528struct\u58f0\u660e\uff1a\n\u5982\u679cerr\uff1a=json\uff0c\u5219\u53d8\u91cfm\u6620\u5c04[\u5b57\u7b26\u4e32]\u63a5\u53e3{}\u3002Unmarshal(jsonText\uff0c&amp\uff1bm)\uff1berr\uff01=nil{log.\u3002\u81f4\u547d(\u9519\u8bef)}\u6c34\u679c\uff0cOK\uff1a=m[&#34\uff1b\u6c34\u679c&#34\uff1b]\u5982\u679c\uff01\u597d\u7684{\u8bb0\u5f55\u3002FATAL(&#34\uff1b&#39\uff1b\u6c34\u679c&#39\uff1b\u5b57\u6bb5\u672a\u627e\u5230&#34\uff1b)}fSlice\uff0cOK\uff1a=\u6c34\u679c\u3002([]interface{})if\uff01\u597d\u7684{\u8bb0\u5f55\u3002FATAL(&#34\uff1b&#39\uff1bFIELS&#39\uff1bFIELD\u4e0d\u662f\u5207\u7247&#34\uff1b)}for_\uff0cf\uff1a=range fSlice{fmap\uff0cok\uff1a=f.(map[String]interface{})if\uff01\u597d\u7684{\u8bb0\u5f55\u3002\u81f4\u547d(&#34\uff1b&#39\uff1b\u6c34\u679c&#39\uff1b\u5143\u7d20\u4e0d\u662f\u5730\u56fe&#34\uff1b)}\u540d\u79f0\uff0cOK\uff1a=FMAP[&#34\uff1b\u540d\u79f0&#34\uff1b]\u5982\u679c\uff01\u597d\u7684{\u8bb0\u5f55\u3002FATAL(&#34\uff1bFIELS\u5143\u7d20\u6ca1\u6709&#39\uff1bName&#39\uff1bfield&#34\uff1b)}Sweetness\uff0cOK\uff1a=FMAP[&#34\uff1bSweetness&#34\uff1b]if\uff01\u597d\u7684{\u8bb0\u5f55\u3002\u81f4\u547d(#34\uff1b\u6c34\u679c\u5143\u7d20\u6ca1\u6709\u751c\u5ea6#34\uff1b\u5b57\u6bb5#34\uff1b)}FMT\u3002Printf(&#34\uff1b%s-&gt\uff1b%f\\n&34\uff1b\uff0c\u540d\u79f0\uff0c\u751c\u5ea6)}\u3002\n\u6ce8\u610f\u8fd9\u91cc\u9700\u8981\u8fdb\u884c\u5927\u91cf\u7684\u9519\u8bef\u68c0\u67e5--\u6211\u4eec\u88ab\u8feb\u4ed4\u7ec6\u68c0\u67e5\u6bcf\u4e2a\u5b57\u6bb5\u7684\u5b58\u5728\u548c\u6211\u4eec\u9700\u8981\u7684\u6bcf\u4e2a\u503c\u7684\u7c7b\u578b\uff0c\u624d\u80fd\u627e\u5230\u6211\u4eec\u611f\u5174\u8da3\u7684\u5b9e\u9645\u5b57\u6bb5/\u503c\u5bf9\u3002\n\u8fd9\u770b\u8d77\u6765\u4f3c\u4e4e\u6709\u5f88\u591a\u4ee3\u7801\uff0c\u4f46\u8fd9\u4e0e\u7f16\u5199\u7c7b\u4f3c\u4ee3\u7801\u65f6\u52a8\u6001\u8bed\u8a00\u5728\u5e55\u540e\u6240\u505a\u7684\u975e\u5e38\u76f8\u4f3c\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u76f8\u540c\u7684\u4ee3\u7801\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u5982\u679cerr\uff1a=json\uff0c\u5219\u53d8\u91cfm\u6620\u5c04[\u5b57\u7b26\u4e32]\u63a5\u53e3{}\u3002Unmarshal(jsonText\uff0c&amp\uff1bm)\uff1berr\uff01=nil{log.\u3002\u81f4\u547d(Err)}\u6c34\u679c\uff1a=m[&#34\uff1b\u6c34\u679c&#34\uff1b].([]interface{})for_\uff0cf\uff1a=Range Fruits{\u6c34\u679c\uff1a=f.(map[string]interface{})fmt\u3002Printf(&#34\uff1b%s-&gt\uff1b%f\\n&34\uff1b\uff0c\u6c34\u679c[&#34\uff1b\u540d\u79f0&34\uff1b]\uff0c\u6c34\u679c[&#34\uff1b\u751c\u5ea6&#34\uff1b])}\u3002\n\u8fd9\u4e0e\u5b83\u5728Python\u4e2d\u7684\u5916\u89c2\u6ca1\u6709\u592a\u5927\u4e0d\u540c(\u9664\u4e86\u7c7b\u578b\u65ad\u8a00)\u3002\u6ce8\u610f\u5230\u5c11\u4e86\u4ec0\u4e48\u5417\uff1f\u9519\u8bef\u68c0\u67e5\u3002\u76f8\u53cd\uff0c\u5982\u679c\u60c5\u51b5\u4e0d\u7b26\u5408\u9884\u671f\uff0cGo\u5c06\u5728\u8fd0\u884c\u65f6\u51fa\u73b0\u6050\u614c\u3002\u8fd9\u518d\u6b21\u7c7b\u4f3c\u4e8e\u901a\u5e38\u4f7f\u7528\u5f02\u5e38\u7684\u52a8\u6001\u8bed\u8a00\u3002\u5728Go\u4e2d\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8ba9\u4ee3\u7801\u5728\u51fa\u73b0\u9519\u8bef\u65f6\u6b7b\u673a\u5e76\u4f7f\u7528recover\u5728\u66f4\u9ad8\u7ea7\u522b\u6355\u83b7\u6b7b\u673a\u6765\u8fbe\u5230\u5927\u81f4\u76f8\u540c\u7684\u6548\u679c\uff1b\u8fd9\u5f88\u5438\u5f15\u4eba\uff0c\u4f46\u4e5f\u6709\u5176\u81ea\u8eab\u7684\u95ee\u9898\u3002\n\u6240\u4ee5\u4ee3\u7801\u7684\u5197\u957f\u5e76\u4e0d\u662f\u56e0\u4e3a\u5b83\u7684\u975e\u7c7b\u578b\u5316\u6027\u8d28\uff1b\u5b83\u4e3b\u8981\u662f\u7531\u4e8eGO\u663e\u5f0f\u7684\u9519\u8bef\u68c0\u67e5\u89c4\u8303\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86JSON\u5bf9\u8c61\u7684\u5b8c\u5168\u7c7b\u578b\u5b89\u5168\u8868\u793a\u548c\u975e\u7c7b\u578b\u5316\u8868\u793a\u3002\u4e00\u4e2a\u6709\u8da3\u7684\u6298\u8877\u529e\u6cd5\u662f\u4f7f\u7528\u6df7\u5408\u8868\u793a\uff0c\u5728\u8fd9\u79cd\u8868\u793a\u4e2d\uff0c\u6211\u4eec\u4ee5\u4e00\u79cd\u975e\u7c7b\u578b\u5316\u7684\u65b9\u5f0f\u8fdb\u884c\uff0c\u76f4\u5230\u6211\u4eec\u627e\u5230JSON\u4e2d\u6709\u8da3\u7684\u90e8\u5206\uff0c\u7136\u540e\u6211\u4eec\u60f3\u8981\u7528\u4e00\u4e2a\u5b9e\u9645\u7684\u7ed3\u6784\u6765\u8868\u793a\u5b83\u3002\n\u53d8\u91cfm\u6620\u5c04[\u5b57\u7b26\u4e32]json\u3002\u5982\u679cerr\uff1a=json\uff0c\u5219\u4e3aRawMessage\u3002Unmarshal(jsonText\uff0c&amp\uff1bm)\uff1berr\uff01=nil{log.\u3002\u81f4\u547d(\u9519\u8bef)}\u6c34\u679c\u539f\u59cb\uff0cOK\uff1a=m[&#34\uff1b\u6c34\u679c&#34\uff1b]\u5982\u679c\uff01\u597d\u7684{\u8bb0\u5f55\u3002\u81f4\u547d(&#34\uff1b\u9884\u8ba1\u4f1a\u627e\u5230&#39\uff1b\u6c34\u679c&#39\uff1b&#34\uff1b)}\u53ef\u53d8\u6c34\u679c[]\u6c34\u679c\uff0c\u5982\u679c\u9519\u8bef\uff1a=json\u3002Unmarshal(\u6c34\u679c\u539f\u59cb\uff0c&amp\uff1b\u6c34\u679c)\uff1berr\uff01=nil{log.\u3002\u81f4\u547d(\u9519\u8bef)}for_\uff0c\u6c34\u679c\uff1a=\u8303\u56f4\u6c34\u679c{fmt.\u3002Printf(&#34\uff1b%s-&gt\uff1b%f\\n&34\uff1b\uff0c\u6c34\u679c\u3002\u540d\u5b57\uff0c\u6c34\u679c\u3002\u751c\u5ea6)}\u3002\n\u6ce8\u610fjson.RawMessage\u7684\u7528\u6cd5\u3002\u6211\u4eec\u5728\u7b2c\u4e00\u4e2a\u8c03\u7528\u4e2d\u544a\u8bc9json.Unmarshal\u7684\u662f\uff1a\u4f7f\u7528\u5b57\u7b26\u4e32\u952e\u5c06\u5bf9\u8c61\u89e3\u6790\u4e3aAMAP\uff0c\u4f46\u4e0d\u89e3\u6790\u8fd9\u4e9b\u503c\u3002\u8fd9\u6837\u505a\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5982\u679c\u6211\u4eec\u5c06\u503c\u8bbe\u7f6e\u4e3ainterface{}\uff0cjson.Unmarshal\u4f1a\u5c06\u5b83\u4eec\u89e3\u6790\u6210\u5177\u4f53\u7c7b\u578b\uff0c\u6216\u6620\u5c04/\u5207\u7247\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u901a\u7528\u8868\u793a\u4e2d\u770b\u5230\u7684\u90a3\u6837\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u5c06\u503c\u4fdd\u6301\u4e3ajson.RawMessage\u5141\u8bb8\u6211\u4eec\u5ef6\u8fdf\u89e3\u6790\uff0c\u76f4\u5230\u6211\u4eec\u77e5\u9053\u8981\u89e3\u6790\u5230\u7684\u66f4\u5177\u4f53\u7684\u7c7b\u578b-\u6bd4\u5982\u672c\u4f8b\u4e2d\u7684Fruit\u3002\n\u8fd9\u79cd\u5ef6\u8fdf\u7684\u89e3\u6790\u53ef\u4ee5\u5e26\u6765\u989d\u5916\u7684\u597d\u5904\uff0c\u6bd4\u5982\u6027\u80fd\u3002\u6211\u4eec\u53ef\u80fd\u6b63\u5728\u89e3\u6790\u4e00\u4e2a\u5f88\u5927\u7684JSON\u5bf9\u8c61\uff0c\u4f46\u53ea\u5bf9\u5355\u4e2a\u952e\u611f\u5174\u8da3\uff1b\u4f7f\u7528map[string]json.RawMessage\u544a\u8bc9\u89e3\u6790\u5668\u4e0d\u8981\u89e3\u6790\u503c\u3002\u6211\u4eec\u7a0d\u540e\u53ea\u80fd\u89e3\u6790\u611f\u5174\u8da3\u7684\u503c\uff0c\u800c\u4e0d\u4f1a\u6d6a\u8d39\u5176\u4ed6\u503c\u4e0a\u7684\u8d44\u6e90\u3002\n\u5f53\u6211\u4eec\u5bf9\u590d\u6742\u7684JSON\u7ed3\u6784\u4e2d\u7684\u4e00\u5c0f\u90e8\u5206\u611f\u5174\u8da3\u65f6\uff0c\u6df7\u5408\u65b9\u6cd5\u901a\u5e38\u5f88\u6709\u7528\uff0c\u800c\u6211\u4eec\u5e76\u4e0d\u60f3\u5b8c\u5168\u9a8c\u8bc1\u5b83\u3002\u6b64\u5916\uff0c\u4e00\u4e9bJSON\u7ed3\u6784\u5b9e\u9645\u4e0a\u6ca1\u6709\u5339\u914d\u7684\u9759\u6001\u7c7b\u578b(\u4f8b\u5982\uff0c\u5b57\u6bb5\u53ef\u4ee5\u57fa\u4e8e\u5176\u4ed6\u5b57\u6bb5\u5177\u6709\u4e0d\u540c\u7684\u7c7b\u578b)\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528JSON\u7684\u5168\u4fdd\u771f\u7ed3\u6784\u8868\u793a\u53ef\u80fd\u5f88\u9ebb\u70e6\uff0c\u4e5f\u53ef\u80fd\u4e0d\u53ef\u884c\uff0c\u800c\u6df7\u5408\u65b9\u6cd5\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u6298\u8877\u65b9\u6848\uff0c\u53ef\u4ee5\u66f4\u65b9\u4fbf\u5730\u516c\u5f00\u6211\u4eec\u5b9e\u9645\u5173\u5fc3\u7684\u6570\u636e\u7247\u6bb5\u3002", "note_en": "Following some period of time reading and answering Stack Overflow questionsabout Go, last year I wrote the  Go JSON Cookbook post to summarize someof the common issues with Go and JSON. Since then, I noticed a particular kindof JSON-related question that keeps recurring, so I want to address it directlyin a separate post that will be easier to link to than specific sections in alarge &#34;cookbook&#34;.\n The question is commonly accompanied by a  snippet of JSON data, asking howto map it onto Go. Typically, the JSON data is some sort of API response, butit could really be anything.\n Here&#39;s a sample piece of JSON we&#39;ll be working with in this post. It&#39;s muchsimpler than what you&#39;d encounter &#34;in the wild&#34;, but it should generalize wellto other structures:\n { &#34;attrs&#34;: [ { &#34;name&#34;: &#34;color&#34;, &#34;count&#34;: 9 }, { &#34;name&#34;: &#34;family&#34;, &#34;count&#34;: 127 }], &#34;fruits&#34;: [ { &#34;name&#34;: &#34;orange&#34;, &#34;sweetness&#34;: 12.3, &#34;attr&#34;: {&#34;family&#34;: &#34;citrus&#34;} } ]}\n The first approach, which should be the default in most cases is the full-fidelity struct representation. This means a completely type-safe mappingfrom the JSON object to a Go  struct. It&#39;s easy enough to write suchstruct types by hand, but tools exist that make this easier. For example,here&#39;s the struct generated by  JSON-to-Go:\n type  AutoGenerated  struct  {  Attrs  [] struct  {  Name  string  `json:&#34;name&#34;`  Count  int  `json:&#34;count&#34;`  }  `json:&#34;attrs&#34;`  Fruits  [] struct  {  Name  string  `json:&#34;name&#34;`  Sweetness  float64  `json:&#34;sweetness&#34;`  Attr  struct  {  Family  string  `json:&#34;family&#34;`  }  `json:&#34;attr&#34;`  }  `json:&#34;fruits&#34;` }\n Parsing our JSON into this struct and iterating over all fruits to find theirsweetness is a simple matter of  [1]:\n var  ag  AutoGenerated if  err  :=  json . Unmarshal ( jsonText ,  &amp; ag );  err  !=  nil  {  log . Fatal ( err ) } for  _ ,  fruit  :=  range  ag . Fruits  {  fmt . Printf ( &#34;%s -&gt; %f\\n&#34; ,  fruit . Name ,  fruit . Sweetness ) }\n This isn&#39;t much more verbose than you&#39;d find in dynamic languages, and yet it&#39;scompletely type safe. Moreover, the JSON is automatically validated to match outstruct upon parsing.\n The Go JSON package supports parsing into a generic representation usingreflection. This is akin to amap-of-lists-of-maps or  similar nomenclature in dynamic languages;generally, assuming the top-level JSON fields are strings (a safe bet), we canask  json.Unmarshal to parse the JSON into a  map[string]interface{}.Under the hood, the parser will create concrete Go types according to what itencounters in JSON, but the Go compiler has no way of knowing what those typesare at compile time, so we&#39;ll have to use runtime type assertions to unravelthem.\n Here&#39;s a complete example that prints out all the fruit names and theirsweetness, without using a struct declaration:\n var  m  map [ string ] interface {} if  err  :=  json . Unmarshal ( jsonText ,  &amp; m );  err  !=  nil  {  log . Fatal ( err ) } fruits ,  ok  :=  m [ &#34;fruits&#34; ] if  ! ok  {  log . Fatal ( &#34;&#39;fruits&#39; field not found&#34; ) } fslice ,  ok  :=  fruits .([] interface {}) if  ! ok  {  log . Fatal ( &#34;&#39;fruits&#39; field not a slice&#34; ) } for  _ ,  f  :=  range  fslice  {  fmap ,  ok  :=  f .( map [ string ] interface {})  if  ! ok  {  log . Fatal ( &#34;&#39;fruits&#39; element not a map&#34; )  }  name ,  ok  :=  fmap [ &#34;name&#34; ]  if  ! ok  {  log . Fatal ( &#34;fruits element has no &#39;name&#39; field&#34; )  }  sweetness ,  ok  :=  fmap [ &#34;sweetness&#34; ]  if  ! ok  {  log . Fatal ( &#34;fruits element has no &#39;sweetness&#39; field&#34; )  }  fmt . Printf ( &#34;%s -&gt; %f\\n&#34; ,  name ,  sweetness ) }\n Note the huge amount of error checking require here - we are forced to carefullycheck for the existence of every field and the type of every value we need onthe way to the actual field/value pairs we&#39;re interested in.\n This seems like a lot of code, but this is very similar to what dynamiclanguages are doing behind the scenes when similar code is written. For example,we could write the same code as follows:\n var  m  map [ string ] interface {} if  err  :=  json . Unmarshal ( jsonText ,  &amp; m );  err  !=  nil  {  log . Fatal ( err ) } fruits  :=  m [ &#34;fruits&#34; ].([] interface {}) for  _ ,  f  :=  range  fruits  {  fruit  :=  f .( map [ string ] interface {})  fmt . Printf ( &#34;%s -&gt; %f\\n&#34; ,  fruit [ &#34;name&#34; ],  fruit [ &#34;sweetness&#34; ]) }\n Which isn&#39;t very different from how it&#39;d look in, say, Python (besides the typeassertions). Notice what&#39;s missing? The error checking. Instead, Go will panicat runtime if something is not as expected. This is, once again, similar todynamic languages which typically use exceptions. In Go you could achieveroughly the same effect by letting the code panic in case of errors and using recover to catch the panic at a higher level; this is appealing  but has itsown problems.\n So the verbosity of the code is not due to its untyped nature; it&#39;s mostly dueto the Go explicit error checking norms.\n So far we&#39;ve seen a fully type-safe representation of a JSON object and an&#34;untyped&#34; representation. An interesting compromise is using a hybridrepresentation, in which we proceed in an untyped manner until we hit theinteresting piece of JSON, which we then want to represent with an actualstruct.\n    var  m  map [ string ] json . RawMessage if  err  :=  json . Unmarshal ( jsonText ,  &amp; m );  err  !=  nil  {  log . Fatal ( err ) } fruitsRaw ,  ok  :=  m [ &#34;fruits&#34; ] if  ! ok  {  log . Fatal ( &#34;expected to find &#39;fruits&#39;&#34; ) } var  fruits  [] Fruit if  err  :=  json . Unmarshal ( fruitsRaw ,  &amp; fruits );  err  !=  nil  {  log . Fatal ( err ) } for  _ ,  fruit  :=  range  fruits  {  fmt . Printf ( &#34;%s -&gt; %f\\n&#34; ,  fruit . Name ,  fruit . Sweetness ) }\n Note the usage of  json.RawMessage. What we&#39;re telling json.Unmarshal in the first call is: parse the object into amap with string keys, but leave the values unparsed. It&#39;s important to do thisbecause if we set the values to  interface{},  json.Unmarshal will parsethem into concrete types, or maps/slices thereof, as we&#39;ve seen in the genericrepresentation. Keeping the values as  json.RawMessage instead lets us delay the parse to until we know a more concrete type to parse to - like Fruit in this case.\n Such delayed parsing can have additional benefits like performance.We may be parsing a large JSON object but are only interested in a single key;using  map[string]json.RawMessage tells the parser not to parse the values.We can later only parse the interesting values, not wasting resources on others.\n The hybrid approach is often useful when we&#39;re interested in a small part of acomplicated JSON structure which we don&#39;t care to fully validate. Moreover,some JSON structures actually don&#39;t have a matching static type (e.g. fields canhave different types based on other fields). In these cases using afull-fidelity struct representation of the JSON may be either cumbersome orinfeasible, and the hybrid approach is a good compromise to expose the pieces ofdata we actually care about more conveniently.", "posttime": "2020-05-17 07:27:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8868\u793a,json", "title": "\u5728GO\u4e2d\u8868\u793aJSON\u7ed3\u6784", "title_en": "Representing JSON Structures in Go", "transed": 1, "url": "https://eli.thegreenplace.net/2020/representing-json-structures-in-go/", "via": "", "real_tags": ["\u8868\u793a", "json"]}, {"category": "", "categoryclass": "", "imagename": "f8e2dd5d8d9f4bc16662f67c25cd5fae.jpg", "infoid": 1002462, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5e95\u7279\u5f8b-\u5e95\u7279\u5f8b\u6469\u5c14\u5e2e\u62d2\u7edd\u8ba9\u5c0f\u9884\u7b97\u548c\u5b98\u50da\u4f5c\u98ce\u963b\u788d\u4f1f\u5927\u7684\u6e38\u4e50\u573a\u3002\n\u5468\u516d\uff0c25\u540d\u5fd7\u613f\u5272\u8349\u673a\u79bb\u5f00\u9694\u79bb\u533a\uff0c\u4e89\u593a\u51a0\u519b\u8170\u5e26\uff0c\u6388\u4e88\u572812\u5c0f\u65f6\u7684Motown Mowdown\u4e2d\u5272\u8349\u6700\u591a\u7684\u4eba\u3002\n\u5e95\u7279\u5f8b\u6469\u5c14\u5e2e\u521b\u59cb\u4eba\u6c64\u59c6\u00b7\u7eb3\u5c14\u591a(Tom Nardo)\u5c55\u793a\u4e86\u5728\u5e95\u7279\u5f8b\u6c49\u9ed8\u4f2f\u683c\u6e38\u4e50\u573a(Hammerberg Playfield)\u4e8e2020\u5e745\u670816\u65e5(\u661f\u671f\u516d)\u5f00\u59cb\u768412\u5c0f\u65f6Motown Mowdown\u6d3b\u52a8\u4e2d\uff0c\u5272\u8349\u6700\u591a\u7684\u6210\u5458\u83b7\u5f97\u7684\u51a0\u519b\u8170\u5e26\u3002(\u6444\u5f71\uff1a\u9a6c\u514b\u65af\u00b7\u5965\u5c14\u8482\u65af\uff0c\u300a\u5e95\u7279\u5f8b\u65b0\u95fb\u300b)\u3002\n\u4ed6\u4eec\u5728\u5e95\u7279\u5f8b\u897f\u4fa7\u7684\u975e\u56fd\u6709\u516c\u56edHammerberg Playfield\u5f00\u59cb\u884c\u52a8\uff0c\u5904\u7406\u6742\u8349\u4e1b\u751f\u7684\u8349\u576a\uff0c\u4fee\u590d\u5df4\u987f-\u9ea6\u514b\u6cd5\u5170(Barton-McFarland)\u793e\u533a\u7684\u79cb\u5343\u5957\u88c5\uff0c\u7136\u540e\u5206\u5934\u6e05\u7406\u57ce\u5e02\u4e2d\u5176\u4ed610\u4e2a\u5e9f\u5f03\u7684\u6e38\u4e50\u573a\u3002\n50\u5c81\u7684\u6c64\u59c6\u00b7\u7eb3\u5c14\u591a(Tom Nardo)\u6765\u81ea\u4f2f\u660e\u7ff0\uff0c2009\u5e74\u5f00\u59cb\u5728\u5e95\u7279\u5f8b\u6469\u5c14\u5e2e\u6d3e\u5de5\u4f5c\uff0c\u4ed6\u8bf4\uff0c\u8fd9\u4e2a\u516c\u56ed\u6ca1\u6709\u4eba\u62e5\u6709\uff0c\u5b83\u53ea\u662f\u4ece\u88c2\u7f1d\u4e2d\u6389\u4e86\u51fa\u6765\u3002\u6211\u4eec\u53ea\u662f\u8bd5\u7740\u8ba9\u5b83\u6d3b\u7740\u3002\u5982\u679c\u6ca1\u6709\u56e2\u961f\uff0c\u4f60\u4e0d\u53ef\u80fd\u5728\u51e0\u5929\u5185\u7528\u5272\u8349\u673a\u4fee\u526a\u8fd9\u4e2a\u516c\u56ed\u7684\u8349\u576a.\u3002\n\u7a7a\u6c14\u4e2d\u5145\u6ee1\u4e86\u82b1\u7c89\uff0c\u56e0\u4e3a\u8fd9\u7fa4\u4eba\u586b\u6ee1\u4e86\u51e0\u5341\u4e2a\u5783\u573e\u888b\uff0c\u53ea\u7559\u4e0b\u4e86\u4fee\u526a\u5f97\u5b8c\u7f8e\u65e0\u7f3a\u7684\u7530\u91ce\u3002\u53c2\u4e0e\u8005\u8868\u793a\uff0c\u5728\u793e\u4ea4\u8ddd\u79bb\u7684\u540c\u65f6\uff0c\u8fd9\u662f\u4e00\u9879\u4ee4\u4eba\u6ee1\u8db3\u7684\u6d3b\u52a8\u3002\n\u6b65\u5c65\u8e52\u8dda\u5730\u5750\u8fdb\u5979\u7684Dixie Chopper\uff0c\u6c49\u5a1c\u00b7\u8303\u57c3\u5e93\u7279(Hannah VanEckoute)\u51c6\u5907\u593a\u56de\u5979\u7684\u7fbd\u7ed2\u51a0\u519b\u5934\u8854\u3002\u5979\u548c\u5979\u6765\u81ea\u8d1d\u5c14\u7ef4\u5c14\u7684\u4e08\u592b\u76d6\u5947(Gage)\u628a\u4ed6\u4eec\u7684\u4e24\u53f0\u5272\u8349\u673a\u548c\u9664\u8349\u673a\u5e26\u5230\u4e86\u52a0\u5165\u8fd9\u4e2a\u56e2\u4f19\u7684\u7b2c\u56db\u4e2a\u5e74\u5934\u3002\n28\u5c81\u7684VanEckoute\u8bf4\uff0c\u5f53\u4eba\u4eec\u770b\u5230\u6211\u4eec\u6240\u505a\u7684\u4e8b\u60c5\u65f6\uff0c\u4ed6\u4eec\u7684\u53cd\u5e94\u603b\u662f\u5982\u6b64\u7279\u522b\u3002\u6709\u65f6\u5019\u8349\u592a\u9ad8\u4e86\uff0c\u5b69\u5b50\u4eec\u751a\u81f3\u8fdb\u4e0d\u53bb\uff0c\u7136\u540e\u6211\u4eec\u79bb\u5f00\u65f6\u4ed6\u4eec\u8138\u4e0a\u7684\u7b11\u5bb9\u5c31\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u6210\u5c31\u3002\n5\u670816\u65e5\uff0c\u661f\u671f\u516d\uff0c\u5e95\u7279\u5f8b\uff0c\u6bd4\u5c14\u00b7\u5362\u5361\u65af\u5728Hammerberg Playfield\u6361\u5783\u573e\u3002(\u6444\u5f71\uff1a\u5e95\u7279\u5f8b\u65b0\u95fb\u62a5Max Ortiz)\u3002\n\u5341\u5e74\u524d\uff0c\u7eb3\u5c14\u591a\u4eceCraigslist\u4e70\u4e86\u4e00\u8f86\u8349\u576a\u62d6\u62c9\u673a\uff0c\u6765\u523075\u53f7\u5dde\u9645\u516c\u8def\u548c8\u82f1\u91cc\u8def\u4e0a\u7684\u4e00\u4e2a\u516c\u56ed\u3002\u4ed6\u8bf4\uff0c\u4ed6\u5728Facebook\u4e0a\u5efa\u7acb\u4e86\u4e00\u4e2a\u7fa4\uff0c\u5bfb\u627e\u5176\u4ed6\u53ef\u4ee5\u52a0\u5165\u8fd9\u4e2a\u9879\u76ee\u7684\u4eba\uff0c\u6700\u7ec8\uff0c\u8fd9\u4e2a\u7fa4\u53d8\u6210\u4e86\u4e00\u4e2a\u5272\u8349\u673a\u56e2\u4f19\u3002\n\u7eb3\u5c14\u591a\u8bf4\uff0c\u5f53\u5e95\u7279\u5f8b\u5373\u5c06\u7533\u8bf7\u7834\u4ea7\u65f6\uff0c\u5e95\u7279\u5f8b\u6709300\u591a\u4e2a\u516c\u56ed\uff0c\u8be5\u5e02\u8868\u793a\u53ea\u80fd\u7167\u987e\u5927\u7ea672\u4e2a\u516c\u56ed\u3002\n\u8d2d\u4e70\u7167\u7247\u5e95\u7279\u5f8b\u6469\u5c14\u5e2e\u6d3e\u7684\u67e5\u7406\u00b7\u65af\u76ae\u65af\u5728\u4ed6\u4eec2020\u5e74\u7684\u6469\u57ce\u964d\u843d\u8d5b\u4e2d\u4fee\u7406\u79cb\u5343\u3002(\u6444\u5f71\uff1a\u9a6c\u514b\u65af\u00b7\u5965\u5c14\u8482\u65af\uff0c\u300a\u5e95\u7279\u5f8b\u65b0\u95fb\u300b)\u3002\n\u53bb\u5e74\uff0c\u521b\u59cb\u4eba\u6210\u7acb\u4e86\u4e00\u4e2a\u540d\u4e3a\u788e\u7247\u4e4b\u654c\u7684\u975e\u8425\u5229\u6027\u7ec4\u7ec7\uff0c\u8fd8\u4e3b\u529e\u4e86\u5783\u573e\u6355\u9c7c\u6d3b\u52a8\uff0c\u540c\u4e00\u4e2a\u7ec4\u7ec7\u4ece\u5e95\u7279\u5f8b\u6cb3\u4e2d\u62c9\u51fa\u5783\u573e\u3002\n\u8be5\u7ec4\u7ec7\u8868\u793a\uff0c\u7531\u4e8e\u57ce\u5e02\u6b63\u5728\u8ffd\u8d76\u4ed6\u4eec\uff0c\u6bcf\u5e74\u88ab\u4fa6\u5bdf\u7684\u5730\u5757\u8d8a\u6765\u8d8a\u5c11\u3002\n\u7eb3\u5c14\u591a\u7b11\u7740\u8bf4\uff1a\u201c\u6211\u4eec\u5e0c\u671b\u4ed6\u4eec\u80fd\u8ba9\u6211\u4eec\u5012\u95ed\u3002\u201d\u6211\u4eec\u53ef\u4ee5\u6210\u7acb\u4e00\u4e2a\u4fdd\u9f84\u7403\u8054\u76df\u4ec0\u4e48\u7684\u3002", "note_en": "Detroit\u00a0\u2014 The Detroit Mower Gang refuses to let small budgets and bureaucracy stand in the way of great playgrounds.\n Twenty-five volunteer lawnmowers\u00a0left quarantine Saturday to compete\u00a0for a championship belt awarded to the person who\u00a0cuts the most grass during their 12-hour Motown Mowdown.\n Buy Photo Tom Nardone, founder of the Detroit Mower Gang, shows off the championship belt given to the member who mows the most grass in their 12- hour Motown Mowdown which started at Hammerberg Playfield in Detroit on Saturday, May 16, 2020. \u00a0 (Photo: Max Ortiz, The Detroit News)\n They kicked off at Hammerberg Playfield, an un-owned park on Detroit&#39;s west side, tackling the overgrown lawn, repairing swingsets for the Barton-McFarland neighborhood before splitting up to cleanup 10 other abandoned playgrounds in the city.\n &#34;No one owns this particular park, it just fell through the cracks,&#34; said Tom Nardone, 50, of Birmingham, who started\u00a0the Detroit Mower Gang in 2009. &#34;We just try to keep it alive. ...\u00a0Without a group, you couldn&#39;t mow this park with a mower in a couple of days.&#34;\n  The air was filled with pollen as the group filled dozens of trash bags and only leaving behind perfectly trimmed fields. Participants said it was a fulfilling activity to do while social distancing.\n Staddled into her Dixie Chopper, Hannah VanEckoute was ready to reclaim her title as the Mowdown champion. She and her\u00a0husband, Gage, from Belleville, brought their two lawnmowers and weed whackers to their fourth year with the gang.\n &#34;The reaction from people when they see what we&#39;ve done is always so special,&#34; said VanEckoute, 28. &#34;Sometimes the grass is so tall kids can&#39;t even get into it and then the smile on their faces as we leave is such a great accomplishment.&#34;\n Buy Photo Bill Lucas picks up trash at Hammerberg Playfield in Detroit on Saturday, May 16. \u00a0 (Photo: Max Ortiz, The Detroit News)\n A decade ago, Nardone bought a lawn tractor off Craigslist and took to a park on Interstate 75 and Eight Mile Road. He started a  Facebook group to find others who could join the project and eventually, it turned into a mower gang, he said.\n &#34;When the city was getting close to filing for bankruptcy there were more than 300 parks in Detroit and the city said it could only care for like 72,&#34; said Nardone.\n Buy Photo Charlie Spiess, of the Detroit Mower Gang, repairs a swing during their 2020 Motown Mowdown. \u00a0 (Photo: Max Ortiz, The Detroit News)\n Last year, the founders formed a nonprofit called Enemies of Debris and also host trash fishing, where the same group pulls trash out of the Detroit River.\n The group said there have been fewer lots scouted each year because the city is catching up to them.\n &#34;We hope they put us out of business,&#34; Nardone said laughing. &#34;We could start a bowling league or something.&#34;", "posttime": "2020-05-17 06:56:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e89\u593a\u6218,playground,\u5e95\u7279\u5f8b", "title": "\u5730\u76d8\u4e89\u593a\u6218\uff1a\u5e95\u7279\u5f8b\u6469\u5c14\u5e2e\u7ade\u4e8912\u5c0f\u65f6\u7684\u64cd\u573a\u6e05\u7406", "title_en": "Turf war: Detroit Mower Gang competes in 12-hour playground cleanup", "transed": 1, "url": "https://www.detroitnews.com/story/news/local/detroit-city/2020/05/16/turf-war-detroit-mower-gang-competes-playground-cleanup/5201499002/", "via": "", "real_tags": ["\u4e89\u593a\u6218", "\u5e95\u7279\u5f8b"]}, {"category": "", "categoryclass": "", "imagename": "778c846a152e2049675e63a0807af38e.png", "infoid": 1002461, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5c24\u5176\u662f\u73b0\u5728\uff0c\u6709\u4e1c\u897f\u53ef\u8bfb\u662f\u4ef6\u597d\u4e8b\u3002\u65b0\u4e8b\u7269\uff0c\u6765\u81ea\u4e0d\u540c\u6765\u6e90\u548c\u4e0d\u540c\u58f0\u97f3\u7684\u4e1c\u897f\uff0c\u4e0d\u540c\u7684\u5934\u8111\u8c08\u8bba\u4ed6\u4eec\u7684\u60f3\u6cd5\u548c\u7ecf\u5386\uff0c\u8bb2\u8ff0\u4ed6\u4eec\u7684\u6545\u4e8b\uff0c\u53d1\u5e03\u4e0e\u4ed6\u4eec\u76f8\u5173\u7684\u56fe\u7247\u548c\u4e8b\u60c5\u3002\u51e0\u5e74\u524d\uff0c\u53ef\u80fd\u662f8\u5e74\u621610\u5e74\u524d\uff0c\u4e92\u8054\u7f51\u4e0a\u6709\u535a\u5ba2\uff0c\u65f6\u95f4\u53ef\u80fd\u6bd4\u5f88\u591a\u4eba\u8bb0\u5fc6\u4e2d\u7684\u90fd\u8981\u957f\u3002\u4f60\u53ef\u4ee5\u56db\u5904\u641c\u7d22\uff0c\u4ed6\u4eec\u751a\u81f3\u5728\u7f51\u7edc\u641c\u7d22\u4e2d\u4e5f\u4f1a\u51fa\u73b0\uff0c\u4f60\u4f1a\u53d1\u73b0\u81ea\u5df1\u6b63\u5728\u9605\u8bfb\u67d0\u4eba\u7684\u535a\u5ba2\u3002\u4e5f\u8bb8\u8fd9\u662f\u4ed6\u4eec\u5728\u65e5\u672c\u627e\u5230\u4e00\u4efd\u6559\u5b66\u5de5\u4f5c\u65f6\u7684\u751f\u6d3b\u7f16\u5e74\u53f2\uff0c\u8bb0\u5f55\u4e86\u4ed6\u4eec\u7b2c\u4e00\u6b21\u5982\u4f55\u79bb\u5f00\u7f8e\u56fd\uff0c\u90a3\u91cc\u7684\u6240\u6709\u65b0\u4e8b\u7269\uff0c\u6ed1\u677f\uff0c\u7ed3\u8bc6\u4eba\u4eec\uff0c\u8bd5\u56fe\u7ed3\u8bc6\u5973\u5b69\uff0c\u6216\u8005\u662f\u4e00\u540d\u6444\u5f71\u5e08\u5728\u7c73\u8bfa\u5361\u5c9b\u6216\u897f\u73ed\u7259\u7684\u67d0\u4e2a\u5c9b\u5c7f\u5de5\u4f5c\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u5f53\u65f6\u97f3\u4e50\u6572\u54cd\u4e86\u6447\u6eda\u573a\u9762\uff0c\u6240\u6709\u7684\u5e74\u8f7b\u4eba\u90fd\u7a7f\u7740\u76ae\u8863\u548c\u7d27\u8eab\u725b\u4ed4\u88e4\uff0c\u968f\u7740\u6447\u6eda\u8df3\u821e\uff0c\u5199\u4e0b\u4e86\u4ed6\u5bf9\u81ea\u5df1\u5728\u54ea\u91cc\u9002\u5408\u8fd9\u4e2a\u573a\u666f\u7684\u60f3\u6cd5\uff0c\u56e0\u4e3a\u4ed6\u6709\u70b9\u8001\u4e86\uff0c\u4f46\u5e76\u4e0d\u8001\uff0c\u6216\u8005\u662f\u4e00\u672c\u5947\u602a\u548c\u4e0d\u8001\u7684\u6c47\u7f16\u3002\u6216\u8005\u662f\u4e00\u4e9b\u7537\u4eba\u5728\u4ed6\u7684\u8f66\u5e93\u91cc\u7528\u6728\u5934\u6216\u7535\u5b50\u4ea7\u54c1\u505a\u7684\u4e1c\u897f\uff0c\u6216\u8005\u4e00\u4e9b\u65e5\u672c\u5973\u5b69\u4e0a\u4f20\u4e86\u81ea\u5df1\u770b\u8d77\u6765\u975e\u5e38\u7c89\u7ea2\u8272\u548c\u5145\u6c14\u7684\u7167\u7247\uff0c\u5e76\u7528\u5b83\u4eec\u5199\u4e86\u4e00\u4e9b\u5c0f\u4e1c\u897f\u3002\n\u5982\u4eca\uff0c\u5f53\u6bcf\u4e2a\u4eba\u90fd\u88ab\u5c01\u9501\uff0c\u767d\u5929\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u53ea\u6709\u65f6\u95f4\u53ef\u4ee5\u6d88\u78e8\uff0c\u591c\u665a\u4e5f\u662f\u5982\u6b64\uff0c\u4f60\u53ef\u4ee5\u6ce1\u4e00\u676f\u70ed\u8336\u6216\u4e00\u676f\u5496\u5561\uff0c\u7136\u540e\u5750\u4e0b\u6765\uff0c\u4f46\u5f53\u4f60\u770b\u90a3\u91cc\u7684\u65f6\u5019\uff0c\u6839\u672c\u6ca1\u6709\u4ec0\u4e48\u53ef\u8bfb\u7684\u3002\u4f60\u4e0d\u80fd\u8fdb\u5165\u90a3\u4e9b\u72ec\u7279\u7684\u58f0\u97f3\uff0c\u5199\u4e0b\u4ed6\u4eec\u5173\u5fc3\u7684\u4e8b\u60c5\uff0c\u53d1\u751f\u5728\u4ed6\u4eec\u8eab\u4e0a\u7684\u4e8b\u60c5\u3002\n\u524d\u51e0\u5929\u6211\u627e\u4e86\u4e00\u4e2a\u5c0f\u65f6\uff0c\u4e00\u4e2a\u4e5f\u6ca1\u627e\u5230\u3002\u5b83\u4eec\u66fe\u7ecf\u662f\u65e0\u7a77\u65e0\u5c3d\u7684\u3002\u4f60\u53ea\u9700\u70b9\u51fb\u4f60\u5728Blogger\u4e0a\u8ba4\u8bc6\u7684\u4e00\u4e2a\u535a\u5ba2\uff0c\u7136\u540e\u70b9\u51fbBlogger\u7684\u968f\u673a\u535a\u5ba2\u6309\u94ae\uff0c\u6216\u8005\u8fdb\u5165\u4f60\u77e5\u9053\u7684\u535a\u5ba2\u7684\u4fa7\u680f\uff0c\u90a3\u91cc\u603b\u662f\u6709\u4ed6\u4eec\u559c\u6b22\u7684\u535a\u5ba2\u5217\u8868\uff0c\u6709\u65f6\u662f\u56db\u4e94\u4e2a\uff0c\u6709\u65f6\u662f20\u4e2a\u5176\u4ed6\u535a\u5ba2\u3002Tumbler\u4e5f\u662f\u5982\u6b64\u3002\n\u535a\u5ba2\u8fc7\u53bb\u4e4b\u6240\u4ee5\u5b58\u5728\uff0c\u662f\u56e0\u4e3a\u6709\u4e86\u535a\u5ba2\u5e73\u53f0\u3002\u4f46\u662fBlogger\u5728\u51e0\u5e74\u524d\u5c31\u88ab\u8c37\u6b4c\u5173\u95ed\u4e86\uff0c\u5230\u73b0\u5728\u4e3a\u6b62\uff0c\u90a3\u91cc\u7684\u535a\u5ba2\u4e00\u76f4\u5728\u6d88\u5931\uff0c\u4f60\u5c31\u662f\u627e\u4e0d\u5230\u771f\u6b63\u7684\u535a\u5ba2\uff0c\u800c\u4e14\u5b83\u4eec\u4e0d\u518d\u5728\u641c\u7d22\u4e2d\u88ab\u7d22\u5f15\u3002Tumbler\u4e5f\u88ab\u4eba\u4eec\u7528\u6765\u8bb0\u5f55\u4ed6\u4eec\u7684\u751f\u6d3b\u548c\u5174\u8da3\uff0c\u867d\u7136\u4e5f\u6709\u5f88\u591a\u53ea\u662f\u56fe\u7247\u7684\u535a\u5ba2\uff0c\u4f46\u5b83\u6700\u8fd1\u6539\u53d8\u4e86\u653f\u7b56\uff0c\u73b0\u5728\u4e0d\u5141\u8bb8NSFW\u5185\u5bb9\uff0c\u8fd9\u57fa\u672c\u4e0a\u635f\u5bb3\u4e86\u6240\u6709\u63d0\u5230\u4e0d\u5b8c\u5168PG\u7684\u535a\u5ba2\u3002\u6240\u6709\u6211\u6709\u4e66\u7b7e\u7684\u65e7Tumbler\u535a\u5ba2\u6211\u90fd\u4e0d\u80fd\u518d\u8bbf\u95ee\u4e86\uff0c\u56e0\u4e3a\u5b83\u4eec\u88abTumbler\u8ba4\u4e3a\u6709NSFW\u5185\u5bb9\u3002\u6211\u60f3\u90a3\u4e9b\u4eba\u5728\u628a\u6240\u6709\u7684\u7cbe\u529b\u90fd\u6295\u5165\u5230\u5236\u4f5c\u8fd9\u6837\u4e00\u4e2a\u7279\u522b\u7684\u4e1c\u897f\u4e4b\u540e\u4f1a\u6709\u4ec0\u4e48\u611f\u89c9\uff0c\u7136\u540eTumbler\u5c31\u628a\u5b83\u6bc1\u4e86\u3002\u8fd9\u5c31\u662f\u7ed3\u675f\u4e86\u3002\u6ca1\u6709\u529e\u6cd5\u627e\u5230\u535a\u5ba2\uff0c\u4e5f\u6ca1\u6709\u4eba\u5728\u5199\u535a\u5ba2\uff0c\u56e0\u4e3a\u6ca1\u6709\u5e73\u53f0\u53ef\u4f9b\u4ed6\u4eec\u4f7f\u7528\u3002\n\u4f46\u5982\u679c\u6211\u80fd\u5e26\u56de\u4e00\u6837\u4e1c\u897f\uff0c\u6211\u4f1a\u628a\u5b83\u4eec\u5e26\u56de\u4e92\u8054\u7f51\u3002\u5b83\u4eec\u662f\u6211\u6700\u6000\u5ff5\u4e5f\u662f\u6700\u7ecf\u5e38\u6000\u5ff5\u7684\u4e1c\u897f\u3002\u4ed6\u4eec\u662f\u8fd9\u91cc\u6700\u6709\u4ef7\u503c\u7684\u4e1c\u897f\uff0c\u9664\u4e86\u53ef\u4ee5\u66f4\u81ea\u7531\u5730\u83b7\u5f97\u65b0\u95fb\uff0cYouTube\u4e0a\u514d\u8d39\u4f46\u8d28\u91cf\u4e0d\u9ad8\u7684\u89c6\u9891\u5185\u5bb9\uff0c\u6211\u60f3\u8fd8\u6709\u4e00\u4e9b\u793e\u4ea4\u5a92\u4f53\u3002\u4f46\u535a\u5ba2\u662f\u4f60\u53ef\u4ee5\u5750\u4e0b\u6765\u9605\u8bfb\u7684\u4e1c\u897f\uff0c\u4f60\u53ef\u4ee5\u771f\u6b63\u8fdb\u5165\u535a\u5ba2\uff0c\u4ee5\u81f3\u4e8e\u4f60\u751a\u81f3\u5fd8\u4e86\u81ea\u5df1\u5728\u54ea\u91cc\uff0c\u60f3\u60f3\u4f60\u60f3\u5982\u4f55\u5728\u751f\u6d3b\u4e2d\u5c1d\u8bd5\u8fd9\u4e9b\u4e8b\u60c5\uff0c\u6216\u8005\u53ea\u662f\u4eab\u53d7\u5b83\u4eec\u7684\u5199\u4f5c\uff0c\u4f60\u53ef\u4ee5\u66f4\u6df1\u5165\u5730\u9605\u8bfb\u8fc7\u53bb\u7684\u535a\u5ba2\u5e16\u5b50\uff0c\u7a0d\u540e\u518d\u8c03\u56de\uff0c\u770b\u770b\u81ea\u4ece\u4f60\u8bfb\u5230\u5173\u4e8e\u5b83\u4eec\u7684\u6700\u540e\u4e00\u7bc7\u6587\u7ae0\u4ee5\u6765\uff0c\u5b83\u4eec\u90fd\u53d1\u5e03\u4e86\u4ec0\u4e48\u3002\n\u5f53\u4f60\u641c\u7d22\u73b0\u5728\u7684\u535a\u5ba2\u65f6\uff0c\u4f60\u4f1a\u770b\u5230\u7c7b\u4f3c\u8fd9\u6837\u7684\u4e1c\u897f\uff1a\u524d100\u4e2a\u535a\u5ba2\u3002\u5982\u4f55\u5236\u4f5c\u4e00\u4e2a\u6210\u529f\u7684\u535a\u5ba2\u3002\u6700\u5f3a\u5927\u768450\u4e2a\u535a\u5ba2\u3002\u4f46\u4f60\u771f\u6b63\u60f3\u8981\u7684\u662f1\u4e07\u4e2a\u4e0d\u6210\u529f\u7684\u535a\u5ba2\u3002\u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u662f\uff1a\u201c\u5f53\u4f60\u5728\u641c\u7d22\u535a\u5ba2\u65f6\uff0c\u4f60\u4f1a\u770b\u5230\u8fd9\u6837\u7684\u4e1c\u897f\uff1a\u5982\u4f55\u505a\u4e00\u4e2a\u6210\u529f\u7684\u535a\u5ba2\u3002\u6700\u5f3a\u5927\u768450\u4e2a\u535a\u5ba2\u3002\u4f46\u4f60\u771f\u6b63\u60f3\u8981\u7684\u662f1\u4e07\u4e2a\u4e0d\u6210\u529f\u7684\u535a\u5ba2\u3002\u201d\u7f51\u7edc\u641c\u7d22\u73b0\u5728\u4e3a\u4f60\u7684\u535a\u5ba2\u63d0\u4f9b\u70b9\u5b50\u5efa\u8bae\uff0c\u4ee5\u83b7\u5f97\u6d4f\u89c8\u91cf\u3001\u5206\u4eab\u548c\u7d22\u5f15\uff0c\u4f46\u4f60\u771f\u6b63\u60f3\u8981\u7684\u662f\u6ca1\u6709\u70b9\u5b50\u3002\u73b0\u5728\u51e0\u4e4e\u4e0d\u53ef\u80fd\u627e\u5230\u4e00\u4e2a\u4e3b\u9898\u4e0d\u96c6\u4e2d\u7684\u535a\u5ba2\uff0c\u56e0\u4e3a\u8fd9\u662f\u641c\u7d22\u5f15\u64ce\u5173\u6ce8\u7684\u91cd\u70b9\uff0c\u4e5f\u662f\u7f51\u7ad9\u5982\u4f55\u83b7\u5229\u7684\u3002\u4f46\u4f60\u60f3\u8981\u7684\u6070\u6070\u76f8\u53cd\uff0c\u4e00\u4e2a\u4ece\u6765\u6ca1\u6709\u8bd5\u56fe\u96c6\u4e2d\u7cbe\u529b\uff0c\u751a\u81f3\u4ece\u6765\u6ca1\u6709\u60f3\u8fc7\u8fd9\u4e00\u70b9\u7684\u535a\u5ba2\u3002\u8fc7\u53bb\u4f3c\u4e4e\u6709\u65e0\u7a77\u65e0\u5c3d\u7684\u641c\u7d22\u7ed3\u679c\u88ab\u8c37\u6b4c\u548c\u5176\u4ed6\u88ab\u8c37\u6b4c\u627c\u6740\u7684\u641c\u7d22\u5f15\u64ce\u7d22\u5f15\u3002\u4e5f\u8bb8\u4f60\u4f1a\u770b\u52304\u4e07\u4e2a\u641c\u7d22\u7ed3\u679c\u3002\u73b0\u5728\u5b83\u8bf4\u670940,000\u4e2a\uff0c\u4f46\u4f60\u53ea\u80fd\u5f97\u523010\u523020\u9875\u7684\u7ed3\u679c\uff0c\u57fa\u672c\u4e0a\u90fd\u662f\u516c\u53f8\u7684\uff0c\u800c\u4e14\u5f88\u5dee\u52b2\u3002\u4f60\u518d\u4e5f\u770b\u4e0d\u5230\u7b2c100\u9875\u4e86\u3002\u5373\u4f7f\u6709\u4eba\u5efa\u7acb\u4e86\u4e00\u4e2a\u722c\u866b\u7d22\u5f15\u5668\uff0c\u4f60\u53ef\u4ee5\u7528\u5b83\u6765\u641c\u7d22\u6240\u6709\u4e1c\u897f\uff0c\u5305\u62ec\u4e0d\u53d7\u6b22\u8fce\u6216\u88ab\u7b97\u6cd5\u5224\u5b9a\u4e3a\u76f8\u5173\u7684\u4e1c\u897f\uff0c\u90a3\u4e5f\u662f\u4ef6\u597d\u4e8b\u3002DuckDuckGo\u7b49\u66ff\u4ee3\u5f15\u64ce\u7684\u95ee\u9898\u662f\uff0c\u5b83\u4eec\u53ea\u4f7f\u7528\u8c37\u6b4c\u641c\u7d22\uff0c\u800c\u4e0d\u662f\u4ee5\u81ea\u5df1\u7684\u65b9\u5f0f\u722c\u884c\u548c\u7d22\u5f15\u4e1c\u897f\u3002\u5982\u679c\u4ed6\u4eec\u8fd9\u6837\u505a\u4e86\uff0c\u4ed6\u4eec\u5c06\u662f\u6709\u8da3\u548c\u6709\u7528\u7684\u4f7f\u7528\uff0c\u800c\u4e0d\u662f\u51fa\u4e8e\u4fdd\u62a4\u9690\u79c1\u7684\u539f\u56e0\u3002\u867d\u7136\u6709\u4eba\u8bf4\u8c37\u6b4c\u53d8\u5f97\u8d8a\u6765\u8d8a\u591a\n\u9690\u79c1\u4fdd\u62a4\u548c\u4e0d\u80fd\u5c06\u5176\u66f4\u6539\u4e3a\u6076\u610f\u4f7f\u7528\uff0c\u5fc5\u987b\u5728\u4e00\u5f00\u59cb\u5c31\u8003\u8651\u5230\u8fd9\u4e00\u70b9\u3002\u6211\u6000\u7591\u62c9\u91cc\u548c\u8c22\u5c14\u76d6\uff0c\u751a\u81f3\u76d6\u8328\uff0c\u5982\u679c\u4ed6\u4eec\u77e5\u9053\u5b83\u5c06\u88ab\u7528\u6765\u505a\u4ec0\u4e48\uff0c\u4ed6\u4eec\u4f1a\u4ee5\u4ed6\u4eec\u6240\u505a\u7684\u65b9\u5f0f\u521b\u9020\u51fa\u8fd9\u6837\u7684\u4e1c\u897f\u3002\u8fd9\u4e9b\u4eba\u73b0\u5728\u53ef\u4ee5\u5c1d\u8bd5\u5728\u4ed6\u4eec\u7684\u751f\u6d3b\u4e2d\u5bfb\u627e\u5176\u4ed6\u4e8b\u60c5\u505a\uff0c\u6216\u8005\u7528\u6148\u5584\u6765\u5f25\u8865\uff0c\u4f46\u4ed6\u4eec\u7684\u53d1\u660e\u662f\u5728\u5982\u6b64\u6781\u7aef\u7684\u6c34\u5e73\u4e0a\u7528\u6765\u5bf9\u4ed8\u4eba\u7684\u53ef\u6015\u7684\u5de5\u5177\u3002\u4efb\u4f55\u4ed6\u4eec\u8ba4\u4e3a\u6709\u4e00\u5929\u53ef\u80fd\u4f1a\u53d8\u5927\u7684\u4e1c\u897f\uff0c\u4efb\u4f55\u4eba\u90fd\u5e94\u8be5\u5728\u4e00\u5f00\u59cb\u5c31\u53c2\u4e0e\u8fdb\u6765\uff0c\u9632\u6b62\u5f53\u5b83\u5bf9\u5f3a\u5927\u7684\u5b9e\u4f53\u6709\u7528\u65f6\uff0c\u5b83\u53ef\u80fd\u4f1a\u88ab\u8d1f\u9762\u5229\u7528\u3002\u6211\u4e0d\u786e\u5b9a\u6258\u7ba1\u670d\u52a1\u5668\u662f\u5426\u53ef\u4ee5\u8bbe\u5728\u7f8e\u56fd\uff0c\u56e0\u4e3a\u7f8e\u56fd\u4e0d\u4fdd\u62a4\u9690\u79c1\u6216\u4e92\u8054\u7f51\u4f7f\u7528\u3002\u6211\u4e0d\u77e5\u9053\u54ea\u91cc\u6709\u3002\u6211\u8bfb\u5230\u963f\u6839\u5ef7\u6709\u5baa\u6cd5\u4fdd\u62a4Insernet\u8a00\u8bba\uff0c\u5c3d\u7ba1\u8fd9\u79cd\u81ea\u7531\u53d7\u5230\u7981\u6b62\u64b0\u5199\u5173\u4e8e\u672c\u56fd\u653f\u5e9c\u7684\u6587\u7ae0\u7684\u9650\u5236\u3002\u618e\u6068\u963f\u6839\u5ef7\u62e5\u6709\u53d7\u4fdd\u62a4\u7684\u8a00\u8bba\u81ea\u7531\u7684\u4e92\u8054\u7f51\uff0c\u800c\u7f8e\u56fd\u3001\u52a0\u62ff\u5927\u548c\u6b27\u6d32\u5374\u4e0d\u4fdd\u62a4\u4e92\u8054\u7f51\u4e0a\u7684\u4eba\u6743\u7684\u5b9e\u4f53\u4f1a\u8bf4\uff0c\u5f88\u597d\uff0c\u56e0\u4e3a\u963f\u6839\u5ef7\u4e3a\u6050\u6016\u4e3b\u4e49\u548c\u4f24\u5bb3\u513f\u7ae5\u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u8fd9\u662f\u90a3\u4e9b\u60f3\u8981\u653b\u51fb\u4e2a\u4eba\u6216\u7cfb\u7edf\u7684\u4eba\u6700\u559c\u6b22\u7684\u4e24\u4e2a\u8bf4\u6cd5\uff0c\u800c\u8fd9\u4e9b\u4eba\u6216\u7cfb\u7edf\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u505a\u9519\u4ec0\u4e48\uff0c\u4ed6\u4eec\u9700\u8981\u5f15\u8d77\u652f\u6301\u8005\u7684\u8b66\u89c9\u3002\u5f53\u7136\uff0c\u8fd9\u4e9b\u884c\u4e3a\u5728\u963f\u6839\u5ef7\u662f\u88ab\u7981\u6b62\u7684\uff0c\u4f46\u636e\u6211\u6240\u77e5\uff0c\u4ed6\u4eec\u4e92\u8054\u7f51\u4e0a\u7684\u8a00\u8bba\u548c\u8868\u8fbe\u662f\u7981\u6b62\u7684\uff0c\u5305\u62ec\u90a3\u4e9b\u4e1c\u897f\u3002\u6211\u7684\u610f\u601d\u662f\uff0c\u4ec5\u4ec5\u662f\u8fd9\u4e2a\u60f3\u6cd5\uff1a\u975e\u6cd5\u4fe1\u606f\u3002\u975e\u6cd5\u8a00\u8bba\u3002\n\u6211\u4e0d\u786e\u5b9a\u5982\u4f55\u4fdd\u62a4\u5e73\u53f0\u3002\u6216\u8bb8\u53ef\u4ee5\u53ca\u65e9\u4e0eEFF\u8fd9\u6837\u503c\u5f97\u4fe1\u8d56\u7684\u900f\u660e\u7ec4\u7ec7\u5408\u4f5c\uff0c\u8ba9\u4ed6\u4eec\u5b9a\u671f\u516c\u5f00\u5ba1\u8ba1\u5e73\u53f0\uff0c\u5e76\u8868\u793a\uff0c\u5982\u679c\u8fd9\u4e00\u70b9\u53d1\u751f\u53d8\u5316\uff0c\u5bf9\u5e73\u53f0\u7684\u516c\u5f00\u900f\u660e\u5b9a\u671f\u5ba1\u8ba1\u5e94\u8be5\u7acb\u5373\u963b\u6b62\u5b83\uff0c\u7528\u6237\u5e94\u8be5\u7acb\u5373\u8ba4\u4e3a\u5b83\u53d7\u5230\u4e86\u635f\u5bb3\uff0c\u5e76\u505c\u6b62\u4f7f\u7528\u5b83\u3002\n\u6b64\u5916\uff0c\u4f60\u5fc5\u987b\u5c06\u5185\u5bb9\u6c38\u8fdc\u4fdd\u5b58\u5728\u5907\u4efd\u7684\u670d\u52a1\u5668\u4e0a\uff0c\u5426\u5219\uff0c\u5982\u679c\u6709\u4e00\u5929\u5e73\u53f0\u4f1a\u50cfBloger\u548cTumbler\u90a3\u6837\u5220\u9664\u8fd9\u4e9b\u5185\u5bb9\uff0c\u4ed6\u4eec\u5c31\u4e0d\u4f1a\u89c9\u5f97\u81ea\u5df1\u591a\u5e74\u6765\u5728\u535a\u5ba2\u4e0a\u7684\u52aa\u529b\u662f\u503c\u5f97\u7684\u3002\u4e5f\u8bb8\u5e73\u53f0\u6ca1\u6709\u592a\u591a\u94b1\uff0c\u6240\u4ee5\u4e0d\u80fd\u4fdd\u5b58\u56fe\u7247\u6216\u89c6\u9891\uff0c\u4f46\u81f3\u5c11\u5e94\u8be5\u4fdd\u7559\u6587\u672c\u3002\n\u6b64\u5916\uff0c\u5e73\u53f0\u5fc5\u987b\u76c8\u5229\u6216\u627f\u8bfa\u5728\u4e0d\u6ee5\u7528\u7528\u6237\u6216\u5ba2\u4eba\u7684\u60c5\u51b5\u4e0b\u672a\u6765\u76c8\u5229\u3002\u8fd9\u53ef\u4ee5\u662f\u67d0\u5bb6\u5927\u578b\u4e92\u8054\u7f51\u5e7f\u544a\u516c\u53f8\u63d0\u4f9b\u7684\u5e7f\u544a\uff0c\u4e5f\u53ef\u4ee5\u662f\u4f5c\u4e3a\u5e73\u53f0\u4e00\u90e8\u5206\u7684\u5e7f\u544a\u516c\u53f8\u63d0\u4f9b\u7684\u5e7f\u544a\u3002\u6ca1\u6709\u592a\u591a\u7684\u5e7f\u544a\uff0c\u6240\u4ee5\u535a\u5ba2\u88ab\u6bc1\u4e86\uff0c\u4f46\u53ef\u80fd\u5728\u5e95\u90e8\u6216\u9876\u90e8\u548c\u5e95\u90e8\u90fd\u6709\u5e7f\u544a\uff0c\u4fdd\u7559\u4e86\u5c5e\u4e8e\u535a\u5ba2\u4f5c\u8005\u7684\u7a7a\u95f4\u3002\u6b64\u5916\uff0c\u8be5\u516c\u53f8\u53ef\u80fd\u6c38\u8fdc\u4e0d\u5e94\u8be5\u4e0a\u5e02\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u51e0\u5bb6\u5927\u516c\u53f8\u6216\u653f\u5e9c\u7684\u53c2\u4e0e\u5982\u4f55\u8ba9\u4e92\u8054\u7f51(\u4ee5\u53ca\u8fc7\u53bb\u7684\u8868\u8fbe\u5f62\u5f0f)\u53d8\u5f97\u66f4\u7cdf\uff0c\u8fd9\u4e24\u4ef6\u4e8b\u4e2d\u4efb\u4f55\u4e00\u4ef6\u4e8b\u7684\u53c2\u4e0e\u7a0b\u5ea6\u90fd\u4f1a\u4fb5\u8680\u6216\u5b8c\u5168\u6467\u6bc1\u5b83\u3002\n\u5373\u4eba\u4eec\u53ef\u4ee5\u5b89\u5168\u5730\u79c1\u4e0b\u5199\u535a\u5ba2\u7684\u5e73\u53f0\uff0c\u5728\u8fd9\u4e2a\u5e73\u53f0\u4e0a\uff0c\u535a\u5ba2\u4e0d\u80fd\u88ab\u8f6c\u5316\u4e3a\u8fb1\u9a82\u4ed6\u4eba\u7684\u5de5\u5177\uff0c\u9690\u79c1\u3001\u601d\u60f3\u3001\u8868\u8fbe\u548c\u8ba8\u8bba\u7684\u81ea\u7531\u5f97\u5230\u7ef4\u62a4\uff0c\u8a00\u8bba\u4e0d\u4f1a\u53d7\u5230\u5bd2\u8749\u6548\u5e94\u3002", "note_en": "Nowadays especially it&#39;s nice to have things to read. New things, things from various sources and various voices, various minds talking about their thoughts and experiences, telling their stories, posting pictures and things that are relevant to them. A couple of years ago, maybe 8 or 10 so maybe longer than a lot of people will be able to remember, there were blogs on the internet. You could search around and they&#39;d come up even in websearch, and you&#39;d find yourself reading someone&#39;s blogs. Maybe it was chronicles of their life as they got a job teaching in Japan and how it was leaving American for the first time and all the new things there and skateboarding and meeting people and trying to meet girls, or a photographer working for a while in Minorca or some island off Spain when music hit a rock scene period and all the young people were dressing up in leather and tight jeans and going out dancing to dance rock and writing about his thoughts on where he fit into the scene as he was kind of older but not old, or a compilation of weird and unexplained science and gnostic wisdom, or the things some guy was making out of wood or electronics in his garage, or some Japanese girl who posted pictures of herself looking extremely pink and pneumatic and writing little things with them.\n Nowadays when everyone is on lockdown and there are days with nothing but spaces of time to pass, nights too, and you can make a hot tea or a coffee and sit down but when you look there&#39;s nothing to read. You can&#39;t access those unique voices writing about the things they care about, that are happening to them.\n The other day I searched for an hour and couldn&#39;t find even one. They used to be endless. You&#39;d just click on one you knew on Blogger and either click Blogger&#39;s random blog button, or go to the sidebar of the blog you knew where they always had a list of blogs they liked, sometimes four or 5, sometimes 20 other blogs. And the same with Tumbler.\n Blogs used to exist because there were blogging platforms. But Blogger was shut down by Google years ago, and the blogs on there have been disappearing until now you just can&#39;t find really any, and they&#39;re not indexed in search anymore. Tumbler also was used by people to blog about their lives and interests, although there were also a lot of just pictures blogs, but it recently changed its policy and now permits no NSFW content, which compromised basically every blog that mentioned something not completely PG. All the old Tumbler blogs I had bookmarks for I can&#39;t even access anymore because they were deemed by Tumbler to have NSFW content. I think about how those people must feel after putting all that work into making such a special thing and then Tumbler just destroys it. And that&#39;s the end. There&#39;s no way to find blogs, and no one is writing them because there&#39;s no platform for them.\n But they would be the one thing I&#39;d bring back to the internet if I could bring one thing back. They&#39;re the thing I miss the most and the most often. They were the most valuable thing on here, besides freer availability of news, free although low quality video content on YouTube, and I guess some kinds of social media. But blogs are something you can sit down and read and get really into to the point you forget where you even are, and think about how you want to try those things maybe in your life, or just enjoy their writing, and you can read deeper into them into past blog posts, and tune back in later and see what they&#39;ve posted since the last things you read about them.\n When you search for blogs now on you see things like &#39;Top 100 Blogs.&#39; &#39;How to Make a Successful Blog.&#39; &#39;Most Powerful 50 Blogs.&#39; But what you really want is 10,000 unsuccessful blogs. Web search now suggests ideas for your blogs to get views, shares, indexed, but what you really want is no ideas. It&#39;s almost impossible now to find a blog that&#39;s not on a focused theme because that&#39;s what search engines focus on and how websites profit. But you want the opposite, a blog that never tried to focus or even thought about it. There used to seem to be endless search results indexed by Google and the other search engines that were killed by Google. Maybe you&#39;d see 40,000 results for your search. Now it says there are 40,000 but you only get 10 or 20 pages of results you can get to, all basically corporate and lame. You can&#39;t get to the 100th page anymore. It&#39;d be nice even if someone built a crawler-indexer that you could use to search for everything including things that weren&#39;t popular or judged by algorithms to be &#39;relevant.&#39; The problem with alternative engines like DuckDuckGo is they just use Google Search and don&#39;t crawl and index things in their own way. If they did they&#39;d be fun and useful to use for reasons other than protection of privacy. Although some people say Google is becoming more and more useless to the point it won&#39;t be revived and may collapse for this reason although even if that were true we&#39;d still have to suffer with it for years.\n  A couple of notes, in case anyone is thinking of starting a new blogging platform:\n There&#39;s no point if you&#39;re not going to protect people, and that means their privacy. Nowadays people won&#39;t share content simply because they don&#39;t trust the internet to share content to it. You have to provide for them to be anonymous and protected forever, which means letting people create accounts easily with just an email or something similar, and log into them or recover their password throught the email if they lose their password, and never any locking them out because you noticed suspicious activity or anything bogus like that and making them provide personal details. That is abuse of trust and abuse of people. They have to be able to blog without thinking someone is going to bring it up and file it away forever and maybe they won&#39;t get a job because of it, or their tyrannical government will think they&#39;re an agitator and attack them or an adversary will use it for selective characger defamation sometime. They have to be able to abandon a blog, start a new one, blog there, abandon it, etc. Otherwise they won&#39;t feel free to write, so you may as well not say you&#39;re going to provide a blogging platform for people if you won&#39;t protect them.\n Privacy protection and the inability of this to be changed to be used maliciously must be baked in at the start. I doubt Larry and Sergei or even Gates would have created what they did the way they did if they knew what it would be used for. Those guys now can try to find other things to do with their lives now, or make up for it with charity, but their inventions are tools terribly used against people on such an extreme level. Anybody creating anything they think might someday become big should bake in at the start prevention against the possibility it could be used negatively when it becomes useful to powerful entities. I&#39;m not sure the hosting servers could be based in the US because the US doesn&#39;t protect privacy or internet usage. I&#39;m not sure where does. I read that Argentina has constitutional law that protect insternet expression, although that freedom is tempered by the prohibition of writing about their own government. Entitites that hate that Argentina has a protected free speech internet while the US and Canada and Europe don&#39;t protect human rights on the internet will say &#39;Well because of that Argentina is providing for terrorism and harming children, the two favorite claims of people who want to attack people or systems when those people or systems haven&#39;t done anything actually wrong and they need to raise alarm in their supporters. Of course, those acts are prohibited in Argentina, but speech and expression on their internet is not, including of those things, as far as I know. I mean, just the idea: &#39;illegal information.&#39; &#39;Illegal speech.&#39;\n I&#39;m not sure how a platform could be protected. Perhaps by partnering early with a trusted, transparent organization like the EFF and having them publicly audit the platform on a regular basis and saying that if this is ever altered and public transparent regular audits of the platform stop it&#39;s users should immediately consider it compromised and stop using it.\n Also, you have to keep the content on the server of backed up forever, otherwise they won&#39;t feel their effort in blogging for years will be worthwhile if the platform will someday just erase it like Blogger and Tumbler did. Maybe the platform doesn&#39;t have a ton of money so it has to not save the images or videos, but at least the text should be maintained.\n Also, the platform must be profitable or promise future profit without abusing users or guests. This can simply be ads provided by one of the big internet ads companies or an ads company that&#39;s part of the platform. Not too many ads so the blogs are ruined, but maybe an ad at the bottom or perhaps the top and bottom, preserving the space that belongs to the blogger. Also the company probably should not ever go public, as we have seen how the involvement of a couple of big corporations or governments made the internet (and past forms of expression) worse, and that any degree of involvement of either of these two things will eat away or completely destroy it.\n Ie, a platform where people can securely and privately blog, where it can&#39;t be converted into a tool for abuse of people, and where freedom of privacy, thought, expression and discussion is maintained and there is no &#39;chilling effect on speech.&#39;", "posttime": "2020-05-17 06:56:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u535a\u5ba2,\u5e26\u56de,internet", "title": "\u5982\u679c\u6211\u80fd\u628a\u4e00\u4ef6\u4e8b\u5e26\u56de\u4e92\u8054\u7f51\uff0c\u90a3\u5c31\u662f\u535a\u5ba2", "title_en": "If I could bring one thing back to the internet it would be blogs", "transed": 1, "url": "http://tttthis.com/blog/if-i-could-bring-one-thing-back-to-the-internet-it-would-be-blogs", "via": "", "real_tags": ["\u535a\u5ba2", "\u5e26\u56de", "internet"]}, {"category": "", "categoryclass": "", "imagename": "d62a9b5d51e0ee62bb8afa7d858937d4.png", "infoid": 1002460, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u90e8\u7f72API\u7aef\u70b9\u7684\u65b9\u6cd5\u6709\u591a\u79cd\uff0c\u4f8b\u5982\u672c\u4f8b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5728Amazon EC2\u4e0a\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u6f14\u793a\u5982\u4f55\u5c06Amazon ElastiCache\u4e0eAmazon DocumentDB(\u5177\u6709MongoDB\u529f\u80fd)\u96c6\u6210\u3002\u867d\u7136\u672c\u4f8b\u4e2d\u7684\u65b9\u6cd5\u901a\u8fc7\u5f39\u6027\u548c\u6269\u5c55\u6216\u7f29\u5c0fEC2\u5b9e\u4f8b\u6570\u91cf\u4ee5\u9002\u5e94\u5e94\u7528\u7a0b\u5e8f\u8d1f\u8f7d\u7684\u80fd\u529b\uff0c\u5e2e\u52a9\u5b9e\u73b0\u4e86\u51fa\u8272\u7684\u6027\u80fd\u548c\u53ef\u9760\u6027\uff0c\u4f46\u662f\uff0c\u60a8\u4ecd\u7136\u9700\u8981\u81ea\u5df1\u7ba1\u7406EC2\u5b9e\u4f8b\uff0c\u8fd9\u4ecd\u7136\u4f1a\u5e26\u6765\u4e00\u4e9b\u8fd0\u8425\u5f00\u9500\u3002\u89e3\u51b3\u8fd0\u8425\u5f00\u9500\u95ee\u9898\u548c\u76f8\u5173\u6210\u672c\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u5e94\u7528\u7a0b\u5e8f\u8f6c\u53d8\u4e3a\u65e0\u670d\u52a1\u5668\u67b6\u6784\u3002\n\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\u7684\u793a\u4f8b\u4f7f\u7528\u4e86\u4e00\u4e2a\u63d0\u4f9b\u7c7b\u4f3c\u7528\u4f8b\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u8be5\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u4e86\u4e00\u4e2a\u65e0\u670d\u52a1\u5668\u67b6\u6784\uff0c\u8be5\u67b6\u6784\u5c55\u793a\u4e86\u4e00\u4e9b\u5ba2\u6237\u6b63\u5728\u5229\u7528\u7684\u5de5\u5177\uff0c\u8fd9\u4e9b\u5de5\u5177\u662f\u7531\u5ba2\u6237\u4ece\u63d0\u5347\u548c\u8f6c\u79fb\u8fc7\u6e21\u5230\u6784\u5efa\u4e91\u539f\u751f\u5e94\u7528\u7a0b\u5e8f\u7684\u3002\u5b83\u4f7f\u7528Amazon API Gateway\u63d0\u4f9b\u8fde\u63a5\u5230AWS Lambda\u51fd\u6570\u7684rest API\u7aef\u70b9\uff0c\u4ee5\u63d0\u4f9b\u4eceAmazon Aurora Serverless\u6570\u636e\u5e93\u8bfb\u53d6\u548c\u5199\u5165\u7684\u4e1a\u52a1\u903b\u8f91\u3002\u5b83\u8fd8\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528AWS\u4e91\u5f00\u53d1\u5de5\u5177\u5305(\u79f0\u4e3aCDK)\u90e8\u7f72\u5927\u591a\u6570\u57fa\u7840\u8bbe\u65bd\u3002\u901a\u8fc7\u5c06\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u8fc1\u79fb\u5230\u4e91\u672c\u5730\u67b6\u6784(\u5982\u672c\u6587\u4e2d\u5c55\u793a\u7684\u793a\u4f8b)\uff0c\u60a8\u5c06\u80fd\u591f\u5b9e\u73b0\u8bb8\u591a\u597d\u5904\uff0c\u5305\u62ec\uff1a\n\u5728\u672c\u535a\u5ba2\u7684\u672b\u5c3e\uff0c\u60a8\u6709\u4e00\u4e2a\u5305\u542bCDK\u9879\u76ee\u7684AWS Cloud9\u5b9e\u4f8b\u73af\u5883\uff0c\u8be5\u9879\u76ee\u90e8\u7f72\u4e86API\u7f51\u5173\u548cLambda\u51fd\u6570\u3002\u6b64Lambda\u51fd\u6570\u5229\u7528\u5b58\u50a8\u5728\u60a8\u7684AWS Secrets Manager\u4e2d\u7684\u5bc6\u7801\uff0c\u901a\u8fc7Data API\u4ece\u60a8\u7684Aurora Serverless\u6570\u636e\u5e93\u8bfb\u53d6\u548c\u5199\u5165\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\n\u521d\u59cb\u5316\u548c\u914d\u7f6eAWS\u4e91\u5f00\u53d1\u5de5\u5177\u5305\u9879\u76ee\uff0c\u5305\u62ecAmazon API Gateway\u7aef\u70b9\u548cAWS Lambda\u51fd\u6570\u7684\u5b9a\u4e49\u3002\n\u8981\u90e8\u7f72CDK\u5e94\u7528\u7a0b\u5e8f\uff0c\u9700\u8981\u6ee1\u8db3\u51e0\u4e2a\u524d\u63d0\u6761\u4ef6\uff1a\n\u5c55\u5f00Additional Connectivity\u90e8\u5206\u5e76\u9009\u62e9Data API\u9009\u9879\u3002\u6b64\u529f\u80fd\u4f7f\u60a8\u80fd\u591f\u901a\u8fc7\u57fa\u4e8eWeb\u670d\u52a1\u7684\u5e94\u7528\u7a0b\u5e8f\u8bbf\u95eeAurora Serverless\u3002\u5b83\u8fd8\u5141\u8bb8\u60a8\u4f7f\u7528Aurora Serverless\u7684\u67e5\u8be2\u7f16\u8f91\u5668\u529f\u80fd\uff0c\u4ee5\u4fbf\u5bf9\u6570\u636e\u5e93\u5b9e\u4f8b\u8fd0\u884cSQL\u67e5\u8be2\u3002\n\u60a8\u7684\u6570\u636e\u5e93\u5b9e\u4f8b\u662f\u5728\u5355\u4e2a\u53ef\u7528\u533a(AZ)\u4e2d\u521b\u5efa\u7684\uff0c\u4f46Aurora Serverless\u6570\u636e\u5e93\u7fa4\u96c6\u5177\u6709\u4e00\u79cd\u79f0\u4e3a\u81ea\u52a8\u591aAZ\u6545\u969c\u8f6c\u79fb\u7684\u529f\u80fd\uff0c\u8be5\u529f\u80fd\u4f7fAurora\u80fd\u591f\u5728\u5f53\u524d\u6570\u636e\u5e93\u5b9e\u4f8b\u6216AZ\u53d8\u5f97\u4e0d\u53ef\u7528\u65f6\u5728\u4e0d\u540c\u7684AZ\u4e2d\u91cd\u65b0\u521b\u5efa\u6570\u636e\u5e93\u5b9e\u4f8b\u3002\u7531\u4e8eAurora\u5c06\u8ba1\u7b97\u5bb9\u91cf\u548c\u5b58\u50a8\u5206\u5f00\uff0c\u56e0\u6b64\u7fa4\u96c6\u7684\u5b58\u50a8\u5377\u5206\u5e03\u5728\u591a\u4e2aAZ\u4e2d\u3002\u8fd9\u6837\uff0c\u5373\u4f7f\u6570\u636e\u5e93\u5b9e\u4f8b\u6216\u5173\u8054\u7684AZ\u53d7\u5230\u505c\u673a\u7684\u5f71\u54cd\uff0c\u6570\u636e\u4e5f\u53ef\u4ee5\u4fdd\u6301\u53ef\u7528\u3002\n\u521b\u5efa\u6570\u636e\u5e93\u5b9e\u4f8b\u540e\uff0c\u4e0b\u4e00\u6b65\u662f\u5c06\u6570\u636e\u5e93\u7684\u673a\u5bc6\u5b58\u50a8\u5728AWS Secrets Manager\u4e2d\u3002\n\u4fdd\u7559\u5bc6\u7801\u7c7b\u578b\u7684\u9ed8\u8ba4\u9009\u62e9(RDS\u6570\u636e\u5e93\u7684\u51ed\u636e)\u3002\u8f93\u5165\u60a8\u7684\u6570\u636e\u5e93\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u7136\u540e\u9009\u62e9\u60a8\u5728\u4e0a\u4e00\u6b65\u4e2d\u521b\u5efa\u7684\u6570\u636e\u5e93\u7684\u5355\u9009\u6309\u94ae(\u5728\u672c\u4f8b\u4e2d\u4e3adb-blog)\uff0c\u5982\u4e0b\u9762\u7684\u5c4f\u5e55\u622a\u56fe\u6240\u793a\u3002\n\u8f93\u5165\u540d\u79f0\u548c\u8bf4\u660e(\u53ef\u9009)\u3002\u5bf9\u4e8e\u540d\u79f0\uff0c\u8bf7\u786e\u4fdd\u6dfb\u52a0\u524d\u7f00rds-db-credentials/\uff0c\u5982\u4e0b\u9762\u7684\u5c4f\u5e55\u622a\u56fe\u6240\u793a\u3002\n\u67e5\u770b\u6700\u540e\u4e00\u9875\u4e0a\u7684\u8bbe\u7f6e\uff0c\u7136\u540e\u9009\u62e9\u5b58\u50a8\u4ee5\u5728AWS Secrets Manager\u4e2d\u521b\u5efa\u548c\u5b58\u50a8\u60a8\u7684\u673a\u5bc6\uff0c\u60a8\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u8be5\u7ba1\u7406\u5668\u8fde\u63a5\u5230\u60a8\u7684\u6570\u636e\u5e93\u3002\n\u521b\u5efaDB\u96c6\u7fa4\u540e\uff0c\u521b\u5efa\u6570\u636e\u5e93\u5b9e\u4f8b\uff1b\u521b\u5efa\u8868\u5e76\u586b\u5145\u8868\uff1b\u6700\u540e\uff0c\u6d4b\u8bd5\u8fde\u63a5\u4ee5\u786e\u4fdd\u53ef\u4ee5\u67e5\u8be2\u6570\u636e\u5e93\u3002\n\u4eceAWS\u63a7\u5236\u53f0\u5bfc\u822a\u5230Amazon RDS\u670d\u52a1\uff0c\u7136\u540e\u9009\u62e9\u60a8\u7684db-blog\u6570\u636e\u5e93\u96c6\u7fa4\u3002\n\u9009\u62e9Actions\u4e0b\u7684Query\u4ee5\u6253\u5f00Connect to database\u7a97\u53e3\uff0c\u5982\u4e0b\u9762\u7684\u5c4f\u5e55\u622a\u56fe\u6240\u793a\u3002\u8f93\u5165\u60a8\u7684\u6570\u636e\u5e93\u8fde\u63a5\u8be6\u7ec6\u4fe1\u606f\u3002\u60a8\u53ef\u4ee5\u4eceSecrets Manager\u670d\u52a1\u590d\u5236\u5bc6\u7801\u7ba1\u7406\u5668ARN\uff0c\u5e76\u5c06\u5176\u7c98\u8d34\u5230\u6570\u636e\u5e93\u8fde\u63a5\u7a97\u53e3\u7684\u76f8\u5e94\u5b57\u6bb5\u4e2d\u3002\n\u8981\u521b\u5efaDB\u5b9e\u4f8b\uff0c\u8bf7\u8fd0\u884c\u4ee5\u4e0bSQL\u67e5\u8be2\uff1a\u4ece\u4e0b\u9762\u5c4f\u5e55\u622a\u56fe\u6240\u793a\u7684\u67e5\u8be2\u7f16\u8f91\u5668\u4e2d\u521b\u5efa\u6570\u636e\u5e93\u8bb0\u5f55\u5b58\u50a8\uff1a\n\u5728\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u4f7f\u7528\u7684\u662f\u521a\u521a\u901a\u8fc7\u8fd0\u884c\u547d\u4ee4\u521b\u5efa\u7684Recordstore\u6570\u636e\u5e93\uff1a\nCREATE TABLE IF NOT EXISTS\u8bb0\u5f55(RECORDID INT PRIMARY KEY\uff0cTITLE VARCHAR(255)NOT NULL\uff0cRELEASE", "note_en": "There are multiple ways to deploy API endpoints, such as this example, in which you could use an application running on Amazon EC2 to demonstrate how to integrate Amazon ElastiCache with Amazon DocumentDB (with MongoDB capability). While the approach in this example helps achieve great performance, and reliability through the elasticity and the ability to scale up or down the number of EC2 instances in order to accommodate the load on the application, there is still however some operational overhead you still have to manage the EC2 instances yourself. One way of addressing the operational overhead issue and related costs could be to transform the application into a serverless architecture.\n The example in this blog post uses an application that provides a similar use case, using a serverless architecture showcasing some of the tools that are being leveraged by customers transitioning from lift-and-shift to building cloud-native applications. It uses Amazon API Gateway to provide the REST API endpoint connected to an AWS Lambda function to provide the business logic to read and write from an Amazon Aurora Serverless database. It also showcases the deployment of most of the infrastructure with the AWS Cloud Development Kit, known as the CDK. By moving your applications to cloud native architecture like the example showcased in this blog post, you will be able to realize a number of benefits including:\n   At the end of this blog, you have an AWS Cloud9 instance environment containing a CDK project which deploys an API Gateway and Lambda function. This Lambda function leverages a secret stored in your AWS Secrets Manager to read and write from your Aurora Serverless database through the data API, as shown in the following diagram.\n     Initialize and configure an AWS Cloud Development Kit project including the definition of your Amazon API Gateway endpoint and AWS Lambda function\n  In order to deploy the CDK application, there are a few prerequisites that need to be met:\n    Expand the Additional Connectivity section and select the Data API option. This functionality enables you to access Aurora Serverless with web services-based applications. It also allows you to use the query editor feature for Aurora Serverless in order to run SQL queries against your database instance.\n Your database instance is created in a single availability zone (AZ), but\u00a0an Aurora Serverless database cluster has a capability known as automatic multi-AZ failover, which enables\u00a0Aurora to recreate the database instance in a different AZ should the current database instance or the AZ become unavailable. The storage volume for the cluster is spread across multiple AZs, since Aurora separates computation capacity and storage. This allows for data to remain available even if the database instance or the associated AZ is affected by an outage.\n  After creating the database instance, the next step is to store your secrets for your database in AWS Secrets Manager.\n Leave the default selection (Credentials for RDS database) for the secret type. Enter your database username and password and then select the radio button for the database you created in the previous step (in this example, db-blog), as shown in the following screenshot.\n  Enter a name and optionally a description. For the name, make sure to add the prefix rds-db-credentials/ as shown in the following screenshot.\n  Review your settings on the last page and choose Store to have your secrets created and stored in AWS Secrets Manager, which you can now use to connect to your database.\n  After creating the DB cluster, create the database instance; create your tables and populate them; and finally, test a connection to ensure that you can query your database.\n Navigate to the Amazon RDS service from the AWS console, and select your db-blog database cluster.\n Select Query under Actions to open the Connect to database window as shown in the screenshot below . Enter your database connection details. You can copy your secret manager ARN from the Secrets Manager service and paste it into the corresponding field in the database connection window.\n  To create the DB instance run the following SQL query:  CREATE DATABASE recordstore;from the Query editor shown in the screenshot below:\n   Before you can run the following commands, make sure you are using the Recordstore database you just created by running the command:\n  CREATE TABLE IF NOT EXISTS records (recordid INT PRIMARY KEY, title VARCHAR(255) NOT NULL, release_date DATE);", "posttime": "2020-05-17 06:55:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "app,\u7a0b\u5e8f,aws,serverless,\u6570\u636e\u5e93", "title": "\u4f7f\u7528AWS CDK\u90e8\u7f72\u65e0\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f", "title_en": "Deploying a serverless application using AWS CDK", "transed": 1, "url": "https://idk.dev/deploying-a-serverless-application-using-aws-cdk/", "via": "", "real_tags": ["app", "\u7a0b\u5e8f", "aws", "\u6570\u636e\u5e93"]}]